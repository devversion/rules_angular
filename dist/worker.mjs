import*as t from"@angular/compiler-cli";import e from"typescript";import r from"buffer";import o from"assert";import i from"util";import n from"path";import s from"events";import a from"stream";import*as p from"fs";import c from"fs";import u from"path/posix";import*as h from"node:fs";import l from"module";import f from"node:path";class d{name;map=new Map;constructor(t){this.name=t}set(t,e){this.map.set(t,e)}get(t,e=!0){const r=this.map.get(t);return e&&r&&(this.map.delete(t),this.map.set(t,r)),r}delete(t){this.map.delete(t)}evict(t=2){const e=this.map.size;let r=Math.ceil(e/t);if(0===r)return 0;for(const t of this.map.keys()){if(0===r)break;this.map.delete(t),r--}return e-this.map.size}keys(){return this.map.keys()}}class y{fileCache=new d("file");lastDigests=new Map;cannotEvict=!1;maxMemoryUsage=1073741824;updateCache(t){this.lastDigests=new Map;for(const[e,r]of t.entries()){this.lastDigests.set(e,r);const t=this.fileCache.get(e,!1);t&&!g(t.digest,r)&&(console.error("evicting",e),this.fileCache.delete(e))}this.cannotEvict=!1}getLastDigest(t){return this.lastDigests.get(t)}getCache(t){const e=this.fileCache.get(t,!0);if(e)return e.value}putCache(t,e){this.maybeFreeMemory(),this.fileCache.set(t,e)}inCache(t){return!!this.getCache(t)}shouldFreeMemory=t=>t>this.maxMemoryUsage;maybeFreeMemory(){if(this.cannotEvict)return 0;const t=process.memoryUsage().heapUsed;if(!this.shouldFreeMemory(t))return 0;const e=this.fileCache.evict();return 0===e&&(this.cannotEvict=!0),e}}function g(t,e){if(t.length!==e.length)return!1;for(let r=0;r<t.length;r++)if(t[r]!==e[r])return!1;return!0}var m="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function b(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}function v(t){if(t.__esModule)return t;var e=t.default;if("function"==typeof e){var r=function t(){return this instanceof t?Reflect.construct(e,arguments,this.constructor):e.apply(this,arguments)};r.prototype=e.prototype}else r={};return Object.defineProperty(r,"__esModule",{value:!0}),Object.keys(t).forEach((function(e){var o=Object.getOwnPropertyDescriptor(t,e);Object.defineProperty(r,e,o.get?o:{enumerable:!0,get:function(){return t[e]}})})),r}var w,_,S={exports:{}},E={},O={};function F(){return w||(w=1,Object.defineProperty(O,"__esModule",{value:!0}),O.constants=void 0,O.constants={O_RDONLY:0,O_WRONLY:1,O_RDWR:2,S_IFMT:61440,S_IFREG:32768,S_IFDIR:16384,S_IFCHR:8192,S_IFBLK:24576,S_IFIFO:4096,S_IFLNK:40960,S_IFSOCK:49152,O_CREAT:64,O_EXCL:128,O_NOCTTY:256,O_TRUNC:512,O_APPEND:1024,O_DIRECTORY:65536,O_NOATIME:262144,O_NOFOLLOW:131072,O_SYNC:1052672,O_SYMLINK:2097152,O_DIRECT:16384,O_NONBLOCK:2048,S_IRWXU:448,S_IRUSR:256,S_IWUSR:128,S_IXUSR:64,S_IRWXG:56,S_IRGRP:32,S_IWGRP:16,S_IXGRP:8,S_IRWXO:7,S_IROTH:4,S_IWOTH:2,S_IXOTH:1,F_OK:0,R_OK:4,W_OK:2,X_OK:1,UV_FS_SYMLINK_DIR:1,UV_FS_SYMLINK_JUNCTION:2,UV_FS_COPYFILE_EXCL:1,UV_FS_COPYFILE_FICLONE:2,UV_FS_COPYFILE_FICLONE_FORCE:4,COPYFILE_EXCL:1,COPYFILE_FICLONE:2,COPYFILE_FICLONE_FORCE:4}),O}function R(){if(_)return E;_=1,Object.defineProperty(E,"__esModule",{value:!0}),E.Stats=void 0;const t=F(),{S_IFMT:e,S_IFDIR:r,S_IFREG:o,S_IFBLK:i,S_IFCHR:n,S_IFLNK:s,S_IFIFO:a,S_IFSOCK:p}=t.constants;let c=class t{static build(e,r=!1){const o=new t,{uid:i,gid:n,atime:s,mtime:a,ctime:p}=e,c=r?t=>BigInt(t):t=>t;o.uid=c(i),o.gid=c(n),o.rdev=c(0),o.blksize=c(4096),o.ino=c(e.ino),o.size=c(e.getSize()),o.blocks=c(1),o.atime=s,o.mtime=a,o.ctime=p,o.birthtime=p,o.atimeMs=c(s.getTime()),o.mtimeMs=c(a.getTime());const u=c(p.getTime());if(o.ctimeMs=u,o.birthtimeMs=u,r){o.atimeNs=BigInt(s.getTime())*BigInt(1e6),o.mtimeNs=BigInt(a.getTime())*BigInt(1e6);const t=BigInt(p.getTime())*BigInt(1e6);o.ctimeNs=t,o.birthtimeNs=t}return o.dev=c(0),o.mode=c(e.mode),o.nlink=c(e.nlink),o}_checkModeProperty(t){return(Number(this.mode)&e)===t}isDirectory(){return this._checkModeProperty(r)}isFile(){return this._checkModeProperty(o)}isBlockDevice(){return this._checkModeProperty(i)}isCharacterDevice(){return this._checkModeProperty(n)}isSymbolicLink(){return this._checkModeProperty(s)}isFIFO(){return this._checkModeProperty(a)}isSocket(){return this._checkModeProperty(p)}};return E.Stats=c,E.default=c,E}var T,k={},A={},P={};function N(){return T||(T=1,function(t){Object.defineProperty(t,"__esModule",{value:!0}),t.bufferFrom=t.bufferAllocUnsafe=t.Buffer=void 0;const e=r;function o(t,...r){return new e.Buffer(t,...r)}Object.defineProperty(t,"Buffer",{enumerable:!0,get:function(){return e.Buffer}});const i=e.Buffer.allocUnsafe||o;t.bufferAllocUnsafe=i;const n=e.Buffer.from||o;t.bufferFrom=n}(P)),P}var I,C,B,x={};function j(){return I||(I=1,function(t){Object.defineProperty(t,"__esModule",{value:!0}),t.AssertionError=t.RangeError=t.TypeError=t.Error=void 0,t.message=u,t.E=h;const e=o,r=i,n="undefined"==typeof Symbol?"_kCode":Symbol("code"),s={};function a(t){return class extends t{constructor(t,...e){super(u(t,e)),this.code=t,this[n]=t,this.name=`${super.name} [${this[n]}]`}}}const p="undefined"!=typeof globalThis?globalThis:m;class c extends p.Error{constructor(e){if("object"!=typeof e||null===e)throw new t.TypeError("ERR_INVALID_ARG_TYPE","options","object");e.message?super(e.message):super(`${r.inspect(e.actual).slice(0,128)} ${e.operator} ${r.inspect(e.expected).slice(0,128)}`),this.generatedMessage=!e.message,this.name="AssertionError [ERR_ASSERTION]",this.code="ERR_ASSERTION",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,t.Error.captureStackTrace(this,e.stackStartFunction)}}function u(t,o){e.strictEqual(typeof t,"string");const i=s[t];let n;if(e(i,`An invalid error message key was used: ${t}.`),"function"==typeof i)n=i;else{if(n=r.format,void 0===o||0===o.length)return i;o.unshift(i)}return String(n.apply(null,o))}function h(t,e){s[t]="function"==typeof e?e:String(e)}function l(t,r){if(e(t,"expected is required"),e("string"==typeof r,"thing is required"),Array.isArray(t)){const o=t.length;return e(o>0,"At least one expected value needs to be specified"),t=t.map((t=>String(t))),o>2?`one of ${r} ${t.slice(0,o-1).join(", ")}, or `+t[o-1]:2===o?`one of ${r} ${t[0]} or ${t[1]}`:`of ${r} ${t[0]}`}return`of ${r} ${String(t)}`}t.AssertionError=c,t.Error=a(p.Error),t.TypeError=a(p.TypeError),t.RangeError=a(p.RangeError),h("ERR_ARG_NOT_ITERABLE","%s must be iterable"),h("ERR_ASSERTION","%s"),h("ERR_BUFFER_OUT_OF_BOUNDS",(function(t,e){return e?"Attempt to write outside buffer bounds":`"${t}" is outside of buffer bounds`})),h("ERR_CHILD_CLOSED_BEFORE_REPLY","Child closed before reply received"),h("ERR_CONSOLE_WRITABLE_STREAM","Console expects a writable stream instance for %s"),h("ERR_CPU_USAGE","Unable to obtain cpu usage %s"),h("ERR_DNS_SET_SERVERS_FAILED",((t,e)=>`c-ares failed to set servers: "${t}" [${e}]`)),h("ERR_FALSY_VALUE_REJECTION","Promise was rejected with falsy value"),h("ERR_ENCODING_NOT_SUPPORTED",(t=>`The "${t}" encoding is not supported`)),h("ERR_ENCODING_INVALID_ENCODED_DATA",(t=>`The encoded data was not valid for encoding ${t}`)),h("ERR_HTTP_HEADERS_SENT","Cannot render headers after they are sent to the client"),h("ERR_HTTP_INVALID_STATUS_CODE","Invalid status code: %s"),h("ERR_HTTP_TRAILER_INVALID","Trailers are invalid with this transfer encoding"),h("ERR_INDEX_OUT_OF_RANGE","Index out of range"),h("ERR_INVALID_ARG_TYPE",(function(t,r,o){let i,n;e(t,"name is required"),r.includes("not ")?(i="must not be",r=r.split("not ")[1]):i="must be";if(Array.isArray(t)){n=`The ${t.map((t=>`"${t}"`)).join(", ")} arguments ${i} ${l(r,"type")}`}else if(t.includes(" argument"))n=`The ${t} ${i} ${l(r,"type")}`;else{const e=t.includes(".")?"property":"argument";n=`The "${t}" ${e} ${i} ${l(r,"type")}`}arguments.length>=3&&(n+=". Received type "+(null!==o?typeof o:"null"));return n})),h("ERR_INVALID_ARRAY_LENGTH",((t,r,o)=>(e.strictEqual(typeof o,"number"),`The array "${t}" (length ${o}) must be of length ${r}.`))),h("ERR_INVALID_BUFFER_SIZE","Buffer size must be a multiple of %s"),h("ERR_INVALID_CALLBACK","Callback must be a function"),h("ERR_INVALID_CHAR","Invalid character in %s"),h("ERR_INVALID_CURSOR_POS","Cannot set cursor row without setting its column"),h("ERR_INVALID_FD",'"fd" must be a positive integer: %s'),h("ERR_INVALID_FILE_URL_HOST",'File URL host must be "localhost" or empty on %s'),h("ERR_INVALID_FILE_URL_PATH","File URL path %s"),h("ERR_INVALID_HANDLE_TYPE","This handle type cannot be sent"),h("ERR_INVALID_IP_ADDRESS","Invalid IP address: %s"),h("ERR_INVALID_OPT_VALUE",((t,e)=>`The value "${String(e)}" is invalid for option "${t}"`)),h("ERR_INVALID_OPT_VALUE_ENCODING",(t=>`The value "${String(t)}" is invalid for option "encoding"`)),h("ERR_INVALID_REPL_EVAL_CONFIG",'Cannot specify both "breakEvalOnSigint" and "eval" for REPL'),h("ERR_INVALID_SYNC_FORK_INPUT","Asynchronous forks do not support Buffer, Uint8Array or string input: %s"),h("ERR_INVALID_THIS",'Value of "this" must be of type %s'),h("ERR_INVALID_TUPLE","%s must be an iterable %s tuple"),h("ERR_INVALID_URL","Invalid URL: %s"),h("ERR_INVALID_URL_SCHEME",(t=>`The URL must be ${l(t,"scheme")}`)),h("ERR_IPC_CHANNEL_CLOSED","Channel closed"),h("ERR_IPC_DISCONNECTED","IPC channel is already disconnected"),h("ERR_IPC_ONE_PIPE","Child process can have only one IPC pipe"),h("ERR_IPC_SYNC_FORK","IPC cannot be used with synchronous forks"),h("ERR_MISSING_ARGS",(function(...t){e(t.length>0,"At least one arg needs to be specified");let r="The ";const o=t.length;switch(t=t.map((t=>`"${t}"`)),o){case 1:r+=`${t[0]} argument`;break;case 2:r+=`${t[0]} and ${t[1]} arguments`;break;default:r+=t.slice(0,o-1).join(", "),r+=`, and ${t[o-1]} arguments`}return`${r} must be specified`})),h("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),h("ERR_NAPI_CONS_FUNCTION","Constructor must be a function"),h("ERR_NAPI_CONS_PROTOTYPE_OBJECT","Constructor.prototype must be an object"),h("ERR_NO_CRYPTO","Node.js is not compiled with OpenSSL crypto support"),h("ERR_NO_LONGER_SUPPORTED","%s is no longer supported"),h("ERR_PARSE_HISTORY_DATA","Could not parse history data in %s"),h("ERR_SOCKET_ALREADY_BOUND","Socket is already bound"),h("ERR_SOCKET_BAD_PORT","Port should be > 0 and < 65536"),h("ERR_SOCKET_BAD_TYPE","Bad socket type specified. Valid types are: udp4, udp6"),h("ERR_SOCKET_CANNOT_SEND","Unable to send data"),h("ERR_SOCKET_CLOSED","Socket is closed"),h("ERR_SOCKET_DGRAM_NOT_RUNNING","Not running"),h("ERR_STDERR_CLOSE","process.stderr cannot be closed"),h("ERR_STDOUT_CLOSE","process.stdout cannot be closed"),h("ERR_STREAM_WRAP","Stream has StringDecoder set or is in objectMode"),h("ERR_TLS_CERT_ALTNAME_INVALID","Hostname/IP does not match certificate's altnames: %s"),h("ERR_TLS_DH_PARAM_SIZE",(t=>`DH parameter size ${t} is less than 2048`)),h("ERR_TLS_HANDSHAKE_TIMEOUT","TLS handshake timeout"),h("ERR_TLS_RENEGOTIATION_FAILED","Failed to renegotiate"),h("ERR_TLS_REQUIRED_SERVER_NAME",'"servername" is required parameter for Server.addContext'),h("ERR_TLS_SESSION_ATTACK","TSL session renegotiation attack detected"),h("ERR_TRANSFORM_ALREADY_TRANSFORMING","Calling transform done when still transforming"),h("ERR_TRANSFORM_WITH_LENGTH_0","Calling transform done when writableState.length != 0"),h("ERR_UNKNOWN_ENCODING","Unknown encoding: %s"),h("ERR_UNKNOWN_SIGNAL","Unknown signal: %s"),h("ERR_UNKNOWN_STDIN_TYPE","Unknown stdin file type"),h("ERR_UNKNOWN_STREAM_TYPE","Unknown stream file type"),h("ERR_V8BREAKITERATOR","Full ICU data not installed. See https://github.com/nodejs/node/wiki/Intl")}(x)),x}function D(){return C||(C=1,function(t){Object.defineProperty(t,"__esModule",{value:!0}),t.ENCODING_UTF8=void 0,t.assertEncoding=function(t){if(t&&!e.Buffer.isEncoding(t))throw new r.TypeError("ERR_INVALID_OPT_VALUE_ENCODING",t)},t.strToEncoding=function(r,o){return o&&o!==t.ENCODING_UTF8?"buffer"===o?new e.Buffer(r):new e.Buffer(r).toString(o):r};const e=N(),r=j();t.ENCODING_UTF8="utf8"}(A)),A}function L(){if(B)return k;B=1,Object.defineProperty(k,"__esModule",{value:!0}),k.Dirent=void 0;const t=F(),e=D(),{S_IFMT:r,S_IFDIR:o,S_IFREG:i,S_IFBLK:n,S_IFCHR:s,S_IFLNK:a,S_IFIFO:p,S_IFSOCK:c}=t.constants;let u=class t{constructor(){this.name="",this.path="",this.parentPath="",this.mode=0}static build(r,o){const i=new t,{mode:n}=r.getNode();return i.name=(0,e.strToEncoding)(r.getName(),o),i.mode=n,i.path=r.getParentPath(),i.parentPath=i.path,i}_checkModeProperty(t){return(this.mode&r)===t}isDirectory(){return this._checkModeProperty(o)}isFile(){return this._checkModeProperty(i)}isBlockDevice(){return this._checkModeProperty(n)}isCharacterDevice(){return this._checkModeProperty(s)}isSymbolicLink(){return this._checkModeProperty(a)}isFIFO(){return this._checkModeProperty(p)}isSocket(){return this._checkModeProperty(c)}};return k.Dirent=u,k.default=u,k}var M,U,W={},$={},V={};function z(){if(M)return V;M=1,Object.defineProperty(V,"__esModule",{value:!0}),V.createProcess=e;const t=()=>{if("undefined"!=typeof process)return process;try{return require("process")}catch(t){return}};function e(){const e=t()||{};return e.cwd||(e.cwd=()=>"/"),e.emitWarning||(e.emitWarning=(t,e)=>{console.warn(`${e}${e?": ":""}${t}`)}),e.env||(e.env={}),e}return V.default=e(),V}var G,H={};var q,K={};function Y(){return q||(q=1,Object.defineProperty(K,"__esModule",{value:!0}),K.default="function"==typeof queueMicrotask?queueMicrotask:t=>Promise.resolve().then((()=>t())).catch((()=>{}))),K}var J,X={};var Z,Q,tt,et={},rt={},ot={};function it(){if(Z)return ot;Z=1,Object.defineProperty(ot,"__esModule",{value:!0}),ot.FLAGS=ot.ERRSTR=void 0;const t=F();ot.ERRSTR={PATH_STR:"path must be a string or Buffer",FD:"fd must be a file descriptor",MODE_INT:"mode must be an int",CB:"callback must be a function",UID:"uid must be an unsigned int",GID:"gid must be an unsigned int",LEN:"len must be an integer",ATIME:"atime must be an integer",MTIME:"mtime must be an integer",PREFIX:"filename prefix is required",BUFFER:"buffer must be an instance of Buffer or StaticBuffer",OFFSET:"offset must be an integer",LENGTH:"length must be an integer",POSITION:"position must be an integer"};const{O_RDONLY:e,O_WRONLY:r,O_RDWR:o,O_CREAT:i,O_EXCL:n,O_TRUNC:s,O_APPEND:a,O_SYNC:p}=t.constants;var c;return function(t){t[t.r=e]="r",t[t["r+"]=o]="r+",t[t.rs=e|p]="rs",t[t.sr=t.rs]="sr",t[t["rs+"]=o|p]="rs+",t[t["sr+"]=t["rs+"]]="sr+",t[t.w=r|i|s]="w",t[t.wx=r|i|s|n]="wx",t[t.xw=t.wx]="xw",t[t["w+"]=o|i|s]="w+",t[t["wx+"]=o|i|s|n]="wx+",t[t["xw+"]=t["wx+"]]="xw+",t[t.a=r|a|i]="a",t[t.ax=r|a|i|n]="ax",t[t.xa=t.ax]="xa",t[t["a+"]=o|a|i]="a+",t[t["ax+"]=o|a|i|n]="ax+",t[t["xa+"]=t["ax+"]]="xa+"}(c||(ot.FLAGS=c={})),ot}function nt(){return Q||(Q=1,function(t){Object.defineProperty(t,"__esModule",{value:!0}),t.unixify=t.getWriteSyncArgs=t.getWriteArgs=t.bufToUint8=t.isWin=void 0,t.promisify=function(t,e,r=t=>t){return(...o)=>new Promise(((i,n)=>{t[e].bind(t)(...o,((t,e)=>t?n(t):i(r(e))))}))},t.validateCallback=a,t.modeToNumber=p,t.nullCheck=c,t.pathToFilename=function(t){if("string"!=typeof t&&!o.Buffer.isBuffer(t)){try{if(!(t instanceof require("url").URL))throw new TypeError(e.ERRSTR.PATH_STR)}catch(t){throw new TypeError(e.ERRSTR.PATH_STR)}t=function(t){if(""!==t.hostname)throw new r.TypeError("ERR_INVALID_FILE_URL_HOST",process.platform);const e=t.pathname;for(let t=0;t<e.length;t++)if("%"===e[t]){const o=32|e.codePointAt(t+2);if("2"===e[t+1]&&102===o)throw new r.TypeError("ERR_INVALID_FILE_URL_PATH","must not include encoded / characters")}return decodeURIComponent(e)}(t)}const i=String(t);return c(i),i},t.createError=function(t,e="",r="",o="",i=Error){const n=new i(function(t,e="",r="",o=""){let i="";r&&(i=` '${r}'`);o&&(i+=` -> '${o}'`);switch(t){case u:return`ENOENT: no such file or directory, ${e}${i}`;case h:return`EBADF: bad file descriptor, ${e}${i}`;case l:return`EINVAL: invalid argument, ${e}${i}`;case f:return`EPERM: operation not permitted, ${e}${i}`;case d:return`EPROTO: protocol error, ${e}${i}`;case y:return`EEXIST: file already exists, ${e}${i}`;case g:return`ENOTDIR: not a directory, ${e}${i}`;case v:return`EISDIR: illegal operation on a directory, ${e}${i}`;case b:return`EACCES: permission denied, ${e}${i}`;case w:return`ENOTEMPTY: directory not empty, ${e}${i}`;case m:return`EMFILE: too many open files, ${e}${i}`;case _:return`ENOSYS: function not implemented, ${e}${i}`;case S:return`[ERR_FS_EISDIR]: Path is a directory: ${e} returned EISDIR (is a directory) ${r}`;case E:return`[ERR_OUT_OF_RANGE]: value out of range, ${e}${i}`;default:return`${t}: error occurred, ${e}${i}`}}(t,e,r,o));n.code=t,r&&(n.path=r);return n},t.genRndStr6=function t(){const e=(Math.random()+1).toString(36).substring(2,8);return 6===e.length?e:t()},t.flagsToNumber=function(t){if("number"==typeof t)return t;if("string"==typeof t){const r=e.FLAGS[t];if(void 0!==r)return r}throw new r.TypeError("ERR_INVALID_OPT_VALUE","flags",t)},t.isFd=O,t.validateFd=F,t.streamToBuffer=function(t){const e=[];return new Promise(((r,i)=>{t.on("data",(t=>e.push(t))),t.on("end",(()=>r(o.Buffer.concat(e)))),t.on("error",i)}))},t.dataToBuffer=R,t.bufferToEncoding=function(t,e){return e&&"buffer"!==e?t.toString(e):t},t.isReadableStream=function(t){return null!==t&&"object"==typeof t&&"function"==typeof t.pipe&&"function"==typeof t.on&&!0===t.readable};const e=it(),r=j(),o=N(),i=D(),n=N(),s=Y();function a(t){if("function"!=typeof t)throw TypeError(e.ERRSTR.CB);return t}function p(t,r){const o=function(t,e){return"number"==typeof t?t:"string"==typeof t?parseInt(t,8):e?p(e):void 0}(t,r);if("number"!=typeof o||isNaN(o))throw new TypeError(e.ERRSTR.MODE_INT);return o}function c(t,e){if(-1!==(""+t).indexOf("\0")){const t=new Error("Path must be a string without null bytes");if(t.code="ENOENT","function"!=typeof e)throw t;return(0,s.default)((()=>{e(t)})),!1}return!0}t.isWin="win32"===process.platform;const u="ENOENT",h="EBADF",l="EINVAL",f="EPERM",d="EPROTO",y="EEXIST",g="ENOTDIR",m="EMFILE",b="EACCES",v="EISDIR",w="ENOTEMPTY",_="ENOSYS",S="ERR_FS_EISDIR",E="ERR_OUT_OF_RANGE";function O(t){return t>>>0===t}function F(t){if(!O(t))throw TypeError(e.ERRSTR.FD)}function R(t,e=i.ENCODING_UTF8){return o.Buffer.isBuffer(t)?t:t instanceof Uint8Array?(0,n.bufferFrom)(t):(0,n.bufferFrom)(String(t),e)}t.bufToUint8=t=>new Uint8Array(t.buffer,t.byteOffset,t.byteLength);t.getWriteArgs=(t,e,r,o,i,n)=>{F(t);let s,p,c,u=0,h=null;const l=typeof e,f=typeof r,d=typeof o,y=typeof i;"string"!==l?"function"===f?c=r:"function"===d?(u=0|r,c=o):"function"===y?(u=0|r,s=o,c=i):(u=0|r,s=o,h=i,c=n):"function"===f?c=r:"function"===d?(h=r,c=o):"function"===y&&(h=r,p=o,c=i);const g=R(e,p);"string"!==l?void 0===s&&(s=g.length):(u=0,s=g.length);return[t,"string"===l,g,u,s,h,a(c)]};t.getWriteSyncArgs=(t,e,r,o,i)=>{let n,s,a,p;F(t);const c="string"!=typeof e;c?(s=0|(r||0),a=o,p=i):(p=r,n=o);const u=R(e,n);return c?void 0===a&&(a=u.length):(s=0,a=u.length),[t,u,s||0,a,p]};const T=(e,r)=>{let o=e[r];return r>0&&("/"===o||t.isWin&&"\\"===o)},k=(t,e)=>{if("string"!=typeof t)throw new TypeError("expected a string");return t=t.replace(/[\\\/]+/g,"/"),!1!==e&&(t=(t=>{let e=t.length-1;if(e<2)return t;for(;T(t,e);)e--;return t.substr(0,e+1)})(t)),t};t.unixify=(e,r=!0)=>t.isWin?(e=k(e,r)).replace(/^([a-zA-Z]+:|\.\/)/,""):e}(rt)),rt}var st,at={};var pt={},ct={},ut=function(t,e){return ut=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},ut(t,e)};function ht(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}ut(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}var lt=function(){return lt=Object.assign||function(t){for(var e,r=1,o=arguments.length;r<o;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},lt.apply(this,arguments)};function ft(t,e){var r={};for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&e.indexOf(o)<0&&(r[o]=t[o]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(o=Object.getOwnPropertySymbols(t);i<o.length;i++)e.indexOf(o[i])<0&&Object.prototype.propertyIsEnumerable.call(t,o[i])&&(r[o[i]]=t[o[i]])}return r}function dt(t,e,r,o){var i,n=arguments.length,s=n<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(n<3?i(s):n>3?i(e,r,s):i(e,r))||s);return n>3&&s&&Object.defineProperty(e,r,s),s}function yt(t,e){return function(r,o){e(r,o,t)}}function gt(t,e,r,o,i,n){function s(t){if(void 0!==t&&"function"!=typeof t)throw new TypeError("Function expected");return t}for(var a,p=o.kind,c="getter"===p?"get":"setter"===p?"set":"value",u=!e&&t?o.static?t:t.prototype:null,h=e||(u?Object.getOwnPropertyDescriptor(u,o.name):{}),l=!1,f=r.length-1;f>=0;f--){var d={};for(var y in o)d[y]="access"===y?{}:o[y];for(var y in o.access)d.access[y]=o.access[y];d.addInitializer=function(t){if(l)throw new TypeError("Cannot add initializers after decoration has completed");n.push(s(t||null))};var g=(0,r[f])("accessor"===p?{get:h.get,set:h.set}:h[c],d);if("accessor"===p){if(void 0===g)continue;if(null===g||"object"!=typeof g)throw new TypeError("Object expected");(a=s(g.get))&&(h.get=a),(a=s(g.set))&&(h.set=a),(a=s(g.init))&&i.unshift(a)}else(a=s(g))&&("field"===p?i.unshift(a):h[c]=a)}u&&Object.defineProperty(u,o.name,h),l=!0}function mt(t,e,r){for(var o=arguments.length>2,i=0;i<e.length;i++)r=o?e[i].call(t,r):e[i].call(t);return o?r:void 0}function bt(t){return"symbol"==typeof t?t:"".concat(t)}function vt(t,e,r){return"symbol"==typeof e&&(e=e.description?"[".concat(e.description,"]"):""),Object.defineProperty(t,"name",{configurable:!0,value:r?"".concat(r," ",e):e})}function wt(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function _t(t,e,r,o){return new(r||(r=Promise))((function(i,n){function s(t){try{p(o.next(t))}catch(t){n(t)}}function a(t){try{p(o.throw(t))}catch(t){n(t)}}function p(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}p((o=o.apply(t,e||[])).next())}))}function St(t,e){var r,o,i,n={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]},s=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return s.next=a(0),s.throw=a(1),s.return=a(2),"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(a){return function(p){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;s&&(s=0,a[0]&&(n=0)),n;)try{if(r=1,o&&(i=2&a[0]?o.return:a[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,a[1])).done)return i;switch(o=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return n.label++,{value:a[1],done:!1};case 5:n.label++,o=a[1],a=[0];continue;case 7:a=n.ops.pop(),n.trys.pop();continue;default:if(!(i=n.trys,(i=i.length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){n=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){n.label=a[1];break}if(6===a[0]&&n.label<i[1]){n.label=i[1],i=a;break}if(i&&n.label<i[2]){n.label=i[2],n.ops.push(a);break}i[2]&&n.ops.pop(),n.trys.pop();continue}a=e.call(t,n)}catch(t){a=[6,t],o=0}finally{r=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,p])}}}var Et=Object.create?function(t,e,r,o){void 0===o&&(o=r);var i=Object.getOwnPropertyDescriptor(e,r);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[r]}}),Object.defineProperty(t,o,i)}:function(t,e,r,o){void 0===o&&(o=r),t[o]=e[r]};function Ot(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||Et(e,t,r)}function Ft(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],o=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&o>=t.length&&(t=void 0),{value:t&&t[o++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function Rt(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var o,i,n=r.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(o=n.next()).done;)s.push(o.value)}catch(t){i={error:t}}finally{try{o&&!o.done&&(r=n.return)&&r.call(n)}finally{if(i)throw i.error}}return s}function Tt(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(Rt(arguments[e]));return t}function kt(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var o=Array(t),i=0;for(e=0;e<r;e++)for(var n=arguments[e],s=0,a=n.length;s<a;s++,i++)o[i]=n[s];return o}function At(t,e,r){if(r||2===arguments.length)for(var o,i=0,n=e.length;i<n;i++)!o&&i in e||(o||(o=Array.prototype.slice.call(e,0,i)),o[i]=e[i]);return t.concat(o||Array.prototype.slice.call(e))}function Pt(t){return this instanceof Pt?(this.v=t,this):new Pt(t)}function Nt(t,e,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var o,i=r.apply(t,e||[]),n=[];return o=Object.create(("function"==typeof AsyncIterator?AsyncIterator:Object).prototype),s("next"),s("throw"),s("return",(function(t){return function(e){return Promise.resolve(e).then(t,c)}})),o[Symbol.asyncIterator]=function(){return this},o;function s(t,e){i[t]&&(o[t]=function(e){return new Promise((function(r,o){n.push([t,e,r,o])>1||a(t,e)}))},e&&(o[t]=e(o[t])))}function a(t,e){try{(r=i[t](e)).value instanceof Pt?Promise.resolve(r.value.v).then(p,c):u(n[0][2],r)}catch(t){u(n[0][3],t)}var r}function p(t){a("next",t)}function c(t){a("throw",t)}function u(t,e){t(e),n.shift(),n.length&&a(n[0][0],n[0][1])}}function It(t){var e,r;return e={},o("next"),o("throw",(function(t){throw t})),o("return"),e[Symbol.iterator]=function(){return this},e;function o(o,i){e[o]=t[o]?function(e){return(r=!r)?{value:Pt(t[o](e)),done:!1}:i?i(e):e}:i}}function Ct(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,r=t[Symbol.asyncIterator];return r?r.call(t):(t=Ft(t),e={},o("next"),o("throw"),o("return"),e[Symbol.asyncIterator]=function(){return this},e);function o(r){e[r]=t[r]&&function(e){return new Promise((function(o,i){(function(t,e,r,o){Promise.resolve(o).then((function(e){t({value:e,done:r})}),e)})(o,i,(e=t[r](e)).done,e.value)}))}}}function Bt(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}var xt=Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e},jt=function(t){return jt=Object.getOwnPropertyNames||function(t){var e=[];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[e.length]=r);return e},jt(t)};function Dt(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r=jt(t),o=0;o<r.length;o++)"default"!==r[o]&&Et(e,t,r[o]);return xt(e,t),e}function Lt(t){return t&&t.__esModule?t:{default:t}}function Mt(t,e,r,o){if("a"===r&&!o)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?o:"a"===r?o.call(t):o?o.value:e.get(t)}function Ut(t,e,r,o,i){if("m"===o)throw new TypeError("Private method is not writable");if("a"===o&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===o?i.call(t,r):i?i.value=r:e.set(t,r),r}function Wt(t,e){if(null===e||"object"!=typeof e&&"function"!=typeof e)throw new TypeError("Cannot use 'in' operator on non-object");return"function"==typeof t?e===t:t.has(e)}function $t(t,e,r){if(null!=e){if("object"!=typeof e&&"function"!=typeof e)throw new TypeError("Object expected.");var o,i;if(r){if(!Symbol.asyncDispose)throw new TypeError("Symbol.asyncDispose is not defined.");o=e[Symbol.asyncDispose]}if(void 0===o){if(!Symbol.dispose)throw new TypeError("Symbol.dispose is not defined.");o=e[Symbol.dispose],r&&(i=o)}if("function"!=typeof o)throw new TypeError("Object not disposable.");i&&(o=function(){try{i.call(this)}catch(t){return Promise.reject(t)}}),t.stack.push({value:e,dispose:o,async:r})}else r&&t.stack.push({async:!0});return e}var Vt="function"==typeof SuppressedError?SuppressedError:function(t,e,r){var o=new Error(r);return o.name="SuppressedError",o.error=t,o.suppressed=e,o};function zt(t){function e(e){t.error=t.hasError?new Vt(e,t.error,"An error was suppressed during disposal."):e,t.hasError=!0}var r,o=0;return function i(){for(;r=t.stack.pop();)try{if(!r.async&&1===o)return o=0,t.stack.push(r),Promise.resolve().then(i);if(r.dispose){var n=r.dispose.call(r.value);if(r.async)return o|=2,Promise.resolve(n).then(i,(function(t){return e(t),i()}))}else o|=1}catch(t){e(t)}if(1===o)return t.hasError?Promise.reject(t.error):Promise.resolve();if(t.hasError)throw t.error}()}function Gt(t,e){return"string"==typeof t&&/^\.\.?\//.test(t)?t.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i,(function(t,r,o,i,n){return r?e?".jsx":".js":!o||i&&n?o+i+"."+n.toLowerCase()+"js":t})):t}var Ht,qt={__extends:ht,__assign:lt,__rest:ft,__decorate:dt,__param:yt,__esDecorate:gt,__runInitializers:mt,__propKey:bt,__setFunctionName:vt,__metadata:wt,__awaiter:_t,__generator:St,__createBinding:Et,__exportStar:Ot,__values:Ft,__read:Rt,__spread:Tt,__spreadArrays:kt,__spreadArray:At,__await:Pt,__asyncGenerator:Nt,__asyncDelegator:It,__asyncValues:Ct,__makeTemplateObject:Bt,__importStar:Dt,__importDefault:Lt,__classPrivateFieldGet:Mt,__classPrivateFieldSet:Ut,__classPrivateFieldIn:Wt,__addDisposableResource:$t,__disposeResources:zt,__rewriteRelativeImportExtension:Gt},Kt=v(Object.freeze({__proto__:null,__addDisposableResource:$t,get __assign(){return lt},__asyncDelegator:It,__asyncGenerator:Nt,__asyncValues:Ct,__await:Pt,__awaiter:_t,__classPrivateFieldGet:Mt,__classPrivateFieldIn:Wt,__classPrivateFieldSet:Ut,__createBinding:Et,__decorate:dt,__disposeResources:zt,__esDecorate:gt,__exportStar:Ot,__extends:ht,__generator:St,__importDefault:Lt,__importStar:Dt,__makeTemplateObject:Bt,__metadata:wt,__param:yt,__propKey:bt,__read:Rt,__rest:ft,__rewriteRelativeImportExtension:Gt,__runInitializers:mt,__setFunctionName:vt,__spread:Tt,__spreadArray:At,__spreadArrays:kt,__values:Ft,default:qt})),Yt={};var Jt,Xt,Zt={};function Qt(){return Xt||(Xt=1,function(t){Object.defineProperty(t,"__esModule",{value:!0});const e=Kt;e.__exportStar((Ht||(Ht=1,Object.defineProperty(Yt,"__esModule",{value:!0}),Yt.printTree=void 0,Yt.printTree=(t="",e)=>{let r="",o=e.length-1;for(;o>=0&&!e[o];o--);for(let i=0;i<=o;i++){const n=e[i];if(!n)continue;const s=i===o,a=n(t+(s?" ":"│")+"  ");r+="\n"+t+(a?s?"└─":"├─":"│")+(a?" "+a:"")}return r}),Yt),t),e.__exportStar((Jt||(Jt=1,Object.defineProperty(Zt,"__esModule",{value:!0}),Zt.printBinary=void 0,Zt.printBinary=(t="",e)=>{const r=e[0],o=e[1];let i="";return r&&(i+="\n"+t+"← "+r(t+"  ")),o&&(i+="\n"+t+"→ "+o(t+"  ")),i}),Zt),t)}(ct)),ct}var te,ee,re={};function oe(){return ee||(ee=1,function(t){Object.defineProperty(t,"__esModule",{value:!0}),t.toTreeSync=void 0;const e=Qt(),r=function(){if(te)return re;te=1,Object.defineProperty(re,"__esModule",{value:!0}),re.newNotAllowedError=re.newTypeMismatchError=re.newNotFoundError=re.assertCanWrite=re.assertName=re.basename=re.ctx=void 0,re.ctx=(t={})=>Object.assign({separator:"/",syncHandleAllowed:!1,mode:"read"},t),re.basename=(t,e)=>{t[t.length-1]===e&&(t=t.slice(0,-1));const r=t.lastIndexOf(e);return-1===r?t:t.slice(r+1)};const t=/^(\.{1,2})$|^(.*([\/\\]).*)$/;return re.assertName=(e,r,o)=>{if(!e||t.test(e))throw new TypeError(`Failed to execute '${r}' on '${o}': Name is not allowed.`)},re.assertCanWrite=t=>{if("readwrite"!==t)throw new DOMException("The request is not allowed by the user agent or the platform in the current context.","NotAllowedError")},re.newNotFoundError=()=>new DOMException("A requested file or directory could not be found at the time an operation was processed.","NotFoundError"),re.newTypeMismatchError=()=>new DOMException("The path supplied exists, but was not an entry of requested type.","TypeMismatchError"),re.newNotAllowedError=()=>new DOMException("Permission not granted.","NotAllowedError"),re}();t.toTreeSync=(o,i={})=>{var n;const s=i.separator||"/";let a=i.dir||s;a[a.length-1]!==s&&(a+=s);const p=i.tab||"",c=null!==(n=i.depth)&&void 0!==n?n:10;let u=" (...)";if(c>0){const r=o.readdirSync(a,{withFileTypes:!0});u=(0,e.printTree)(p,r.map((e=>r=>e.isDirectory()?(0,t.toTreeSync)(o,{dir:a+e.name,depth:c-1,tab:r}):e.isSymbolicLink()?e.name+" → "+o.readlinkSync(a+e.name):""+e.name)))}return(0,r.basename)(a,s)+s+u}}(pt)),pt}var ie,ne={};var se,ae,pe={};function ce(){if(ae)return W;ae=1,Object.defineProperty(W,"__esModule",{value:!0}),W.FSWatcher=W.StatWatcher=W.Volume=void 0,W.filenameToSteps=gt,W.pathToSteps=function(t){return gt((0,O.pathToFilename)(t))},W.dataToStr=function(t,e=g.ENCODING_UTF8){return p.Buffer.isBuffer(t)?t.toString(e):t instanceof Uint8Array?(0,p.bufferFrom)(t).toString(e):String(t)},W.toUnixTimestamp=mt;const t=n,e=(U||(U=1,function(t){Object.defineProperty(t,"__esModule",{value:!0}),t.File=t.Link=t.Node=t.SEP=void 0;const e=z(),r=N(),o=F(),i=s,n=R(),{S_IFMT:a,S_IFDIR:p,S_IFREG:c,S_IFLNK:u,O_APPEND:h}=o.constants,l=()=>{var t,r;return null!==(r=null===(t=e.default.getuid)||void 0===t?void 0:t.call(e.default))&&void 0!==r?r:0},f=()=>{var t,r;return null!==(r=null===(t=e.default.getgid)||void 0===t?void 0:t.call(e.default))&&void 0!==r?r:0};t.SEP="/";class d extends i.EventEmitter{constructor(t,e=438){super(),this._uid=l(),this._gid=f(),this._atime=new Date,this._mtime=new Date,this._ctime=new Date,this._perm=438,this.mode=c,this._nlink=1,this._perm=e,this.mode|=e,this.ino=t}set ctime(t){this._ctime=t}get ctime(){return this._ctime}set uid(t){this._uid=t,this.ctime=new Date}get uid(){return this._uid}set gid(t){this._gid=t,this.ctime=new Date}get gid(){return this._gid}set atime(t){this._atime=t,this.ctime=new Date}get atime(){return this._atime}set mtime(t){this._mtime=t,this.ctime=new Date}get mtime(){return this._mtime}set perm(t){this._perm=t,this.ctime=new Date}get perm(){return this._perm}set nlink(t){this._nlink=t,this.ctime=new Date}get nlink(){return this._nlink}getString(t="utf8"){return this.atime=new Date,this.getBuffer().toString(t)}setString(t){this.buf=(0,r.bufferFrom)(t,"utf8"),this.touch()}getBuffer(){return this.atime=new Date,this.buf||this.setBuffer((0,r.bufferAllocUnsafe)(0)),(0,r.bufferFrom)(this.buf)}setBuffer(t){this.buf=(0,r.bufferFrom)(t),this.touch()}getSize(){return this.buf?this.buf.length:0}setModeProperty(t){this.mode=this.mode&~a|t}setIsFile(){this.setModeProperty(c)}setIsDirectory(){this.setModeProperty(p)}setIsSymlink(){this.setModeProperty(u)}isFile(){return(this.mode&a)===c}isDirectory(){return(this.mode&a)===p}isSymlink(){return(this.mode&a)===u}makeSymlink(t){this.symlink=t,this.setIsSymlink()}write(t,e=0,o=t.length,i=0){if(this.buf||(this.buf=(0,r.bufferAllocUnsafe)(0)),i+o>this.buf.length){const t=(0,r.bufferAllocUnsafe)(i+o);this.buf.copy(t,0,0,this.buf.length),this.buf=t}return t.copy(this.buf,i,e,e+o),this.touch(),o}read(t,e=0,o=t.byteLength,i=0){this.atime=new Date,this.buf||(this.buf=(0,r.bufferAllocUnsafe)(0));let n=o;n>t.byteLength&&(n=t.byteLength),n+i>this.buf.length&&(n=this.buf.length-i);const s=t instanceof r.Buffer?t:r.Buffer.from(t.buffer);return this.buf.copy(s,e,i,i+n),n}truncate(t=0){if(t)if(this.buf||(this.buf=(0,r.bufferAllocUnsafe)(0)),t<=this.buf.length)this.buf=this.buf.slice(0,t);else{const e=(0,r.bufferAllocUnsafe)(t);this.buf.copy(e),e.fill(0,this.buf.length),this.buf=e}else this.buf=(0,r.bufferAllocUnsafe)(0);this.touch()}chmod(t){this.perm=t,this.mode=-512&this.mode|t,this.touch()}chown(t,e){this.uid=t,this.gid=e,this.touch()}touch(){this.mtime=new Date,this.emit("change",this)}canRead(t=l(),e=f()){return!!(4&this.perm)||!!(e===this.gid&&32&this.perm)||!!(t===this.uid&&256&this.perm)}canWrite(t=l(),e=f()){return!!(2&this.perm)||!!(e===this.gid&&16&this.perm)||!!(t===this.uid&&128&this.perm)}canExecute(t=l(),e=f()){return!!(1&this.perm)||!!(e===this.gid&&8&this.perm)||!!(t===this.uid&&64&this.perm)}del(){this.emit("delete",this)}toJSON(){return{ino:this.ino,uid:this.uid,gid:this.gid,atime:this.atime.getTime(),mtime:this.mtime.getTime(),ctime:this.ctime.getTime(),perm:this.perm,mode:this.mode,nlink:this.nlink,symlink:this.symlink,data:this.getString()}}}t.Node=d;class y extends i.EventEmitter{get steps(){return this._steps}set steps(t){this._steps=t;for(const[t,e]of this.children.entries())"."!==t&&".."!==t&&(null==e||e.syncSteps())}constructor(t,e,r){super(),this.children=new Map,this._steps=[],this.ino=0,this.length=0,this.vol=t,this.parent=e,this.name=r,this.syncSteps()}setNode(t){this.node=t,this.ino=t.ino}getNode(){return this.node}createChild(t,e=this.vol.createNode()){const r=new y(this.vol,this,t);return r.setNode(e),e.isDirectory()&&(r.children.set(".",r),r.getNode().nlink++),this.setChild(t,r),r}setChild(t,e=new y(this.vol,this,t)){return this.children.set(t,e),e.parent=this,this.length++,e.getNode().isDirectory()&&(e.children.set("..",this),this.getNode().nlink++),this.getNode().mtime=new Date,this.emit("child:add",e,this),e}deleteChild(t){t.getNode().isDirectory()&&(t.children.delete(".."),this.getNode().nlink--),this.children.delete(t.getName()),this.length--,this.getNode().mtime=new Date,this.emit("child:delete",t,this)}getChild(t){return this.getNode().mtime=new Date,this.children.get(t)}getPath(){return this.steps.join(t.SEP)}getParentPath(){return this.steps.slice(0,-1).join(t.SEP)}getName(){return this.steps[this.steps.length-1]}toJSON(){return{steps:this.steps,ino:this.ino,children:Array.from(this.children.keys())}}syncSteps(){this.steps=this.parent?this.parent.steps.concat([this.name]):[this.name]}}t.Link=y,t.File=class{constructor(t,e,r,o){this.link=t,this.node=e,this.flags=r,this.fd=o,this.position=0,this.flags&h&&(this.position=this.getSize())}getString(t="utf8"){return this.node.getString()}setString(t){this.node.setString(t)}getBuffer(){return this.node.getBuffer()}setBuffer(t){this.node.setBuffer(t)}getSize(){return this.node.getSize()}truncate(t){this.node.truncate(t)}seekTo(t){this.position=t}stats(){return n.default.build(this.node)}write(t,e=0,r=t.length,o){"number"!=typeof o&&(o=this.position);const i=this.node.write(t,e,r,o);return this.position=o+i,i}read(t,e=0,r=t.byteLength,o){"number"!=typeof o&&(o=this.position);const i=this.node.read(t,e,r,o);return this.position=o+i,i}chmod(t){this.node.chmod(t)}chown(t,e){this.node.chown(t,e)}}}($)),$),r=R(),o=L(),p=N(),c=function(){if(G)return H;let t;return G=1,Object.defineProperty(H,"__esModule",{value:!0}),t="function"==typeof setImmediate?setImmediate.bind("undefined"!=typeof globalThis?globalThis:m):setTimeout.bind("undefined"!=typeof globalThis?globalThis:m),H.default=t,H}(),u=Y(),h=z(),l=(J||(J=1,Object.defineProperty(X,"__esModule",{value:!0}),X.default=function(t,e,r){const o=setTimeout.apply("undefined"!=typeof globalThis?globalThis:m,arguments);return o&&"object"==typeof o&&"function"==typeof o.unref&&o.unref(),o}),X),f=a,d=F(),y=s,g=D(),b=function(){if(tt)return et;tt=1,Object.defineProperty(et,"__esModule",{value:!0}),et.FileHandle=void 0;const t=nt();return et.FileHandle=class{constructor(t,e){this.fs=t,this.fd=e}appendFile(e,r){return(0,t.promisify)(this.fs,"appendFile")(this.fd,e,r)}chmod(e){return(0,t.promisify)(this.fs,"fchmod")(this.fd,e)}chown(e,r){return(0,t.promisify)(this.fs,"fchown")(this.fd,e,r)}close(){return(0,t.promisify)(this.fs,"close")(this.fd)}datasync(){return(0,t.promisify)(this.fs,"fdatasync")(this.fd)}readableWebStream(t){return new ReadableStream({pull:async t=>{const e=await this.readFile();t.enqueue(e),t.close()}})}read(e,r,o,i){return(0,t.promisify)(this.fs,"read",(t=>({bytesRead:t,buffer:e})))(this.fd,e,r,o,i)}readv(e,r){return(0,t.promisify)(this.fs,"readv",(t=>({bytesRead:t,buffers:e})))(this.fd,e,r)}readFile(e){return(0,t.promisify)(this.fs,"readFile")(this.fd,e)}stat(e){return(0,t.promisify)(this.fs,"fstat")(this.fd,e)}sync(){return(0,t.promisify)(this.fs,"fsync")(this.fd)}truncate(e){return(0,t.promisify)(this.fs,"ftruncate")(this.fd,e)}utimes(e,r){return(0,t.promisify)(this.fs,"futimes")(this.fd,e,r)}write(e,r,o,i){return(0,t.promisify)(this.fs,"write",(t=>({bytesWritten:t,buffer:e})))(this.fd,e,r,o,i)}writev(e,r){return(0,t.promisify)(this.fs,"writev",(t=>({bytesWritten:t,buffers:e})))(this.fd,e,r)}writeFile(e,r){return(0,t.promisify)(this.fs,"writeFile")(this.fd,e,r)}},et}(),v=i,w=function(){if(st)return at;st=1,Object.defineProperty(at,"__esModule",{value:!0}),at.FsPromises=void 0;const t=nt(),e=F();return at.FsPromises=class{constructor(r,o){this.fs=r,this.FileHandle=o,this.constants=e.constants,this.cp=(0,t.promisify)(this.fs,"cp"),this.opendir=(0,t.promisify)(this.fs,"opendir"),this.statfs=(0,t.promisify)(this.fs,"statfs"),this.lutimes=(0,t.promisify)(this.fs,"lutimes"),this.access=(0,t.promisify)(this.fs,"access"),this.chmod=(0,t.promisify)(this.fs,"chmod"),this.chown=(0,t.promisify)(this.fs,"chown"),this.copyFile=(0,t.promisify)(this.fs,"copyFile"),this.lchmod=(0,t.promisify)(this.fs,"lchmod"),this.lchown=(0,t.promisify)(this.fs,"lchown"),this.link=(0,t.promisify)(this.fs,"link"),this.lstat=(0,t.promisify)(this.fs,"lstat"),this.mkdir=(0,t.promisify)(this.fs,"mkdir"),this.mkdtemp=(0,t.promisify)(this.fs,"mkdtemp"),this.readdir=(0,t.promisify)(this.fs,"readdir"),this.readlink=(0,t.promisify)(this.fs,"readlink"),this.realpath=(0,t.promisify)(this.fs,"realpath"),this.rename=(0,t.promisify)(this.fs,"rename"),this.rmdir=(0,t.promisify)(this.fs,"rmdir"),this.rm=(0,t.promisify)(this.fs,"rm"),this.stat=(0,t.promisify)(this.fs,"stat"),this.symlink=(0,t.promisify)(this.fs,"symlink"),this.truncate=(0,t.promisify)(this.fs,"truncate"),this.unlink=(0,t.promisify)(this.fs,"unlink"),this.utimes=(0,t.promisify)(this.fs,"utimes"),this.readFile=(e,r)=>(0,t.promisify)(this.fs,"readFile")(e instanceof this.FileHandle?e.fd:e,r),this.appendFile=(e,r,o)=>(0,t.promisify)(this.fs,"appendFile")(e instanceof this.FileHandle?e.fd:e,r,o),this.open=(e,r="r",o)=>(0,t.promisify)(this.fs,"open",(t=>new this.FileHandle(this.fs,t)))(e,r,o),this.writeFile=(e,r,o)=>((0,t.isReadableStream)(r)?(0,t.streamToBuffer)(r):Promise.resolve(r)).then((r=>(0,t.promisify)(this.fs,"writeFile")(e instanceof this.FileHandle?e.fd:e,r,o))),this.watch=()=>{throw new Error("Not implemented")}}},at}(),_=oe(),S=it(),E=(ie||(ie=1,function(t){Object.defineProperty(t,"__esModule",{value:!0}),t.getWriteFileOptions=t.writeFileDefaults=t.getRealpathOptsAndCb=t.getRealpathOptions=t.getStatOptsAndCb=t.getStatOptions=t.getAppendFileOptsAndCb=t.getAppendFileOpts=t.getOpendirOptsAndCb=t.getOpendirOptions=t.getReaddirOptsAndCb=t.getReaddirOptions=t.getReadFileOptions=t.getRmOptsAndCb=t.getRmdirOptions=t.getDefaultOptsAndCb=t.getDefaultOpts=t.optsDefaults=t.getMkdirOptions=void 0,t.getOptions=s,t.optsGenerator=a,t.optsAndCbGenerator=p;const e=it(),r=D(),o=nt(),i={mode:511,recursive:!1};t.getMkdirOptions=t=>"number"==typeof t?Object.assign({},i,{mode:t}):Object.assign({},i,t);const n=t=>`Expected options to be either an object or a string, but got ${t} instead`;function s(t,e){let o;if(!e)return t;{const r=typeof e;switch(r){case"string":o=Object.assign({},t,{encoding:e});break;case"object":o=Object.assign({},t,e);break;default:throw TypeError(n(r))}}return"buffer"!==o.encoding&&(0,r.assertEncoding)(o.encoding),o}function a(t){return e=>s(t,e)}function p(t){return(e,r)=>"function"==typeof e?[t(),e]:[t(e),(0,o.validateCallback)(r)]}t.optsDefaults={encoding:"utf8"},t.getDefaultOpts=a(t.optsDefaults),t.getDefaultOptsAndCb=p(t.getDefaultOpts);const c={recursive:!1};t.getRmdirOptions=t=>Object.assign({},c,t);const u=a(t.optsDefaults);t.getRmOptsAndCb=p(u),t.getReadFileOptions=a({flag:"r"}),t.getReaddirOptions=a({encoding:"utf8",recursive:!1,withFileTypes:!1}),t.getReaddirOptsAndCb=p(t.getReaddirOptions),t.getOpendirOptions=a({encoding:"utf8",bufferSize:32,recursive:!1}),t.getOpendirOptsAndCb=p(t.getOpendirOptions);const h={encoding:"utf8",mode:438,flag:e.FLAGS[e.FLAGS.a]};t.getAppendFileOpts=a(h),t.getAppendFileOptsAndCb=p(t.getAppendFileOpts);const l={bigint:!1};t.getStatOptions=(t={})=>Object.assign({},l,t),t.getStatOptsAndCb=(e,r)=>"function"==typeof e?[(0,t.getStatOptions)(),e]:[(0,t.getStatOptions)(e),(0,o.validateCallback)(r)];const f=t.optsDefaults;t.getRealpathOptions=a(f),t.getRealpathOptsAndCb=p(t.getRealpathOptions),t.writeFileDefaults={encoding:"utf8",mode:438,flag:e.FLAGS[e.FLAGS.w]},t.getWriteFileOptions=a(t.writeFileDefaults)}(ne)),ne),O=nt(),T=function(){if(se)return pe;se=1,Object.defineProperty(pe,"__esModule",{value:!0}),pe.Dir=void 0;const t=nt(),e=L();let r=class{constructor(t,e){this.link=t,this.options=e,this.iteratorInfo=[],this.path=t.getParentPath(),this.iteratorInfo.push(t.children[Symbol.iterator]())}wrapAsync(e,r,o){(0,t.validateCallback)(o),setImmediate((()=>{let t;try{t=e.apply(this,r)}catch(t){return void o(t)}o(null,t)}))}isFunction(t){return"function"==typeof t}promisify(t,e){return(...r)=>new Promise(((o,i)=>{this.isFunction(t[e])?t[e].bind(t)(...r,((t,e)=>{t&&i(t),o(e)})):i("Not a function")}))}closeBase(){}readBase(t){let r,o,i,n;do{do{if(({done:r,value:o}=t[t.length-1].next()),r)break;[i,n]=o}while("."===i||".."===i);if(!r)return this.options.recursive&&n.children.size&&t.push(n.children[Symbol.iterator]()),e.default.build(n,this.options.encoding);if(t.pop(),0===t.length)break;r=!1}while(!r);return null}closeBaseAsync(t){this.wrapAsync(this.closeBase,[],t)}close(t){if("function"!=typeof t)return this.promisify(this,"closeBaseAsync")();this.closeBaseAsync(t)}closeSync(){this.closeBase()}readBaseAsync(t){this.wrapAsync(this.readBase,[this.iteratorInfo],t)}read(t){if("function"!=typeof t)return this.promisify(this,"readBaseAsync")();this.readBaseAsync(t)}readSync(){return this.readBase(this.iteratorInfo)}[Symbol.asyncIterator](){const t=[],e=this;t.push(e.link.children[Symbol.iterator]());const r={readBaseAsync(r){e.wrapAsync(e.readBase,[t],r)}};return{async next(){const t=await e.promisify(r,"readBaseAsync")();return null!==t?{done:!1,value:t}:{done:!0,value:void 0}},[Symbol.asyncIterator](){throw new Error("Not implemented")}}}};return pe.Dir=r,pe}(),k=t.resolve,{O_RDONLY:A,O_WRONLY:P,O_RDWR:I,O_CREAT:C,O_EXCL:B,O_TRUNC:x,O_APPEND:j,O_DIRECTORY:M,O_SYMLINK:V,F_OK:q,COPYFILE_EXCL:K,COPYFILE_FICLONE_FORCE:Z}=d.constants,{sep:Q,relative:rt,join:ot,dirname:pt}=t.posix?t.posix:t,ct="ENOENT",ut="EBADF",ht="EEXIST",lt="ENOTDIR",ft="EACCES",dt="EISDIR";let yt=(t,e=h.default.cwd())=>k(e,t);if(O.isWin){const t=yt;yt=(e,r)=>(0,O.unixify)(t(e,r))}function gt(t,e){const r=yt(t,e).substring(1);return r?r.split(Q):[]}function mt(t){if("string"==typeof t&&+t==t)return+t;if(t instanceof Date)return t.getTime()/1e3;if(isFinite(t))return t<0?Date.now()/1e3:t;throw new Error("Cannot parse time: "+t)}function bt(t){if("number"!=typeof t)throw TypeError(S.ERRSTR.UID)}function vt(t){if("number"!=typeof t)throw TypeError(S.ERRSTR.GID)}const wt=()=>{throw new Error("Not implemented")};class _t{static fromJSON(t,e){const r=new _t;return r.fromJSON(t,e),r}static fromNestedJSON(t,e){const r=new _t;return r.fromNestedJSON(t,e),r}get promises(){if(null===this.promisesApi)throw new Error("Promise is not supported in this environment.");return this.promisesApi}constructor(t={}){this.ino=0,this.inodes={},this.releasedInos=[],this.fds={},this.releasedFds=[],this.maxFiles=1e4,this.openFiles=0,this.promisesApi=new w.FsPromises(this,b.FileHandle),this.statWatchers={},this.cpSync=wt,this.statfsSync=wt,this.cp=wt,this.statfs=wt,this.openAsBlob=wt,this.props=Object.assign({Node:e.Node,Link:e.Link,File:e.File},t);const r=this.createLink();r.setNode(this.createNode(!0));const o=this;this.StatWatcher=class extends Et{constructor(){super(o)}};const i=Ft;this.ReadStream=class extends i{constructor(...t){super(o,...t)}};const n=Tt;this.WriteStream=class extends n{constructor(...t){super(o,...t)}},this.FSWatcher=class extends kt{constructor(){super(o)}},r.setChild(".",r),r.getNode().nlink++,r.setChild("..",r),r.getNode().nlink++,this.root=r}createLink(t,e,r=!1,o){if(!t)return new this.props.Link(this,null,"");if(!e)throw new Error("createLink: name cannot be empty");return t.createChild(e,this.createNode(r,o))}deleteLink(t){const e=t.parent;return!!e&&(e.deleteChild(t),!0)}newInoNumber(){const t=this.releasedInos.pop();return t||(this.ino=(this.ino+1)%4294967295,this.ino)}newFdNumber(){const t=this.releasedFds.pop();return"number"==typeof t?t:_t.fd--}createNode(t=!1,e){null!=e||(e=t?511:438);const r=new this.props.Node(this.newInoNumber(),e);return t&&r.setIsDirectory(),this.inodes[r.ino]=r,r}deleteNode(t){t.del(),delete this.inodes[t.ino],this.releasedInos.push(t.ino)}walk(t,r=!1,o=!1,i=!1,n){var s;let a,p;t instanceof e.Link?(a=t.steps,p=Q+a.join(Q)):"string"==typeof t?(a=gt(t),p=t):(a=t,p=Q+a.join(Q));let c=this.root,u=0;for(;u<a.length;){let t=c.getNode();if(t.isDirectory()){if(i&&!t.canExecute())throw(0,O.createError)(ft,n,p)}else if(u<a.length-1)throw(0,O.createError)(lt,n,p);if(c=null!==(s=c.getChild(a[u]))&&void 0!==s?s:null,!c){if(o)throw(0,O.createError)(ct,n,p);return null}t=null==c?void 0:c.getNode(),r&&t.isSymlink()?(a=t.symlink.concat(a.slice(u+1)),c=this.root,u=0):u++}return c}getLink(t){return this.walk(t,!1,!1,!1)}getLinkOrThrow(t,e){return this.walk(t,!1,!0,!0,e)}getResolvedLink(t){return this.walk(t,!0,!1,!1)}getResolvedLinkOrThrow(t,e){return this.walk(t,!0,!0,!0,e)}resolveSymlinks(t){return this.getResolvedLink(t.steps.slice(1))}getLinkAsDirOrThrow(t,e){const r=this.getLinkOrThrow(t,e);if(!r.getNode().isDirectory())throw(0,O.createError)(lt,e,t);return r}getLinkParent(t){return this.getLink(t.slice(0,-1))}getLinkParentAsDirOrThrow(t,e){const r=(t instanceof Array?t:gt(t)).slice(0,-1),o=Q+r.join(Q),i=this.getLinkOrThrow(o,e);if(!i.getNode().isDirectory())throw(0,O.createError)(lt,e,o);return i}getFileByFd(t){return this.fds[String(t)]}getFileByFdOrThrow(t,e){if(!(0,O.isFd)(t))throw TypeError(S.ERRSTR.FD);const r=this.getFileByFd(t);if(!r)throw(0,O.createError)(ut,e);return r}wrapAsync(t,e,r){(0,O.validateCallback)(r),(0,c.default)((()=>{let o;try{o=t.apply(this,e)}catch(t){return void r(t)}r(null,o)}))}_toJSON(t=this.root,e={},r,o){let i=!0,n=t.children;t.getNode().isFile()&&(n=new Map([[t.getName(),t.parent.getChild(t.getName())]]),t=t.parent);for(const s of n.keys()){if("."===s||".."===s)continue;i=!1;const n=t.getChild(s);if(!n)throw new Error("_toJSON: unexpected undefined");const a=n.getNode();if(a.isFile()){let t=n.getPath();r&&(t=rt(r,t)),e[t]=o?a.getBuffer():a.getString()}else a.isDirectory()&&this._toJSON(n,e,r,o)}let s=t.getPath();return r&&(s=rt(r,s)),s&&i&&(e[s]=null),e}toJSON(t,e={},r=!1,o=!1){const i=[];if(t){Array.isArray(t)||(t=[t]);for(const e of t){const t=(0,O.pathToFilename)(e),r=this.getResolvedLink(t);r&&i.push(r)}}else i.push(this.root);if(!i.length)return e;for(const t of i)this._toJSON(t,e,r?t.getPath():"",o);return e}fromJSON(t,e=h.default.cwd()){for(let r in t){const o=t[r];if(r=yt(r,e),"string"==typeof o||o instanceof p.Buffer){const t=pt(r);this.mkdirpBase(t,511),this.writeFileSync(r,o)}else this.mkdirpBase(r,511)}}fromNestedJSON(t,e){this.fromJSON(function(t){const e={};return function t(r,o){for(const i in o){const n=o[i],s=ot(r,i);"string"==typeof n||n instanceof p.Buffer?e[s]=n:"object"==typeof n&&null!==n&&Object.keys(n).length>0?t(s,n):e[s]=null}}("",t),e}(t),e)}toTree(t={separator:Q}){return(0,_.toTreeSync)(this,t)}reset(){this.ino=0,this.inodes={},this.releasedInos=[],this.fds={},this.releasedFds=[],this.openFiles=0,this.root=this.createLink(),this.root.setNode(this.createNode(!0))}mountSync(t,e){this.fromJSON(e,t)}openLink(t,e,r=!0){if(this.openFiles>=this.maxFiles)throw(0,O.createError)("EMFILE","open",t.getPath());let o=t;r&&(o=this.getResolvedLinkOrThrow(t.getPath(),"open"));const i=o.getNode();if(i.isDirectory()){if((e&(A|I|P))!==A)throw(0,O.createError)(dt,"open",t.getPath())}else if(e&M)throw(0,O.createError)(lt,"open",t.getPath());if(!(e&P||i.canRead()))throw(0,O.createError)(ft,"open",t.getPath());if(!(e&A||i.canWrite()))throw(0,O.createError)(ft,"open",t.getPath());const n=new this.props.File(t,i,e,this.newFdNumber());return this.fds[n.fd]=n,this.openFiles++,e&x&&n.truncate(),n}openFile(e,r,o,i=!0){const n=gt(e);let s;try{if(s=i?this.getResolvedLinkOrThrow(e,"open"):this.getLinkOrThrow(e,"open"),s&&r&C&&r&B)throw(0,O.createError)(ht,"open",e)}catch(i){if(!(i.code===ct&&r&C))throw i;{const r=t.dirname(e),i=this.getResolvedLinkOrThrow(r),a=i.getNode();if(!a.isDirectory())throw(0,O.createError)(lt,"open",e);if(!a.canExecute()||!a.canWrite())throw(0,O.createError)(ft,"open",e);null!=o||(o=438),s=this.createLink(i,n[n.length-1],!1,o)}}if(s)return this.openLink(s,r,i);throw(0,O.createError)(ct,"open",e)}openBase(t,e,r,o=!0){const i=this.openFile(t,e,r,o);if(!i)throw(0,O.createError)(ct,"open",t);return i.fd}openSync(t,e,r=438){const o=(0,O.modeToNumber)(r),i=(0,O.pathToFilename)(t),n=(0,O.flagsToNumber)(e);return this.openBase(i,n,o,!(n&V))}open(t,e,r,o){let i=r,n=o;"function"==typeof r&&(i=438,n=r),i=i||438;const s=(0,O.modeToNumber)(i),a=(0,O.pathToFilename)(t),p=(0,O.flagsToNumber)(e);this.wrapAsync(this.openBase,[a,p,s,!(p&V)],n)}closeFile(t){this.fds[t.fd]&&(this.openFiles--,delete this.fds[t.fd],this.releasedFds.push(t.fd))}closeSync(t){(0,O.validateFd)(t);const e=this.getFileByFdOrThrow(t,"close");this.closeFile(e)}close(t,e){(0,O.validateFd)(t),this.wrapAsync(this.closeSync,[t],e)}openFileOrGetById(t,e,r){if("number"==typeof t){const e=this.fds[t];if(!e)throw(0,O.createError)(ct);return e}return this.openFile((0,O.pathToFilename)(t),e,r)}readBase(t,e,r,o,i){if(e.byteLength<o)throw(0,O.createError)("ERR_OUT_OF_RANGE","read",void 0,void 0,RangeError);const n=this.getFileByFdOrThrow(t);if(n.node.isSymlink())throw(0,O.createError)("EPERM","read",n.link.getPath());return n.read(e,Number(r),Number(o),-1===i||"number"!=typeof i?void 0:i)}readSync(t,e,r,o,i){return(0,O.validateFd)(t),this.readBase(t,e,r,o,i)}read(t,e,r,o,i,n){if((0,O.validateCallback)(n),0===o)return(0,u.default)((()=>{n&&n(null,0,e)}));(0,c.default)((()=>{try{const s=this.readBase(t,e,r,o,i);n(null,s,e)}catch(t){n(t)}}))}readvBase(t,e,r){const o=this.getFileByFdOrThrow(t);let i=null!=r?r:void 0;-1===i&&(i=void 0);let n=0;for(const t of e){const e=o.read(t,0,t.byteLength,i);if(i=void 0,n+=e,e<t.byteLength)break}return n}readv(t,e,r,o){let i=r,n=o;"function"==typeof r&&(i=null,n=r),(0,O.validateCallback)(n),(0,c.default)((()=>{try{const r=this.readvBase(t,e,i);n(null,r,e)}catch(t){n(t)}}))}readvSync(t,e,r){return(0,O.validateFd)(t),this.readvBase(t,e,r)}readFileBase(t,e,r){let o;const i="number"==typeof t&&(0,O.isFd)(t);let n;if(i)n=t;else{const r=(0,O.pathToFilename)(t),o=this.getResolvedLinkOrThrow(r,"open");if(o.getNode().isDirectory())throw(0,O.createError)(dt,"open",o.getPath());n=this.openSync(t,e)}try{o=(0,O.bufferToEncoding)(this.getFileByFdOrThrow(n).getBuffer(),r)}finally{i||this.closeSync(n)}return o}readFileSync(t,e){const r=(0,E.getReadFileOptions)(e),o=(0,O.flagsToNumber)(r.flag);return this.readFileBase(t,o,r.encoding)}readFile(t,e,r){const[o,i]=(0,E.optsAndCbGenerator)(E.getReadFileOptions)(e,r),n=(0,O.flagsToNumber)(o.flag);this.wrapAsync(this.readFileBase,[t,n,o.encoding],i)}writeBase(t,e,r,o,i){const n=this.getFileByFdOrThrow(t,"write");if(n.node.isSymlink())throw(0,O.createError)(ut,"write",n.link.getPath());return n.write(e,r,o,-1===i||"number"!=typeof i?void 0:i)}writeSync(t,e,r,o,i){const[,n,s,a,p]=(0,O.getWriteSyncArgs)(t,e,r,o,i);return this.writeBase(t,n,s,a,p)}write(t,e,r,o,i,n){const[,s,a,p,u,h,l]=(0,O.getWriteArgs)(t,e,r,o,i,n);(0,c.default)((()=>{try{const r=this.writeBase(t,a,p,u,h);l(null,r,s?e:a)}catch(t){l(t)}}))}writevBase(t,e,r){const o=this.getFileByFdOrThrow(t);let i=null!=r?r:void 0;-1===i&&(i=void 0);let n=0;for(const t of e){const e=p.Buffer.from(t.buffer,t.byteOffset,t.byteLength),r=o.write(e,0,e.byteLength,i);if(i=void 0,n+=r,r<e.byteLength)break}return n}writev(t,e,r,o){let i=r,n=o;"function"==typeof r&&(i=null,n=r),(0,O.validateCallback)(n),(0,c.default)((()=>{try{const r=this.writevBase(t,e,i);n(null,r,e)}catch(t){n(t)}}))}writevSync(t,e,r){return(0,O.validateFd)(t),this.writevBase(t,e,r)}writeFileBase(t,e,r,o){const i="number"==typeof t;let n;n=i?t:this.openBase((0,O.pathToFilename)(t),r,o);let s=0,a=e.length,p=r&j?void 0:0;try{for(;a>0;){const t=this.writeSync(n,e,s,a,p);s+=t,a-=t,void 0!==p&&(p+=t)}}finally{i||this.closeSync(n)}}writeFileSync(t,e,r){const o=(0,E.getWriteFileOptions)(r),i=(0,O.flagsToNumber)(o.flag),n=(0,O.modeToNumber)(o.mode),s=(0,O.dataToBuffer)(e,o.encoding);this.writeFileBase(t,s,i,n)}writeFile(t,e,r,o){let i=r,n=o;"function"==typeof r&&(i=E.writeFileDefaults,n=r);const s=(0,O.validateCallback)(n),a=(0,E.getWriteFileOptions)(i),p=(0,O.flagsToNumber)(a.flag),c=(0,O.modeToNumber)(a.mode),u=(0,O.dataToBuffer)(e,a.encoding);this.wrapAsync(this.writeFileBase,[t,u,p,c],s)}linkBase(e,r){let o;try{o=this.getLinkOrThrow(e,"link")}catch(t){throw t.code&&(t=(0,O.createError)(t.code,"link",e,r)),t}const i=t.dirname(r);let n;try{n=this.getLinkOrThrow(i,"link")}catch(t){throw t.code&&(t=(0,O.createError)(t.code,"link",e,r)),t}const s=t.basename(r);if(n.getChild(s))throw(0,O.createError)(ht,"link",e,r);const a=o.getNode();a.nlink++,n.createChild(s,a)}copyFileBase(t,e,r){const o=this.readFileSync(t);if(r&K&&this.existsSync(e))throw(0,O.createError)(ht,"copyFile",t,e);if(r&Z)throw(0,O.createError)("ENOSYS","copyFile",t,e);this.writeFileBase(e,o,S.FLAGS.w,438)}copyFileSync(t,e,r){const o=(0,O.pathToFilename)(t),i=(0,O.pathToFilename)(e);return this.copyFileBase(o,i,0|(r||0))}copyFile(t,e,r,o){const i=(0,O.pathToFilename)(t),n=(0,O.pathToFilename)(e);let s,a;"function"==typeof r?(s=0,a=r):(s=r,a=o),(0,O.validateCallback)(a),this.wrapAsync(this.copyFileBase,[i,n,s],a)}linkSync(t,e){const r=(0,O.pathToFilename)(t),o=(0,O.pathToFilename)(e);this.linkBase(r,o)}link(t,e,r){const o=(0,O.pathToFilename)(t),i=(0,O.pathToFilename)(e);this.wrapAsync(this.linkBase,[o,i],r)}unlinkBase(t){const e=this.getLinkOrThrow(t,"unlink");if(e.length)throw Error("Dir not empty...");this.deleteLink(e);const r=e.getNode();r.nlink--,r.nlink<=0&&this.deleteNode(r)}unlinkSync(t){const e=(0,O.pathToFilename)(t);this.unlinkBase(e)}unlink(t,e){const r=(0,O.pathToFilename)(t);this.wrapAsync(this.unlinkBase,[r],e)}symlinkBase(t,e){const r=gt(e);let o;try{o=this.getLinkParentAsDirOrThrow(r)}catch(r){throw r.code&&(r=(0,O.createError)(r.code,"symlink",t,e)),r}const i=r[r.length-1];if(o.getChild(i))throw(0,O.createError)(ht,"symlink",t,e);const n=o.getNode();if(!n.canExecute()||!n.canWrite())throw(0,O.createError)(ft,"symlink",t,e);const s=o.createChild(i);return s.getNode().makeSymlink(gt(t)),s}symlinkSync(t,e,r){const o=(0,O.pathToFilename)(t),i=(0,O.pathToFilename)(e);this.symlinkBase(o,i)}symlink(t,e,r,o){const i=(0,O.validateCallback)("function"==typeof r?r:o),n=(0,O.pathToFilename)(t),s=(0,O.pathToFilename)(e);this.wrapAsync(this.symlinkBase,[n,s],i)}realpathBase(t,e){const r=this.getResolvedLinkOrThrow(t,"realpath");return(0,g.strToEncoding)(r.getPath()||"/",e)}realpathSync(t,e){return this.realpathBase((0,O.pathToFilename)(t),(0,E.getRealpathOptions)(e).encoding)}realpath(t,e,r){const[o,i]=(0,E.getRealpathOptsAndCb)(e,r),n=(0,O.pathToFilename)(t);this.wrapAsync(this.realpathBase,[n,o.encoding],i)}lstatBase(t,e=!1,o=!1){let i;try{i=this.getLinkOrThrow(t,"lstat")}catch(t){if(t.code!==ct||o)throw t;return}return r.default.build(i.getNode(),e)}lstatSync(t,e){const{throwIfNoEntry:r=!0,bigint:o=!1}=(0,E.getStatOptions)(e);return this.lstatBase((0,O.pathToFilename)(t),o,r)}lstat(t,e,r){const[{throwIfNoEntry:o=!0,bigint:i=!1},n]=(0,E.getStatOptsAndCb)(e,r);this.wrapAsync(this.lstatBase,[(0,O.pathToFilename)(t),i,o],n)}statBase(t,e=!1,o=!0){let i;try{i=this.getResolvedLinkOrThrow(t,"stat")}catch(t){if(t.code!==ct||o)throw t;return}return r.default.build(i.getNode(),e)}statSync(t,e){const{bigint:r=!0,throwIfNoEntry:o=!0}=(0,E.getStatOptions)(e);return this.statBase((0,O.pathToFilename)(t),r,o)}stat(t,e,r){const[{bigint:o=!1,throwIfNoEntry:i=!0},n]=(0,E.getStatOptsAndCb)(e,r);this.wrapAsync(this.statBase,[(0,O.pathToFilename)(t),o,i],n)}fstatBase(t,e=!1){const o=this.getFileByFd(t);if(!o)throw(0,O.createError)(ut,"fstat");return r.default.build(o.node,e)}fstatSync(t,e){return this.fstatBase(t,(0,E.getStatOptions)(e).bigint)}fstat(t,e,r){const[o,i]=(0,E.getStatOptsAndCb)(e,r);this.wrapAsync(this.fstatBase,[t,o.bigint],i)}renameBase(e,r){let o,i;try{o=this.getResolvedLinkOrThrow(e)}catch(t){throw t.code&&(t=(0,O.createError)(t.code,"rename",e,r)),t}try{i=this.getLinkParentAsDirOrThrow(r)}catch(t){throw t.code&&(t=(0,O.createError)(t.code,"rename",e,r)),t}const n=o.parent,s=n.getNode(),a=i.getNode();if(!(s.canExecute()&&s.canWrite()&&a.canExecute()&&a.canWrite()))throw(0,O.createError)(ft,"rename",e,r);n.deleteChild(o);const p=t.basename(r);o.name=p,o.steps=[...i.steps,p],i.setChild(o.getName(),o)}renameSync(t,e){const r=(0,O.pathToFilename)(t),o=(0,O.pathToFilename)(e);this.renameBase(r,o)}rename(t,e,r){const o=(0,O.pathToFilename)(t),i=(0,O.pathToFilename)(e);this.wrapAsync(this.renameBase,[o,i],r)}existsBase(t){return!!this.statBase(t)}existsSync(t){try{return this.existsBase((0,O.pathToFilename)(t))}catch(t){return!1}}exists(t,e){const r=(0,O.pathToFilename)(t);if("function"!=typeof e)throw Error(S.ERRSTR.CB);(0,c.default)((()=>{try{e(this.existsBase(r))}catch(t){e(!1)}}))}accessBase(t,e){this.getLinkOrThrow(t,"access")}accessSync(t,e=q){const r=(0,O.pathToFilename)(t);e|=0,this.accessBase(r,e)}access(t,e,r){let o,i=q;"function"!=typeof e?(i=0|e,o=(0,O.validateCallback)(r)):o=e;const n=(0,O.pathToFilename)(t);this.wrapAsync(this.accessBase,[n,i],o)}appendFileSync(t,e,r){const o=(0,E.getAppendFileOpts)(r);o.flag&&!(0,O.isFd)(t)||(o.flag="a"),this.writeFileSync(t,e,o)}appendFile(t,e,r,o){const[i,n]=(0,E.getAppendFileOptsAndCb)(r,o);i.flag&&!(0,O.isFd)(t)||(i.flag="a"),this.writeFile(t,e,i,n)}readdirBase(e,r){gt(e);const i=this.getResolvedLinkOrThrow(e,"scandir"),n=i.getNode();if(!n.isDirectory())throw(0,O.createError)(lt,"scandir",e);if(!n.canRead())throw(0,O.createError)(ft,"scandir",e);const s=[];for(const t of i.children.keys()){const e=i.getChild(t);if(e&&"."!==t&&".."!==t&&(s.push(o.default.build(e,r.encoding)),r.recursive&&e.children.size)){const t=Object.assign(Object.assign({},r),{recursive:!0,withFileTypes:!0}),o=this.readdirBase(e.getPath(),t);s.push(...o)}}if(O.isWin||"buffer"===r.encoding||s.sort(((t,e)=>t.name<e.name?-1:t.name>e.name?1:0)),r.withFileTypes)return s;let a=e;return O.isWin&&(a=a.replace(/\\/g,"/")),s.map((e=>{if(r.recursive){let r=t.join(e.parentPath,e.name.toString());return O.isWin&&(r=r.replace(/\\/g,"/")),r.replace(a+t.posix.sep,"")}return e.name}))}readdirSync(t,e){const r=(0,E.getReaddirOptions)(e),o=(0,O.pathToFilename)(t);return this.readdirBase(o,r)}readdir(t,e,r){const[o,i]=(0,E.getReaddirOptsAndCb)(e,r),n=(0,O.pathToFilename)(t);this.wrapAsync(this.readdirBase,[n,o],i)}readlinkBase(t,e){const r=this.getLinkOrThrow(t,"readlink").getNode();if(!r.isSymlink())throw(0,O.createError)("EINVAL","readlink",t);const o=Q+r.symlink.join(Q);return(0,g.strToEncoding)(o,e)}readlinkSync(t,e){const r=(0,E.getDefaultOpts)(e),o=(0,O.pathToFilename)(t);return this.readlinkBase(o,r.encoding)}readlink(t,e,r){const[o,i]=(0,E.getDefaultOptsAndCb)(e,r),n=(0,O.pathToFilename)(t);this.wrapAsync(this.readlinkBase,[n,o.encoding],i)}fsyncBase(t){this.getFileByFdOrThrow(t,"fsync")}fsyncSync(t){this.fsyncBase(t)}fsync(t,e){this.wrapAsync(this.fsyncBase,[t],e)}fdatasyncBase(t){this.getFileByFdOrThrow(t,"fdatasync")}fdatasyncSync(t){this.fdatasyncBase(t)}fdatasync(t,e){this.wrapAsync(this.fdatasyncBase,[t],e)}ftruncateBase(t,e){this.getFileByFdOrThrow(t,"ftruncate").truncate(e)}ftruncateSync(t,e){this.ftruncateBase(t,e)}ftruncate(t,e,r){const o="number"==typeof e?e:0,i=(0,O.validateCallback)("number"==typeof e?r:e);this.wrapAsync(this.ftruncateBase,[t,o],i)}truncateBase(t,e){const r=this.openSync(t,"r+");try{this.ftruncateSync(r,e)}finally{this.closeSync(r)}}truncateSync(t,e){if((0,O.isFd)(t))return this.ftruncateSync(t,e);this.truncateBase(t,e)}truncate(t,e,r){const o="number"==typeof e?e:0,i=(0,O.validateCallback)("number"==typeof e?r:e);if((0,O.isFd)(t))return this.ftruncate(t,o,i);this.wrapAsync(this.truncateBase,[t,o],i)}futimesBase(t,e,r){const o=this.getFileByFdOrThrow(t,"futimes").node;o.atime=new Date(1e3*e),o.mtime=new Date(1e3*r)}futimesSync(t,e,r){this.futimesBase(t,mt(e),mt(r))}futimes(t,e,r,o){this.wrapAsync(this.futimesBase,[t,mt(e),mt(r)],o)}utimesBase(t,e,r,o=!0){const i=(o?this.getResolvedLinkOrThrow(t,"utimes"):this.getLinkOrThrow(t,"lutimes")).getNode();i.atime=new Date(1e3*e),i.mtime=new Date(1e3*r)}utimesSync(t,e,r){this.utimesBase((0,O.pathToFilename)(t),mt(e),mt(r),!0)}utimes(t,e,r,o){this.wrapAsync(this.utimesBase,[(0,O.pathToFilename)(t),mt(e),mt(r),!0],o)}lutimesSync(t,e,r){this.utimesBase((0,O.pathToFilename)(t),mt(e),mt(r),!1)}lutimes(t,e,r,o){this.wrapAsync(this.utimesBase,[(0,O.pathToFilename)(t),mt(e),mt(r),!1],o)}mkdirBase(t,e){const r=gt(t);if(!r.length)throw(0,O.createError)(ht,"mkdir",t);const o=this.getLinkParentAsDirOrThrow(t,"mkdir"),i=r[r.length-1];if(o.getChild(i))throw(0,O.createError)(ht,"mkdir",t);const n=o.getNode();if(!n.canWrite()||!n.canExecute())throw(0,O.createError)(ft,"mkdir",t);o.createChild(i,this.createNode(!0,e))}mkdirpBase(t,e){let r=!1;const o=gt(t);let i=null,n=o.length;for(n=o.length;n>=0&&(i=this.getResolvedLink(o.slice(0,n)),!i);n--);for(i||(i=this.root,n=0),i=this.getResolvedLinkOrThrow(Q+o.slice(0,n).join(Q),"mkdir");n<o.length;n++){const s=i.getNode();if(!s.isDirectory())throw(0,O.createError)(lt,"mkdir",t);if(!s.canExecute()||!s.canWrite())throw(0,O.createError)(ft,"mkdir",t);r=!0,i=i.createChild(o[n],this.createNode(!0,e))}return r?t:void 0}mkdirSync(t,e){const r=(0,E.getMkdirOptions)(e),o=(0,O.modeToNumber)(r.mode,511),i=(0,O.pathToFilename)(t);if(r.recursive)return this.mkdirpBase(i,o);this.mkdirBase(i,o)}mkdir(t,e,r){const o=(0,E.getMkdirOptions)(e),i=(0,O.validateCallback)("function"==typeof e?e:r),n=(0,O.modeToNumber)(o.mode,511),s=(0,O.pathToFilename)(t);o.recursive?this.wrapAsync(this.mkdirpBase,[s,n],i):this.wrapAsync(this.mkdirBase,[s,n],i)}mkdtempBase(t,e,r=5){const o=t+(0,O.genRndStr6)();try{return this.mkdirBase(o,511),(0,g.strToEncoding)(o,e)}catch(o){if(o.code===ht){if(r>1)return this.mkdtempBase(t,e,r-1);throw Error("Could not create temp dir.")}throw o}}mkdtempSync(t,e){const{encoding:r}=(0,E.getDefaultOpts)(e);if(!t||"string"!=typeof t)throw new TypeError("filename prefix is required");return(0,O.nullCheck)(t),this.mkdtempBase(t,r)}mkdtemp(t,e,r){const[{encoding:o},i]=(0,E.getDefaultOptsAndCb)(e,r);if(!t||"string"!=typeof t)throw new TypeError("filename prefix is required");(0,O.nullCheck)(t)&&this.wrapAsync(this.mkdtempBase,[t,o],i)}rmdirBase(t,e){const r=(0,E.getRmdirOptions)(e),o=this.getLinkAsDirOrThrow(t,"rmdir");if(o.length&&!r.recursive)throw(0,O.createError)("ENOTEMPTY","rmdir",t);this.deleteLink(o)}rmdirSync(t,e){this.rmdirBase((0,O.pathToFilename)(t),e)}rmdir(t,e,r){const o=(0,E.getRmdirOptions)(e),i=(0,O.validateCallback)("function"==typeof e?e:r);this.wrapAsync(this.rmdirBase,[(0,O.pathToFilename)(t),o],i)}rmBase(t,e={}){let r;try{r=this.getResolvedLinkOrThrow(t,"stat")}catch(t){if(t.code===ct&&e.force)return;throw t}if(r.getNode().isDirectory()&&!e.recursive)throw(0,O.createError)("ERR_FS_EISDIR","rm",t);if(!r.parent.getNode().canWrite())throw(0,O.createError)(ft,"rm",t);this.deleteLink(r)}rmSync(t,e){this.rmBase((0,O.pathToFilename)(t),e)}rm(t,e,r){const[o,i]=(0,E.getRmOptsAndCb)(e,r);this.wrapAsync(this.rmBase,[(0,O.pathToFilename)(t),o],i)}fchmodBase(t,e){this.getFileByFdOrThrow(t,"fchmod").chmod(e)}fchmodSync(t,e){this.fchmodBase(t,(0,O.modeToNumber)(e))}fchmod(t,e,r){this.wrapAsync(this.fchmodBase,[t,(0,O.modeToNumber)(e)],r)}chmodBase(t,e,r=!0){(r?this.getResolvedLinkOrThrow(t,"chmod"):this.getLinkOrThrow(t,"chmod")).getNode().chmod(e)}chmodSync(t,e){const r=(0,O.modeToNumber)(e),o=(0,O.pathToFilename)(t);this.chmodBase(o,r,!0)}chmod(t,e,r){const o=(0,O.modeToNumber)(e),i=(0,O.pathToFilename)(t);this.wrapAsync(this.chmodBase,[i,o],r)}lchmodBase(t,e){this.chmodBase(t,e,!1)}lchmodSync(t,e){const r=(0,O.modeToNumber)(e),o=(0,O.pathToFilename)(t);this.lchmodBase(o,r)}lchmod(t,e,r){const o=(0,O.modeToNumber)(e),i=(0,O.pathToFilename)(t);this.wrapAsync(this.lchmodBase,[i,o],r)}fchownBase(t,e,r){this.getFileByFdOrThrow(t,"fchown").chown(e,r)}fchownSync(t,e,r){bt(e),vt(r),this.fchownBase(t,e,r)}fchown(t,e,r,o){bt(e),vt(r),this.wrapAsync(this.fchownBase,[t,e,r],o)}chownBase(t,e,r){this.getResolvedLinkOrThrow(t,"chown").getNode().chown(e,r)}chownSync(t,e,r){bt(e),vt(r),this.chownBase((0,O.pathToFilename)(t),e,r)}chown(t,e,r,o){bt(e),vt(r),this.wrapAsync(this.chownBase,[(0,O.pathToFilename)(t),e,r],o)}lchownBase(t,e,r){this.getLinkOrThrow(t,"lchown").getNode().chown(e,r)}lchownSync(t,e,r){bt(e),vt(r),this.lchownBase((0,O.pathToFilename)(t),e,r)}lchown(t,e,r,o){bt(e),vt(r),this.wrapAsync(this.lchownBase,[(0,O.pathToFilename)(t),e,r],o)}watchFile(t,e,r){const o=(0,O.pathToFilename)(t);let i=e,n=r;if("function"==typeof i&&(n=e,i=null),"function"!=typeof n)throw Error('"watchFile()" requires a listener function');let s=5007,a=!0;i&&"object"==typeof i&&("number"==typeof i.interval&&(s=i.interval),"boolean"==typeof i.persistent&&(a=i.persistent));let p=this.statWatchers[o];return p||(p=new this.StatWatcher,p.start(o,a,s),this.statWatchers[o]=p),p.addListener("change",n),p}unwatchFile(t,e){const r=(0,O.pathToFilename)(t),o=this.statWatchers[r];o&&("function"==typeof e?o.removeListener("change",e):o.removeAllListeners("change"),0===o.listenerCount("change")&&(o.stop(),delete this.statWatchers[r]))}createReadStream(t,e){return new this.ReadStream(t,e)}createWriteStream(t,e){return new this.WriteStream(t,e)}watch(t,e,r){const o=(0,O.pathToFilename)(t);let i=e;"function"==typeof e&&(r=e,i=null);let{persistent:n,recursive:s,encoding:a}=(0,E.getDefaultOpts)(i);void 0===n&&(n=!0),void 0===s&&(s=!1);const p=new this.FSWatcher;return p.start(o,n,s,a),r&&p.addListener("change",r),p}opendirBase(t,e){const r=this.getResolvedLinkOrThrow(t,"scandir");if(!r.getNode().isDirectory())throw(0,O.createError)(lt,"scandir",t);return new T.Dir(r,e)}opendirSync(t,e){const r=(0,E.getOpendirOptions)(e),o=(0,O.pathToFilename)(t);return this.opendirBase(o,r)}opendir(t,e,r){const[o,i]=(0,E.getOpendirOptsAndCb)(e,r),n=(0,O.pathToFilename)(t);this.wrapAsync(this.opendirBase,[n,o],i)}}function St(t){t.emit("stop")}W.Volume=_t,_t.fd=2147483647;class Et extends y.EventEmitter{constructor(t){super(),this.onInterval=()=>{try{const t=this.vol.statSync(this.filename);this.hasChanged(t)&&(this.emit("change",t,this.prev),this.prev=t)}finally{this.loop()}},this.vol=t}loop(){this.timeoutRef=this.setTimeout(this.onInterval,this.interval)}hasChanged(t){return t.mtimeMs>this.prev.mtimeMs||t.nlink!==this.prev.nlink}start(t,e=!0,r=5007){this.filename=(0,O.pathToFilename)(t),this.setTimeout=e?setTimeout.bind("undefined"!=typeof globalThis?globalThis:m):l.default,this.interval=r,this.prev=this.vol.statSync(this.filename),this.loop()}stop(){clearTimeout(this.timeoutRef),(0,u.default)((()=>{St.call(this,this)}))}}var Ot;function Ft(t,e,r){if(!(this instanceof Ft))return new Ft(t,e,r);if(this._vol=t,void 0===(r=Object.assign({},(0,E.getOptions)(r,{}))).highWaterMark&&(r.highWaterMark=65536),f.Readable.call(this,r),this.path=(0,O.pathToFilename)(e),this.fd=void 0===r.fd?null:r.fd,this.flags=void 0===r.flags?"r":r.flags,this.mode=void 0===r.mode?438:r.mode,this.start=r.start,this.end=r.end,this.autoClose=void 0===r.autoClose||r.autoClose,this.pos=void 0,this.bytesRead=0,void 0!==this.start){if("number"!=typeof this.start)throw new TypeError('"start" option must be a Number');if(void 0===this.end)this.end=1/0;else if("number"!=typeof this.end)throw new TypeError('"end" option must be a Number');if(this.start>this.end)throw new Error('"start" option must be <= "end" option');this.pos=this.start}"number"!=typeof this.fd&&this.open(),this.on("end",(function(){this.autoClose&&this.destroy&&this.destroy()}))}function Rt(t){this.close()}function Tt(t,e,r){if(!(this instanceof Tt))return new Tt(t,e,r);if(this._vol=t,r=Object.assign({},(0,E.getOptions)(r,{})),f.Writable.call(this,r),this.path=(0,O.pathToFilename)(e),this.fd=void 0===r.fd?null:r.fd,this.flags=void 0===r.flags?"w":r.flags,this.mode=void 0===r.mode?438:r.mode,this.start=r.start,this.autoClose=void 0===r.autoClose||!!r.autoClose,this.pos=void 0,this.bytesWritten=0,this.pending=!0,void 0!==this.start){if("number"!=typeof this.start)throw new TypeError('"start" option must be a Number');if(this.start<0)throw new Error('"start" must be >= zero');this.pos=this.start}r.encoding&&this.setDefaultEncoding(r.encoding),"number"!=typeof this.fd&&this.open(),this.once("finish",(function(){this.autoClose&&this.close()}))}W.StatWatcher=Et,v.inherits(Ft,f.Readable),W.ReadStream=Ft,Ft.prototype.open=function(){var t=this;this._vol.open(this.path,this.flags,this.mode,((e,r)=>{if(e)return t.autoClose&&t.destroy&&t.destroy(),void t.emit("error",e);t.fd=r,t.emit("open",r),t.read()}))},Ft.prototype._read=function(t){if("number"!=typeof this.fd)return this.once("open",(function(){this._read(t)}));if(!this.destroyed){var e;(!Ot||Ot.length-Ot.used<128)&&(e=this._readableState.highWaterMark,(Ot=(0,p.bufferAllocUnsafe)(e)).used=0);var r=Ot,o=Math.min(Ot.length-Ot.used,t),i=Ot.used;if(void 0!==this.pos&&(o=Math.min(this.end-this.pos+1,o)),o<=0)return this.push(null);var n=this;this._vol.read(this.fd,Ot,Ot.used,o,this.pos,(function(t,e){if(t)n.autoClose&&n.destroy&&n.destroy(),n.emit("error",t);else{var o=null;e>0&&(n.bytesRead+=e,o=r.slice(i,i+e)),n.push(o)}})),void 0!==this.pos&&(this.pos+=o),Ot.used+=o}},Ft.prototype._destroy=function(t,e){this.close((r=>{e(t||r)}))},Ft.prototype.close=function(t){var e;if(t&&this.once("close",t),this.closed||"number"!=typeof this.fd)return"number"!=typeof this.fd?void this.once("open",Rt):(0,u.default)((()=>this.emit("close")));"boolean"==typeof(null===(e=this._readableState)||void 0===e?void 0:e.closed)?this._readableState.closed=!0:this.closed=!0,this._vol.close(this.fd,(t=>{t?this.emit("error",t):this.emit("close")})),this.fd=null},v.inherits(Tt,f.Writable),W.WriteStream=Tt,Tt.prototype.open=function(){this._vol.open(this.path,this.flags,this.mode,function(t,e){if(t)return this.autoClose&&this.destroy&&this.destroy(),void this.emit("error",t);this.fd=e,this.pending=!1,this.emit("open",e)}.bind(this))},Tt.prototype._write=function(t,e,r){if(!(t instanceof p.Buffer||t instanceof Uint8Array))return this.emit("error",new Error("Invalid data"));if("number"!=typeof this.fd)return this.once("open",(function(){this._write(t,e,r)}));var o=this;this._vol.write(this.fd,t,0,t.length,this.pos,((t,e)=>{if(t)return o.autoClose&&o.destroy&&o.destroy(),r(t);o.bytesWritten+=e,r()})),void 0!==this.pos&&(this.pos+=t.length)},Tt.prototype._writev=function(t,e){if("number"!=typeof this.fd)return this.once("open",(function(){this._writev(t,e)}));const r=this,o=t.length,i=new Array(o);for(var n=0,s=0;s<o;s++){var a=t[s].chunk;i[s]=a,n+=a.length}const c=p.Buffer.concat(i);this._vol.write(this.fd,c,0,c.length,this.pos,((t,o)=>{if(t)return r.destroy&&r.destroy(),e(t);r.bytesWritten+=o,e()})),void 0!==this.pos&&(this.pos+=n)},Tt.prototype.close=function(t){var e;if(t&&this.once("close",t),this.closed||"number"!=typeof this.fd)return"number"!=typeof this.fd?void this.once("open",Rt):(0,u.default)((()=>this.emit("close")));"boolean"==typeof(null===(e=this._writableState)||void 0===e?void 0:e.closed)?this._writableState.closed=!0:this.closed=!0,this._vol.close(this.fd,(t=>{t?this.emit("error",t):this.emit("close")})),this.fd=null},Tt.prototype._destroy=Ft.prototype._destroy,Tt.prototype.destroySoon=Tt.prototype.end;class kt extends y.EventEmitter{constructor(t){super(),this._filename="",this._filenameEncoded="",this._recursive=!1,this._encoding=g.ENCODING_UTF8,this._listenerRemovers=new Map,this._onParentChild=t=>{t.getName()===this._getName()&&this._emit("rename")},this._emit=t=>{this.emit("change",t,this._filenameEncoded)},this._persist=()=>{this._timer=setTimeout(this._persist,1e6)},this._vol=t}_getName(){return this._steps[this._steps.length-1]}start(t,e=!0,r=!1,o=g.ENCODING_UTF8){this._filename=(0,O.pathToFilename)(t),this._steps=gt(this._filename),this._filenameEncoded=(0,g.strToEncoding)(this._filename),this._recursive=r,this._encoding=o;try{this._link=this._vol.getLinkOrThrow(this._filename,"FSWatcher")}catch(t){const e=new Error(`watch ${this._filename} ${t.code}`);throw e.code=t.code,e.errno=t.code,e}const i=t=>{var e;const r=t.getPath(),o=t.getNode(),i=()=>{let t=rt(this._filename,r);return t||(t=this._getName()),this.emit("change","change",t)};o.on("change",i);const n=null!==(e=this._listenerRemovers.get(o.ino))&&void 0!==e?e:[];n.push((()=>o.removeListener("change",i))),this._listenerRemovers.set(o.ino,n)},n=t=>{var e;const o=t.getNode(),s=t=>{this.emit("change","rename",rt(this._filename,t.getPath())),setTimeout((()=>{i(t),n(t)}))},a=t=>{const e=t=>{const r=t.getNode().ino,o=this._listenerRemovers.get(r);o&&(o.forEach((t=>t())),this._listenerRemovers.delete(r));for(const[r,o]of t.children.entries())o&&"."!==r&&".."!==r&&e(o)};e(t),this.emit("change","rename",rt(this._filename,t.getPath()))};for(const[e,r]of t.children.entries())r&&"."!==e&&".."!==e&&i(r);t.on("child:add",s),t.on("child:delete",a);if((null!==(e=this._listenerRemovers.get(o.ino))&&void 0!==e?e:[]).push((()=>{t.removeListener("child:add",s),t.removeListener("child:delete",a)})),r)for(const[e,r]of t.children.entries())r&&"."!==e&&".."!==e&&n(r)};i(this._link),n(this._link);const s=this._link.parent;s&&(s.setMaxListeners(s.getMaxListeners()+1),s.on("child:delete",this._onParentChild)),e&&this._persist()}close(){clearTimeout(this._timer),this._listenerRemovers.forEach((t=>{t.forEach((t=>t()))})),this._listenerRemovers.clear();const t=this._link.parent;t&&t.removeListener("child:delete",this._onParentChild)}}return W.FSWatcher=kt,W}var ue,he={};var le,fe,de={};var ye=(fe||(fe=1,function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.memfs=e.fs=e.vol=e.Volume=void 0,e.createFsFromVolume=l;const r=R(),o=L(),i=ce(),n=F(),s=(ue||(ue=1,Object.defineProperty(he,"__esModule",{value:!0}),he.fsSynchronousApiList=void 0,he.fsSynchronousApiList=["accessSync","appendFileSync","chmodSync","chownSync","closeSync","copyFileSync","existsSync","fchmodSync","fchownSync","fdatasyncSync","fstatSync","fsyncSync","ftruncateSync","futimesSync","lchmodSync","lchownSync","linkSync","lstatSync","mkdirSync","mkdtempSync","openSync","readdirSync","readFileSync","readlinkSync","readSync","readvSync","realpathSync","renameSync","rmdirSync","rmSync","statSync","symlinkSync","truncateSync","unlinkSync","utimesSync","lutimesSync","writeFileSync","writeSync","writevSync"]),he),a=(le||(le=1,Object.defineProperty(de,"__esModule",{value:!0}),de.fsCallbackApiList=void 0,de.fsCallbackApiList=["access","appendFile","chmod","chown","close","copyFile","createReadStream","createWriteStream","exists","fchmod","fchown","fdatasync","fstat","fsync","ftruncate","futimes","lchmod","lchown","link","lstat","mkdir","mkdtemp","open","read","readv","readdir","readFile","readlink","realpath","rename","rm","rmdir","stat","symlink","truncate","unlink","unwatchFile","utimes","lutimes","watch","watchFile","write","writev","writeFile"]),de),{F_OK:p,R_OK:c,W_OK:u,X_OK:h}=n.constants;function l(t){const e={F_OK:p,R_OK:c,W_OK:u,X_OK:h,constants:n.constants,Stats:r.default,Dirent:o.default};for(const r of s.fsSynchronousApiList)"function"==typeof t[r]&&(e[r]=t[r].bind(t));for(const r of a.fsCallbackApiList)"function"==typeof t[r]&&(e[r]=t[r].bind(t));return e.StatWatcher=t.StatWatcher,e.FSWatcher=t.FSWatcher,e.WriteStream=t.WriteStream,e.ReadStream=t.ReadStream,e.promises=t.promises,e._toUnixTimestamp=i.toUnixTimestamp,e.__vol=t,e}e.Volume=i.Volume,e.vol=new i.Volume,e.fs=l(e.vol),e.memfs=(t={},r="/")=>{const o=e.Volume.fromNestedJSON(t,r);return{fs:l(o),vol:o}},t.exports=Object.assign(Object.assign({},t.exports),e.fs),t.exports.semantic=!0}(S,S.exports)),S.exports);class ge extends t.NodeJSFileSystem{removeFile(t){throw new Error("Not implemented.")}symlink(t,e){throw new Error("Not implemented.")}copyFile(t,e){throw new Error("Not implemented.")}moveFile(t,e){throw new Error("Not implemented.")}chdir(t){throw new Error("Not implemented.")}removeDeep(){throw new Error("Not implemented")}}const me=n.join(process.cwd(),"../../../"),be=process.argv.includes("--vanilla-ts"),ve="1"===process.env.DEBUG_WORKER;let we=0;class _e extends ge{id=we++;_vol=new ye.Volume;_diskCwdSysPath=process.cwd();_virtualCwd=this.normalizePathFragmentToPosix(`/${n.relative(me,this._diskCwdSysPath)}`);constructor(t){super();for(const e of t)this.addFile(e)}resolve(...t){return u.resolve(this._virtualCwd,...t)}pwd(){return this._virtualCwd}readdir(t){return this._vol.readdirSync(t)}stat(t){return this._vol.statSync(t)}lstat(t){return this._vol.lstatSync(t)}addFile(t){if(this.exists(t))return;const e=u.dirname(t);this._vol.mkdirSync(e,{recursive:!0});const r=this.diskLstat(t);if(r?.isSymbolicLink()){const e=this.diskReadlink(t);this.addFile(e),this._vol.symlinkSync(e,t)}else r?.isDirectory()?this._vol.mkdirSync(t):this._vol.writeFileSync(t,"@@READ--FROM-DISK@@",{encoding:"utf8"})}readFile(t){return c.readFileSync(this.toDiskPath(t),{encoding:"utf8"})}writeFile(t,e,r){c.writeFileSync(this.toDiskPath(t),e,r?{flag:"wx"}:void 0)}ensureDir(t){c.mkdirSync(this.toDiskPath(t),{recursive:!0})}exists(t){return this._vol.existsSync(t)}realpath(t){return this._vol.realpathSync(this.resolve(t),{encoding:"utf8"})}diskLstat(t){try{return c.lstatSync(this.toDiskPath(t))}catch{return null}}diskReadlink(t){return this.fromDiskPath(c.readlinkSync(this.toDiskPath(t)))}toDiskPath(t){return n.resolve(n.join(me,t))}fromDiskPath(t){const e=n.relative(me,t),r=this.normalizePathFragmentToPosix(e);if(r.startsWith(".."))throw new Error(`Unexpected disk path that cannot be part of execroot: ${t}`);return`/${r}`}normalizePathFragmentToPosix(t){return t.replace(/\\/g,"/")}}const Se=/\.(css|html)$/;function Ee(t){return Se.test(t)}class Oe{program;lastInputs;constructor(t,e){this.program=t,this.lastInputs=e}}class Fe{rootNames;options;host;oldProgram;constructor(t,e,r,o){this.rootNames=t,this.options=e,this.host=r,this.oldProgram=o}}class Re extends Fe{_ngtscProgram=null;async init(){this._ngtscProgram=new t.NgtscProgram(this.rootNames,this.options,this.host,this.oldProgram instanceof Re?this.oldProgram._ngtscProgram??void 0:void 0),await this._ngtscProgram.loadNgStructureAsync()}getPreEmitDiagnostics(t){return o(this._ngtscProgram,"Expected ngtsc program to be initialized."),[...this._ngtscProgram.getTsSyntacticDiagnostics(void 0,t),...this._ngtscProgram.getTsSemanticDiagnostics(void 0,t),...this._ngtscProgram.getTsProgram().getGlobalDiagnostics(t),...this._ngtscProgram.getNgStructuralDiagnostics(t),...this._ngtscProgram.getNgSemanticDiagnostics(void 0,t)]}emit(t){return o(this._ngtscProgram,"Expected ngtsc program to be initialized."),this._ngtscProgram.emit({cancellationToken:t,forceEmit:!0})}isStructureReused(){return o(this._ngtscProgram,"Expected ngtsc program to be initialized."),(this._ngtscProgram?.getTsProgram()).structureIsReused}}class Te extends Fe{_tsProgram=null;async init(){this._tsProgram=e.createProgram({rootNames:this.rootNames,options:this.options,host:this.host,oldProgram:this.oldProgram instanceof Te?this.oldProgram._tsProgram??void 0:void 0})}getPreEmitDiagnostics(t){return o(this._tsProgram,"Expected TS program to be initialized."),[...this._tsProgram.getSyntacticDiagnostics(void 0,t),...this._tsProgram.getSemanticDiagnostics(void 0,t),...this._tsProgram.getGlobalDiagnostics(t)]}emit(t){return o(this._tsProgram,"Expected TS program to be initialized."),this._tsProgram.emit(void 0,void 0,t,!1,void 0)}isStructureReused(){return o(this._tsProgram,"Expected ngtsc program to be initialized."),this._tsProgram.structureIsReused}}var ke;!function(t){t[t.Not=0]="Not",t[t.SafeModules=1]="SafeModules",t[t.Completely=2]="Completely"}(ke||(ke={}));let Ae=0;async function Pe(r,i){const n=`${r[r.indexOf("--project")+1]} @ ${r[r.lastIndexOf("--outDir")+1]} @ ${r[r.lastIndexOf("--declarationDir")+1]} @ ${r[r.lastIndexOf("--rootDir")+1]}`,s=i?.programCache.get(n);let a=null;null!==i&&(a=new Map(i.req.inputs.map((t=>[`/${t.path}`,t.digest])))),console.error(r),console.error("Worker mode:",null!==a);const p=e.parseCommandLine(r),c=null!==a?new _e(Array.from(a.keys())):new t.NodeJSFileSystem;t.setFileSystem(c);const u=void 0!==s&&null!==a?function(t,e){const r=new Set;for(const[o,i]of t.entries()){if(!Ee(o))continue;const t=e.get(o);void 0!==t&&g(i,t)&&e.has(o)||r.add(o)}for(const o of e.keys())Ee(o)&&(t.has(o)||r.add(o));return r}(a,s.lastInputs):null;null!==i&&(o(a,"Expected inputs when using persistent file cache."),i.fileCache.updateCache(a));const d=t.readConfiguration(p.options.project,p.options,c),y=d.options,m={getCanonicalFileName:t=>t,getCurrentDirectory:()=>c.pwd(),getNewLine:()=>"\n"};if(d.errors.length)return console.error("Config parsing errors:\n"),console.error(e.formatDiagnosticsWithColorAndContext(d.errors,m)),1;let b;b=null!==i?function(r,o,i,n){const s=new t.NgtscCompilerHost(i,r),a=s.getSourceFile,p=s.getDefaultLibLocation?.();if(void 0===p)throw new Error("Could not determine default TypeScript lib location.");return null!==n&&(s.getModifiedResourceFiles=()=>n),s.readResource=t=>{const e=o.getCache(t);if(void 0!==e&&"string"==typeof e)return e;const r=i.readFile(i.resolve(t));if(void 0===r)throw new Error(`Could not read resource file: ${t}`);const n=o.getLastDigest(t);if(void 0===n)throw new Error(`No digest found for resource file: ${t}`);return o.putCache(t,{digest:n,value:r}),r},s.getSourceFile=function(t,r,i,n){const s=o.getCache(t);if(void 0!==s&&"string"!=typeof s)return s;const c=void 0!==p&&t.startsWith(p);let u;if(c){let o=f.relative(p,t);if(!h.existsSync(o))try{o=l.createRequire(import.meta.url).resolve(`typescript/lib/${f.basename(t)}`)}catch{throw Error(`Cannot find ${t} directly or within typescript/lib`)}u=e.createSourceFile(t,h.readFileSync(o,"utf8"),r,!1)}else u=a.call(this,t,r,i,n);if(void 0!==u){const e=c?new Uint8Array:o.getLastDigest(t);if(void 0===e)throw new Error(`No digest found for source file: ${t}`);o.putCache(t,{digest:e,value:u})}return u},s}(y,i.fileCache,c,u):new t.NgtscCompilerHost(c,y);const v=new(be?Te:Re)(d.rootNames,y,b,s?.program);null!==a&&(void 0!==s?(s.program=v,s.lastInputs=a):i?.programCache.set(n,new Oe(v,a)));const w=null!==i?(_=i.req.signal,{isCancellationRequested:()=>_.aborted,throwIfCancellationRequested:()=>{if(_.aborted)throw new Error(_.reason)}}):void 0;var _;await v.init(),ve&&(console.error("Worker re-use, number of previous runs: "+Ae++),console.error(`Re-using program & host: ${!!s}`),console.error(`Vanilla TS: ${be}`),console.error(`Modified resources: ${u?.size}`),console.error("Structure reused",ke[v.isStructureReused()]));const S=v.getPreEmitDiagnostics(w);if(0!==S.length)return console.error("Pre-emit diagnostics:\n"),console.error(e.formatDiagnosticsWithColorAndContext(S,m)),1;const E=v.emit(w);return 0!==E.diagnostics.length?(console.error("Emit diagnostics:\n"),console.error(e.formatDiagnosticsWithColorAndContext(E.diagnostics,m)),1):E.emitSkipped?1:0}var Ne,Ie={};var Ce=b(function(){if(Ne)return Ie;Ne=1,Object.defineProperty(Ie,"__esModule",{value:!0});var t=a,e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},e(t,r)};function r(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function o(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}function o(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,r=t[Symbol.asyncIterator];return r?r.call(t):(t=function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],o=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&o>=t.length&&(t=void 0),{value:t&&t[o++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}(t),e={},o("next"),o("throw"),o("return"),e[Symbol.asyncIterator]=function(){return this},e);function o(r){e[r]=t[r]&&function(e){return new Promise((function(o,i){!function(t,e,r,o){Promise.resolve(o).then((function(e){t({value:e,done:r})}),e)}(o,i,(e=t[r](e)).done,e.value)}))}}}function i(t,e,r,o){if("a"===r&&!o)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?o:"a"===r?o.call(t):o?o.value:e.get(t)}"function"==typeof SuppressedError&&SuppressedError;var n="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==m?m:"undefined"!=typeof self?self:{};!function(){function t(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function e(t,e,r){return e&&function(t,e){for(var r=0;r<e.length;r++){var o=e[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),t}function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&i(t,e)}function o(t){return o=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},o(t)}function i(t,e){return i=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},i(t,e)}function s(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function a(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,i=o(t);if(e){var n=o(this).constructor;r=Reflect.construct(i,arguments,n)}else r=i.apply(this,arguments);return function(t,e){if(e&&("object"==typeof e||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return s(t)}(this,r)}}function p(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=o(t)););return t}function c(){return c="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var o=p(t,e);if(o){var i=Object.getOwnPropertyDescriptor(o,e);return i.get?i.get.call(arguments.length<3?t:r):i.value}},c.apply(this,arguments)}var u=function(){function r(){t(this,r),Object.defineProperty(this,"listeners",{value:{},writable:!0,configurable:!0})}return e(r,[{key:"addEventListener",value:function(t,e,r){t in this.listeners||(this.listeners[t]=[]),this.listeners[t].push({callback:e,options:r})}},{key:"removeEventListener",value:function(t,e){if(t in this.listeners)for(var r=this.listeners[t],o=0,i=r.length;o<i;o++)if(r[o].callback===e)return void r.splice(o,1)}},{key:"dispatchEvent",value:function(t){if(t.type in this.listeners){for(var e=this.listeners[t.type].slice(),r=0,o=e.length;r<o;r++){var i=e[r];try{i.callback.call(this,t)}catch(t){Promise.resolve().then((function(){throw t}))}i.options&&i.options.once&&this.removeEventListener(t.type,i.callback)}return!t.defaultPrevented}}}]),r}(),h=function(i){r(p,i);var n=a(p);function p(){var e;return t(this,p),(e=n.call(this)).listeners||u.call(s(e)),Object.defineProperty(s(e),"aborted",{value:!1,writable:!0,configurable:!0}),Object.defineProperty(s(e),"onabort",{value:null,writable:!0,configurable:!0}),Object.defineProperty(s(e),"reason",{value:void 0,writable:!0,configurable:!0}),e}return e(p,[{key:"toString",value:function(){return"[object AbortSignal]"}},{key:"dispatchEvent",value:function(t){"abort"===t.type&&(this.aborted=!0,"function"==typeof this.onabort&&this.onabort.call(this,t)),c(o(p.prototype),"dispatchEvent",this).call(this,t)}}]),p}(u),l=function(){function r(){t(this,r),Object.defineProperty(this,"signal",{value:new h,writable:!0,configurable:!0})}return e(r,[{key:"abort",value:function(t){var e;try{e=new Event("abort")}catch(t){"undefined"!=typeof document?document.createEvent?(e=document.createEvent("Event")).initEvent("abort",!1,!1):(e=document.createEventObject()).type="abort":e={type:"abort",bubbles:!1,cancelable:!1}}var r=t;if(void 0===r)if("undefined"==typeof document)(r=new Error("This operation was aborted")).name="AbortError";else try{r=new DOMException("signal is aborted without reason")}catch(t){(r=new Error("This operation was aborted")).name="AbortError"}this.signal.reason=r,this.signal.dispatchEvent(e)}},{key:"toString",value:function(){return"[object AbortController]"}}]),r}();"undefined"!=typeof Symbol&&Symbol.toStringTag&&(l.prototype[Symbol.toStringTag]="AbortController",h.prototype[Symbol.toStringTag]="AbortSignal"),function(t){(function(t){return t.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL?(console.log("__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill"),!0):"function"==typeof t.Request&&!t.Request.prototype.hasOwnProperty("signal")||!t.AbortController})(t)&&(t.AbortController=l,t.AbortSignal=h)}("undefined"!=typeof self?self:n)}();var s,p={};return function(t){var e="function"==typeof Object.defineProperties?Object.defineProperty:function(t,e,r){t!=Array.prototype&&t!=Object.prototype&&(t[e]=r.value)},r=n;function o(){o=function(){},r.Symbol||(r.Symbol=a)}function i(t,r){this.a=t,e(this,"description",{configurable:!0,writable:!0,value:r})}i.prototype.toString=function(){return this.a};var s,a=(s=0,function t(e){if(this instanceof t)throw new TypeError("Symbol is not a constructor");return new i("jscomp_symbol_"+(e||"")+"_"+s++,e)});function p(){o();var t=r.Symbol.iterator;t||(t=r.Symbol.iterator=r.Symbol("Symbol.iterator")),"function"!=typeof Array.prototype[t]&&e(Array.prototype,t,{configurable:!0,writable:!0,value:function(){return function(t){return p(),(t={next:t})[r.Symbol.iterator]=function(){return this},t}(function(t){var e=0;return function(){return e<t.length?{done:!1,value:t[e++]}:{done:!0}}}(this))}}),p=function(){}}!function(t,o){if(o){var i=r;t=t.split(".");for(var n=0;n<t.length-1;n++){var s=t[n];s in i||(i[s]={}),i=i[s]}(o=o(n=i[t=t[t.length-1]]))!=n&&null!=o&&e(i,t,{configurable:!0,writable:!0,value:o})}}("Array.prototype.entries",(function(t){return t||function(){return function(t,e){p(),t instanceof String&&(t+="");var r=0,o={next:function(){if(r<t.length){var i=r++;return{value:e(i,t[i]),done:!1}}return o.next=function(){return{done:!0,value:void 0}},o.next()}};return o[Symbol.iterator]=function(){return o},o}(this,(function(t,e){return[t,e]}))}}));var c=n||self;function u(t,e,r){t=t.split("."),r=r||c,t[0]in r||void 0===r.execScript||r.execScript("var "+t[0]);for(var o;t.length&&(o=t.shift());)t.length||void 0===e?r=r[o]&&r[o]!==Object.prototype[o]?r[o]:r[o]={}:r[o]=e}function h(t){var e=typeof t;if("object"==e){if(!t)return"null";if(t instanceof Array)return"array";if(t instanceof Object)return e;var r=Object.prototype.toString.call(t);if("[object Window]"==r)return"object";if("[object Array]"==r||"number"==typeof t.length&&void 0!==t.splice&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("splice"))return"array";if("[object Function]"==r||void 0!==t.call&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("call"))return"function"}else if("function"==e&&void 0===t.call)return"object";return e}function l(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}var f="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" "),d=Array.prototype.forEach?function(t,e){Array.prototype.forEach.call(t,e,void 0)}:function(t,e){for(var r=t.length,o="string"==typeof t?t.split(""):t,i=0;i<r;i++)i in o&&e.call(void 0,o[i],i,t)},y=Array.prototype.map?function(t,e){return Array.prototype.map.call(t,e,void 0)}:function(t,e){for(var r=t.length,o=Array(r),i="string"==typeof t?t.split(""):t,n=0;n<r;n++)n in i&&(o[n]=e.call(void 0,i[n],n,t));return o};function g(t,e,r){return 2>=arguments.length?Array.prototype.slice.call(t,e):Array.prototype.slice.call(t,e,r)}function m(t,e,r,o){var i="Assertion failed";if(r){i+=": "+r;var n=o}else t&&(i+=": "+t,n=e);throw Error(i,n||[])}function b(t,e,r){for(var o=[],i=2;i<arguments.length;++i)o[i-2]=arguments[i];return t||m("",null,e,o),t}function v(t,e){for(var r=[],o=1;o<arguments.length;++o)r[o-1]=arguments[o];throw Error("Failure"+(t?": "+t:""),r)}function w(t,e,r,o){for(var i=[],n=3;n<arguments.length;++n)i[n-3]=arguments[n];t instanceof e||m("Expected instanceof %s but got %s.",[_(e),_(t)],r,i)}function _(t){return t instanceof Function?t.displayName||t.name||"unknown type name":t instanceof Object?t.constructor.displayName||t.constructor.name||Object.prototype.toString.call(t):null===t?"null":typeof t}function S(t,e){if(this.c=t,this.b=e,this.a={},this.arrClean=!0,0<this.c.length){for(t=0;t<this.c.length;t++){var r=(e=this.c[t])[0];this.a[r.toString()]=new R(r,e[1])}this.arrClean=!0}}function E(t){this.a=0,this.b=t}function O(t,e){return t.b?(e.a||(e.a=new t.b(e.value)),e.a):e.value}function F(t){t=t.a;var e,r=[];for(e in t)Object.prototype.hasOwnProperty.call(t,e)&&r.push(e);return r}function R(t,e){this.key=t,this.value=e,this.a=void 0}function T(t){if(8192>=t.length)return String.fromCharCode.apply(null,t);for(var e="",r=0;r<t.length;r+=8192)e+=String.fromCharCode.apply(null,g(t,r,r+8192));return e}u("jspb.Map",S,void 0),S.prototype.g=function(){if(this.arrClean){if(this.b){var t,e=this.a;for(t in e)if(Object.prototype.hasOwnProperty.call(e,t)){var r=e[t].a;r&&r.g()}}}else{for(this.c.length=0,(e=F(this)).sort(),t=0;t<e.length;t++){var o=this.a[e[t]];(r=o.a)&&r.g(),this.c.push([o.key,o.value])}this.arrClean=!0}return this.c},S.prototype.toArray=S.prototype.g,S.prototype.Mc=function(t,e){for(var r=this.g(),o=[],i=0;i<r.length;i++){var n=this.a[r[i][0].toString()];O(this,n);var s=n.a;s?(b(e),o.push([n.key,e(t,s)])):o.push([n.key,n.value])}return o},S.prototype.toObject=S.prototype.Mc,S.fromObject=function(t,e,r){e=new S([],e);for(var o=0;o<t.length;o++){var i=t[o][0],n=r(t[o][1]);e.set(i,n)}return e},E.prototype.next=function(){return this.a<this.b.length?{done:!1,value:this.b[this.a++]}:{done:!0,value:void 0}},"undefined"!=typeof Symbol&&(E.prototype[Symbol.iterator]=function(){return this}),S.prototype.Jb=function(){return F(this).length},S.prototype.getLength=S.prototype.Jb,S.prototype.clear=function(){this.a={},this.arrClean=!1},S.prototype.clear=S.prototype.clear,S.prototype.Cb=function(t){t=t.toString();var e=this.a.hasOwnProperty(t);return delete this.a[t],this.arrClean=!1,e},S.prototype.del=S.prototype.Cb,S.prototype.Eb=function(){var t=[],e=F(this);e.sort();for(var r=0;r<e.length;r++){var o=this.a[e[r]];t.push([o.key,o.value])}return t},S.prototype.getEntryList=S.prototype.Eb,S.prototype.entries=function(){var t=[],e=F(this);e.sort();for(var r=0;r<e.length;r++){var o=this.a[e[r]];t.push([o.key,O(this,o)])}return new E(t)},S.prototype.entries=S.prototype.entries,S.prototype.keys=function(){var t=[],e=F(this);e.sort();for(var r=0;r<e.length;r++)t.push(this.a[e[r]].key);return new E(t)},S.prototype.keys=S.prototype.keys,S.prototype.values=function(){var t=[],e=F(this);e.sort();for(var r=0;r<e.length;r++)t.push(O(this,this.a[e[r]]));return new E(t)},S.prototype.values=S.prototype.values,S.prototype.forEach=function(t,e){var r=F(this);r.sort();for(var o=0;o<r.length;o++){var i=this.a[r[o]];t.call(e,O(this,i),i.key,this)}},S.prototype.forEach=S.prototype.forEach,S.prototype.set=function(t,e){var r=new R(t);return this.b?(r.a=e,r.value=e.g()):r.value=e,this.a[t.toString()]=r,this.arrClean=!1,this},S.prototype.set=S.prototype.set,S.prototype.get=function(t){if(t=this.a[t.toString()])return O(this,t)},S.prototype.get=S.prototype.get,S.prototype.has=function(t){return t.toString()in this.a},S.prototype.has=S.prototype.has,S.prototype.Jc=function(t,e,r,o,i){var n=F(this);n.sort();for(var s=0;s<n.length;s++){var a=this.a[n[s]];e.Va(t),r.call(e,1,a.key),this.b?o.call(e,2,O(this,a),i):o.call(e,2,a.value),e.Ya()}},S.prototype.serializeBinary=S.prototype.Jc,S.deserializeBinary=function(t,e,r,o,i,n,s){for(;e.oa()&&!e.bb();){var a=e.c;1==a?n=r.call(e):2==a&&(t.b?(b(i),s||(s=new t.b),o.call(e,s,i)):s=o.call(e))}b(null!=n),b(null!=s),t.set(n,s)};var k={"\0":"\\0","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\x0B",'"':'\\"',"\\":"\\\\","<":"\\u003C"},A={"'":"\\'"},P={},N=null;function I(t,e){void 0===e&&(e=0),B(),e=P[e];for(var r=[],o=0;o<t.length;o+=3){var i=t[o],n=o+1<t.length,s=n?t[o+1]:0,a=o+2<t.length,p=a?t[o+2]:0,c=i>>2;i=(3&i)<<4|s>>4,s=(15&s)<<2|p>>6,p&=63,a||(p=64,n||(s=64)),r.push(e[c],e[i],e[s]||"",e[p]||"")}return r.join("")}function C(t){var e=t.length,r=3*e/4;r%3?r=Math.floor(r):-1!="=.".indexOf(t[e-1])&&(r=-1!="=.".indexOf(t[e-2])?r-2:r-1);var o=new Uint8Array(r),i=0;return function(t,e){function r(e){for(;o<t.length;){var r=t.charAt(o++),i=N[r];if(null!=i)return i;if(!/^[\s\xa0]*$/.test(r))throw Error("Unknown base64 encoding at char: "+r)}return e}B();for(var o=0;;){var i=r(-1),n=r(0),s=r(64),a=r(64);if(64===a&&-1===i)break;e(i<<2|n>>4),64!=s&&(e(n<<4&240|s>>2),64!=a&&e(s<<6&192|a))}}(t,(function(t){o[i++]=t})),o.subarray(0,i)}function B(){if(!N){N={};for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),e=["+/=","+/","-_=","-_.","-_"],r=0;5>r;r++){var o=t.concat(e[r].split(""));P[r]=o;for(var i=0;i<o.length;i++){var n=o[i];void 0===N[n]&&(N[n]=i)}}}}u("jspb.ConstBinaryMessage",(function(){}),void 0),u("jspb.BinaryMessage",(function(){}),void 0),u("jspb.BinaryConstants.FieldType",{yb:-1,ee:1,FLOAT:2,ke:3,te:4,je:5,xb:6,wb:7,BOOL:8,re:9,ie:10,le:11,ce:12,se:13,ge:14,me:15,ne:16,oe:17,pe:18,he:30,ve:31},void 0),u("jspb.BinaryConstants.WireType",{yb:-1,ue:0,xb:1,de:2,qe:3,fe:4,wb:5},void 0),u("jspb.BinaryConstants.FieldTypeToWireType",(function(t){switch(t){case 5:case 3:case 13:case 4:case 17:case 18:case 8:case 14:case 31:return 0;case 1:case 6:case 16:case 30:return 1;case 9:case 11:case 12:return 2;case 2:case 7:case 15:return 5;default:return-1}}),void 0),u("jspb.BinaryConstants.INVALID_FIELD_NUMBER",-1,void 0),u("jspb.BinaryConstants.FLOAT32_EPS",1401298464324817e-60,void 0),u("jspb.BinaryConstants.FLOAT32_MIN",11754943508222875e-54,void 0),u("jspb.BinaryConstants.FLOAT32_MAX",34028234663852886e22,void 0),u("jspb.BinaryConstants.FLOAT64_EPS",5e-324,void 0),u("jspb.BinaryConstants.FLOAT64_MIN",22250738585072014e-324,void 0),u("jspb.BinaryConstants.FLOAT64_MAX",17976931348623157e292,void 0),u("jspb.BinaryConstants.TWO_TO_20",1048576,void 0),u("jspb.BinaryConstants.TWO_TO_23",8388608,void 0),u("jspb.BinaryConstants.TWO_TO_31",2147483648,void 0),u("jspb.BinaryConstants.TWO_TO_32",4294967296,void 0),u("jspb.BinaryConstants.TWO_TO_52",4503599627370496,void 0),u("jspb.BinaryConstants.TWO_TO_63",0x8000000000000000,void 0),u("jspb.BinaryConstants.TWO_TO_64",0x10000000000000000,void 0),u("jspb.BinaryConstants.ZERO_HASH","\0\0\0\0\0\0\0\0",void 0);var x=0,j=0;function D(t){var e=t>>>0;t=Math.floor((t-e)/4294967296)>>>0,x=e,j=t}function L(t){var e=0>t,r=(t=Math.abs(t))>>>0;t=Math.floor((t-r)/4294967296),t>>>=0,e&&(t=~t>>>0,4294967295<(r=1+(~r>>>0))&&(r=0,4294967295<++t&&(t=0))),x=r,j=t}function M(t){var e=0>t;D(t=2*Math.abs(t)),t=x;var r=j;e&&(0==t?0==r?r=t=4294967295:(r--,t=4294967295):t--),x=t,j=r}function U(t){var e=0>t?1:0;if(0===(t=e?-t:t))0<1/t?x=j=0:(j=0,x=2147483648);else if(isNaN(t))j=0,x=2147483647;else if(34028234663852886e22<t)j=0,x=(e<<31|2139095040)>>>0;else if(11754943508222875e-54>t)t=Math.round(t/Math.pow(2,-149)),j=0,x=(e<<31|t)>>>0;else{var r=Math.floor(Math.log(t)/Math.LN2);t*=Math.pow(2,-r),16777216<=(t=Math.round(8388608*t))&&++r,j=0,x=(e<<31|r+127<<23|8388607&t)>>>0}}function W(t){var e=0>t?1:0;if(0===(t=e?-t:t))j=0<1/t?0:2147483648,x=0;else if(isNaN(t))j=2147483647,x=4294967295;else if(17976931348623157e292<t)j=(e<<31|2146435072)>>>0,x=0;else if(22250738585072014e-324>t)t/=Math.pow(2,-1074),j=(e<<31|t/4294967296)>>>0,x=t>>>0;else{var r=t,o=0;if(2<=r)for(;2<=r&&1023>o;)o++,r/=2;else for(;1>r&&-1022<o;)r*=2,o--;t*=Math.pow(2,-o),j=(e<<31|o+1023<<20|1048576*t&1048575)>>>0,x=4503599627370496*t>>>0}}function $(t){var e=t.charCodeAt(4),r=t.charCodeAt(5),o=t.charCodeAt(6),i=t.charCodeAt(7);x=t.charCodeAt(0)+(t.charCodeAt(1)<<8)+(t.charCodeAt(2)<<16)+(t.charCodeAt(3)<<24)>>>0,j=e+(r<<8)+(o<<16)+(i<<24)>>>0}function V(t,e){return 4294967296*e+(t>>>0)}function z(t,e){var r=2147483648&e;return r&&(e=~e>>>0,0==(t=1+~t>>>0)&&(e=e+1>>>0)),t=V(t,e),r?-t:t}function G(t,e,r){var o=e>>31;return r(t<<1^o,(e<<1|t>>>31)^o)}function H(t,e){return q(t,e,z)}function q(t,e,r){var o=-(1&t);return r((t>>>1|e<<31)^o,e>>>1^o)}function K(t){var e=2*(t>>31)+1,r=t>>>23&255;return t&=8388607,255==r?t?NaN:1/0*e:0==r?e*Math.pow(2,-149)*t:e*Math.pow(2,r-150)*(t+Math.pow(2,23))}function Y(t,e){var r=2*(e>>31)+1,o=e>>>20&2047;return t=4294967296*(1048575&e)+t,2047==o?t?NaN:1/0*r:0==o?r*Math.pow(2,-1074)*t:r*Math.pow(2,o-1075)*(t+4503599627370496)}function J(t,e){return String.fromCharCode(t>>>0&255,t>>>8&255,t>>>16&255,t>>>24&255,e>>>0&255,e>>>8&255,e>>>16&255,e>>>24&255)}function X(t,e){function r(t,e){return t=t?String(t):"",e?"0000000".slice(t.length)+t:t}if(2097151>=e)return""+V(t,e);var o=(t>>>24|e<<8)>>>0&16777215;return t=(16777215&t)+6777216*o+6710656*(e=e>>16&65535),o+=8147497*e,e*=2,1e7<=t&&(o+=Math.floor(t/1e7),t%=1e7),1e7<=o&&(e+=Math.floor(o/1e7),o%=1e7),r(e,0)+r(o,e)+r(t,1)}function Z(t,e){var r=2147483648&e;return r&&(e=~e+(0==(t=1+~t>>>0)?1:0)>>>0),t=X(t,e),r?"-"+t:t}function Q(t,e){$(t),t=x;var r=j;return e?Z(t,r):X(t,r)}function tt(t){function e(t,e){for(var r=0;8>r&&(1!==t||0<e);r++)e=t*o[r]+e,o[r]=255&e,e>>>=8}b(0<t.length);var r=!1;"-"===t[0]&&(r=!0,t=t.slice(1));for(var o=[0,0,0,0,0,0,0,0],i=0;i<t.length;i++)e(10,t.charCodeAt(i)-48);return r&&(function(){for(var t=0;8>t;t++)o[t]=255&~o[t]}(),e(1,1)),T(o)}function et(t){return String.fromCharCode(10>t?48+t:87+t)}function rt(t){return 97<=t?t-97+10:t-48}function ot(t,e,r,o,i){var n=0;if(128>o)for(;e<r&&t[e++]==o;)n++,e+=i;else for(;e<r;){for(var s=o;128<s;){if(t[e++]!=(127&s|128))return n;s>>=7}if(t[e++]!=s)break;n++,e+=i}return n}function it(t){return t.constructor===Uint8Array?t:t.constructor===ArrayBuffer||t.constructor===Array?new Uint8Array(t):t.constructor===String?C(t):t instanceof Uint8Array?new Uint8Array(t.buffer,t.byteOffset,t.byteLength):(v("Type not convertible to Uint8Array."),new Uint8Array(0))}function nt(t,e,r){this.b=null,this.a=this.c=this.h=0,this.v=!1,t&&this.H(t,e,r)}u("jspb.utils.getSplit64Low",(function(){return x}),void 0),u("jspb.utils.getSplit64High",(function(){return j}),void 0),u("jspb.utils.splitUint64",D,void 0),u("jspb.utils.splitInt64",L,void 0),u("jspb.utils.splitZigzag64",M,void 0),u("jspb.utils.splitFloat32",U,void 0),u("jspb.utils.splitFloat64",W,void 0),u("jspb.utils.splitHash64",$,void 0),u("jspb.utils.joinUint64",V,void 0),u("jspb.utils.joinInt64",z,void 0),u("jspb.utils.toZigzag64",G,void 0),u("jspb.utils.joinZigzag64",H,void 0),u("jspb.utils.fromZigzag64",q,void 0),u("jspb.utils.joinFloat32",K,void 0),u("jspb.utils.joinFloat64",Y,void 0),u("jspb.utils.joinHash64",J,void 0),u("jspb.utils.DIGITS","0123456789abcdef".split(""),void 0),u("jspb.utils.joinUnsignedDecimalString",X,void 0),u("jspb.utils.joinSignedDecimalString",Z,void 0),u("jspb.utils.hash64ToDecimalString",Q,void 0),u("jspb.utils.hash64ArrayToDecimalStrings",(function(t,e){for(var r=Array(t.length),o=0;o<t.length;o++)r[o]=Q(t[o],e);return r}),void 0),u("jspb.utils.decimalStringToHash64",tt,void 0),u("jspb.utils.splitDecimalString",(function(t){$(tt(t))}),void 0),u("jspb.utils.hash64ToHexString",(function(t){var e=Array(18);e[0]="0",e[1]="x";for(var r=0;8>r;r++){var o=t.charCodeAt(7-r);e[2*r+2]=et(o>>4),e[2*r+3]=et(15&o)}return e.join("")}),void 0),u("jspb.utils.hexStringToHash64",(function(t){b(18==(t=t.toLowerCase()).length),b("0"==t[0]),b("x"==t[1]);for(var e="",r=0;8>r;r++)e=String.fromCharCode(16*rt(t.charCodeAt(2*r+2))+rt(t.charCodeAt(2*r+3)))+e;return e}),void 0),u("jspb.utils.hash64ToNumber",(function(t,e){$(t),t=x;var r=j;return e?z(t,r):V(t,r)}),void 0),u("jspb.utils.numberToHash64",(function(t){return L(t),J(x,j)}),void 0),u("jspb.utils.countVarints",(function(t,e,r){for(var o=0,i=e;i<r;i++)o+=t[i]>>7;return r-e-o}),void 0),u("jspb.utils.countVarintFields",(function(t,e,r,o){var i=0;if(128>(o*=8))for(;e<r&&t[e++]==o;)for(i++;;){var n=t[e++];if(!(128&n))break}else for(;e<r;){for(n=o;128<n;){if(t[e]!=(127&n|128))return i;e++,n>>=7}if(t[e++]!=n)break;for(i++;128&(n=t[e++]););}return i}),void 0),u("jspb.utils.countFixed32Fields",(function(t,e,r,o){return ot(t,e,r,8*o+5,4)}),void 0),u("jspb.utils.countFixed64Fields",(function(t,e,r,o){return ot(t,e,r,8*o+1,8)}),void 0),u("jspb.utils.countDelimitedFields",(function(t,e,r,o){var i=0;for(o=8*o+2;e<r;){for(var n=o;128<n;){if(t[e++]!=(127&n|128))return i;n>>=7}if(t[e++]!=n)break;i++;for(var s=0,a=1;s+=(127&(n=t[e++]))*a,a*=128,128&n;);e+=s}return i}),void 0),u("jspb.utils.debugBytesToTextFormat",(function(t){var e='"';if(t){t=it(t);for(var r=0;r<t.length;r++)e+="\\x",16>t[r]&&(e+="0"),e+=t[r].toString(16)}return e+'"'}),void 0),u("jspb.utils.debugScalarToTextFormat",(function(t){if("string"==typeof t){t=String(t);for(var e=['"'],r=0;r<t.length;r++){var o,i=t.charAt(r),n=i.charCodeAt(0),s=r+1;(o=k[i])||(31<n&&127>n||((n=i)in A?i=A[n]:n in k?i=A[n]=k[n]:(31<(o=n.charCodeAt(0))&&127>o?i=n:(256>o?(i="\\x",(16>o||256<o)&&(i+="0")):(i="\\u",4096>o&&(i+="0")),i+=o.toString(16).toUpperCase()),i=A[n]=i)),o=i),e[s]=o}e.push('"'),t=e.join("")}else t=t.toString();return t}),void 0),u("jspb.utils.stringToByteArray",(function(t){for(var e=new Uint8Array(t.length),r=0;r<t.length;r++){var o=t.charCodeAt(r);if(255<o)throw Error("Conversion error: string contains codepoint outside of byte range");e[r]=o}return e}),void 0),u("jspb.utils.byteSourceToUint8Array",it,void 0),u("jspb.BinaryDecoder",nt,void 0);var st=[];function at(t,e,r){if(st.length){var o=st.pop();return t&&o.H(t,e,r),o}return new nt(t,e,r)}function pt(t,e,r){this.a=at(t,e,r),this.O=this.a.B(),this.b=this.c=-1,this.h=!1,this.v=null}nt.getInstanceCacheLength=function(){return st.length},nt.alloc=at,nt.prototype.Ca=function(){this.clear(),100>st.length&&st.push(this)},nt.prototype.free=nt.prototype.Ca,nt.prototype.clone=function(){return at(this.b,this.h,this.c-this.h)},nt.prototype.clone=nt.prototype.clone,nt.prototype.clear=function(){this.b=null,this.a=this.c=this.h=0,this.v=!1},nt.prototype.clear=nt.prototype.clear,nt.prototype.Y=function(){return this.b},nt.prototype.getBuffer=nt.prototype.Y,nt.prototype.H=function(t,e,r){this.b=it(t),this.h=void 0!==e?e:0,this.c=void 0!==r?this.h+r:this.b.length,this.a=this.h},nt.prototype.setBlock=nt.prototype.H,nt.prototype.Db=function(){return this.c},nt.prototype.getEnd=nt.prototype.Db,nt.prototype.setEnd=function(t){this.c=t},nt.prototype.setEnd=nt.prototype.setEnd,nt.prototype.reset=function(){this.a=this.h},nt.prototype.reset=nt.prototype.reset,nt.prototype.B=function(){return this.a},nt.prototype.getCursor=nt.prototype.B,nt.prototype.Ma=function(t){this.a=t},nt.prototype.setCursor=nt.prototype.Ma,nt.prototype.advance=function(t){this.a+=t,b(this.a<=this.c)},nt.prototype.advance=nt.prototype.advance,nt.prototype.ya=function(){return this.a==this.c},nt.prototype.atEnd=nt.prototype.ya,nt.prototype.Qb=function(){return this.a>this.c},nt.prototype.pastEnd=nt.prototype.Qb,nt.prototype.getError=function(){return this.v||0>this.a||this.a>this.c},nt.prototype.getError=nt.prototype.getError,nt.prototype.w=function(t){for(var e=128,r=0,o=0,i=0;4>i&&128<=e;i++)r|=(127&(e=this.b[this.a++]))<<7*i;if(128<=e&&(r|=(127&(e=this.b[this.a++]))<<28,o|=(127&e)>>4),128<=e)for(i=0;5>i&&128<=e;i++)o|=(127&(e=this.b[this.a++]))<<7*i+3;if(128>e)return t(r>>>0,o>>>0);v("Failed to read varint, encoding is invalid."),this.v=!0},nt.prototype.readSplitVarint64=nt.prototype.w,nt.prototype.ea=function(t){return this.w((function(e,r){return q(e,r,t)}))},nt.prototype.readSplitZigzagVarint64=nt.prototype.ea,nt.prototype.ta=function(t){var e=this.b,r=this.a;this.a+=8;for(var o=0,i=0,n=r+7;n>=r;n--)o=o<<8|e[n],i=i<<8|e[n+4];return t(o,i)},nt.prototype.readSplitFixed64=nt.prototype.ta,nt.prototype.kb=function(){for(;128&this.b[this.a];)this.a++;this.a++},nt.prototype.skipVarint=nt.prototype.kb,nt.prototype.mb=function(t){for(;128<t;)this.a--,t>>>=7;this.a--},nt.prototype.unskipVarint=nt.prototype.mb,nt.prototype.o=function(){var t=this.b,e=t[this.a],r=127&e;return 128>e?(this.a+=1,b(this.a<=this.c),r):(r|=(127&(e=t[this.a+1]))<<7,128>e?(this.a+=2,b(this.a<=this.c),r):(r|=(127&(e=t[this.a+2]))<<14,128>e?(this.a+=3,b(this.a<=this.c),r):(r|=(127&(e=t[this.a+3]))<<21,128>e?(this.a+=4,b(this.a<=this.c),r):(r|=(15&(e=t[this.a+4]))<<28,128>e?(this.a+=5,b(this.a<=this.c),r>>>0):(this.a+=5,128<=t[this.a++]&&128<=t[this.a++]&&128<=t[this.a++]&&128<=t[this.a++]&&128<=t[this.a++]&&b(!1),b(this.a<=this.c),r)))))},nt.prototype.readUnsignedVarint32=nt.prototype.o,nt.prototype.da=function(){return~~this.o()},nt.prototype.readSignedVarint32=nt.prototype.da,nt.prototype.O=function(){return this.o().toString()},nt.prototype.Ea=function(){return this.da().toString()},nt.prototype.readSignedVarint32String=nt.prototype.Ea,nt.prototype.Ia=function(){var t=this.o();return t>>>1^-(1&t)},nt.prototype.readZigzagVarint32=nt.prototype.Ia,nt.prototype.Ga=function(){return this.w(V)},nt.prototype.readUnsignedVarint64=nt.prototype.Ga,nt.prototype.Ha=function(){return this.w(X)},nt.prototype.readUnsignedVarint64String=nt.prototype.Ha,nt.prototype.sa=function(){return this.w(z)},nt.prototype.readSignedVarint64=nt.prototype.sa,nt.prototype.Fa=function(){return this.w(Z)},nt.prototype.readSignedVarint64String=nt.prototype.Fa,nt.prototype.Ja=function(){return this.w(H)},nt.prototype.readZigzagVarint64=nt.prototype.Ja,nt.prototype.fb=function(){return this.ea(J)},nt.prototype.readZigzagVarintHash64=nt.prototype.fb,nt.prototype.Ka=function(){return this.ea(Z)},nt.prototype.readZigzagVarint64String=nt.prototype.Ka,nt.prototype.Gc=function(){var t=this.b[this.a];return this.a+=1,b(this.a<=this.c),t},nt.prototype.readUint8=nt.prototype.Gc,nt.prototype.Ec=function(){var t=this.b[this.a],e=this.b[this.a+1];return this.a+=2,b(this.a<=this.c),t|e<<8},nt.prototype.readUint16=nt.prototype.Ec,nt.prototype.m=function(){var t=this.b[this.a],e=this.b[this.a+1],r=this.b[this.a+2],o=this.b[this.a+3];return this.a+=4,b(this.a<=this.c),(t|e<<8|r<<16|o<<24)>>>0},nt.prototype.readUint32=nt.prototype.m,nt.prototype.ga=function(){return V(this.m(),this.m())},nt.prototype.readUint64=nt.prototype.ga,nt.prototype.ha=function(){return X(this.m(),this.m())},nt.prototype.readUint64String=nt.prototype.ha,nt.prototype.Xb=function(){var t=this.b[this.a];return this.a+=1,b(this.a<=this.c),t<<24>>24},nt.prototype.readInt8=nt.prototype.Xb,nt.prototype.Vb=function(){var t=this.b[this.a],e=this.b[this.a+1];return this.a+=2,b(this.a<=this.c),(t|e<<8)<<16>>16},nt.prototype.readInt16=nt.prototype.Vb,nt.prototype.P=function(){var t=this.b[this.a],e=this.b[this.a+1],r=this.b[this.a+2],o=this.b[this.a+3];return this.a+=4,b(this.a<=this.c),t|e<<8|r<<16|o<<24},nt.prototype.readInt32=nt.prototype.P,nt.prototype.ba=function(){return z(this.m(),this.m())},nt.prototype.readInt64=nt.prototype.ba,nt.prototype.ca=function(){return Z(this.m(),this.m())},nt.prototype.readInt64String=nt.prototype.ca,nt.prototype.aa=function(){return K(this.m())},nt.prototype.readFloat=nt.prototype.aa,nt.prototype.Z=function(){return Y(this.m(),this.m())},nt.prototype.readDouble=nt.prototype.Z,nt.prototype.pa=function(){return!!this.b[this.a++]},nt.prototype.readBool=nt.prototype.pa,nt.prototype.ra=function(){return this.da()},nt.prototype.readEnum=nt.prototype.ra,nt.prototype.fa=function(t){var e=this.b,r=this.a;t=r+t;for(var o=[],i="";r<t;){var n=e[r++];if(128>n)o.push(n);else{if(192>n)continue;if(224>n){var s=e[r++];o.push((31&n)<<6|63&s)}else if(240>n){s=e[r++];var a=e[r++];o.push((15&n)<<12|(63&s)<<6|63&a)}else 248>n&&(n=(7&n)<<18|(63&(s=e[r++]))<<12|(63&(a=e[r++]))<<6|63&e[r++],n-=65536,o.push(55296+(n>>10&1023),56320+(1023&n)))}8192<=o.length&&(i+=String.fromCharCode.apply(null,o),o.length=0)}return i+=T(o),this.a=r,i},nt.prototype.readString=nt.prototype.fa,nt.prototype.Dc=function(){var t=this.o();return this.fa(t)},nt.prototype.readStringWithLength=nt.prototype.Dc,nt.prototype.qa=function(t){if(0>t||this.a+t>this.b.length)return this.v=!0,v("Invalid byte length!"),new Uint8Array(0);var e=this.b.subarray(this.a,this.a+t);return this.a+=t,b(this.a<=this.c),e},nt.prototype.readBytes=nt.prototype.qa,nt.prototype.ia=function(){return this.w(J)},nt.prototype.readVarintHash64=nt.prototype.ia,nt.prototype.$=function(){var t=this.b,e=this.a,r=t[e],o=t[e+1],i=t[e+2],n=t[e+3],s=t[e+4],a=t[e+5],p=t[e+6];return t=t[e+7],this.a+=8,String.fromCharCode(r,o,i,n,s,a,p,t)},nt.prototype.readFixedHash64=nt.prototype.$,u("jspb.BinaryReader",pt,void 0);var ct=[];function ut(t,e,r){if(ct.length){var o=ct.pop();return t&&o.a.H(t,e,r),o}return new pt(t,e,r)}function ht(t,e){b(2==t.b);var r=t.a.o();r=t.a.B()+r;for(var o=[];t.a.B()<r;)o.push(e.call(t.a));return o}function lt(t,e,r,o,i){this.ma=t,this.Ba=e,this.la=r,this.Na=o,this.na=i}function ft(t,e,r,o,i,n){this.Za=t,this.za=e,this.Aa=r,this.Wa=o,this.Ab=i,this.Nb=n}function dt(){}pt.clearInstanceCache=function(){ct=[]},pt.getInstanceCacheLength=function(){return ct.length},pt.alloc=ut,pt.prototype.zb=ut,pt.prototype.alloc=pt.prototype.zb,pt.prototype.Ca=function(){this.a.clear(),this.b=this.c=-1,this.h=!1,this.v=null,100>ct.length&&ct.push(this)},pt.prototype.free=pt.prototype.Ca,pt.prototype.Fb=function(){return this.O},pt.prototype.getFieldCursor=pt.prototype.Fb,pt.prototype.B=function(){return this.a.B()},pt.prototype.getCursor=pt.prototype.B,pt.prototype.Y=function(){return this.a.Y()},pt.prototype.getBuffer=pt.prototype.Y,pt.prototype.Hb=function(){return this.c},pt.prototype.getFieldNumber=pt.prototype.Hb,pt.prototype.Lb=function(){return this.b},pt.prototype.getWireType=pt.prototype.Lb,pt.prototype.Mb=function(){return 2==this.b},pt.prototype.isDelimited=pt.prototype.Mb,pt.prototype.bb=function(){return 4==this.b},pt.prototype.isEndGroup=pt.prototype.bb,pt.prototype.getError=function(){return this.h||this.a.getError()},pt.prototype.getError=pt.prototype.getError,pt.prototype.H=function(t,e,r){this.a.H(t,e,r),this.b=this.c=-1},pt.prototype.setBlock=pt.prototype.H,pt.prototype.reset=function(){this.a.reset(),this.b=this.c=-1},pt.prototype.reset=pt.prototype.reset,pt.prototype.advance=function(t){this.a.advance(t)},pt.prototype.advance=pt.prototype.advance,pt.prototype.oa=function(){if(this.a.ya())return!1;if(this.getError())return v("Decoder hit an error"),!1;this.O=this.a.B();var t=this.a.o(),e=t>>>3;return 0!=(t&=7)&&5!=t&&1!=t&&2!=t&&3!=t&&4!=t?(v("Invalid wire type: %s (at position %s)",t,this.O),this.h=!0,!1):(this.c=e,this.b=t,!0)},pt.prototype.nextField=pt.prototype.oa,pt.prototype.Oa=function(){this.a.mb(this.c<<3|this.b)},pt.prototype.unskipHeader=pt.prototype.Oa,pt.prototype.Lc=function(){var t=this.c;for(this.Oa();this.oa()&&this.c==t;)this.C();this.a.ya()||this.Oa()},pt.prototype.skipMatchingFields=pt.prototype.Lc,pt.prototype.lb=function(){0!=this.b?(v("Invalid wire type for skipVarintField"),this.C()):this.a.kb()},pt.prototype.skipVarintField=pt.prototype.lb,pt.prototype.gb=function(){if(2!=this.b)v("Invalid wire type for skipDelimitedField"),this.C();else{var t=this.a.o();this.a.advance(t)}},pt.prototype.skipDelimitedField=pt.prototype.gb,pt.prototype.hb=function(){5!=this.b?(v("Invalid wire type for skipFixed32Field"),this.C()):this.a.advance(4)},pt.prototype.skipFixed32Field=pt.prototype.hb,pt.prototype.ib=function(){1!=this.b?(v("Invalid wire type for skipFixed64Field"),this.C()):this.a.advance(8)},pt.prototype.skipFixed64Field=pt.prototype.ib,pt.prototype.jb=function(){for(var t=this.c;;){if(!this.oa()){v("Unmatched start-group tag: stream EOF"),this.h=!0;break}if(4==this.b){this.c!=t&&(v("Unmatched end-group tag"),this.h=!0);break}this.C()}},pt.prototype.skipGroup=pt.prototype.jb,pt.prototype.C=function(){switch(this.b){case 0:this.lb();break;case 1:this.ib();break;case 2:this.gb();break;case 5:this.hb();break;case 3:this.jb();break;default:v("Invalid wire encoding for field.")}},pt.prototype.skipField=pt.prototype.C,pt.prototype.Hc=function(t,e){null===this.v&&(this.v={}),b(!this.v[t]),this.v[t]=e},pt.prototype.registerReadCallback=pt.prototype.Hc,pt.prototype.Ic=function(t){return b(null!==this.v),b(t=this.v[t]),t(this)},pt.prototype.runReadCallback=pt.prototype.Ic,pt.prototype.Yb=function(t,e){b(2==this.b);var r=this.a.c,o=this.a.o();o=this.a.B()+o,this.a.setEnd(o),e(t,this),this.a.Ma(o),this.a.setEnd(r)},pt.prototype.readMessage=pt.prototype.Yb,pt.prototype.Ub=function(t,e,r){b(3==this.b),b(this.c==t),r(e,this),this.h||4==this.b||(v("Group submessage did not end with an END_GROUP tag"),this.h=!0)},pt.prototype.readGroup=pt.prototype.Ub,pt.prototype.Gb=function(){b(2==this.b);var t=this.a.o(),e=this.a.B(),r=e+t;return t=at(this.a.Y(),e,t),this.a.Ma(r),t},pt.prototype.getFieldDecoder=pt.prototype.Gb,pt.prototype.P=function(){return b(0==this.b),this.a.da()},pt.prototype.readInt32=pt.prototype.P,pt.prototype.Wb=function(){return b(0==this.b),this.a.Ea()},pt.prototype.readInt32String=pt.prototype.Wb,pt.prototype.ba=function(){return b(0==this.b),this.a.sa()},pt.prototype.readInt64=pt.prototype.ba,pt.prototype.ca=function(){return b(0==this.b),this.a.Fa()},pt.prototype.readInt64String=pt.prototype.ca,pt.prototype.m=function(){return b(0==this.b),this.a.o()},pt.prototype.readUint32=pt.prototype.m,pt.prototype.Fc=function(){return b(0==this.b),this.a.O()},pt.prototype.readUint32String=pt.prototype.Fc,pt.prototype.ga=function(){return b(0==this.b),this.a.Ga()},pt.prototype.readUint64=pt.prototype.ga,pt.prototype.ha=function(){return b(0==this.b),this.a.Ha()},pt.prototype.readUint64String=pt.prototype.ha,pt.prototype.zc=function(){return b(0==this.b),this.a.Ia()},pt.prototype.readSint32=pt.prototype.zc,pt.prototype.Ac=function(){return b(0==this.b),this.a.Ja()},pt.prototype.readSint64=pt.prototype.Ac,pt.prototype.Bc=function(){return b(0==this.b),this.a.Ka()},pt.prototype.readSint64String=pt.prototype.Bc,pt.prototype.Rb=function(){return b(5==this.b),this.a.m()},pt.prototype.readFixed32=pt.prototype.Rb,pt.prototype.Sb=function(){return b(1==this.b),this.a.ga()},pt.prototype.readFixed64=pt.prototype.Sb,pt.prototype.Tb=function(){return b(1==this.b),this.a.ha()},pt.prototype.readFixed64String=pt.prototype.Tb,pt.prototype.vc=function(){return b(5==this.b),this.a.P()},pt.prototype.readSfixed32=pt.prototype.vc,pt.prototype.wc=function(){return b(5==this.b),this.a.P().toString()},pt.prototype.readSfixed32String=pt.prototype.wc,pt.prototype.xc=function(){return b(1==this.b),this.a.ba()},pt.prototype.readSfixed64=pt.prototype.xc,pt.prototype.yc=function(){return b(1==this.b),this.a.ca()},pt.prototype.readSfixed64String=pt.prototype.yc,pt.prototype.aa=function(){return b(5==this.b),this.a.aa()},pt.prototype.readFloat=pt.prototype.aa,pt.prototype.Z=function(){return b(1==this.b),this.a.Z()},pt.prototype.readDouble=pt.prototype.Z,pt.prototype.pa=function(){return b(0==this.b),!!this.a.o()},pt.prototype.readBool=pt.prototype.pa,pt.prototype.ra=function(){return b(0==this.b),this.a.sa()},pt.prototype.readEnum=pt.prototype.ra,pt.prototype.fa=function(){b(2==this.b);var t=this.a.o();return this.a.fa(t)},pt.prototype.readString=pt.prototype.fa,pt.prototype.qa=function(){b(2==this.b);var t=this.a.o();return this.a.qa(t)},pt.prototype.readBytes=pt.prototype.qa,pt.prototype.ia=function(){return b(0==this.b),this.a.ia()},pt.prototype.readVarintHash64=pt.prototype.ia,pt.prototype.Cc=function(){return b(0==this.b),this.a.fb()},pt.prototype.readSintHash64=pt.prototype.Cc,pt.prototype.w=function(t){return b(0==this.b),this.a.w(t)},pt.prototype.readSplitVarint64=pt.prototype.w,pt.prototype.ea=function(t){return b(0==this.b),this.a.w((function(e,r){return q(e,r,t)}))},pt.prototype.readSplitZigzagVarint64=pt.prototype.ea,pt.prototype.$=function(){return b(1==this.b),this.a.$()},pt.prototype.readFixedHash64=pt.prototype.$,pt.prototype.ta=function(t){return b(1==this.b),this.a.ta(t)},pt.prototype.readSplitFixed64=pt.prototype.ta,pt.prototype.gc=function(){return ht(this,this.a.da)},pt.prototype.readPackedInt32=pt.prototype.gc,pt.prototype.hc=function(){return ht(this,this.a.Ea)},pt.prototype.readPackedInt32String=pt.prototype.hc,pt.prototype.ic=function(){return ht(this,this.a.sa)},pt.prototype.readPackedInt64=pt.prototype.ic,pt.prototype.jc=function(){return ht(this,this.a.Fa)},pt.prototype.readPackedInt64String=pt.prototype.jc,pt.prototype.qc=function(){return ht(this,this.a.o)},pt.prototype.readPackedUint32=pt.prototype.qc,pt.prototype.rc=function(){return ht(this,this.a.O)},pt.prototype.readPackedUint32String=pt.prototype.rc,pt.prototype.sc=function(){return ht(this,this.a.Ga)},pt.prototype.readPackedUint64=pt.prototype.sc,pt.prototype.tc=function(){return ht(this,this.a.Ha)},pt.prototype.readPackedUint64String=pt.prototype.tc,pt.prototype.nc=function(){return ht(this,this.a.Ia)},pt.prototype.readPackedSint32=pt.prototype.nc,pt.prototype.oc=function(){return ht(this,this.a.Ja)},pt.prototype.readPackedSint64=pt.prototype.oc,pt.prototype.pc=function(){return ht(this,this.a.Ka)},pt.prototype.readPackedSint64String=pt.prototype.pc,pt.prototype.bc=function(){return ht(this,this.a.m)},pt.prototype.readPackedFixed32=pt.prototype.bc,pt.prototype.cc=function(){return ht(this,this.a.ga)},pt.prototype.readPackedFixed64=pt.prototype.cc,pt.prototype.dc=function(){return ht(this,this.a.ha)},pt.prototype.readPackedFixed64String=pt.prototype.dc,pt.prototype.kc=function(){return ht(this,this.a.P)},pt.prototype.readPackedSfixed32=pt.prototype.kc,pt.prototype.lc=function(){return ht(this,this.a.ba)},pt.prototype.readPackedSfixed64=pt.prototype.lc,pt.prototype.mc=function(){return ht(this,this.a.ca)},pt.prototype.readPackedSfixed64String=pt.prototype.mc,pt.prototype.fc=function(){return ht(this,this.a.aa)},pt.prototype.readPackedFloat=pt.prototype.fc,pt.prototype.$b=function(){return ht(this,this.a.Z)},pt.prototype.readPackedDouble=pt.prototype.$b,pt.prototype.Zb=function(){return ht(this,this.a.pa)},pt.prototype.readPackedBool=pt.prototype.Zb,pt.prototype.ac=function(){return ht(this,this.a.ra)},pt.prototype.readPackedEnum=pt.prototype.ac,pt.prototype.uc=function(){return ht(this,this.a.ia)},pt.prototype.readPackedVarintHash64=pt.prototype.uc,pt.prototype.ec=function(){return ht(this,this.a.$)},pt.prototype.readPackedFixedHash64=pt.prototype.ec,u("jspb.ExtensionFieldInfo",lt,void 0),u("jspb.ExtensionFieldBinaryInfo",ft,void 0),lt.prototype.F=function(){return!!this.la},lt.prototype.isMessageType=lt.prototype.F,u("jspb.Message",dt,void 0),dt.GENERATE_TO_OBJECT=!0,dt.GENERATE_FROM_OBJECT=!0;var yt="function"==typeof Uint8Array;dt.prototype.Ib=function(){return this.b},dt.prototype.getJsPbMessageId=dt.prototype.Ib,dt.initialize=function(t,e,r,o,i,n){if(t.f=null,e||(e=r?[r]:[]),t.b=r?String(r):void 0,t.D=0===r?-1:0,t.u=e,e=-1,!(r=t.u.length)||(e=r-1,null===(r=t.u[e])||"object"!=typeof r||Array.isArray(r)||yt&&r instanceof Uint8Array)?-1<o?(t.G=Math.max(o,e+1-t.D),t.i=null):t.G=Number.MAX_VALUE:(t.G=e-t.D,t.i=r),t.a={},i)for(o=0;o<i.length;o++)(e=i[o])<t.G?(e+=t.D,t.u[e]=t.u[e]||gt):(mt(t),t.i[e]=t.i[e]||gt);if(n&&n.length)for(o=0;o<n.length;o++)At(t,n[o])};var gt=Object.freeze?Object.freeze([]):[];function mt(t){var e=t.G+t.D;t.u[e]||(t.i=t.u[e]={})}function bt(t,e,r){for(var o=[],i=0;i<t.length;i++)o[i]=e.call(t[i],r,t[i]);return o}function vt(t,e){if(e<t.G){e+=t.D;var r=t.u[e];return r===gt?t.u[e]=[]:r}if(t.i)return(r=t.i[e])===gt?t.i[e]=[]:r}function wt(t,e){return null==(t=vt(t,e))?t:+t}function _t(t,e){return null==(t=vt(t,e))?t:!!t}function St(t){return null==t||"string"==typeof t?t:yt&&t instanceof Uint8Array?I(t):(v("Cannot coerce to b64 string: "+h(t)),null)}function Et(t){return null==t||t instanceof Uint8Array?t:"string"==typeof t?C(t):(v("Cannot coerce to Uint8Array: "+h(t)),null)}function Ot(t){if(t&&1<t.length){var e=h(t[0]);d(t,(function(t){h(t)!=e&&v("Inconsistent type in JSPB repeated field array. Got "+h(t)+" expected "+e)}))}}function Ft(t,e,r){return null==(t=vt(t,e))?r:t}function Rt(t,e,r){return w(t,dt),e<t.G?t.u[e+t.D]=r:(mt(t),t.i[e]=r),t}function Tt(t,e,r,o){return w(t,dt),r!==o?Rt(t,e,r):e<t.G?t.u[e+t.D]=null:(mt(t),delete t.i[e]),t}function kt(t,e,r,o){return w(t,dt),(r=At(t,r))&&r!==e&&void 0!==o&&(t.f&&r in t.f&&(t.f[r]=void 0),Rt(t,r,void 0)),Rt(t,e,o)}function At(t,e){for(var r,o,i=0;i<e.length;i++){var n=e[i],s=vt(t,n);null!=s&&(r=n,o=s,Rt(t,n,void 0))}return r?(Rt(t,r,o),r):0}function Pt(t,e,r){if(t.f||(t.f={}),!t.f[r]){for(var o=vt(t,r),i=[],n=0;n<o.length;n++)i[n]=new e(o[n]);t.f[r]=i}}function Nt(t){if(t.f)for(var e in t.f){var r=t.f[e];if(Array.isArray(r))for(var o=0;o<r.length;o++)r[o]&&r[o].g();else r&&r.g()}}function It(t,e){t=t||{},e=e||{};var r,o={};for(r in t)o[r]=0;for(r in e)o[r]=0;for(r in o)if(!Ct(t[r],e[r]))return!1;return!0}function Ct(t,e){if(t==e)return!0;if(!l(t)||!l(e))return!!("number"==typeof t&&isNaN(t)||"number"==typeof e&&isNaN(e))&&String(t)==String(e);if(t.constructor!=e.constructor)return!1;if(yt&&t.constructor===Uint8Array){if(t.length!=e.length)return!1;for(var r=0;r<t.length;r++)if(t[r]!=e[r])return!1;return!0}if(t.constructor===Array){var o=void 0,i=void 0,n=Math.max(t.length,e.length);for(r=0;r<n;r++){var s=t[r],a=e[r];if(s&&s.constructor==Object&&(b(void 0===o),b(r===t.length-1),o=s,s=void 0),a&&a.constructor==Object&&(b(void 0===i),b(r===e.length-1),i=a,a=void 0),!Ct(s,a))return!1}return!o&&!i||It(o=o||{},i=i||{})}if(t.constructor===Object)return It(t,e);throw Error("Invalid type in JSPB array")}function Bt(t){return new t.constructor(xt(t.g()))}function xt(t){if(Array.isArray(t)){for(var e=Array(t.length),r=0;r<t.length;r++){var o=t[r];null!=o&&(e[r]="object"==typeof o?xt(b(o)):o)}return e}if(yt&&t instanceof Uint8Array)return new Uint8Array(t);for(r in e={},t)null!=(o=t[r])&&(e[r]="object"==typeof o?xt(b(o)):o);return e}dt.toObjectList=bt,dt.toObjectExtension=function(t,e,r,o,i){for(var n in r){var s=r[n],a=o.call(t,s);if(null!=a){for(var p in s.Ba)if(s.Ba.hasOwnProperty(p))break;e[p]=s.Na?s.na?bt(a,s.Na,i):s.Na(i,a):a}}},dt.serializeBinaryExtensions=function(t,e,r,o){for(var i in r){var n=r[i],s=n.Za;if(!n.Aa)throw Error("Message extension present that was generated without binary serialization support");var a=o.call(t,s);if(null!=a)if(s.F()){if(!n.Wa)throw Error("Message extension present holding submessage without binary support enabled, and message is being serialized to binary format");n.Aa.call(e,s.ma,a,n.Wa)}else n.Aa.call(e,s.ma,a)}},dt.readBinaryExtension=function(t,e,r,o,i){var n=r[e.c];if(n){if(r=n.Za,!n.za)throw Error("Deserializing extension whose generated code does not support binary format");if(r.F()){var s=new r.la;n.za.call(e,s,n.Ab)}else s=n.za.call(e);r.na&&!n.Nb?(e=o.call(t,r))?e.push(s):i.call(t,r,[s]):i.call(t,r,s)}else e.C()},dt.getField=vt,dt.getRepeatedField=function(t,e){return vt(t,e)},dt.getOptionalFloatingPointField=wt,dt.getBooleanField=_t,dt.getRepeatedFloatingPointField=function(t,e){var r=vt(t,e);if(t.a||(t.a={}),!t.a[e]){for(var o=0;o<r.length;o++)r[o]=+r[o];t.a[e]=!0}return r},dt.getRepeatedBooleanField=function(t,e){var r=vt(t,e);if(t.a||(t.a={}),!t.a[e]){for(var o=0;o<r.length;o++)r[o]=!!r[o];t.a[e]=!0}return r},dt.bytesAsB64=St,dt.bytesAsU8=Et,dt.bytesListAsB64=function(t){return Ot(t),t.length&&"string"!=typeof t[0]?y(t,St):t},dt.bytesListAsU8=function(t){return Ot(t),!t.length||t[0]instanceof Uint8Array?t:y(t,Et)},dt.getFieldWithDefault=Ft,dt.getBooleanFieldWithDefault=function(t,e,r){return null==(t=_t(t,e))?r:t},dt.getFloatingPointFieldWithDefault=function(t,e,r){return null==(t=wt(t,e))?r:t},dt.getFieldProto3=Ft,dt.getMapField=function(t,e,r,o){if(t.f||(t.f={}),e in t.f)return t.f[e];var i=vt(t,e);if(!i){if(r)return;Rt(t,e,i=[])}return t.f[e]=new S(i,o)},dt.setField=Rt,dt.setProto3IntField=function(t,e,r){return Tt(t,e,r,0)},dt.setProto3FloatField=function(t,e,r){return Tt(t,e,r,0)},dt.setProto3BooleanField=function(t,e,r){return Tt(t,e,r,!1)},dt.setProto3StringField=function(t,e,r){return Tt(t,e,r,"")},dt.setProto3BytesField=function(t,e,r){return Tt(t,e,r,"")},dt.setProto3EnumField=function(t,e,r){return Tt(t,e,r,0)},dt.setProto3StringIntField=function(t,e,r){return Tt(t,e,r,"0")},dt.addToRepeatedField=function(t,e,r,o){return w(t,dt),e=vt(t,e),null!=o?e.splice(o,0,r):e.push(r),t},dt.setOneofField=kt,dt.computeOneofCase=At,dt.getWrapperField=function(t,e,r,o){if(t.f||(t.f={}),!t.f[r]){var i=vt(t,r);(o||i)&&(t.f[r]=new e(i))}return t.f[r]},dt.getRepeatedWrapperField=function(t,e,r){return Pt(t,e,r),(e=t.f[r])==gt&&(e=t.f[r]=[]),e},dt.setWrapperField=function(t,e,r){w(t,dt),t.f||(t.f={});var o=r?r.g():r;return t.f[e]=r,Rt(t,e,o)},dt.setOneofWrapperField=function(t,e,r,o){w(t,dt),t.f||(t.f={});var i=o?o.g():o;return t.f[e]=o,kt(t,e,r,i)},dt.setRepeatedWrapperField=function(t,e,r){w(t,dt),t.f||(t.f={}),r=r||[];for(var o=[],i=0;i<r.length;i++)o[i]=r[i].g();return t.f[e]=r,Rt(t,e,o)},dt.addToRepeatedWrapperField=function(t,e,r,o,i){Pt(t,o,e);var n=t.f[e];return n||(n=t.f[e]=[]),r=r||new o,t=vt(t,e),null!=i?(n.splice(i,0,r),t.splice(i,0,r.g())):(n.push(r),t.push(r.g())),r},dt.toMap=function(t,e,r,o){for(var i={},n=0;n<t.length;n++)i[e.call(t[n])]=r?r.call(t[n],o,t[n]):t[n];return i},dt.prototype.g=function(){return Nt(this),this.u},dt.prototype.toArray=dt.prototype.g,dt.prototype.toString=function(){return Nt(this),this.u.toString()},dt.prototype.getExtension=function(t){if(this.i){this.f||(this.f={});var e=t.ma;if(t.na){if(t.F())return this.f[e]||(this.f[e]=y(this.i[e]||[],(function(e){return new t.la(e)}))),this.f[e]}else if(t.F())return!this.f[e]&&this.i[e]&&(this.f[e]=new t.la(this.i[e])),this.f[e];return this.i[e]}},dt.prototype.getExtension=dt.prototype.getExtension,dt.prototype.Kc=function(t,e){this.f||(this.f={}),mt(this);var r=t.ma;return t.na?(e=e||[],t.F()?(this.f[r]=e,this.i[r]=y(e,(function(t){return t.g()}))):this.i[r]=e):t.F()?(this.f[r]=e,this.i[r]=e?e.g():e):this.i[r]=e,this},dt.prototype.setExtension=dt.prototype.Kc,dt.difference=function(t,e){if(!(t instanceof e.constructor))throw Error("Messages have different types.");var r=t.g();e=e.g();var o=[],i=0,n=r.length>e.length?r.length:e.length;for(t.b&&(o[0]=t.b,i=1);i<n;i++)Ct(r[i],e[i])||(o[i]=e[i]);return new t.constructor(o)},dt.equals=function(t,e){return t==e||!(!t||!e)&&t instanceof e.constructor&&Ct(t.g(),e.g())},dt.compareExtensions=It,dt.compareFields=Ct,dt.prototype.Bb=function(){return Bt(this)},dt.prototype.cloneMessage=dt.prototype.Bb,dt.prototype.clone=function(){return Bt(this)},dt.prototype.clone=dt.prototype.clone,dt.clone=function(t){return Bt(t)},dt.copyInto=function(t,e){w(t,dt),w(e,dt),b(t.constructor==e.constructor,"Copy source and target message should have the same type."),t=Bt(t);for(var r=e.g(),o=t.g(),i=r.length=0;i<o.length;i++)r[i]=o[i];e.f=t.f,e.i=t.i},dt.registerMessageType=function(t,e){e.we=t};var jt={dump:function(t){return w(t,dt,"jspb.Message instance expected"),b(t.getExtension,"Only unobfuscated and unoptimized compilation modes supported."),jt.X(t)}};function Dt(){this.a=[]}function Lt(t,e){this.lo=t,this.hi=e}function Mt(t,e){var r=65535&t,o=65535&e,i=e>>>16;for(e=r*o+65536*(r*i&65535)+65536*((t>>>=16)*o&65535),r=t*i+(r*i>>>16)+(t*o>>>16);4294967296<=e;)e-=4294967296,r+=1;return new Lt(e>>>0,r>>>0)}function Ut(t){for(var e=new Lt(0,0),r=new Lt(0,0),o=0;o<t.length;o++){if("0">t[o]||"9"<t[o])return null;r.lo=parseInt(t[o],10),e=e.eb(10).add(r)}return e}function Wt(t,e){this.lo=t,this.hi=e}function $t(t){var e=0<t.length&&"-"==t[0];return e&&(t=t.substring(1)),null===(t=Ut(t))?null:(e&&(t=new Lt(0,0).sub(t)),new Wt(t.lo,t.hi))}function Vt(){this.c=[],this.b=0,this.a=new Dt,this.h=[]}function zt(t,e){var r=t.a.end();t.c.push(r),t.c.push(e),t.b+=r.length+e.length}function Gt(t,e){return qt(t,e,2),e=t.a.end(),t.c.push(e),t.b+=e.length,e.push(t.b),e}function Ht(t,e){var r=e.pop();for(b(0<=(r=t.b+t.a.length()-r));127<r;)e.push(127&r|128),r>>>=7,t.b++;e.push(r),t.b++}function qt(t,e,r){b(1<=e&&e==Math.floor(e)),t.a.j(8*e+r)}function Kt(t,e,r){null!=r&&(qt(t,e,0),t.a.j(r))}function Yt(t,e,r){null!=r&&(qt(t,e,0),t.a.M(r))}u("jspb.debug.dump",jt.dump,void 0),jt.X=function(t){var e=h(t);if("number"==e||"string"==e||"boolean"==e||"null"==e||"undefined"==e||"undefined"!=typeof Uint8Array&&t instanceof Uint8Array)return t;if("array"==e)return function(t,e,r){for(var o=[],i=2;i<arguments.length;++i)o[i-2]=arguments[i];Array.isArray(t)||m("Expected array but got %s: %s.",[h(t),t],e,o)}(t),y(t,jt.X);if(t instanceof S){for(var r={},o=(t=t.entries()).next();!o.done;o=t.next())r[o.value[0]]=jt.X(o.value[1]);return r}w(t,dt,"Only messages expected: "+t);var i={$name:(e=t.constructor).name||e.displayName};for(a in e.prototype){var n=/^get([A-Z]\w*)/.exec(a);if(n&&"getExtension"!=a&&"getJsPbMessageId"!=a){var s="has"+n[1];t[s]&&!t[s]()||(s=t[a](),i[jt.$a(n[1])]=jt.X(s))}}if(t.extensionObject_)return i.$extensions="Recursive dumping of extensions not supported in compiled code. Switch to uncompiled or dump extension object directly",i;for(o in e.extensions)if(/^\d+$/.test(o)){s=e.extensions[o];var a=t.getExtension(s);n=void 0,s=s.Ba;var p=[],c=0;for(n in s)p[c++]=n;n=p[0],null!=a&&(r||(r=i.$extensions={}),r[jt.$a(n)]=jt.X(a))}return i},jt.$a=function(t){return t.replace(/^[A-Z]/,(function(t){return t.toLowerCase()}))},u("jspb.BinaryEncoder",Dt,void 0),Dt.prototype.length=function(){return this.a.length},Dt.prototype.length=Dt.prototype.length,Dt.prototype.end=function(){var t=this.a;return this.a=[],t},Dt.prototype.end=Dt.prototype.end,Dt.prototype.l=function(t,e){for(b(t==Math.floor(t)),b(e==Math.floor(e)),b(0<=t&&4294967296>t),b(0<=e&&4294967296>e);0<e||127<t;)this.a.push(127&t|128),t=(t>>>7|e<<25)>>>0,e>>>=7;this.a.push(t)},Dt.prototype.writeSplitVarint64=Dt.prototype.l,Dt.prototype.A=function(t,e){b(t==Math.floor(t)),b(e==Math.floor(e)),b(0<=t&&4294967296>t),b(0<=e&&4294967296>e),this.s(t),this.s(e)},Dt.prototype.writeSplitFixed64=Dt.prototype.A,Dt.prototype.j=function(t){for(b(t==Math.floor(t)),b(0<=t&&4294967296>t);127<t;)this.a.push(127&t|128),t>>>=7;this.a.push(t)},Dt.prototype.writeUnsignedVarint32=Dt.prototype.j,Dt.prototype.M=function(t){if(b(t==Math.floor(t)),b(-2147483648<=t&&2147483648>t),0<=t)this.j(t);else{for(var e=0;9>e;e++)this.a.push(127&t|128),t>>=7;this.a.push(1)}},Dt.prototype.writeSignedVarint32=Dt.prototype.M,Dt.prototype.va=function(t){b(t==Math.floor(t)),b(0<=t&&0x10000000000000000>t),L(t),this.l(x,j)},Dt.prototype.writeUnsignedVarint64=Dt.prototype.va,Dt.prototype.ua=function(t){b(t==Math.floor(t)),b(-0x8000000000000000<=t&&0x8000000000000000>t),L(t),this.l(x,j)},Dt.prototype.writeSignedVarint64=Dt.prototype.ua,Dt.prototype.wa=function(t){b(t==Math.floor(t)),b(-2147483648<=t&&2147483648>t),this.j((t<<1^t>>31)>>>0)},Dt.prototype.writeZigzagVarint32=Dt.prototype.wa,Dt.prototype.xa=function(t){b(t==Math.floor(t)),b(-0x8000000000000000<=t&&0x8000000000000000>t),M(t),this.l(x,j)},Dt.prototype.writeZigzagVarint64=Dt.prototype.xa,Dt.prototype.Ta=function(t){this.W(tt(t))},Dt.prototype.writeZigzagVarint64String=Dt.prototype.Ta,Dt.prototype.W=function(t){var e=this;$(t),G(x,j,(function(t,r){e.l(t>>>0,r>>>0)}))},Dt.prototype.writeZigzagVarintHash64=Dt.prototype.W,Dt.prototype.be=function(t){b(t==Math.floor(t)),b(0<=t&&256>t),this.a.push(t>>>0&255)},Dt.prototype.writeUint8=Dt.prototype.be,Dt.prototype.ae=function(t){b(t==Math.floor(t)),b(0<=t&&65536>t),this.a.push(t>>>0&255),this.a.push(t>>>8&255)},Dt.prototype.writeUint16=Dt.prototype.ae,Dt.prototype.s=function(t){b(t==Math.floor(t)),b(0<=t&&4294967296>t),this.a.push(t>>>0&255),this.a.push(t>>>8&255),this.a.push(t>>>16&255),this.a.push(t>>>24&255)},Dt.prototype.writeUint32=Dt.prototype.s,Dt.prototype.V=function(t){b(t==Math.floor(t)),b(0<=t&&0x10000000000000000>t),D(t),this.s(x),this.s(j)},Dt.prototype.writeUint64=Dt.prototype.V,Dt.prototype.Qc=function(t){b(t==Math.floor(t)),b(-128<=t&&128>t),this.a.push(t>>>0&255)},Dt.prototype.writeInt8=Dt.prototype.Qc,Dt.prototype.Pc=function(t){b(t==Math.floor(t)),b(-32768<=t&&32768>t),this.a.push(t>>>0&255),this.a.push(t>>>8&255)},Dt.prototype.writeInt16=Dt.prototype.Pc,Dt.prototype.S=function(t){b(t==Math.floor(t)),b(-2147483648<=t&&2147483648>t),this.a.push(t>>>0&255),this.a.push(t>>>8&255),this.a.push(t>>>16&255),this.a.push(t>>>24&255)},Dt.prototype.writeInt32=Dt.prototype.S,Dt.prototype.T=function(t){b(t==Math.floor(t)),b(-0x8000000000000000<=t&&0x8000000000000000>t),L(t),this.A(x,j)},Dt.prototype.writeInt64=Dt.prototype.T,Dt.prototype.ka=function(t){b(t==Math.floor(t)),b(-0x8000000000000000<=+t&&0x8000000000000000>+t),$(tt(t)),this.A(x,j)},Dt.prototype.writeInt64String=Dt.prototype.ka,Dt.prototype.L=function(t){b(1/0===t||-1/0===t||isNaN(t)||-34028234663852886e22<=t&&34028234663852886e22>=t),U(t),this.s(x)},Dt.prototype.writeFloat=Dt.prototype.L,Dt.prototype.J=function(t){b(1/0===t||-1/0===t||isNaN(t)||-17976931348623157e292<=t&&17976931348623157e292>=t),W(t),this.s(x),this.s(j)},Dt.prototype.writeDouble=Dt.prototype.J,Dt.prototype.I=function(t){b("boolean"==typeof t||"number"==typeof t),this.a.push(t?1:0)},Dt.prototype.writeBool=Dt.prototype.I,Dt.prototype.R=function(t){b(t==Math.floor(t)),b(-2147483648<=t&&2147483648>t),this.M(t)},Dt.prototype.writeEnum=Dt.prototype.R,Dt.prototype.ja=function(t){this.a.push.apply(this.a,t)},Dt.prototype.writeBytes=Dt.prototype.ja,Dt.prototype.N=function(t){$(t),this.l(x,j)},Dt.prototype.writeVarintHash64=Dt.prototype.N,Dt.prototype.K=function(t){$(t),this.s(x),this.s(j)},Dt.prototype.writeFixedHash64=Dt.prototype.K,Dt.prototype.U=function(t){var e=this.a.length;!function(t,e,r){for(var o=[],i=2;i<arguments.length;++i)o[i-2]=arguments[i];"string"!=typeof t&&m("Expected string but got %s: %s.",[h(t),t],e,o)}(t);for(var r=0;r<t.length;r++){var o=t.charCodeAt(r);if(128>o)this.a.push(o);else if(2048>o)this.a.push(o>>6|192),this.a.push(63&o|128);else if(65536>o)if(55296<=o&&56319>=o&&r+1<t.length){var i=t.charCodeAt(r+1);56320<=i&&57343>=i&&(o=1024*(o-55296)+i-56320+65536,this.a.push(o>>18|240),this.a.push(o>>12&63|128),this.a.push(o>>6&63|128),this.a.push(63&o|128),r++)}else this.a.push(o>>12|224),this.a.push(o>>6&63|128),this.a.push(63&o|128)}return this.a.length-e},Dt.prototype.writeString=Dt.prototype.U,u("jspb.arith.UInt64",Lt,void 0),Lt.prototype.cmp=function(t){return this.hi<t.hi||this.hi==t.hi&&this.lo<t.lo?-1:this.hi==t.hi&&this.lo==t.lo?0:1},Lt.prototype.cmp=Lt.prototype.cmp,Lt.prototype.La=function(){return new Lt((this.lo>>>1|(1&this.hi)<<31)>>>0,this.hi>>>1>>>0)},Lt.prototype.rightShift=Lt.prototype.La,Lt.prototype.Da=function(){return new Lt(this.lo<<1>>>0,(this.hi<<1|this.lo>>>31)>>>0)},Lt.prototype.leftShift=Lt.prototype.Da,Lt.prototype.cb=function(){return!!(2147483648&this.hi)},Lt.prototype.msb=Lt.prototype.cb,Lt.prototype.Ob=function(){return!!(1&this.lo)},Lt.prototype.lsb=Lt.prototype.Ob,Lt.prototype.Ua=function(){return 0==this.lo&&0==this.hi},Lt.prototype.zero=Lt.prototype.Ua,Lt.prototype.add=function(t){return new Lt((this.lo+t.lo&4294967295)>>>0>>>0,((this.hi+t.hi&4294967295)>>>0)+(4294967296<=this.lo+t.lo?1:0)>>>0)},Lt.prototype.add=Lt.prototype.add,Lt.prototype.sub=function(t){return new Lt((this.lo-t.lo&4294967295)>>>0>>>0,((this.hi-t.hi&4294967295)>>>0)-(0>this.lo-t.lo?1:0)>>>0)},Lt.prototype.sub=Lt.prototype.sub,Lt.mul32x32=Mt,Lt.prototype.eb=function(t){var e=Mt(this.lo,t);return(t=Mt(this.hi,t)).hi=t.lo,t.lo=0,e.add(t)},Lt.prototype.mul=Lt.prototype.eb,Lt.prototype.Xa=function(t){if(0==t)return[];var e=new Lt(0,0),r=new Lt(this.lo,this.hi);t=new Lt(t,0);for(var o=new Lt(1,0);!t.cb();)t=t.Da(),o=o.Da();for(;!o.Ua();)0>=t.cmp(r)&&(e=e.add(o),r=r.sub(t)),t=t.La(),o=o.La();return[e,r]},Lt.prototype.div=Lt.prototype.Xa,Lt.prototype.toString=function(){for(var t="",e=this;!e.Ua();){var r=(e=e.Xa(10))[0];t=e[1].lo+t,e=r}return""==t&&(t="0"),t},Lt.prototype.toString=Lt.prototype.toString,Lt.fromString=Ut,Lt.prototype.clone=function(){return new Lt(this.lo,this.hi)},Lt.prototype.clone=Lt.prototype.clone,u("jspb.arith.Int64",Wt,void 0),Wt.prototype.add=function(t){return new Wt((this.lo+t.lo&4294967295)>>>0>>>0,((this.hi+t.hi&4294967295)>>>0)+(4294967296<=this.lo+t.lo?1:0)>>>0)},Wt.prototype.add=Wt.prototype.add,Wt.prototype.sub=function(t){return new Wt((this.lo-t.lo&4294967295)>>>0>>>0,((this.hi-t.hi&4294967295)>>>0)-(0>this.lo-t.lo?1:0)>>>0)},Wt.prototype.sub=Wt.prototype.sub,Wt.prototype.clone=function(){return new Wt(this.lo,this.hi)},Wt.prototype.clone=Wt.prototype.clone,Wt.prototype.toString=function(){var t=!!(2147483648&this.hi),e=new Lt(this.lo,this.hi);return t&&(e=new Lt(0,0).sub(e)),(t?"-":"")+e.toString()},Wt.prototype.toString=Wt.prototype.toString,Wt.fromString=$t,u("jspb.BinaryWriter",Vt,void 0),Vt.prototype.pb=function(t,e,r){zt(this,t.subarray(e,r))},Vt.prototype.writeSerializedMessage=Vt.prototype.pb,Vt.prototype.Pb=function(t,e,r){null!=t&&null!=e&&null!=r&&this.pb(t,e,r)},Vt.prototype.maybeWriteSerializedMessage=Vt.prototype.Pb,Vt.prototype.reset=function(){this.c=[],this.a.end(),this.b=0,this.h=[]},Vt.prototype.reset=Vt.prototype.reset,Vt.prototype.ab=function(){b(0==this.h.length);for(var t=new Uint8Array(this.b+this.a.length()),e=this.c,r=e.length,o=0,i=0;i<r;i++){var n=e[i];t.set(n,o),o+=n.length}return e=this.a.end(),t.set(e,o),b((o+=e.length)==t.length),this.c=[t],t},Vt.prototype.getResultBuffer=Vt.prototype.ab,Vt.prototype.Kb=function(t){return I(this.ab(),t)},Vt.prototype.getResultBase64String=Vt.prototype.Kb,Vt.prototype.Va=function(t){this.h.push(Gt(this,t))},Vt.prototype.beginSubMessage=Vt.prototype.Va,Vt.prototype.Ya=function(){b(0<=this.h.length),Ht(this,this.h.pop())},Vt.prototype.endSubMessage=Vt.prototype.Ya,Vt.prototype.Nc=function(t,e,r){switch(t){case 1:this.J(e,r);break;case 2:this.L(e,r);break;case 3:this.T(e,r);break;case 4:this.V(e,r);break;case 5:this.S(e,r);break;case 6:this.Qa(e,r);break;case 7:this.Pa(e,r);break;case 8:this.I(e,r);break;case 9:this.U(e,r);break;case 10:v("Group field type not supported in writeAny()");break;case 11:v("Message field type not supported in writeAny()");break;case 12:this.ja(e,r);break;case 13:this.s(e,r);break;case 14:this.R(e,r);break;case 15:this.Ra(e,r);break;case 16:this.Sa(e,r);break;case 17:this.rb(e,r);break;case 18:this.sb(e,r);break;case 30:this.K(e,r);break;case 31:this.N(e,r);break;default:v("Invalid field type in writeAny()")}},Vt.prototype.writeAny=Vt.prototype.Nc,Vt.prototype.S=function(t,e){null!=e&&(b(-2147483648<=e&&2147483648>e),Yt(this,t,e))},Vt.prototype.writeInt32=Vt.prototype.S,Vt.prototype.ob=function(t,e){null!=e&&(b(-2147483648<=(e=parseInt(e,10))&&2147483648>e),Yt(this,t,e))},Vt.prototype.writeInt32String=Vt.prototype.ob,Vt.prototype.T=function(t,e){null!=e&&(b(-0x8000000000000000<=e&&0x8000000000000000>e),null!=e&&(qt(this,t,0),this.a.ua(e)))},Vt.prototype.writeInt64=Vt.prototype.T,Vt.prototype.ka=function(t,e){null!=e&&(e=$t(e),qt(this,t,0),this.a.l(e.lo,e.hi))},Vt.prototype.writeInt64String=Vt.prototype.ka,Vt.prototype.s=function(t,e){null!=e&&(b(0<=e&&4294967296>e),Kt(this,t,e))},Vt.prototype.writeUint32=Vt.prototype.s,Vt.prototype.ub=function(t,e){null!=e&&(b(0<=(e=parseInt(e,10))&&4294967296>e),Kt(this,t,e))},Vt.prototype.writeUint32String=Vt.prototype.ub,Vt.prototype.V=function(t,e){null!=e&&(b(0<=e&&0x10000000000000000>e),null!=e&&(qt(this,t,0),this.a.va(e)))},Vt.prototype.writeUint64=Vt.prototype.V,Vt.prototype.vb=function(t,e){null!=e&&(e=Ut(e),qt(this,t,0),this.a.l(e.lo,e.hi))},Vt.prototype.writeUint64String=Vt.prototype.vb,Vt.prototype.rb=function(t,e){null!=e&&(b(-2147483648<=e&&2147483648>e),null!=e&&(qt(this,t,0),this.a.wa(e)))},Vt.prototype.writeSint32=Vt.prototype.rb,Vt.prototype.sb=function(t,e){null!=e&&(b(-0x8000000000000000<=e&&0x8000000000000000>e),null!=e&&(qt(this,t,0),this.a.xa(e)))},Vt.prototype.writeSint64=Vt.prototype.sb,Vt.prototype.$d=function(t,e){null!=e&&null!=e&&(qt(this,t,0),this.a.W(e))},Vt.prototype.writeSintHash64=Vt.prototype.$d,Vt.prototype.Zd=function(t,e){null!=e&&null!=e&&(qt(this,t,0),this.a.Ta(e))},Vt.prototype.writeSint64String=Vt.prototype.Zd,Vt.prototype.Pa=function(t,e){null!=e&&(b(0<=e&&4294967296>e),qt(this,t,5),this.a.s(e))},Vt.prototype.writeFixed32=Vt.prototype.Pa,Vt.prototype.Qa=function(t,e){null!=e&&(b(0<=e&&0x10000000000000000>e),qt(this,t,1),this.a.V(e))},Vt.prototype.writeFixed64=Vt.prototype.Qa,Vt.prototype.nb=function(t,e){null!=e&&(e=Ut(e),qt(this,t,1),this.a.A(e.lo,e.hi))},Vt.prototype.writeFixed64String=Vt.prototype.nb,Vt.prototype.Ra=function(t,e){null!=e&&(b(-2147483648<=e&&2147483648>e),qt(this,t,5),this.a.S(e))},Vt.prototype.writeSfixed32=Vt.prototype.Ra,Vt.prototype.Sa=function(t,e){null!=e&&(b(-0x8000000000000000<=e&&0x8000000000000000>e),qt(this,t,1),this.a.T(e))},Vt.prototype.writeSfixed64=Vt.prototype.Sa,Vt.prototype.qb=function(t,e){null!=e&&(e=$t(e),qt(this,t,1),this.a.A(e.lo,e.hi))},Vt.prototype.writeSfixed64String=Vt.prototype.qb,Vt.prototype.L=function(t,e){null!=e&&(qt(this,t,5),this.a.L(e))},Vt.prototype.writeFloat=Vt.prototype.L,Vt.prototype.J=function(t,e){null!=e&&(qt(this,t,1),this.a.J(e))},Vt.prototype.writeDouble=Vt.prototype.J,Vt.prototype.I=function(t,e){null!=e&&(b("boolean"==typeof e||"number"==typeof e),qt(this,t,0),this.a.I(e))},Vt.prototype.writeBool=Vt.prototype.I,Vt.prototype.R=function(t,e){null!=e&&(b(-2147483648<=e&&2147483648>e),qt(this,t,0),this.a.M(e))},Vt.prototype.writeEnum=Vt.prototype.R,Vt.prototype.U=function(t,e){null!=e&&(t=Gt(this,t),this.a.U(e),Ht(this,t))},Vt.prototype.writeString=Vt.prototype.U,Vt.prototype.ja=function(t,e){null!=e&&(e=it(e),qt(this,t,2),this.a.j(e.length),zt(this,e))},Vt.prototype.writeBytes=Vt.prototype.ja,Vt.prototype.Rc=function(t,e,r){null!=e&&(t=Gt(this,t),r(e,this),Ht(this,t))},Vt.prototype.writeMessage=Vt.prototype.Rc,Vt.prototype.Sc=function(t,e,r){null!=e&&(qt(this,1,3),qt(this,2,0),this.a.M(t),t=Gt(this,3),r(e,this),Ht(this,t),qt(this,1,4))},Vt.prototype.writeMessageSet=Vt.prototype.Sc,Vt.prototype.Oc=function(t,e,r){null!=e&&(qt(this,t,3),r(e,this),qt(this,t,4))},Vt.prototype.writeGroup=Vt.prototype.Oc,Vt.prototype.K=function(t,e){null!=e&&(b(8==e.length),qt(this,t,1),this.a.K(e))},Vt.prototype.writeFixedHash64=Vt.prototype.K,Vt.prototype.N=function(t,e){null!=e&&(b(8==e.length),qt(this,t,0),this.a.N(e))},Vt.prototype.writeVarintHash64=Vt.prototype.N,Vt.prototype.A=function(t,e,r){qt(this,t,1),this.a.A(e,r)},Vt.prototype.writeSplitFixed64=Vt.prototype.A,Vt.prototype.l=function(t,e,r){qt(this,t,0),this.a.l(e,r)},Vt.prototype.writeSplitVarint64=Vt.prototype.l,Vt.prototype.tb=function(t,e,r){qt(this,t,0);var o=this.a;G(e,r,(function(t,e){o.l(t>>>0,e>>>0)}))},Vt.prototype.writeSplitZigzagVarint64=Vt.prototype.tb,Vt.prototype.Ed=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)Yt(this,t,e[r])},Vt.prototype.writeRepeatedInt32=Vt.prototype.Ed,Vt.prototype.Fd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.ob(t,e[r])},Vt.prototype.writeRepeatedInt32String=Vt.prototype.Fd,Vt.prototype.Gd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++){var o=e[r];null!=o&&(qt(this,t,0),this.a.ua(o))}},Vt.prototype.writeRepeatedInt64=Vt.prototype.Gd,Vt.prototype.Qd=function(t,e,r,o){if(null!=e)for(var i=0;i<e.length;i++)this.A(t,r(e[i]),o(e[i]))},Vt.prototype.writeRepeatedSplitFixed64=Vt.prototype.Qd,Vt.prototype.Rd=function(t,e,r,o){if(null!=e)for(var i=0;i<e.length;i++)this.l(t,r(e[i]),o(e[i]))},Vt.prototype.writeRepeatedSplitVarint64=Vt.prototype.Rd,Vt.prototype.Sd=function(t,e,r,o){if(null!=e)for(var i=0;i<e.length;i++)this.tb(t,r(e[i]),o(e[i]))},Vt.prototype.writeRepeatedSplitZigzagVarint64=Vt.prototype.Sd,Vt.prototype.Hd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.ka(t,e[r])},Vt.prototype.writeRepeatedInt64String=Vt.prototype.Hd,Vt.prototype.Ud=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)Kt(this,t,e[r])},Vt.prototype.writeRepeatedUint32=Vt.prototype.Ud,Vt.prototype.Vd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.ub(t,e[r])},Vt.prototype.writeRepeatedUint32String=Vt.prototype.Vd,Vt.prototype.Wd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++){var o=e[r];null!=o&&(qt(this,t,0),this.a.va(o))}},Vt.prototype.writeRepeatedUint64=Vt.prototype.Wd,Vt.prototype.Xd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.vb(t,e[r])},Vt.prototype.writeRepeatedUint64String=Vt.prototype.Xd,Vt.prototype.Md=function(t,e){if(null!=e)for(var r=0;r<e.length;r++){var o=e[r];null!=o&&(qt(this,t,0),this.a.wa(o))}},Vt.prototype.writeRepeatedSint32=Vt.prototype.Md,Vt.prototype.Nd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++){var o=e[r];null!=o&&(qt(this,t,0),this.a.xa(o))}},Vt.prototype.writeRepeatedSint64=Vt.prototype.Nd,Vt.prototype.Od=function(t,e){if(null!=e)for(var r=0;r<e.length;r++){var o=e[r];null!=o&&(qt(this,t,0),this.a.Ta(o))}},Vt.prototype.writeRepeatedSint64String=Vt.prototype.Od,Vt.prototype.Pd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++){var o=e[r];null!=o&&(qt(this,t,0),this.a.W(o))}},Vt.prototype.writeRepeatedSintHash64=Vt.prototype.Pd,Vt.prototype.yd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.Pa(t,e[r])},Vt.prototype.writeRepeatedFixed32=Vt.prototype.yd,Vt.prototype.zd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.Qa(t,e[r])},Vt.prototype.writeRepeatedFixed64=Vt.prototype.zd,Vt.prototype.Ad=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.nb(t,e[r])},Vt.prototype.writeRepeatedFixed64String=Vt.prototype.Ad,Vt.prototype.Jd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.Ra(t,e[r])},Vt.prototype.writeRepeatedSfixed32=Vt.prototype.Jd,Vt.prototype.Kd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.Sa(t,e[r])},Vt.prototype.writeRepeatedSfixed64=Vt.prototype.Kd,Vt.prototype.Ld=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.qb(t,e[r])},Vt.prototype.writeRepeatedSfixed64String=Vt.prototype.Ld,Vt.prototype.Cd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.L(t,e[r])},Vt.prototype.writeRepeatedFloat=Vt.prototype.Cd,Vt.prototype.wd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.J(t,e[r])},Vt.prototype.writeRepeatedDouble=Vt.prototype.wd,Vt.prototype.ud=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.I(t,e[r])},Vt.prototype.writeRepeatedBool=Vt.prototype.ud,Vt.prototype.xd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.R(t,e[r])},Vt.prototype.writeRepeatedEnum=Vt.prototype.xd,Vt.prototype.Td=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.U(t,e[r])},Vt.prototype.writeRepeatedString=Vt.prototype.Td,Vt.prototype.vd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.ja(t,e[r])},Vt.prototype.writeRepeatedBytes=Vt.prototype.vd,Vt.prototype.Id=function(t,e,r){if(null!=e)for(var o=0;o<e.length;o++){var i=Gt(this,t);r(e[o],this),Ht(this,i)}},Vt.prototype.writeRepeatedMessage=Vt.prototype.Id,Vt.prototype.Dd=function(t,e,r){if(null!=e)for(var o=0;o<e.length;o++)qt(this,t,3),r(e[o],this),qt(this,t,4)},Vt.prototype.writeRepeatedGroup=Vt.prototype.Dd,Vt.prototype.Bd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.K(t,e[r])},Vt.prototype.writeRepeatedFixedHash64=Vt.prototype.Bd,Vt.prototype.Yd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.N(t,e[r])},Vt.prototype.writeRepeatedVarintHash64=Vt.prototype.Yd,Vt.prototype.ad=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++)this.a.M(e[r]);Ht(this,t)}},Vt.prototype.writePackedInt32=Vt.prototype.ad,Vt.prototype.bd=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++)this.a.M(parseInt(e[r],10));Ht(this,t)}},Vt.prototype.writePackedInt32String=Vt.prototype.bd,Vt.prototype.cd=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++)this.a.ua(e[r]);Ht(this,t)}},Vt.prototype.writePackedInt64=Vt.prototype.cd,Vt.prototype.md=function(t,e,r,o){if(null!=e){t=Gt(this,t);for(var i=0;i<e.length;i++)this.a.A(r(e[i]),o(e[i]));Ht(this,t)}},Vt.prototype.writePackedSplitFixed64=Vt.prototype.md,Vt.prototype.nd=function(t,e,r,o){if(null!=e){t=Gt(this,t);for(var i=0;i<e.length;i++)this.a.l(r(e[i]),o(e[i]));Ht(this,t)}},Vt.prototype.writePackedSplitVarint64=Vt.prototype.nd,Vt.prototype.od=function(t,e,r,o){if(null!=e){t=Gt(this,t);for(var i=this.a,n=0;n<e.length;n++)G(r(e[n]),o(e[n]),(function(t,e){i.l(t>>>0,e>>>0)}));Ht(this,t)}},Vt.prototype.writePackedSplitZigzagVarint64=Vt.prototype.od,Vt.prototype.dd=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++){var o=$t(e[r]);this.a.l(o.lo,o.hi)}Ht(this,t)}},Vt.prototype.writePackedInt64String=Vt.prototype.dd,Vt.prototype.pd=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++)this.a.j(e[r]);Ht(this,t)}},Vt.prototype.writePackedUint32=Vt.prototype.pd,Vt.prototype.qd=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++)this.a.j(parseInt(e[r],10));Ht(this,t)}},Vt.prototype.writePackedUint32String=Vt.prototype.qd,Vt.prototype.rd=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++)this.a.va(e[r]);Ht(this,t)}},Vt.prototype.writePackedUint64=Vt.prototype.rd,Vt.prototype.sd=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++){var o=Ut(e[r]);this.a.l(o.lo,o.hi)}Ht(this,t)}},Vt.prototype.writePackedUint64String=Vt.prototype.sd,Vt.prototype.hd=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++)this.a.wa(e[r]);Ht(this,t)}},Vt.prototype.writePackedSint32=Vt.prototype.hd,Vt.prototype.jd=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++)this.a.xa(e[r]);Ht(this,t)}},Vt.prototype.writePackedSint64=Vt.prototype.jd,Vt.prototype.kd=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++)this.a.W(tt(e[r]));Ht(this,t)}},Vt.prototype.writePackedSint64String=Vt.prototype.kd,Vt.prototype.ld=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++)this.a.W(e[r]);Ht(this,t)}},Vt.prototype.writePackedSintHash64=Vt.prototype.ld,Vt.prototype.Wc=function(t,e){if(null!=e&&e.length)for(qt(this,t,2),this.a.j(4*e.length),t=0;t<e.length;t++)this.a.s(e[t])},Vt.prototype.writePackedFixed32=Vt.prototype.Wc,Vt.prototype.Xc=function(t,e){if(null!=e&&e.length)for(qt(this,t,2),this.a.j(8*e.length),t=0;t<e.length;t++)this.a.V(e[t])},Vt.prototype.writePackedFixed64=Vt.prototype.Xc,Vt.prototype.Yc=function(t,e){if(null!=e&&e.length)for(qt(this,t,2),this.a.j(8*e.length),t=0;t<e.length;t++){var r=Ut(e[t]);this.a.A(r.lo,r.hi)}},Vt.prototype.writePackedFixed64String=Vt.prototype.Yc,Vt.prototype.ed=function(t,e){if(null!=e&&e.length)for(qt(this,t,2),this.a.j(4*e.length),t=0;t<e.length;t++)this.a.S(e[t])},Vt.prototype.writePackedSfixed32=Vt.prototype.ed,Vt.prototype.fd=function(t,e){if(null!=e&&e.length)for(qt(this,t,2),this.a.j(8*e.length),t=0;t<e.length;t++)this.a.T(e[t])},Vt.prototype.writePackedSfixed64=Vt.prototype.fd,Vt.prototype.gd=function(t,e){if(null!=e&&e.length)for(qt(this,t,2),this.a.j(8*e.length),t=0;t<e.length;t++)this.a.ka(e[t])},Vt.prototype.writePackedSfixed64String=Vt.prototype.gd,Vt.prototype.$c=function(t,e){if(null!=e&&e.length)for(qt(this,t,2),this.a.j(4*e.length),t=0;t<e.length;t++)this.a.L(e[t])},Vt.prototype.writePackedFloat=Vt.prototype.$c,Vt.prototype.Uc=function(t,e){if(null!=e&&e.length)for(qt(this,t,2),this.a.j(8*e.length),t=0;t<e.length;t++)this.a.J(e[t])},Vt.prototype.writePackedDouble=Vt.prototype.Uc,Vt.prototype.Tc=function(t,e){if(null!=e&&e.length)for(qt(this,t,2),this.a.j(e.length),t=0;t<e.length;t++)this.a.I(e[t])},Vt.prototype.writePackedBool=Vt.prototype.Tc,Vt.prototype.Vc=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++)this.a.R(e[r]);Ht(this,t)}},Vt.prototype.writePackedEnum=Vt.prototype.Vc,Vt.prototype.Zc=function(t,e){if(null!=e&&e.length)for(qt(this,t,2),this.a.j(8*e.length),t=0;t<e.length;t++)this.a.K(e[t])},Vt.prototype.writePackedFixedHash64=Vt.prototype.Zc,Vt.prototype.td=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++)this.a.N(e[r]);Ht(this,t)}},Vt.prototype.writePackedVarintHash64=Vt.prototype.td,t.debug=jt,t.Map=S,t.Message=dt,t.BinaryReader=pt,t.BinaryWriter=Vt,t.ExtensionFieldInfo=lt,t.ExtensionFieldBinaryInfo=ft,t.exportSymbol=function(t,e,r){u(t,e,r)},t.inherits=function(t,e){function r(){}r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t},t.object={extend:function(t,e){for(var r,o,i=1;i<arguments.length;i++){for(r in o=arguments[i])t[r]=o[r];for(var n=0;n<f.length;n++)r=f[n],Object.prototype.hasOwnProperty.call(o,r)&&(t[r]=o[r])}}},t.typeOf=h}(p),function(t){!function(t){var e,o,n,s=function(t){function o(r){var o=t.call(this)||this;return e.set(o,[]),p.Message.initialize(o,Array.isArray(r)?r:[],0,-1,[],i(o,e,"f")),Array.isArray(r)||"object"!=typeof r||("path"in r&&null!=r.path&&(o.path=r.path),"digest"in r&&null!=r.digest&&(o.digest=r.digest)),o}return r(o,t),Object.defineProperty(o.prototype,"path",{get:function(){return p.Message.getFieldWithDefault(this,1,"")},set:function(t){p.Message.setField(this,1,t)},enumerable:!1,configurable:!0}),Object.defineProperty(o.prototype,"digest",{get:function(){return p.Message.getFieldWithDefault(this,2,new Uint8Array(0))},set:function(t){p.Message.setField(this,2,t)},enumerable:!1,configurable:!0}),o.fromObject=function(t){var e=new o({});return null!=t.path&&(e.path=t.path),null!=t.digest&&(e.digest=t.digest),e},o.prototype.toObject=function(){var t={};return null!=this.path&&(t.path=this.path),null!=this.digest&&(t.digest=this.digest),t},o.prototype.serialize=function(t){var e=t||new p.BinaryWriter;if(this.path.length&&e.writeString(1,this.path),this.digest.length&&e.writeBytes(2,this.digest),!t)return e.getResultBuffer()},o.deserialize=function(t){for(var e=t instanceof p.BinaryReader?t:new p.BinaryReader(t),r=new o;e.nextField()&&!e.isEndGroup();)switch(e.getFieldNumber()){case 1:r.path=e.readString();break;case 2:r.digest=e.readBytes();break;default:e.skipField()}return r},o.prototype.serializeBinary=function(){return this.serialize()},o.deserializeBinary=function(t){return o.deserialize(t)},o}(p.Message);e=new WeakMap,t.Input=s;var a=function(t){function e(e){var r=t.call(this)||this;return o.set(r,[]),p.Message.initialize(r,Array.isArray(e)?e:[],0,-1,[1,2],i(r,o,"f")),Array.isArray(e)||"object"!=typeof e||("arguments"in e&&null!=e.arguments&&(r.arguments=e.arguments),"inputs"in e&&null!=e.inputs&&(r.inputs=e.inputs),"request_id"in e&&null!=e.request_id&&(r.request_id=e.request_id),"cancel"in e&&null!=e.cancel&&(r.cancel=e.cancel),"verbosity"in e&&null!=e.verbosity&&(r.verbosity=e.verbosity),"sandbox_dir"in e&&null!=e.sandbox_dir&&(r.sandbox_dir=e.sandbox_dir)),r}return r(e,t),Object.defineProperty(e.prototype,"arguments",{get:function(){return p.Message.getFieldWithDefault(this,1,[])},set:function(t){p.Message.setField(this,1,t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"inputs",{get:function(){return p.Message.getRepeatedWrapperField(this,s,2)},set:function(t){p.Message.setRepeatedWrapperField(this,2,t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"request_id",{get:function(){return p.Message.getFieldWithDefault(this,3,0)},set:function(t){p.Message.setField(this,3,t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"cancel",{get:function(){return p.Message.getFieldWithDefault(this,4,!1)},set:function(t){p.Message.setField(this,4,t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"verbosity",{get:function(){return p.Message.getFieldWithDefault(this,5,0)},set:function(t){p.Message.setField(this,5,t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"sandbox_dir",{get:function(){return p.Message.getFieldWithDefault(this,6,"")},set:function(t){p.Message.setField(this,6,t)},enumerable:!1,configurable:!0}),e.fromObject=function(t){var r=new e({});return null!=t.arguments&&(r.arguments=t.arguments),null!=t.inputs&&(r.inputs=t.inputs.map((function(t){return s.fromObject(t)}))),null!=t.request_id&&(r.request_id=t.request_id),null!=t.cancel&&(r.cancel=t.cancel),null!=t.verbosity&&(r.verbosity=t.verbosity),null!=t.sandbox_dir&&(r.sandbox_dir=t.sandbox_dir),r},e.prototype.toObject=function(){var t={};return null!=this.arguments&&(t.arguments=this.arguments),null!=this.inputs&&(t.inputs=this.inputs.map((function(t){return t.toObject()}))),null!=this.request_id&&(t.request_id=this.request_id),null!=this.cancel&&(t.cancel=this.cancel),null!=this.verbosity&&(t.verbosity=this.verbosity),null!=this.sandbox_dir&&(t.sandbox_dir=this.sandbox_dir),t},e.prototype.serialize=function(t){var e=t||new p.BinaryWriter;if(this.arguments.length&&e.writeRepeatedString(1,this.arguments),this.inputs.length&&e.writeRepeatedMessage(2,this.inputs,(function(t){return t.serialize(e)})),0!=this.request_id&&e.writeInt32(3,this.request_id),0!=this.cancel&&e.writeBool(4,this.cancel),0!=this.verbosity&&e.writeInt32(5,this.verbosity),this.sandbox_dir.length&&e.writeString(6,this.sandbox_dir),!t)return e.getResultBuffer()},e.deserialize=function(t){for(var r=t instanceof p.BinaryReader?t:new p.BinaryReader(t),o=new e;r.nextField()&&!r.isEndGroup();)switch(r.getFieldNumber()){case 1:p.Message.addToRepeatedField(o,1,r.readString());break;case 2:r.readMessage(o.inputs,(function(){return p.Message.addToRepeatedWrapperField(o,2,s.deserialize(r),s)}));break;case 3:o.request_id=r.readInt32();break;case 4:o.cancel=r.readBool();break;case 5:o.verbosity=r.readInt32();break;case 6:o.sandbox_dir=r.readString();break;default:r.skipField()}return o},e.prototype.serializeBinary=function(){return this.serialize()},e.deserializeBinary=function(t){return e.deserialize(t)},e}(p.Message);o=new WeakMap,t.WorkRequest=a;var c=function(t){function e(e){var r=t.call(this)||this;return n.set(r,[]),p.Message.initialize(r,Array.isArray(e)?e:[],0,-1,[],i(r,n,"f")),Array.isArray(e)||"object"!=typeof e||("exit_code"in e&&null!=e.exit_code&&(r.exit_code=e.exit_code),"output"in e&&null!=e.output&&(r.output=e.output),"request_id"in e&&null!=e.request_id&&(r.request_id=e.request_id),"was_cancelled"in e&&null!=e.was_cancelled&&(r.was_cancelled=e.was_cancelled)),r}return r(e,t),Object.defineProperty(e.prototype,"exit_code",{get:function(){return p.Message.getFieldWithDefault(this,1,0)},set:function(t){p.Message.setField(this,1,t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"output",{get:function(){return p.Message.getFieldWithDefault(this,2,"")},set:function(t){p.Message.setField(this,2,t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"request_id",{get:function(){return p.Message.getFieldWithDefault(this,3,0)},set:function(t){p.Message.setField(this,3,t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"was_cancelled",{get:function(){return p.Message.getFieldWithDefault(this,4,!1)},set:function(t){p.Message.setField(this,4,t)},enumerable:!1,configurable:!0}),e.fromObject=function(t){var r=new e({});return null!=t.exit_code&&(r.exit_code=t.exit_code),null!=t.output&&(r.output=t.output),null!=t.request_id&&(r.request_id=t.request_id),null!=t.was_cancelled&&(r.was_cancelled=t.was_cancelled),r},e.prototype.toObject=function(){var t={};return null!=this.exit_code&&(t.exit_code=this.exit_code),null!=this.output&&(t.output=this.output),null!=this.request_id&&(t.request_id=this.request_id),null!=this.was_cancelled&&(t.was_cancelled=this.was_cancelled),t},e.prototype.serialize=function(t){var e=t||new p.BinaryWriter;if(0!=this.exit_code&&e.writeInt32(1,this.exit_code),this.output.length&&e.writeString(2,this.output),0!=this.request_id&&e.writeInt32(3,this.request_id),0!=this.was_cancelled&&e.writeBool(4,this.was_cancelled),!t)return e.getResultBuffer()},e.deserialize=function(t){for(var r=t instanceof p.BinaryReader?t:new p.BinaryReader(t),o=new e;r.nextField()&&!r.isEndGroup();)switch(r.getFieldNumber()){case 1:o.exit_code=r.readInt32();break;case 2:o.output=r.readString();break;case 3:o.request_id=r.readInt32();break;case 4:o.was_cancelled=r.readBool();break;default:r.skipField()}return o},e.prototype.serializeBinary=function(){return this.serialize()},e.deserializeBinary=function(t){return e.deserialize(t)},e}(p.Message);n=new WeakMap,t.WorkResponse=c}(t.worker||(t.worker={}))}(s||(s={})),Ie.enterWorkerLoop=function(e){var r,i,n,a,p;return function(t,e,r,o){return new(r||(r=Promise))((function(e,i){function n(t){try{a(o.next(t))}catch(t){i(t)}}function s(t){try{a(o.throw(t))}catch(t){i(t)}}function a(t){var o;t.done?e(t.value):(o=t.value,o instanceof r?o:new r((function(t){t(o)}))).then(n,s)}a((o=o.apply(t,[])).next())}))}(this,0,void 0,(function(){var c,u,h,l,f,d,y;return function(t,e){var r,o,i,n={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]},s=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return s.next=a(0),s.throw=a(1),s.return=a(2),"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(a){return function(p){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;s&&(s=0,a[0]&&(n=0)),n;)try{if(r=1,o&&(i=2&a[0]?o.return:a[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,a[1])).done)return i;switch(o=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return n.label++,{value:a[1],done:!1};case 5:n.label++,o=a[1],a=[0];continue;case 7:a=n.ops.pop(),n.trys.pop();continue;default:if(!((i=(i=n.trys).length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){n=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){n.label=a[1];break}if(6===a[0]&&n.label<i[1]){n.label=i[1],i=a;break}if(i&&n.label<i[2]){n.label=i[2],n.ops.push(a);break}i[2]&&n.ops.pop(),n.trys.pop();continue}a=e.call(t,n)}catch(t){a=[6,t],o=0}finally{r=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,p])}}}(this,(function(g){switch(g.label){case 0:c=new Map,u=Buffer.alloc(0),g.label=1;case 1:g.trys.push([1,6,7,12]),h=function(){a=d.value,l=!1;try{var r,o=a,i=Buffer.concat([u,o]),n=function(t){for(var e,r=0,o=0,i=0;i<5&&(r|=(127&(e=t[o++]))<<7*i,128&e);i++);return{size:r,headerSize:o}}(i);if(!(n.size<=i.length+n.headerSize))return u=i,"continue";r=(i=i.slice(n.headerSize)).slice(0,n.size),u=i.slice(n.size);var h=s.worker.WorkRequest.deserialize(r);if(h.cancel)return null===(p=c.get(h.request_id))||void 0===p||p.abort(),"continue";var f=new AbortController;c.set(h.request_id,f);var y=new s.worker.WorkResponse({request_id:h.request_id}),g=new Array,m=new t.Writable({write:function(t,e,r){g.push(Buffer.from(t,e)),null==r||r(void 0)},defaultEncoding:"utf-8"});e({arguments:h.arguments,inputs:h.inputs,request_id:h.request_id,verbosity:h.verbosity,sandbox_dir:h.sandbox_dir,signal:f.signal,output:m}).then((function(t){y.exit_code=t})).catch((function(t){var e;y.exit_code=1,e=String("object"==typeof t&&"stack"in t?t.stack:t),m.write(e),h.verbosity>0&&console.error(e)})).finally((function(){c.delete(h.request_id),m.end(),y.was_cancelled=f.signal.aborted,y.output=Buffer.concat(g).toString("utf-8");var t=y.serialize(),e=function(t){for(var e=Buffer.alloc(10),r=0;t>127;)e[r]=127&t|128,t>>>=7,r++;return e[r]=t,e.slice(0,r+1)}(t.byteLength);process.stdout.write(Buffer.concat([e,t]))}))}finally{l=!0}},l=!0,f=o(process.stdin),g.label=2;case 2:return[4,f.next()];case 3:if(d=g.sent(),r=d.done)return[3,5];h(),g.label=4;case 4:return[3,2];case 5:return[3,12];case 6:return y=g.sent(),i={error:y},[3,12];case 7:return g.trys.push([7,,10,11]),l||r||!(n=f.return)?[3,9]:[4,n.call(f)];case 8:g.sent(),g.label=9;case 9:return[3,11];case 10:if(i)throw i.error;return[7];case 11:return[7];case 12:return[2]}}))}))},Ie.isPersistentWorker=function(t){return-1!==t.indexOf("--persistent_worker")},Ie}());if(!Ce.isPersistentWorker(process.argv)){if(!process.cwd().startsWith("/b/f/w/")&&!process.cwd().includes("sandbox"))throw new Error("It's disallowed to compile outside of sandbox/or outside of a worker.");const t=await Pe(function(){const t=process.argv.slice(2).find((t=>t.startsWith("@")));if(void 0!==t){const e=t.split("@")[1],r=n.join(me,e);return p.readFileSync(r,"utf8").trim().split("\n")}throw new Error("Could not find params flag file.")}(),null);process.exitCode=t}if(Ce.isPersistentWorker(process.argv)){const t=new y,e=new Map;Ce.enterWorkerLoop((async r=>{if(void 0===r.inputs)throw new Error("No inputs specified in `WorkRequest`.");return console.error=(...t)=>{r.output.write(`${t.join(" ")}\n`)},await Pe(r.arguments,{fileCache:t,programCache:e,req:r})}))}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyJmaWxlX2NhY2hlL2Jhc2UubWpzIiwiZmlsZV9jYWNoZS9maWxlX2NhY2hlLm1qcyIsIi4uL25vZGVfbW9kdWxlcy8uYXNwZWN0X3J1bGVzX2pzL21lbWZzQDQuMTQuMC9ub2RlX21vZHVsZXMvbWVtZnMvbGliL2NvbnN0YW50cy5qcyIsIi4uL25vZGVfbW9kdWxlcy8uYXNwZWN0X3J1bGVzX2pzL21lbWZzQDQuMTQuMC9ub2RlX21vZHVsZXMvbWVtZnMvbGliL1N0YXRzLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5hc3BlY3RfcnVsZXNfanMvbWVtZnNANC4xNC4wL25vZGVfbW9kdWxlcy9tZW1mcy9saWIvaW50ZXJuYWwvYnVmZmVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5hc3BlY3RfcnVsZXNfanMvbWVtZnNANC4xNC4wL25vZGVfbW9kdWxlcy9tZW1mcy9saWIvaW50ZXJuYWwvZXJyb3JzLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5hc3BlY3RfcnVsZXNfanMvbWVtZnNANC4xNC4wL25vZGVfbW9kdWxlcy9tZW1mcy9saWIvZW5jb2RpbmcuanMiLCIuLi9ub2RlX21vZHVsZXMvLmFzcGVjdF9ydWxlc19qcy9tZW1mc0A0LjE0LjAvbm9kZV9tb2R1bGVzL21lbWZzL2xpYi9EaXJlbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvLmFzcGVjdF9ydWxlc19qcy9tZW1mc0A0LjE0LjAvbm9kZV9tb2R1bGVzL21lbWZzL2xpYi9wcm9jZXNzLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5hc3BlY3RfcnVsZXNfanMvbWVtZnNANC4xNC4wL25vZGVfbW9kdWxlcy9tZW1mcy9saWIvcXVldWVNaWNyb3Rhc2suanMiLCIuLi9ub2RlX21vZHVsZXMvLmFzcGVjdF9ydWxlc19qcy9tZW1mc0A0LjE0LjAvbm9kZV9tb2R1bGVzL21lbWZzL2xpYi9ub2RlL2NvbnN0YW50cy5qcyIsIi4uL25vZGVfbW9kdWxlcy8uYXNwZWN0X3J1bGVzX2pzL21lbWZzQDQuMTQuMC9ub2RlX21vZHVsZXMvbWVtZnMvbGliL25vZGUvdXRpbC5qcyIsIi4uL25vZGVfbW9kdWxlcy8uYXNwZWN0X3J1bGVzX2pzL3RzbGliQDIuOC4xL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYubWpzIiwiLi4vbm9kZV9tb2R1bGVzLy5hc3BlY3RfcnVsZXNfanMvdHJlZS1kdW1wQDEuMC4yX3RzbGliXzIuOC4xL25vZGVfbW9kdWxlcy90cmVlLWR1bXAvbGliL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5hc3BlY3RfcnVsZXNfanMvdHJlZS1kdW1wQDEuMC4yX3RzbGliXzIuOC4xL25vZGVfbW9kdWxlcy90cmVlLWR1bXAvbGliL3ByaW50VHJlZS5qcyIsIi4uL25vZGVfbW9kdWxlcy8uYXNwZWN0X3J1bGVzX2pzL3RyZWUtZHVtcEAxLjAuMl90c2xpYl8yLjguMS9ub2RlX21vZHVsZXMvdHJlZS1kdW1wL2xpYi9wcmludEJpbmFyeS5qcyIsIi4uL25vZGVfbW9kdWxlcy8uYXNwZWN0X3J1bGVzX2pzL21lbWZzQDQuMTQuMC9ub2RlX21vZHVsZXMvbWVtZnMvbGliL3ByaW50L2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5hc3BlY3RfcnVsZXNfanMvbWVtZnNANC4xNC4wL25vZGVfbW9kdWxlcy9tZW1mcy9saWIvbm9kZS10by1mc2EvdXRpbC5qcyIsIi4uL25vZGVfbW9kdWxlcy8uYXNwZWN0X3J1bGVzX2pzL21lbWZzQDQuMTQuMC9ub2RlX21vZHVsZXMvbWVtZnMvbGliL3ZvbHVtZS5qcyIsIi4uL25vZGVfbW9kdWxlcy8uYXNwZWN0X3J1bGVzX2pzL21lbWZzQDQuMTQuMC9ub2RlX21vZHVsZXMvbWVtZnMvbGliL25vZGUuanMiLCIuLi9ub2RlX21vZHVsZXMvLmFzcGVjdF9ydWxlc19qcy9tZW1mc0A0LjE0LjAvbm9kZV9tb2R1bGVzL21lbWZzL2xpYi9zZXRJbW1lZGlhdGUuanMiLCIuLi9ub2RlX21vZHVsZXMvLmFzcGVjdF9ydWxlc19qcy9tZW1mc0A0LjE0LjAvbm9kZV9tb2R1bGVzL21lbWZzL2xpYi9zZXRUaW1lb3V0VW5yZWYuanMiLCIuLi9ub2RlX21vZHVsZXMvLmFzcGVjdF9ydWxlc19qcy9tZW1mc0A0LjE0LjAvbm9kZV9tb2R1bGVzL21lbWZzL2xpYi9ub2RlL0ZpbGVIYW5kbGUuanMiLCIuLi9ub2RlX21vZHVsZXMvLmFzcGVjdF9ydWxlc19qcy9tZW1mc0A0LjE0LjAvbm9kZV9tb2R1bGVzL21lbWZzL2xpYi9ub2RlL0ZzUHJvbWlzZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvLmFzcGVjdF9ydWxlc19qcy9tZW1mc0A0LjE0LjAvbm9kZV9tb2R1bGVzL21lbWZzL2xpYi9ub2RlL29wdGlvbnMuanMiLCIuLi9ub2RlX21vZHVsZXMvLmFzcGVjdF9ydWxlc19qcy9tZW1mc0A0LjE0LjAvbm9kZV9tb2R1bGVzL21lbWZzL2xpYi9EaXIuanMiLCIuLi9ub2RlX21vZHVsZXMvLmFzcGVjdF9ydWxlc19qcy9tZW1mc0A0LjE0LjAvbm9kZV9tb2R1bGVzL21lbWZzL2xpYi9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy8uYXNwZWN0X3J1bGVzX2pzL21lbWZzQDQuMTQuMC9ub2RlX21vZHVsZXMvbWVtZnMvbGliL25vZGUvbGlzdHMvZnNTeW5jaHJvbm91c0FwaUxpc3QuanMiLCIuLi9ub2RlX21vZHVsZXMvLmFzcGVjdF9ydWxlc19qcy9tZW1mc0A0LjE0LjAvbm9kZV9tb2R1bGVzL21lbWZzL2xpYi9ub2RlL2xpc3RzL2ZzQ2FsbGJhY2tBcGlMaXN0LmpzIiwiYmF6ZWxfc2FmZV9maWxlc3lzdGVtLm1qcyIsImNvbnN0YW50cy5tanMiLCJmaWxlX3N5c3RlbS5tanMiLCJtb2RpZmllZF9yZXNvdXJjZXMubWpzIiwicHJvZ3JhbV9jYWNoZS5tanMiLCJwcm9ncmFtX2Fic3RyYWN0aW9ucy9wcm9ncmFtX2Rlc2NyaXB0b3IubWpzIiwicHJvZ3JhbV9hYnN0cmFjdGlvbnMvbmd0c2MubWpzIiwicHJvZ3JhbV9hYnN0cmFjdGlvbnMvdmFuaWxsYV90cy5tanMiLCJwcm9ncmFtX2Fic3RyYWN0aW9ucy9zdHJ1dHVyZV9yZXVzZWQubWpzIiwibG9vcC5tanMiLCJjYWNoZV9jb21waWxlcl9ob3N0Lm1qcyIsImNhbmNlbGxhdGlvbl90b2tlbi5tanMiLCJwcm90b2NvbC93b3JrZXIuY2pzIiwiaW5kZXgubWpzIiwicGFyYW1zX2FyZ19maWxlLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENhY2hlIGV4cG9zZXMgYSB0cml2aWFsIExSVSBjYWNoZS5cbiAqXG4gKiBUaGlzIGNvZGUgdXNlcyB0aGUgZmFjdCB0aGF0IEphdmFTY3JpcHQgaGFzaCBtYXBzIGFyZSBsaW5rZWQgbGlzdHMgLSBhZnRlclxuICogcmVhY2hpbmcgdGhlIGNhY2hlIHNpemUgbGltaXQsIGl0IGRlbGV0ZXMgdGhlIG9sZGVzdCAoZmlyc3QpIGVudHJpZXMuIFVzZWRcbiAqIGNhY2hlIGVudHJpZXMgYXJlIG1vdmVkIHRvIHRoZSBlbmQgb2YgdGhlIGxpc3QgYnkgZGVsZXRpbmcgYW5kIHJlLWluc2VydGluZy5cbiAqL1xuZXhwb3J0IGNsYXNzIENhY2hlIHtcbiAgICBuYW1lO1xuICAgIG1hcCA9IG5ldyBNYXAoKTtcbiAgICBjb25zdHJ1Y3RvcihuYW1lKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgfVxuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMubWFwLnNldChrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgZ2V0KGtleSwgdXBkYXRlQ2FjaGUgPSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IGVudHJ5ID0gdGhpcy5tYXAuZ2V0KGtleSk7XG4gICAgICAgIGlmICh1cGRhdGVDYWNoZSkge1xuICAgICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgLy8gTW92ZSBhbiBlbnRyeSB0byB0aGUgZW5kIG9mIHRoZSBjYWNoZSBieSBkZWxldGluZyBhbmQgcmUtaW5zZXJ0aW5nXG4gICAgICAgICAgICAgICAgLy8gaXQuXG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuc2V0KGtleSwgZW50cnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbnRyeTtcbiAgICB9XG4gICAgZGVsZXRlKGtleSkge1xuICAgICAgICB0aGlzLm1hcC5kZWxldGUoa2V5KTtcbiAgICB9XG4gICAgZXZpY3QoZnJhY3Rpb24gPSAyKSB7XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsU2l6ZSA9IHRoaXMubWFwLnNpemU7XG4gICAgICAgIGxldCBudW1iZXJLZXlzVG9Ecm9wID0gTWF0aC5jZWlsKG9yaWdpbmFsU2l6ZSAvIGZyYWN0aW9uKTtcbiAgICAgICAgaWYgKG51bWJlcktleXNUb0Ryb3AgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIE1hcCBrZXlzIGFyZSBpdGVyYXRlZCBpbiBpbnNlcnRpb24gb3JkZXIuIFNpbmNlIHdlIHJlaW5zZXJ0IG9uIGFjY2Vzc1xuICAgICAgICAvLyB0aGlzIGlzIGluZGVlZCBhIExSVSBzdHJhdGVneS5cbiAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWFwL2tleXNcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgdGhpcy5tYXAua2V5cygpKSB7XG4gICAgICAgICAgICBpZiAobnVtYmVyS2V5c1RvRHJvcCA9PT0gMClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIHRoaXMubWFwLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgbnVtYmVyS2V5c1RvRHJvcC0tO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGtleXNEcm9wcGVkID0gb3JpZ2luYWxTaXplIC0gdGhpcy5tYXAuc2l6ZTtcbiAgICAgICAgcmV0dXJuIGtleXNEcm9wcGVkO1xuICAgIH1cbiAgICBrZXlzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAua2V5cygpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENhY2hlIH0gZnJvbSAnLi9iYXNlLm1qcyc7XG5jb25zdCBERUZBVUxUX01BWF9NRU1fVVNBR0UgPSAxMDI0ICogKDEgPDwgMjApOyAvKiAxIE1CICovXG4vKipcbiAqIEZpbGVDYWNoZSBpcyBhIHRyaXZpYWwgTFJVIGNhY2hlIGZvciB0eXBlc2NyaXB0LXBhcnNlZCBiYXplbC1vdXRwdXQgZmlsZXMuXG4gKlxuICogQ2FjaGUgZW50cmllcyBpbmNsdWRlIGFuIG9wYXF1ZSBiYXplbC1zdXBwbGllZCBkaWdlc3QgdG8gdHJhY2sgc3RhbGVuZXNzLlxuICogRXhwZWN0ZWQgZGlnZXN0cyBtdXN0IGJlIHNldCAodXNpbmcgdXBkYXRlQ2FjaGUpIGJlZm9yZSB1c2luZyB0aGUgY2FjaGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBGaWxlQ2FjaGUge1xuICAgIGZpbGVDYWNoZSA9IG5ldyBDYWNoZSgnZmlsZScpO1xuICAgIC8qKlxuICAgICAqIEZpbGVDYWNoZSBkb2VzIG5vdCBrbm93IGhvdyB0byBjb25zdHJ1Y3QgQmF6ZWwncyBvcGFxdWUgZGlnZXN0cy4gVGhpc1xuICAgICAqIGZpZWxkIGNhY2hlcyB0aGUgbGFzdCAob3IgY3VycmVudCkgY29tcGlsZSBydW4ncyBkaWdlc3RzLCBzbyB0aGF0IGNvZGVcbiAgICAgKiBiZWxvdyBrbm93cyB3aGF0IGRpZ2VzdCB0byBhc3NpZ24gdG8gYSBuZXdseSBsb2FkZWQgZmlsZS5cbiAgICAgKi9cbiAgICBsYXN0RGlnZXN0cyA9IG5ldyBNYXAoKTtcbiAgICAvKipcbiAgICAgKiBGaWxlQ2FjaGUgY2FuIGVudGVyIGEgZGVnZW5lcmF0ZSBzdGF0ZSwgd2hlcmUgYWxsIGNhY2hlIGVudHJpZXMgYXJlIHBpbm5lZFxuICAgICAqIGJ5IGxhc3REaWdlc3RzLCBidXQgdGhlIHN5c3RlbSBpcyBzdGlsbCBvdXQgb2YgbWVtb3J5LiBJbiB0aGF0IGNhc2UsIGRvIG5vdFxuICAgICAqIGF0dGVtcHQgdG8gZnJlZSBtZW1vcnkgdW50aWwgbGFzdERpZ2VzdHMgaGFzIGNoYW5nZWQuXG4gICAgICovXG4gICAgY2Fubm90RXZpY3QgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBCZWNhdXNlIHdlIGNhbm5vdCBtZWFzdXNlIHRoZSBjYWNoZSBtZW1vcnkgZm9vdHByaW50IGRpcmVjdGx5LCB3ZSBldmljdFxuICAgICAqIHdoZW4gdGhlIHByb2Nlc3MnIHRvdGFsIG1lbW9yeSB1c2FnZSBnb2VzIGJleW9uZCB0aGlzIG51bWJlci5cbiAgICAgKi9cbiAgICBtYXhNZW1vcnlVc2FnZSA9IERFRkFVTFRfTUFYX01FTV9VU0FHRTtcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjYWNoZSB3aXRoIHRoZSBnaXZlbiBkaWdlc3RzLlxuICAgICAqXG4gICAgICogdXBkYXRlQ2FjaGUgbXVzdCBiZSBjYWxsZWQgYmVmb3JlIGxvYWRpbmcgZmlsZXMgLSBvbmx5IGZpbGVzIHRoYXQgd2VyZVxuICAgICAqIHVwZGF0ZWQgKHdpdGggYSBkaWdlc3QpIHByZXZpb3VzbHkgY2FuIGJlIGxvYWRlZC5cbiAgICAgKi9cbiAgICB1cGRhdGVDYWNoZShpbnB1dHMpIHtcbiAgICAgICAgdGhpcy5sYXN0RGlnZXN0cyA9IG5ldyBNYXAoKTtcbiAgICAgICAgZm9yIChjb25zdCBbcGF0aCwgZGlnZXN0XSBvZiBpbnB1dHMuZW50cmllcygpKSB7XG4gICAgICAgICAgICB0aGlzLmxhc3REaWdlc3RzLnNldChwYXRoLCBkaWdlc3QpO1xuICAgICAgICAgICAgLy8gRXZpY3QgdGhlIGZpbGUgZW50cnkgaWYgdGhlIGRpZ2VzdCBoYXMgY2hhbmdlZC5cbiAgICAgICAgICAgIGNvbnN0IGVudHJ5ID0gdGhpcy5maWxlQ2FjaGUuZ2V0KHBhdGgsIC8qdXBkYXRlQ2FjaGU9Ki8gZmFsc2UpO1xuICAgICAgICAgICAgaWYgKGVudHJ5ICYmICFpc1NhbWVEaWdlc3QoZW50cnkuZGlnZXN0LCBkaWdlc3QpKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignZXZpY3RpbmcnLCBwYXRoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGVDYWNoZS5kZWxldGUocGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYW5ub3RFdmljdCA9IGZhbHNlO1xuICAgIH1cbiAgICBnZXRMYXN0RGlnZXN0KGZpbGVQYXRoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxhc3REaWdlc3RzLmdldChmaWxlUGF0aCk7XG4gICAgfVxuICAgIGdldENhY2hlKGZpbGVQYXRoKSB7XG4gICAgICAgIGNvbnN0IGVudHJ5ID0gdGhpcy5maWxlQ2FjaGUuZ2V0KGZpbGVQYXRoLCAvKnVwZGF0ZUNhY2hlPSovIHRydWUpO1xuICAgICAgICBpZiAoZW50cnkpXG4gICAgICAgICAgICByZXR1cm4gZW50cnkudmFsdWU7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHB1dENhY2hlKGZpbGVQYXRoLCBlbnRyeSkge1xuICAgICAgICB0aGlzLm1heWJlRnJlZU1lbW9yeSgpO1xuICAgICAgICB0aGlzLmZpbGVDYWNoZS5zZXQoZmlsZVBhdGgsIGVudHJ5KTtcbiAgICB9XG4gICAgaW5DYWNoZShmaWxlUGF0aCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLmdldENhY2hlKGZpbGVQYXRoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBjYWNoZSBzaG91bGQgZnJlZSBzb21lIG1lbW9yeS5cbiAgICAgKlxuICAgICAqIERlZmluZWQgYXMgYSBwcm9wZXJ0eSBzbyBpdCBjYW4gYmUgb3ZlcnJpZGRlbiBpbiB0ZXN0cy5cbiAgICAgKi9cbiAgICBzaG91bGRGcmVlTWVtb3J5ID0gKGhlYXBVc2FnZSkgPT4ge1xuICAgICAgICByZXR1cm4gaGVhcFVzYWdlID4gdGhpcy5tYXhNZW1vcnlVc2FnZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEZyZWVzIG1lbW9yeSBpZiByZXF1aXJlZC4gUmV0dXJucyB0aGUgbnVtYmVyIG9mIGRyb3BwZWQgZW50cmllcy5cbiAgICAgKi9cbiAgICBtYXliZUZyZWVNZW1vcnkoKSB7XG4gICAgICAgIC8vIEZhc3QgcGF0aDogcHJvY2Vzcy5tZW1vcnlVc2FnZSgpIGlzIHJlbGF0aXZlbHkgZXhwZW5zaXZlOyBkb24ndCBjYWxsIGl0XG4gICAgICAgIC8vIGlmIG5vdCBuZWNlc3NhcnkuXG4gICAgICAgIGlmICh0aGlzLmNhbm5vdEV2aWN0KVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIGNvbnN0IGhlYXBVc2FnZSA9IHByb2Nlc3MubWVtb3J5VXNhZ2UoKS5oZWFwVXNlZDtcbiAgICAgICAgaWYgKCF0aGlzLnNob3VsZEZyZWVNZW1vcnkoaGVhcFVzYWdlKSlcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICBjb25zdCBkcm9wcGVkID0gdGhpcy5maWxlQ2FjaGUuZXZpY3QoKTtcbiAgICAgICAgaWYgKGRyb3BwZWQgPT09IDApIHtcbiAgICAgICAgICAgIC8vIEZyZWVpbmcgbWVtb3J5IGRpZCBub3QgZHJvcCBhbnkgY2FjaGUgZW50cmllcywgYmVjYXVzZSBhbGwgYXJlIHBpbm5lZC5cbiAgICAgICAgICAgIC8vIFN0b3AgZXZpY3RpbmcgdW50aWwgdGhlIHBpbm5lZCBsaXN0IGNoYW5nZXMgYWdhaW4uIFRoaXMgcHJldmVudHNcbiAgICAgICAgICAgIC8vIGRlZ2VuZXJhdGluZyBpbnRvIGFuIE8obl4yKSBzaXR1YXRpb24gd2hlcmUgZWFjaCBmaWxlIGxvYWQgaXRlcmF0ZXNcbiAgICAgICAgICAgIC8vIHRocm91Z2ggdGhlIGxpc3Qgb2YgYWxsIGZpbGVzLCB0cnlpbmcgdG8gZXZpY3QgY2FjaGUga2V5cyBpbiB2YWluXG4gICAgICAgICAgICAvLyBiZWNhdXNlIGFsbCBhcmUgcGlubmVkLlxuICAgICAgICAgICAgdGhpcy5jYW5ub3RFdmljdCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRyb3BwZWQ7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU2FtZURpZ2VzdChhLCBiKSB7XG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbnN0YW50cyA9IHZvaWQgMDtcbmV4cG9ydHMuY29uc3RhbnRzID0ge1xuICAgIE9fUkRPTkxZOiAwLFxuICAgIE9fV1JPTkxZOiAxLFxuICAgIE9fUkRXUjogMixcbiAgICBTX0lGTVQ6IDYxNDQwLFxuICAgIFNfSUZSRUc6IDMyNzY4LFxuICAgIFNfSUZESVI6IDE2Mzg0LFxuICAgIFNfSUZDSFI6IDgxOTIsXG4gICAgU19JRkJMSzogMjQ1NzYsXG4gICAgU19JRklGTzogNDA5NixcbiAgICBTX0lGTE5LOiA0MDk2MCxcbiAgICBTX0lGU09DSzogNDkxNTIsXG4gICAgT19DUkVBVDogNjQsXG4gICAgT19FWENMOiAxMjgsXG4gICAgT19OT0NUVFk6IDI1NixcbiAgICBPX1RSVU5DOiA1MTIsXG4gICAgT19BUFBFTkQ6IDEwMjQsXG4gICAgT19ESVJFQ1RPUlk6IDY1NTM2LFxuICAgIE9fTk9BVElNRTogMjYyMTQ0LFxuICAgIE9fTk9GT0xMT1c6IDEzMTA3MixcbiAgICBPX1NZTkM6IDEwNTI2NzIsXG4gICAgT19TWU1MSU5LOiAyMDk3MTUyLFxuICAgIE9fRElSRUNUOiAxNjM4NCxcbiAgICBPX05PTkJMT0NLOiAyMDQ4LFxuICAgIFNfSVJXWFU6IDQ0OCxcbiAgICBTX0lSVVNSOiAyNTYsXG4gICAgU19JV1VTUjogMTI4LFxuICAgIFNfSVhVU1I6IDY0LFxuICAgIFNfSVJXWEc6IDU2LFxuICAgIFNfSVJHUlA6IDMyLFxuICAgIFNfSVdHUlA6IDE2LFxuICAgIFNfSVhHUlA6IDgsXG4gICAgU19JUldYTzogNyxcbiAgICBTX0lST1RIOiA0LFxuICAgIFNfSVdPVEg6IDIsXG4gICAgU19JWE9USDogMSxcbiAgICBGX09LOiAwLFxuICAgIFJfT0s6IDQsXG4gICAgV19PSzogMixcbiAgICBYX09LOiAxLFxuICAgIFVWX0ZTX1NZTUxJTktfRElSOiAxLFxuICAgIFVWX0ZTX1NZTUxJTktfSlVOQ1RJT046IDIsXG4gICAgVVZfRlNfQ09QWUZJTEVfRVhDTDogMSxcbiAgICBVVl9GU19DT1BZRklMRV9GSUNMT05FOiAyLFxuICAgIFVWX0ZTX0NPUFlGSUxFX0ZJQ0xPTkVfRk9SQ0U6IDQsXG4gICAgQ09QWUZJTEVfRVhDTDogMSxcbiAgICBDT1BZRklMRV9GSUNMT05FOiAyLFxuICAgIENPUFlGSUxFX0ZJQ0xPTkVfRk9SQ0U6IDQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdGF0cyA9IHZvaWQgMDtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuY29uc3QgeyBTX0lGTVQsIFNfSUZESVIsIFNfSUZSRUcsIFNfSUZCTEssIFNfSUZDSFIsIFNfSUZMTkssIFNfSUZJRk8sIFNfSUZTT0NLIH0gPSBjb25zdGFudHNfMS5jb25zdGFudHM7XG4vKipcbiAqIFN0YXRpc3RpY3MgYWJvdXQgYSBmaWxlL2RpcmVjdG9yeSwgbGlrZSBgZnMuU3RhdHNgLlxuICovXG5jbGFzcyBTdGF0cyB7XG4gICAgc3RhdGljIGJ1aWxkKG5vZGUsIGJpZ2ludCA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHN0YXRzID0gbmV3IFN0YXRzKCk7XG4gICAgICAgIGNvbnN0IHsgdWlkLCBnaWQsIGF0aW1lLCBtdGltZSwgY3RpbWUgfSA9IG5vZGU7XG4gICAgICAgIGNvbnN0IGdldFN0YXROdW1iZXIgPSAhYmlnaW50ID8gbnVtYmVyID0+IG51bWJlciA6IG51bWJlciA9PiBCaWdJbnQobnVtYmVyKTtcbiAgICAgICAgLy8gQ29weSBhbGwgdmFsdWVzIG9uIFN0YXRzIGZyb20gTm9kZSwgc28gdGhhdCBpZiBOb2RlIHZhbHVlc1xuICAgICAgICAvLyBjaGFuZ2UsIHZhbHVlcyBvbiBTdGF0cyB3b3VsZCBzdGlsbCBiZSB0aGUgb2xkIG9uZXMsXG4gICAgICAgIC8vIGp1c3QgbGlrZSBpbiBOb2RlIGZzLlxuICAgICAgICBzdGF0cy51aWQgPSBnZXRTdGF0TnVtYmVyKHVpZCk7XG4gICAgICAgIHN0YXRzLmdpZCA9IGdldFN0YXROdW1iZXIoZ2lkKTtcbiAgICAgICAgc3RhdHMucmRldiA9IGdldFN0YXROdW1iZXIoMCk7XG4gICAgICAgIHN0YXRzLmJsa3NpemUgPSBnZXRTdGF0TnVtYmVyKDQwOTYpO1xuICAgICAgICBzdGF0cy5pbm8gPSBnZXRTdGF0TnVtYmVyKG5vZGUuaW5vKTtcbiAgICAgICAgc3RhdHMuc2l6ZSA9IGdldFN0YXROdW1iZXIobm9kZS5nZXRTaXplKCkpO1xuICAgICAgICBzdGF0cy5ibG9ja3MgPSBnZXRTdGF0TnVtYmVyKDEpO1xuICAgICAgICBzdGF0cy5hdGltZSA9IGF0aW1lO1xuICAgICAgICBzdGF0cy5tdGltZSA9IG10aW1lO1xuICAgICAgICBzdGF0cy5jdGltZSA9IGN0aW1lO1xuICAgICAgICBzdGF0cy5iaXJ0aHRpbWUgPSBjdGltZTtcbiAgICAgICAgc3RhdHMuYXRpbWVNcyA9IGdldFN0YXROdW1iZXIoYXRpbWUuZ2V0VGltZSgpKTtcbiAgICAgICAgc3RhdHMubXRpbWVNcyA9IGdldFN0YXROdW1iZXIobXRpbWUuZ2V0VGltZSgpKTtcbiAgICAgICAgY29uc3QgY3RpbWVNcyA9IGdldFN0YXROdW1iZXIoY3RpbWUuZ2V0VGltZSgpKTtcbiAgICAgICAgc3RhdHMuY3RpbWVNcyA9IGN0aW1lTXM7XG4gICAgICAgIHN0YXRzLmJpcnRodGltZU1zID0gY3RpbWVNcztcbiAgICAgICAgaWYgKGJpZ2ludCkge1xuICAgICAgICAgICAgc3RhdHMuYXRpbWVOcyA9IEJpZ0ludChhdGltZS5nZXRUaW1lKCkpICogQmlnSW50KDEwMDAwMDApO1xuICAgICAgICAgICAgc3RhdHMubXRpbWVOcyA9IEJpZ0ludChtdGltZS5nZXRUaW1lKCkpICogQmlnSW50KDEwMDAwMDApO1xuICAgICAgICAgICAgY29uc3QgY3RpbWVOcyA9IEJpZ0ludChjdGltZS5nZXRUaW1lKCkpICogQmlnSW50KDEwMDAwMDApO1xuICAgICAgICAgICAgc3RhdHMuY3RpbWVOcyA9IGN0aW1lTnM7XG4gICAgICAgICAgICBzdGF0cy5iaXJ0aHRpbWVOcyA9IGN0aW1lTnM7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdHMuZGV2ID0gZ2V0U3RhdE51bWJlcigwKTtcbiAgICAgICAgc3RhdHMubW9kZSA9IGdldFN0YXROdW1iZXIobm9kZS5tb2RlKTtcbiAgICAgICAgc3RhdHMubmxpbmsgPSBnZXRTdGF0TnVtYmVyKG5vZGUubmxpbmspO1xuICAgICAgICByZXR1cm4gc3RhdHM7XG4gICAgfVxuICAgIF9jaGVja01vZGVQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgICAgICByZXR1cm4gKE51bWJlcih0aGlzLm1vZGUpICYgU19JRk1UKSA9PT0gcHJvcGVydHk7XG4gICAgfVxuICAgIGlzRGlyZWN0b3J5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hlY2tNb2RlUHJvcGVydHkoU19JRkRJUik7XG4gICAgfVxuICAgIGlzRmlsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoZWNrTW9kZVByb3BlcnR5KFNfSUZSRUcpO1xuICAgIH1cbiAgICBpc0Jsb2NrRGV2aWNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hlY2tNb2RlUHJvcGVydHkoU19JRkJMSyk7XG4gICAgfVxuICAgIGlzQ2hhcmFjdGVyRGV2aWNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hlY2tNb2RlUHJvcGVydHkoU19JRkNIUik7XG4gICAgfVxuICAgIGlzU3ltYm9saWNMaW5rKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hlY2tNb2RlUHJvcGVydHkoU19JRkxOSyk7XG4gICAgfVxuICAgIGlzRklGTygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoZWNrTW9kZVByb3BlcnR5KFNfSUZJRk8pO1xuICAgIH1cbiAgICBpc1NvY2tldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoZWNrTW9kZVByb3BlcnR5KFNfSUZTT0NLKTtcbiAgICB9XG59XG5leHBvcnRzLlN0YXRzID0gU3RhdHM7XG5leHBvcnRzLmRlZmF1bHQgPSBTdGF0cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0YXRzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5idWZmZXJGcm9tID0gZXhwb3J0cy5idWZmZXJBbGxvY1Vuc2FmZSA9IGV4cG9ydHMuQnVmZmVyID0gdm9pZCAwO1xuY29uc3QgYnVmZmVyXzEgPSByZXF1aXJlKFwiYnVmZmVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQnVmZmVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBidWZmZXJfMS5CdWZmZXI7IH0gfSk7XG5mdW5jdGlvbiBidWZmZXJWMFAxMlBvbnlmaWxsKGFyZzAsIC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gbmV3IGJ1ZmZlcl8xLkJ1ZmZlcihhcmcwLCAuLi5hcmdzKTtcbn1cbmNvbnN0IGJ1ZmZlckFsbG9jVW5zYWZlID0gYnVmZmVyXzEuQnVmZmVyLmFsbG9jVW5zYWZlIHx8IGJ1ZmZlclYwUDEyUG9ueWZpbGw7XG5leHBvcnRzLmJ1ZmZlckFsbG9jVW5zYWZlID0gYnVmZmVyQWxsb2NVbnNhZmU7XG5jb25zdCBidWZmZXJGcm9tID0gYnVmZmVyXzEuQnVmZmVyLmZyb20gfHwgYnVmZmVyVjBQMTJQb255ZmlsbDtcbmV4cG9ydHMuYnVmZmVyRnJvbSA9IGJ1ZmZlckZyb207XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBUaGUgd2hvbGUgcG9pbnQgYmVoaW5kIHRoaXMgaW50ZXJuYWwgbW9kdWxlIGlzIHRvIGFsbG93IE5vZGUuanMgdG8gbm9cbi8vIGxvbmdlciBiZSBmb3JjZWQgdG8gdHJlYXQgZXZlcnkgZXJyb3IgbWVzc2FnZSBjaGFuZ2UgYXMgYSBzZW12ZXItbWFqb3Jcbi8vIGNoYW5nZS4gVGhlIE5vZGVFcnJvciBjbGFzc2VzIGhlcmUgYWxsIGV4cG9zZSBhIGBjb2RlYCBwcm9wZXJ0eSB3aG9zZVxuLy8gdmFsdWUgc3RhdGljYWxseSBhbmQgcGVybWFuZW50bHkgaWRlbnRpZmllcyB0aGUgZXJyb3IuIFdoaWxlIHRoZSBlcnJvclxuLy8gbWVzc2FnZSBtYXkgY2hhbmdlLCB0aGUgY29kZSBzaG91bGQgbm90LlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bc3NlcnRpb25FcnJvciA9IGV4cG9ydHMuUmFuZ2VFcnJvciA9IGV4cG9ydHMuVHlwZUVycm9yID0gZXhwb3J0cy5FcnJvciA9IHZvaWQgMDtcbmV4cG9ydHMubWVzc2FnZSA9IG1lc3NhZ2U7XG5leHBvcnRzLkUgPSBFO1xuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZShcImFzc2VydFwiKTtcbmNvbnN0IHV0aWwgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IGtDb2RlID0gdHlwZW9mIFN5bWJvbCA9PT0gJ3VuZGVmaW5lZCcgPyAnX2tDb2RlJyA6IFN5bWJvbCgnY29kZScpO1xuY29uc3QgbWVzc2FnZXMgPSB7fTsgLy8gbmV3IE1hcCgpO1xuZnVuY3Rpb24gbWFrZU5vZGVFcnJvcihCYXNlKSB7XG4gICAgcmV0dXJuIGNsYXNzIE5vZGVFcnJvciBleHRlbmRzIEJhc2Uge1xuICAgICAgICBjb25zdHJ1Y3RvcihrZXksIC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIHN1cGVyKG1lc3NhZ2Uoa2V5LCBhcmdzKSk7XG4gICAgICAgICAgICB0aGlzLmNvZGUgPSBrZXk7XG4gICAgICAgICAgICB0aGlzW2tDb2RlXSA9IGtleTtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IGAke3N1cGVyLm5hbWV9IFske3RoaXNba0NvZGVdfV1gO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmNvbnN0IGcgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogZ2xvYmFsO1xuY2xhc3MgQXNzZXJ0aW9uRXJyb3IgZXh0ZW5kcyBnLkVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcgfHwgb3B0aW9ucyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGV4cG9ydHMuVHlwZUVycm9yKCdFUlJfSU5WQUxJRF9BUkdfVFlQRScsICdvcHRpb25zJywgJ29iamVjdCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHN1cGVyKG9wdGlvbnMubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdXBlcihgJHt1dGlsLmluc3BlY3Qob3B0aW9ucy5hY3R1YWwpLnNsaWNlKDAsIDEyOCl9IGAgK1xuICAgICAgICAgICAgICAgIGAke29wdGlvbnMub3BlcmF0b3J9ICR7dXRpbC5pbnNwZWN0KG9wdGlvbnMuZXhwZWN0ZWQpLnNsaWNlKDAsIDEyOCl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5nZW5lcmF0ZWRNZXNzYWdlID0gIW9wdGlvbnMubWVzc2FnZTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ0Fzc2VydGlvbkVycm9yIFtFUlJfQVNTRVJUSU9OXSc7XG4gICAgICAgIHRoaXMuY29kZSA9ICdFUlJfQVNTRVJUSU9OJztcbiAgICAgICAgdGhpcy5hY3R1YWwgPSBvcHRpb25zLmFjdHVhbDtcbiAgICAgICAgdGhpcy5leHBlY3RlZCA9IG9wdGlvbnMuZXhwZWN0ZWQ7XG4gICAgICAgIHRoaXMub3BlcmF0b3IgPSBvcHRpb25zLm9wZXJhdG9yO1xuICAgICAgICBleHBvcnRzLkVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIG9wdGlvbnMuc3RhY2tTdGFydEZ1bmN0aW9uKTtcbiAgICB9XG59XG5leHBvcnRzLkFzc2VydGlvbkVycm9yID0gQXNzZXJ0aW9uRXJyb3I7XG5mdW5jdGlvbiBtZXNzYWdlKGtleSwgYXJncykge1xuICAgIGFzc2VydC5zdHJpY3RFcXVhbCh0eXBlb2Yga2V5LCAnc3RyaW5nJyk7XG4gICAgLy8gY29uc3QgbXNnID0gbWVzc2FnZXMuZ2V0KGtleSk7XG4gICAgY29uc3QgbXNnID0gbWVzc2FnZXNba2V5XTtcbiAgICBhc3NlcnQobXNnLCBgQW4gaW52YWxpZCBlcnJvciBtZXNzYWdlIGtleSB3YXMgdXNlZDogJHtrZXl9LmApO1xuICAgIGxldCBmbXQ7XG4gICAgaWYgKHR5cGVvZiBtc2cgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZm10ID0gbXNnO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZm10ID0gdXRpbC5mb3JtYXQ7XG4gICAgICAgIGlmIChhcmdzID09PSB1bmRlZmluZWQgfHwgYXJncy5sZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm4gbXNnO1xuICAgICAgICBhcmdzLnVuc2hpZnQobXNnKTtcbiAgICB9XG4gICAgcmV0dXJuIFN0cmluZyhmbXQuYXBwbHkobnVsbCwgYXJncykpO1xufVxuLy8gVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmVnaXN0ZXJpbmcgdGhlIGVycm9yIGNvZGVzLiBPbmx5IHVzZWQgaGVyZS4gRXhwb3J0ZWRcbi8vICpvbmx5KiB0byBhbGxvdyBmb3IgdGVzdGluZy5cbmZ1bmN0aW9uIEUoc3ltLCB2YWwpIHtcbiAgICBtZXNzYWdlc1tzeW1dID0gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJyA/IHZhbCA6IFN0cmluZyh2YWwpO1xufVxuZXhwb3J0cy5FcnJvciA9IG1ha2VOb2RlRXJyb3IoZy5FcnJvcik7XG5leHBvcnRzLlR5cGVFcnJvciA9IG1ha2VOb2RlRXJyb3IoZy5UeXBlRXJyb3IpO1xuZXhwb3J0cy5SYW5nZUVycm9yID0gbWFrZU5vZGVFcnJvcihnLlJhbmdlRXJyb3IpO1xuLy8gVG8gZGVjbGFyZSBhbiBlcnJvciBtZXNzYWdlLCB1c2UgdGhlIEUoc3ltLCB2YWwpIGZ1bmN0aW9uIGFib3ZlLiBUaGUgc3ltXG4vLyBtdXN0IGJlIGFuIHVwcGVyIGNhc2Ugc3RyaW5nLiBUaGUgdmFsIGNhbiBiZSBlaXRoZXIgYSBmdW5jdGlvbiBvciBhIHN0cmluZy5cbi8vIFRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZ1bmN0aW9uIG11c3QgYmUgYSBzdHJpbmcuXG4vLyBFeGFtcGxlczpcbi8vIEUoJ0VYQU1QTEVfS0VZMScsICdUaGlzIGlzIHRoZSBlcnJvciB2YWx1ZScpO1xuLy8gRSgnRVhBTVBMRV9LRVkyJywgKGEsIGIpID0+IHJldHVybiBgJHthfSAke2J9YCk7XG4vL1xuLy8gT25jZSBhbiBlcnJvciBjb2RlIGhhcyBiZWVuIGFzc2lnbmVkLCB0aGUgY29kZSBpdHNlbGYgTVVTVCBOT1QgY2hhbmdlIGFuZFxuLy8gYW55IGdpdmVuIGVycm9yIGNvZGUgbXVzdCBuZXZlciBiZSByZXVzZWQgdG8gaWRlbnRpZnkgYSBkaWZmZXJlbnQgZXJyb3IuXG4vL1xuLy8gQW55IGVycm9yIGNvZGUgYWRkZWQgaGVyZSBzaG91bGQgYWxzbyBiZSBhZGRlZCB0byB0aGUgZG9jdW1lbnRhdGlvblxuLy9cbi8vIE5vdGU6IFBsZWFzZSB0cnkgdG8ga2VlcCB0aGVzZSBpbiBhbHBoYWJldGljYWwgb3JkZXJcbkUoJ0VSUl9BUkdfTk9UX0lURVJBQkxFJywgJyVzIG11c3QgYmUgaXRlcmFibGUnKTtcbkUoJ0VSUl9BU1NFUlRJT04nLCAnJXMnKTtcbkUoJ0VSUl9CVUZGRVJfT1VUX09GX0JPVU5EUycsIGJ1ZmZlck91dE9mQm91bmRzKTtcbkUoJ0VSUl9DSElMRF9DTE9TRURfQkVGT1JFX1JFUExZJywgJ0NoaWxkIGNsb3NlZCBiZWZvcmUgcmVwbHkgcmVjZWl2ZWQnKTtcbkUoJ0VSUl9DT05TT0xFX1dSSVRBQkxFX1NUUkVBTScsICdDb25zb2xlIGV4cGVjdHMgYSB3cml0YWJsZSBzdHJlYW0gaW5zdGFuY2UgZm9yICVzJyk7XG5FKCdFUlJfQ1BVX1VTQUdFJywgJ1VuYWJsZSB0byBvYnRhaW4gY3B1IHVzYWdlICVzJyk7XG5FKCdFUlJfRE5TX1NFVF9TRVJWRVJTX0ZBSUxFRCcsIChlcnIsIHNlcnZlcnMpID0+IGBjLWFyZXMgZmFpbGVkIHRvIHNldCBzZXJ2ZXJzOiBcIiR7ZXJyfVwiIFske3NlcnZlcnN9XWApO1xuRSgnRVJSX0ZBTFNZX1ZBTFVFX1JFSkVDVElPTicsICdQcm9taXNlIHdhcyByZWplY3RlZCB3aXRoIGZhbHN5IHZhbHVlJyk7XG5FKCdFUlJfRU5DT0RJTkdfTk9UX1NVUFBPUlRFRCcsIGVuYyA9PiBgVGhlIFwiJHtlbmN9XCIgZW5jb2RpbmcgaXMgbm90IHN1cHBvcnRlZGApO1xuRSgnRVJSX0VOQ09ESU5HX0lOVkFMSURfRU5DT0RFRF9EQVRBJywgZW5jID0+IGBUaGUgZW5jb2RlZCBkYXRhIHdhcyBub3QgdmFsaWQgZm9yIGVuY29kaW5nICR7ZW5jfWApO1xuRSgnRVJSX0hUVFBfSEVBREVSU19TRU5UJywgJ0Nhbm5vdCByZW5kZXIgaGVhZGVycyBhZnRlciB0aGV5IGFyZSBzZW50IHRvIHRoZSBjbGllbnQnKTtcbkUoJ0VSUl9IVFRQX0lOVkFMSURfU1RBVFVTX0NPREUnLCAnSW52YWxpZCBzdGF0dXMgY29kZTogJXMnKTtcbkUoJ0VSUl9IVFRQX1RSQUlMRVJfSU5WQUxJRCcsICdUcmFpbGVycyBhcmUgaW52YWxpZCB3aXRoIHRoaXMgdHJhbnNmZXIgZW5jb2RpbmcnKTtcbkUoJ0VSUl9JTkRFWF9PVVRfT0ZfUkFOR0UnLCAnSW5kZXggb3V0IG9mIHJhbmdlJyk7XG5FKCdFUlJfSU5WQUxJRF9BUkdfVFlQRScsIGludmFsaWRBcmdUeXBlKTtcbkUoJ0VSUl9JTlZBTElEX0FSUkFZX0xFTkdUSCcsIChuYW1lLCBsZW4sIGFjdHVhbCkgPT4ge1xuICAgIGFzc2VydC5zdHJpY3RFcXVhbCh0eXBlb2YgYWN0dWFsLCAnbnVtYmVyJyk7XG4gICAgcmV0dXJuIGBUaGUgYXJyYXkgXCIke25hbWV9XCIgKGxlbmd0aCAke2FjdHVhbH0pIG11c3QgYmUgb2YgbGVuZ3RoICR7bGVufS5gO1xufSk7XG5FKCdFUlJfSU5WQUxJRF9CVUZGRVJfU0laRScsICdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgJXMnKTtcbkUoJ0VSUl9JTlZBTElEX0NBTExCQUNLJywgJ0NhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuRSgnRVJSX0lOVkFMSURfQ0hBUicsICdJbnZhbGlkIGNoYXJhY3RlciBpbiAlcycpO1xuRSgnRVJSX0lOVkFMSURfQ1VSU09SX1BPUycsICdDYW5ub3Qgc2V0IGN1cnNvciByb3cgd2l0aG91dCBzZXR0aW5nIGl0cyBjb2x1bW4nKTtcbkUoJ0VSUl9JTlZBTElEX0ZEJywgJ1wiZmRcIiBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlcjogJXMnKTtcbkUoJ0VSUl9JTlZBTElEX0ZJTEVfVVJMX0hPU1QnLCAnRmlsZSBVUkwgaG9zdCBtdXN0IGJlIFwibG9jYWxob3N0XCIgb3IgZW1wdHkgb24gJXMnKTtcbkUoJ0VSUl9JTlZBTElEX0ZJTEVfVVJMX1BBVEgnLCAnRmlsZSBVUkwgcGF0aCAlcycpO1xuRSgnRVJSX0lOVkFMSURfSEFORExFX1RZUEUnLCAnVGhpcyBoYW5kbGUgdHlwZSBjYW5ub3QgYmUgc2VudCcpO1xuRSgnRVJSX0lOVkFMSURfSVBfQUREUkVTUycsICdJbnZhbGlkIElQIGFkZHJlc3M6ICVzJyk7XG5FKCdFUlJfSU5WQUxJRF9PUFRfVkFMVUUnLCAobmFtZSwgdmFsdWUpID0+IHtcbiAgICByZXR1cm4gYFRoZSB2YWx1ZSBcIiR7U3RyaW5nKHZhbHVlKX1cIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCIke25hbWV9XCJgO1xufSk7XG5FKCdFUlJfSU5WQUxJRF9PUFRfVkFMVUVfRU5DT0RJTkcnLCB2YWx1ZSA9PiBgVGhlIHZhbHVlIFwiJHtTdHJpbmcodmFsdWUpfVwiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcImVuY29kaW5nXCJgKTtcbkUoJ0VSUl9JTlZBTElEX1JFUExfRVZBTF9DT05GSUcnLCAnQ2Fubm90IHNwZWNpZnkgYm90aCBcImJyZWFrRXZhbE9uU2lnaW50XCIgYW5kIFwiZXZhbFwiIGZvciBSRVBMJyk7XG5FKCdFUlJfSU5WQUxJRF9TWU5DX0ZPUktfSU5QVVQnLCAnQXN5bmNocm9ub3VzIGZvcmtzIGRvIG5vdCBzdXBwb3J0IEJ1ZmZlciwgVWludDhBcnJheSBvciBzdHJpbmcgaW5wdXQ6ICVzJyk7XG5FKCdFUlJfSU5WQUxJRF9USElTJywgJ1ZhbHVlIG9mIFwidGhpc1wiIG11c3QgYmUgb2YgdHlwZSAlcycpO1xuRSgnRVJSX0lOVkFMSURfVFVQTEUnLCAnJXMgbXVzdCBiZSBhbiBpdGVyYWJsZSAlcyB0dXBsZScpO1xuRSgnRVJSX0lOVkFMSURfVVJMJywgJ0ludmFsaWQgVVJMOiAlcycpO1xuRSgnRVJSX0lOVkFMSURfVVJMX1NDSEVNRScsIGV4cGVjdGVkID0+IGBUaGUgVVJMIG11c3QgYmUgJHtvbmVPZihleHBlY3RlZCwgJ3NjaGVtZScpfWApO1xuRSgnRVJSX0lQQ19DSEFOTkVMX0NMT1NFRCcsICdDaGFubmVsIGNsb3NlZCcpO1xuRSgnRVJSX0lQQ19ESVNDT05ORUNURUQnLCAnSVBDIGNoYW5uZWwgaXMgYWxyZWFkeSBkaXNjb25uZWN0ZWQnKTtcbkUoJ0VSUl9JUENfT05FX1BJUEUnLCAnQ2hpbGQgcHJvY2VzcyBjYW4gaGF2ZSBvbmx5IG9uZSBJUEMgcGlwZScpO1xuRSgnRVJSX0lQQ19TWU5DX0ZPUksnLCAnSVBDIGNhbm5vdCBiZSB1c2VkIHdpdGggc3luY2hyb25vdXMgZm9ya3MnKTtcbkUoJ0VSUl9NSVNTSU5HX0FSR1MnLCBtaXNzaW5nQXJncyk7XG5FKCdFUlJfTVVMVElQTEVfQ0FMTEJBQ0snLCAnQ2FsbGJhY2sgY2FsbGVkIG11bHRpcGxlIHRpbWVzJyk7XG5FKCdFUlJfTkFQSV9DT05TX0ZVTkNUSU9OJywgJ0NvbnN0cnVjdG9yIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuRSgnRVJSX05BUElfQ09OU19QUk9UT1RZUEVfT0JKRUNUJywgJ0NvbnN0cnVjdG9yLnByb3RvdHlwZSBtdXN0IGJlIGFuIG9iamVjdCcpO1xuRSgnRVJSX05PX0NSWVBUTycsICdOb2RlLmpzIGlzIG5vdCBjb21waWxlZCB3aXRoIE9wZW5TU0wgY3J5cHRvIHN1cHBvcnQnKTtcbkUoJ0VSUl9OT19MT05HRVJfU1VQUE9SVEVEJywgJyVzIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnKTtcbkUoJ0VSUl9QQVJTRV9ISVNUT1JZX0RBVEEnLCAnQ291bGQgbm90IHBhcnNlIGhpc3RvcnkgZGF0YSBpbiAlcycpO1xuRSgnRVJSX1NPQ0tFVF9BTFJFQURZX0JPVU5EJywgJ1NvY2tldCBpcyBhbHJlYWR5IGJvdW5kJyk7XG5FKCdFUlJfU09DS0VUX0JBRF9QT1JUJywgJ1BvcnQgc2hvdWxkIGJlID4gMCBhbmQgPCA2NTUzNicpO1xuRSgnRVJSX1NPQ0tFVF9CQURfVFlQRScsICdCYWQgc29ja2V0IHR5cGUgc3BlY2lmaWVkLiBWYWxpZCB0eXBlcyBhcmU6IHVkcDQsIHVkcDYnKTtcbkUoJ0VSUl9TT0NLRVRfQ0FOTk9UX1NFTkQnLCAnVW5hYmxlIHRvIHNlbmQgZGF0YScpO1xuRSgnRVJSX1NPQ0tFVF9DTE9TRUQnLCAnU29ja2V0IGlzIGNsb3NlZCcpO1xuRSgnRVJSX1NPQ0tFVF9ER1JBTV9OT1RfUlVOTklORycsICdOb3QgcnVubmluZycpO1xuRSgnRVJSX1NUREVSUl9DTE9TRScsICdwcm9jZXNzLnN0ZGVyciBjYW5ub3QgYmUgY2xvc2VkJyk7XG5FKCdFUlJfU1RET1VUX0NMT1NFJywgJ3Byb2Nlc3Muc3Rkb3V0IGNhbm5vdCBiZSBjbG9zZWQnKTtcbkUoJ0VSUl9TVFJFQU1fV1JBUCcsICdTdHJlYW0gaGFzIFN0cmluZ0RlY29kZXIgc2V0IG9yIGlzIGluIG9iamVjdE1vZGUnKTtcbkUoJ0VSUl9UTFNfQ0VSVF9BTFROQU1FX0lOVkFMSUQnLCBcIkhvc3RuYW1lL0lQIGRvZXMgbm90IG1hdGNoIGNlcnRpZmljYXRlJ3MgYWx0bmFtZXM6ICVzXCIpO1xuRSgnRVJSX1RMU19ESF9QQVJBTV9TSVpFJywgc2l6ZSA9PiBgREggcGFyYW1ldGVyIHNpemUgJHtzaXplfSBpcyBsZXNzIHRoYW4gMjA0OGApO1xuRSgnRVJSX1RMU19IQU5EU0hBS0VfVElNRU9VVCcsICdUTFMgaGFuZHNoYWtlIHRpbWVvdXQnKTtcbkUoJ0VSUl9UTFNfUkVORUdPVElBVElPTl9GQUlMRUQnLCAnRmFpbGVkIHRvIHJlbmVnb3RpYXRlJyk7XG5FKCdFUlJfVExTX1JFUVVJUkVEX1NFUlZFUl9OQU1FJywgJ1wic2VydmVybmFtZVwiIGlzIHJlcXVpcmVkIHBhcmFtZXRlciBmb3IgU2VydmVyLmFkZENvbnRleHQnKTtcbkUoJ0VSUl9UTFNfU0VTU0lPTl9BVFRBQ0snLCAnVFNMIHNlc3Npb24gcmVuZWdvdGlhdGlvbiBhdHRhY2sgZGV0ZWN0ZWQnKTtcbkUoJ0VSUl9UUkFOU0ZPUk1fQUxSRUFEWV9UUkFOU0ZPUk1JTkcnLCAnQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHN0aWxsIHRyYW5zZm9ybWluZycpO1xuRSgnRVJSX1RSQU5TRk9STV9XSVRIX0xFTkdUSF8wJywgJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiB3cml0YWJsZVN0YXRlLmxlbmd0aCAhPSAwJyk7XG5FKCdFUlJfVU5LTk9XTl9FTkNPRElORycsICdVbmtub3duIGVuY29kaW5nOiAlcycpO1xuRSgnRVJSX1VOS05PV05fU0lHTkFMJywgJ1Vua25vd24gc2lnbmFsOiAlcycpO1xuRSgnRVJSX1VOS05PV05fU1RESU5fVFlQRScsICdVbmtub3duIHN0ZGluIGZpbGUgdHlwZScpO1xuRSgnRVJSX1VOS05PV05fU1RSRUFNX1RZUEUnLCAnVW5rbm93biBzdHJlYW0gZmlsZSB0eXBlJyk7XG5FKCdFUlJfVjhCUkVBS0lURVJBVE9SJywgJ0Z1bGwgSUNVIGRhdGEgbm90IGluc3RhbGxlZC4gJyArICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL3dpa2kvSW50bCcpO1xuZnVuY3Rpb24gaW52YWxpZEFyZ1R5cGUobmFtZSwgZXhwZWN0ZWQsIGFjdHVhbCkge1xuICAgIGFzc2VydChuYW1lLCAnbmFtZSBpcyByZXF1aXJlZCcpO1xuICAgIC8vIGRldGVybWluZXI6ICdtdXN0IGJlJyBvciAnbXVzdCBub3QgYmUnXG4gICAgbGV0IGRldGVybWluZXI7XG4gICAgaWYgKGV4cGVjdGVkLmluY2x1ZGVzKCdub3QgJykpIHtcbiAgICAgICAgZGV0ZXJtaW5lciA9ICdtdXN0IG5vdCBiZSc7XG4gICAgICAgIGV4cGVjdGVkID0gZXhwZWN0ZWQuc3BsaXQoJ25vdCAnKVsxXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGRldGVybWluZXIgPSAnbXVzdCBiZSc7XG4gICAgfVxuICAgIGxldCBtc2c7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobmFtZSkpIHtcbiAgICAgICAgY29uc3QgbmFtZXMgPSBuYW1lLm1hcCh2YWwgPT4gYFwiJHt2YWx9XCJgKS5qb2luKCcsICcpO1xuICAgICAgICBtc2cgPSBgVGhlICR7bmFtZXN9IGFyZ3VtZW50cyAke2RldGVybWluZXJ9ICR7b25lT2YoZXhwZWN0ZWQsICd0eXBlJyl9YDtcbiAgICB9XG4gICAgZWxzZSBpZiAobmFtZS5pbmNsdWRlcygnIGFyZ3VtZW50JykpIHtcbiAgICAgICAgLy8gZm9yIHRoZSBjYXNlIGxpa2UgJ2ZpcnN0IGFyZ3VtZW50J1xuICAgICAgICBtc2cgPSBgVGhlICR7bmFtZX0gJHtkZXRlcm1pbmVyfSAke29uZU9mKGV4cGVjdGVkLCAndHlwZScpfWA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCB0eXBlID0gbmFtZS5pbmNsdWRlcygnLicpID8gJ3Byb3BlcnR5JyA6ICdhcmd1bWVudCc7XG4gICAgICAgIG1zZyA9IGBUaGUgXCIke25hbWV9XCIgJHt0eXBlfSAke2RldGVybWluZXJ9ICR7b25lT2YoZXhwZWN0ZWQsICd0eXBlJyl9YDtcbiAgICB9XG4gICAgLy8gaWYgYWN0dWFsIHZhbHVlIHJlY2VpdmVkLCBvdXRwdXQgaXRcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSB7XG4gICAgICAgIG1zZyArPSBgLiBSZWNlaXZlZCB0eXBlICR7YWN0dWFsICE9PSBudWxsID8gdHlwZW9mIGFjdHVhbCA6ICdudWxsJ31gO1xuICAgIH1cbiAgICByZXR1cm4gbXNnO1xufVxuZnVuY3Rpb24gbWlzc2luZ0FyZ3MoLi4uYXJncykge1xuICAgIGFzc2VydChhcmdzLmxlbmd0aCA+IDAsICdBdCBsZWFzdCBvbmUgYXJnIG5lZWRzIHRvIGJlIHNwZWNpZmllZCcpO1xuICAgIGxldCBtc2cgPSAnVGhlICc7XG4gICAgY29uc3QgbGVuID0gYXJncy5sZW5ndGg7XG4gICAgYXJncyA9IGFyZ3MubWFwKGEgPT4gYFwiJHthfVwiYCk7XG4gICAgc3dpdGNoIChsZW4pIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgbXNnICs9IGAke2FyZ3NbMF19IGFyZ3VtZW50YDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBtc2cgKz0gYCR7YXJnc1swXX0gYW5kICR7YXJnc1sxXX0gYXJndW1lbnRzYDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgbXNnICs9IGFyZ3Muc2xpY2UoMCwgbGVuIC0gMSkuam9pbignLCAnKTtcbiAgICAgICAgICAgIG1zZyArPSBgLCBhbmQgJHthcmdzW2xlbiAtIDFdfSBhcmd1bWVudHNgO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBgJHttc2d9IG11c3QgYmUgc3BlY2lmaWVkYDtcbn1cbmZ1bmN0aW9uIG9uZU9mKGV4cGVjdGVkLCB0aGluZykge1xuICAgIGFzc2VydChleHBlY3RlZCwgJ2V4cGVjdGVkIGlzIHJlcXVpcmVkJyk7XG4gICAgYXNzZXJ0KHR5cGVvZiB0aGluZyA9PT0gJ3N0cmluZycsICd0aGluZyBpcyByZXF1aXJlZCcpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdGVkKSkge1xuICAgICAgICBjb25zdCBsZW4gPSBleHBlY3RlZC5sZW5ndGg7XG4gICAgICAgIGFzc2VydChsZW4gPiAwLCAnQXQgbGVhc3Qgb25lIGV4cGVjdGVkIHZhbHVlIG5lZWRzIHRvIGJlIHNwZWNpZmllZCcpO1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgZXhwZWN0ZWQgPSBleHBlY3RlZC5tYXAoaSA9PiBTdHJpbmcoaSkpO1xuICAgICAgICBpZiAobGVuID4gMikge1xuICAgICAgICAgICAgcmV0dXJuIGBvbmUgb2YgJHt0aGluZ30gJHtleHBlY3RlZC5zbGljZSgwLCBsZW4gLSAxKS5qb2luKCcsICcpfSwgb3IgYCArIGV4cGVjdGVkW2xlbiAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxlbiA9PT0gMikge1xuICAgICAgICAgICAgcmV0dXJuIGBvbmUgb2YgJHt0aGluZ30gJHtleHBlY3RlZFswXX0gb3IgJHtleHBlY3RlZFsxXX1gO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGBvZiAke3RoaW5nfSAke2V4cGVjdGVkWzBdfWA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBgb2YgJHt0aGluZ30gJHtTdHJpbmcoZXhwZWN0ZWQpfWA7XG4gICAgfVxufVxuZnVuY3Rpb24gYnVmZmVyT3V0T2ZCb3VuZHMobmFtZSwgaXNXcml0aW5nKSB7XG4gICAgaWYgKGlzV3JpdGluZykge1xuICAgICAgICByZXR1cm4gJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBgXCIke25hbWV9XCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzYDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkVOQ09ESU5HX1VURjggPSB2b2lkIDA7XG5leHBvcnRzLmFzc2VydEVuY29kaW5nID0gYXNzZXJ0RW5jb2Rpbmc7XG5leHBvcnRzLnN0clRvRW5jb2RpbmcgPSBzdHJUb0VuY29kaW5nO1xuY29uc3QgYnVmZmVyXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9idWZmZXJcIik7XG5jb25zdCBlcnJvcnMgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9lcnJvcnNcIik7XG5leHBvcnRzLkVOQ09ESU5HX1VURjggPSAndXRmOCc7XG5mdW5jdGlvbiBhc3NlcnRFbmNvZGluZyhlbmNvZGluZykge1xuICAgIGlmIChlbmNvZGluZyAmJiAhYnVmZmVyXzEuQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKVxuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzLlR5cGVFcnJvcignRVJSX0lOVkFMSURfT1BUX1ZBTFVFX0VOQ09ESU5HJywgZW5jb2RpbmcpO1xufVxuZnVuY3Rpb24gc3RyVG9FbmNvZGluZyhzdHIsIGVuY29kaW5nKSB7XG4gICAgaWYgKCFlbmNvZGluZyB8fCBlbmNvZGluZyA9PT0gZXhwb3J0cy5FTkNPRElOR19VVEY4KVxuICAgICAgICByZXR1cm4gc3RyOyAvLyBVVEYtOFxuICAgIGlmIChlbmNvZGluZyA9PT0gJ2J1ZmZlcicpXG4gICAgICAgIHJldHVybiBuZXcgYnVmZmVyXzEuQnVmZmVyKHN0cik7IC8vIGBidWZmZXJgIGVuY29kaW5nXG4gICAgcmV0dXJuIG5ldyBidWZmZXJfMS5CdWZmZXIoc3RyKS50b1N0cmluZyhlbmNvZGluZyk7IC8vIEN1c3RvbSBlbmNvZGluZ1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW5jb2RpbmcuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRpcmVudCA9IHZvaWQgMDtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuY29uc3QgZW5jb2RpbmdfMSA9IHJlcXVpcmUoXCIuL2VuY29kaW5nXCIpO1xuY29uc3QgeyBTX0lGTVQsIFNfSUZESVIsIFNfSUZSRUcsIFNfSUZCTEssIFNfSUZDSFIsIFNfSUZMTkssIFNfSUZJRk8sIFNfSUZTT0NLIH0gPSBjb25zdGFudHNfMS5jb25zdGFudHM7XG4vKipcbiAqIEEgZGlyZWN0b3J5IGVudHJ5LCBsaWtlIGBmcy5EaXJlbnRgLlxuICovXG5jbGFzcyBEaXJlbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm5hbWUgPSAnJztcbiAgICAgICAgdGhpcy5wYXRoID0gJyc7XG4gICAgICAgIHRoaXMucGFyZW50UGF0aCA9ICcnO1xuICAgICAgICB0aGlzLm1vZGUgPSAwO1xuICAgIH1cbiAgICBzdGF0aWMgYnVpbGQobGluaywgZW5jb2RpbmcpIHtcbiAgICAgICAgY29uc3QgZGlyZW50ID0gbmV3IERpcmVudCgpO1xuICAgICAgICBjb25zdCB7IG1vZGUgfSA9IGxpbmsuZ2V0Tm9kZSgpO1xuICAgICAgICBkaXJlbnQubmFtZSA9ICgwLCBlbmNvZGluZ18xLnN0clRvRW5jb2RpbmcpKGxpbmsuZ2V0TmFtZSgpLCBlbmNvZGluZyk7XG4gICAgICAgIGRpcmVudC5tb2RlID0gbW9kZTtcbiAgICAgICAgZGlyZW50LnBhdGggPSBsaW5rLmdldFBhcmVudFBhdGgoKTtcbiAgICAgICAgZGlyZW50LnBhcmVudFBhdGggPSBkaXJlbnQucGF0aDtcbiAgICAgICAgcmV0dXJuIGRpcmVudDtcbiAgICB9XG4gICAgX2NoZWNrTW9kZVByb3BlcnR5KHByb3BlcnR5KSB7XG4gICAgICAgIHJldHVybiAodGhpcy5tb2RlICYgU19JRk1UKSA9PT0gcHJvcGVydHk7XG4gICAgfVxuICAgIGlzRGlyZWN0b3J5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hlY2tNb2RlUHJvcGVydHkoU19JRkRJUik7XG4gICAgfVxuICAgIGlzRmlsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoZWNrTW9kZVByb3BlcnR5KFNfSUZSRUcpO1xuICAgIH1cbiAgICBpc0Jsb2NrRGV2aWNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hlY2tNb2RlUHJvcGVydHkoU19JRkJMSyk7XG4gICAgfVxuICAgIGlzQ2hhcmFjdGVyRGV2aWNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hlY2tNb2RlUHJvcGVydHkoU19JRkNIUik7XG4gICAgfVxuICAgIGlzU3ltYm9saWNMaW5rKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hlY2tNb2RlUHJvcGVydHkoU19JRkxOSyk7XG4gICAgfVxuICAgIGlzRklGTygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoZWNrTW9kZVByb3BlcnR5KFNfSUZJRk8pO1xuICAgIH1cbiAgICBpc1NvY2tldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoZWNrTW9kZVByb3BlcnR5KFNfSUZTT0NLKTtcbiAgICB9XG59XG5leHBvcnRzLkRpcmVudCA9IERpcmVudDtcbmV4cG9ydHMuZGVmYXVsdCA9IERpcmVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURpcmVudC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8vIEhlcmUgd2UgbW9jayB0aGUgZ2xvYmFsIGBwcm9jZXNzYCB2YXJpYWJsZSBpbiBjYXNlIHdlIGFyZSBub3QgaW4gTm9kZSdzIGVudmlyb25tZW50LlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVQcm9jZXNzID0gY3JlYXRlUHJvY2Vzcztcbi8qKlxuICogTG9va3MgdG8gcmV0dXJuIGEgYHByb2Nlc3NgIG9iamVjdCwgaWYgb25lIGlzIGF2YWlsYWJsZS5cbiAqXG4gKiBUaGUgZ2xvYmFsIGBwcm9jZXNzYCBpcyByZXR1cm5lZCBpZiBkZWZpbmVkO1xuICogb3RoZXJ3aXNlIGByZXF1aXJlKCdwcm9jZXNzJylgIGlzIGF0dGVtcHRlZC5cbiAqXG4gKiBJZiB0aGF0IGZhaWxzLCBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZC5cbiAqXG4gKiBAcmV0dXJuIHtJUHJvY2VzcyB8IHVuZGVmaW5lZH1cbiAqL1xuY29uc3QgbWF5YmVSZXR1cm5Qcm9jZXNzID0gKCkgPT4ge1xuICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3M7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiByZXF1aXJlKCdwcm9jZXNzJyk7XG4gICAgfVxuICAgIGNhdGNoIChfYSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVQcm9jZXNzKCkge1xuICAgIGNvbnN0IHAgPSBtYXliZVJldHVyblByb2Nlc3MoKSB8fCB7fTtcbiAgICBpZiAoIXAuY3dkKVxuICAgICAgICBwLmN3ZCA9ICgpID0+ICcvJztcbiAgICBpZiAoIXAuZW1pdFdhcm5pbmcpXG4gICAgICAgIHAuZW1pdFdhcm5pbmcgPSAobWVzc2FnZSwgdHlwZSkgPT4ge1xuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgJHt0eXBlfSR7dHlwZSA/ICc6ICcgOiAnJ30ke21lc3NhZ2V9YCk7XG4gICAgICAgIH07XG4gICAgaWYgKCFwLmVudilcbiAgICAgICAgcC5lbnYgPSB7fTtcbiAgICByZXR1cm4gcDtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVByb2Nlc3MoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb2Nlc3MuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0eXBlb2YgcXVldWVNaWNyb3Rhc2sgPT09ICdmdW5jdGlvbicgPyBxdWV1ZU1pY3JvdGFzayA6IChjYiA9PiBQcm9taXNlLnJlc29sdmUoKVxuICAgIC50aGVuKCgpID0+IGNiKCkpXG4gICAgLmNhdGNoKCgpID0+IHsgfSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVldWVNaWNyb3Rhc2suanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZMQUdTID0gZXhwb3J0cy5FUlJTVFIgPSB2b2lkIDA7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5leHBvcnRzLkVSUlNUUiA9IHtcbiAgICBQQVRIX1NUUjogJ3BhdGggbXVzdCBiZSBhIHN0cmluZyBvciBCdWZmZXInLFxuICAgIC8vIEZEOiAgICAgICAgICAgICAnZmlsZSBkZXNjcmlwdG9yIG11c3QgYmUgYSB1bnNpZ25lZCAzMi1iaXQgaW50ZWdlcicsXG4gICAgRkQ6ICdmZCBtdXN0IGJlIGEgZmlsZSBkZXNjcmlwdG9yJyxcbiAgICBNT0RFX0lOVDogJ21vZGUgbXVzdCBiZSBhbiBpbnQnLFxuICAgIENCOiAnY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJyxcbiAgICBVSUQ6ICd1aWQgbXVzdCBiZSBhbiB1bnNpZ25lZCBpbnQnLFxuICAgIEdJRDogJ2dpZCBtdXN0IGJlIGFuIHVuc2lnbmVkIGludCcsXG4gICAgTEVOOiAnbGVuIG11c3QgYmUgYW4gaW50ZWdlcicsXG4gICAgQVRJTUU6ICdhdGltZSBtdXN0IGJlIGFuIGludGVnZXInLFxuICAgIE1USU1FOiAnbXRpbWUgbXVzdCBiZSBhbiBpbnRlZ2VyJyxcbiAgICBQUkVGSVg6ICdmaWxlbmFtZSBwcmVmaXggaXMgcmVxdWlyZWQnLFxuICAgIEJVRkZFUjogJ2J1ZmZlciBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIEJ1ZmZlciBvciBTdGF0aWNCdWZmZXInLFxuICAgIE9GRlNFVDogJ29mZnNldCBtdXN0IGJlIGFuIGludGVnZXInLFxuICAgIExFTkdUSDogJ2xlbmd0aCBtdXN0IGJlIGFuIGludGVnZXInLFxuICAgIFBPU0lUSU9OOiAncG9zaXRpb24gbXVzdCBiZSBhbiBpbnRlZ2VyJyxcbn07XG5jb25zdCB7IE9fUkRPTkxZLCBPX1dST05MWSwgT19SRFdSLCBPX0NSRUFULCBPX0VYQ0wsIE9fVFJVTkMsIE9fQVBQRU5ELCBPX1NZTkMgfSA9IGNvbnN0YW50c18xLmNvbnN0YW50cztcbi8vIExpc3Qgb2YgZmlsZSBgZmxhZ3NgIGFzIGRlZmluZWQgYnkgTm9kZS5cbnZhciBGTEFHUztcbihmdW5jdGlvbiAoRkxBR1MpIHtcbiAgICAvLyBPcGVuIGZpbGUgZm9yIHJlYWRpbmcuIEFuIGV4Y2VwdGlvbiBvY2N1cnMgaWYgdGhlIGZpbGUgZG9lcyBub3QgZXhpc3QuXG4gICAgRkxBR1NbRkxBR1NbXCJyXCJdID0gT19SRE9OTFldID0gXCJyXCI7XG4gICAgLy8gT3BlbiBmaWxlIGZvciByZWFkaW5nIGFuZCB3cml0aW5nLiBBbiBleGNlcHRpb24gb2NjdXJzIGlmIHRoZSBmaWxlIGRvZXMgbm90IGV4aXN0LlxuICAgIEZMQUdTW0ZMQUdTW1wicitcIl0gPSBPX1JEV1JdID0gXCJyK1wiO1xuICAgIC8vIE9wZW4gZmlsZSBmb3IgcmVhZGluZyBpbiBzeW5jaHJvbm91cyBtb2RlLiBJbnN0cnVjdHMgdGhlIG9wZXJhdGluZyBzeXN0ZW0gdG8gYnlwYXNzIHRoZSBsb2NhbCBmaWxlIHN5c3RlbSBjYWNoZS5cbiAgICBGTEFHU1tGTEFHU1tcInJzXCJdID0gT19SRE9OTFkgfCBPX1NZTkNdID0gXCJyc1wiO1xuICAgIEZMQUdTW0ZMQUdTW1wic3JcIl0gPSBGTEFHUy5yc10gPSBcInNyXCI7XG4gICAgLy8gT3BlbiBmaWxlIGZvciByZWFkaW5nIGFuZCB3cml0aW5nLCB0ZWxsaW5nIHRoZSBPUyB0byBvcGVuIGl0IHN5bmNocm9ub3VzbHkuIFNlZSBub3RlcyBmb3IgJ3JzJyBhYm91dCB1c2luZyB0aGlzIHdpdGggY2F1dGlvbi5cbiAgICBGTEFHU1tGTEFHU1tcInJzK1wiXSA9IE9fUkRXUiB8IE9fU1lOQ10gPSBcInJzK1wiO1xuICAgIEZMQUdTW0ZMQUdTW1wic3IrXCJdID0gRkxBR1NbJ3JzKyddXSA9IFwic3IrXCI7XG4gICAgLy8gT3BlbiBmaWxlIGZvciB3cml0aW5nLiBUaGUgZmlsZSBpcyBjcmVhdGVkIChpZiBpdCBkb2VzIG5vdCBleGlzdCkgb3IgdHJ1bmNhdGVkIChpZiBpdCBleGlzdHMpLlxuICAgIEZMQUdTW0ZMQUdTW1wid1wiXSA9IE9fV1JPTkxZIHwgT19DUkVBVCB8IE9fVFJVTkNdID0gXCJ3XCI7XG4gICAgLy8gTGlrZSAndycgYnV0IGZhaWxzIGlmIHBhdGggZXhpc3RzLlxuICAgIEZMQUdTW0ZMQUdTW1wid3hcIl0gPSBPX1dST05MWSB8IE9fQ1JFQVQgfCBPX1RSVU5DIHwgT19FWENMXSA9IFwid3hcIjtcbiAgICBGTEFHU1tGTEFHU1tcInh3XCJdID0gRkxBR1Mud3hdID0gXCJ4d1wiO1xuICAgIC8vIE9wZW4gZmlsZSBmb3IgcmVhZGluZyBhbmQgd3JpdGluZy4gVGhlIGZpbGUgaXMgY3JlYXRlZCAoaWYgaXQgZG9lcyBub3QgZXhpc3QpIG9yIHRydW5jYXRlZCAoaWYgaXQgZXhpc3RzKS5cbiAgICBGTEFHU1tGTEFHU1tcIncrXCJdID0gT19SRFdSIHwgT19DUkVBVCB8IE9fVFJVTkNdID0gXCJ3K1wiO1xuICAgIC8vIExpa2UgJ3crJyBidXQgZmFpbHMgaWYgcGF0aCBleGlzdHMuXG4gICAgRkxBR1NbRkxBR1NbXCJ3eCtcIl0gPSBPX1JEV1IgfCBPX0NSRUFUIHwgT19UUlVOQyB8IE9fRVhDTF0gPSBcInd4K1wiO1xuICAgIEZMQUdTW0ZMQUdTW1wieHcrXCJdID0gRkxBR1NbJ3d4KyddXSA9IFwieHcrXCI7XG4gICAgLy8gT3BlbiBmaWxlIGZvciBhcHBlbmRpbmcuIFRoZSBmaWxlIGlzIGNyZWF0ZWQgaWYgaXQgZG9lcyBub3QgZXhpc3QuXG4gICAgRkxBR1NbRkxBR1NbXCJhXCJdID0gT19XUk9OTFkgfCBPX0FQUEVORCB8IE9fQ1JFQVRdID0gXCJhXCI7XG4gICAgLy8gTGlrZSAnYScgYnV0IGZhaWxzIGlmIHBhdGggZXhpc3RzLlxuICAgIEZMQUdTW0ZMQUdTW1wiYXhcIl0gPSBPX1dST05MWSB8IE9fQVBQRU5EIHwgT19DUkVBVCB8IE9fRVhDTF0gPSBcImF4XCI7XG4gICAgRkxBR1NbRkxBR1NbXCJ4YVwiXSA9IEZMQUdTLmF4XSA9IFwieGFcIjtcbiAgICAvLyBPcGVuIGZpbGUgZm9yIHJlYWRpbmcgYW5kIGFwcGVuZGluZy4gVGhlIGZpbGUgaXMgY3JlYXRlZCBpZiBpdCBkb2VzIG5vdCBleGlzdC5cbiAgICBGTEFHU1tGTEFHU1tcImErXCJdID0gT19SRFdSIHwgT19BUFBFTkQgfCBPX0NSRUFUXSA9IFwiYStcIjtcbiAgICAvLyBMaWtlICdhKycgYnV0IGZhaWxzIGlmIHBhdGggZXhpc3RzLlxuICAgIEZMQUdTW0ZMQUdTW1wiYXgrXCJdID0gT19SRFdSIHwgT19BUFBFTkQgfCBPX0NSRUFUIHwgT19FWENMXSA9IFwiYXgrXCI7XG4gICAgRkxBR1NbRkxBR1NbXCJ4YStcIl0gPSBGTEFHU1snYXgrJ11dID0gXCJ4YStcIjtcbn0pKEZMQUdTIHx8IChleHBvcnRzLkZMQUdTID0gRkxBR1MgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51bml4aWZ5ID0gZXhwb3J0cy5nZXRXcml0ZVN5bmNBcmdzID0gZXhwb3J0cy5nZXRXcml0ZUFyZ3MgPSBleHBvcnRzLmJ1ZlRvVWludDggPSBleHBvcnRzLmlzV2luID0gdm9pZCAwO1xuZXhwb3J0cy5wcm9taXNpZnkgPSBwcm9taXNpZnk7XG5leHBvcnRzLnZhbGlkYXRlQ2FsbGJhY2sgPSB2YWxpZGF0ZUNhbGxiYWNrO1xuZXhwb3J0cy5tb2RlVG9OdW1iZXIgPSBtb2RlVG9OdW1iZXI7XG5leHBvcnRzLm51bGxDaGVjayA9IG51bGxDaGVjaztcbmV4cG9ydHMucGF0aFRvRmlsZW5hbWUgPSBwYXRoVG9GaWxlbmFtZTtcbmV4cG9ydHMuY3JlYXRlRXJyb3IgPSBjcmVhdGVFcnJvcjtcbmV4cG9ydHMuZ2VuUm5kU3RyNiA9IGdlblJuZFN0cjY7XG5leHBvcnRzLmZsYWdzVG9OdW1iZXIgPSBmbGFnc1RvTnVtYmVyO1xuZXhwb3J0cy5pc0ZkID0gaXNGZDtcbmV4cG9ydHMudmFsaWRhdGVGZCA9IHZhbGlkYXRlRmQ7XG5leHBvcnRzLnN0cmVhbVRvQnVmZmVyID0gc3RyZWFtVG9CdWZmZXI7XG5leHBvcnRzLmRhdGFUb0J1ZmZlciA9IGRhdGFUb0J1ZmZlcjtcbmV4cG9ydHMuYnVmZmVyVG9FbmNvZGluZyA9IGJ1ZmZlclRvRW5jb2Rpbmc7XG5leHBvcnRzLmlzUmVhZGFibGVTdHJlYW0gPSBpc1JlYWRhYmxlU3RyZWFtO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5jb25zdCBlcnJvcnMgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvZXJyb3JzXCIpO1xuY29uc3QgYnVmZmVyXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvYnVmZmVyXCIpO1xuY29uc3QgZW5jb2RpbmdfMSA9IHJlcXVpcmUoXCIuLi9lbmNvZGluZ1wiKTtcbmNvbnN0IGJ1ZmZlcl8yID0gcmVxdWlyZShcIi4uL2ludGVybmFsL2J1ZmZlclwiKTtcbmNvbnN0IHF1ZXVlTWljcm90YXNrXzEgPSByZXF1aXJlKFwiLi4vcXVldWVNaWNyb3Rhc2tcIik7XG5leHBvcnRzLmlzV2luID0gcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJztcbmZ1bmN0aW9uIHByb21pc2lmeShmcywgZm4sIGdldFJlc3VsdCA9IGlucHV0ID0+IGlucHV0KSB7XG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGZzW2ZuXS5iaW5kKGZzKSguLi5hcmdzLCAoZXJyb3IsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoZ2V0UmVzdWx0KHJlc3VsdCkpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlQ2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoY29uc3RhbnRzXzEuRVJSU1RSLkNCKTtcbiAgICByZXR1cm4gY2FsbGJhY2s7XG59XG5mdW5jdGlvbiBfbW9kZVRvTnVtYmVyKG1vZGUsIGRlZikge1xuICAgIGlmICh0eXBlb2YgbW9kZSA9PT0gJ251bWJlcicpXG4gICAgICAgIHJldHVybiBtb2RlO1xuICAgIGlmICh0eXBlb2YgbW9kZSA9PT0gJ3N0cmluZycpXG4gICAgICAgIHJldHVybiBwYXJzZUludChtb2RlLCA4KTtcbiAgICBpZiAoZGVmKVxuICAgICAgICByZXR1cm4gbW9kZVRvTnVtYmVyKGRlZik7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIG1vZGVUb051bWJlcihtb2RlLCBkZWYpIHtcbiAgICBjb25zdCByZXN1bHQgPSBfbW9kZVRvTnVtYmVyKG1vZGUsIGRlZik7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICdudW1iZXInIHx8IGlzTmFOKHJlc3VsdCkpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoY29uc3RhbnRzXzEuRVJSU1RSLk1PREVfSU5UKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbnVsbENoZWNrKHBhdGgsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCgnJyArIHBhdGgpLmluZGV4T2YoJ1xcdTAwMDAnKSAhPT0gLTEpIHtcbiAgICAgICAgY29uc3QgZXIgPSBuZXcgRXJyb3IoJ1BhdGggbXVzdCBiZSBhIHN0cmluZyB3aXRob3V0IG51bGwgYnl0ZXMnKTtcbiAgICAgICAgZXIuY29kZSA9ICdFTk9FTlQnO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgdGhyb3cgZXI7XG4gICAgICAgICgwLCBxdWV1ZU1pY3JvdGFza18xLmRlZmF1bHQpKCgpID0+IHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBnZXRQYXRoRnJvbVVSTFBvc2l4KHVybCkge1xuICAgIGlmICh1cmwuaG9zdG5hbWUgIT09ICcnKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnMuVHlwZUVycm9yKCdFUlJfSU5WQUxJRF9GSUxFX1VSTF9IT1NUJywgcHJvY2Vzcy5wbGF0Zm9ybSk7XG4gICAgfVxuICAgIGNvbnN0IHBhdGhuYW1lID0gdXJsLnBhdGhuYW1lO1xuICAgIGZvciAobGV0IG4gPSAwOyBuIDwgcGF0aG5hbWUubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgaWYgKHBhdGhuYW1lW25dID09PSAnJScpIHtcbiAgICAgICAgICAgIGNvbnN0IHRoaXJkID0gcGF0aG5hbWUuY29kZVBvaW50QXQobiArIDIpIHwgMHgyMDtcbiAgICAgICAgICAgIGlmIChwYXRobmFtZVtuICsgMV0gPT09ICcyJyAmJiB0aGlyZCA9PT0gMTAyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9ycy5UeXBlRXJyb3IoJ0VSUl9JTlZBTElEX0ZJTEVfVVJMX1BBVEgnLCAnbXVzdCBub3QgaW5jbHVkZSBlbmNvZGVkIC8gY2hhcmFjdGVycycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocGF0aG5hbWUpO1xufVxuZnVuY3Rpb24gcGF0aFRvRmlsZW5hbWUocGF0aCkge1xuICAgIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycgJiYgIWJ1ZmZlcl8xLkJ1ZmZlci5pc0J1ZmZlcihwYXRoKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKCEocGF0aCBpbnN0YW5jZW9mIHJlcXVpcmUoJ3VybCcpLlVSTCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihjb25zdGFudHNfMS5FUlJTVFIuUEFUSF9TVFIpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoY29uc3RhbnRzXzEuRVJSU1RSLlBBVEhfU1RSKTtcbiAgICAgICAgfVxuICAgICAgICBwYXRoID0gZ2V0UGF0aEZyb21VUkxQb3NpeChwYXRoKTtcbiAgICB9XG4gICAgY29uc3QgcGF0aFN0cmluZyA9IFN0cmluZyhwYXRoKTtcbiAgICBudWxsQ2hlY2socGF0aFN0cmluZyk7XG4gICAgLy8gcmV0dXJuIHNsYXNoKHBhdGhTdHJpbmcpO1xuICAgIHJldHVybiBwYXRoU3RyaW5nO1xufVxuY29uc3QgRU5PRU5UID0gJ0VOT0VOVCc7XG5jb25zdCBFQkFERiA9ICdFQkFERic7XG5jb25zdCBFSU5WQUwgPSAnRUlOVkFMJztcbmNvbnN0IEVQRVJNID0gJ0VQRVJNJztcbmNvbnN0IEVQUk9UTyA9ICdFUFJPVE8nO1xuY29uc3QgRUVYSVNUID0gJ0VFWElTVCc7XG5jb25zdCBFTk9URElSID0gJ0VOT1RESVInO1xuY29uc3QgRU1GSUxFID0gJ0VNRklMRSc7XG5jb25zdCBFQUNDRVMgPSAnRUFDQ0VTJztcbmNvbnN0IEVJU0RJUiA9ICdFSVNESVInO1xuY29uc3QgRU5PVEVNUFRZID0gJ0VOT1RFTVBUWSc7XG5jb25zdCBFTk9TWVMgPSAnRU5PU1lTJztcbmNvbnN0IEVSUl9GU19FSVNESVIgPSAnRVJSX0ZTX0VJU0RJUic7XG5jb25zdCBFUlJfT1VUX09GX1JBTkdFID0gJ0VSUl9PVVRfT0ZfUkFOR0UnO1xuZnVuY3Rpb24gZm9ybWF0RXJyb3IoZXJyb3JDb2RlLCBmdW5jID0gJycsIHBhdGggPSAnJywgcGF0aDIgPSAnJykge1xuICAgIGxldCBwYXRoRm9ybWF0dGVkID0gJyc7XG4gICAgaWYgKHBhdGgpXG4gICAgICAgIHBhdGhGb3JtYXR0ZWQgPSBgICcke3BhdGh9J2A7XG4gICAgaWYgKHBhdGgyKVxuICAgICAgICBwYXRoRm9ybWF0dGVkICs9IGAgLT4gJyR7cGF0aDJ9J2A7XG4gICAgc3dpdGNoIChlcnJvckNvZGUpIHtcbiAgICAgICAgY2FzZSBFTk9FTlQ6XG4gICAgICAgICAgICByZXR1cm4gYEVOT0VOVDogbm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeSwgJHtmdW5jfSR7cGF0aEZvcm1hdHRlZH1gO1xuICAgICAgICBjYXNlIEVCQURGOlxuICAgICAgICAgICAgcmV0dXJuIGBFQkFERjogYmFkIGZpbGUgZGVzY3JpcHRvciwgJHtmdW5jfSR7cGF0aEZvcm1hdHRlZH1gO1xuICAgICAgICBjYXNlIEVJTlZBTDpcbiAgICAgICAgICAgIHJldHVybiBgRUlOVkFMOiBpbnZhbGlkIGFyZ3VtZW50LCAke2Z1bmN9JHtwYXRoRm9ybWF0dGVkfWA7XG4gICAgICAgIGNhc2UgRVBFUk06XG4gICAgICAgICAgICByZXR1cm4gYEVQRVJNOiBvcGVyYXRpb24gbm90IHBlcm1pdHRlZCwgJHtmdW5jfSR7cGF0aEZvcm1hdHRlZH1gO1xuICAgICAgICBjYXNlIEVQUk9UTzpcbiAgICAgICAgICAgIHJldHVybiBgRVBST1RPOiBwcm90b2NvbCBlcnJvciwgJHtmdW5jfSR7cGF0aEZvcm1hdHRlZH1gO1xuICAgICAgICBjYXNlIEVFWElTVDpcbiAgICAgICAgICAgIHJldHVybiBgRUVYSVNUOiBmaWxlIGFscmVhZHkgZXhpc3RzLCAke2Z1bmN9JHtwYXRoRm9ybWF0dGVkfWA7XG4gICAgICAgIGNhc2UgRU5PVERJUjpcbiAgICAgICAgICAgIHJldHVybiBgRU5PVERJUjogbm90IGEgZGlyZWN0b3J5LCAke2Z1bmN9JHtwYXRoRm9ybWF0dGVkfWA7XG4gICAgICAgIGNhc2UgRUlTRElSOlxuICAgICAgICAgICAgcmV0dXJuIGBFSVNESVI6IGlsbGVnYWwgb3BlcmF0aW9uIG9uIGEgZGlyZWN0b3J5LCAke2Z1bmN9JHtwYXRoRm9ybWF0dGVkfWA7XG4gICAgICAgIGNhc2UgRUFDQ0VTOlxuICAgICAgICAgICAgcmV0dXJuIGBFQUNDRVM6IHBlcm1pc3Npb24gZGVuaWVkLCAke2Z1bmN9JHtwYXRoRm9ybWF0dGVkfWA7XG4gICAgICAgIGNhc2UgRU5PVEVNUFRZOlxuICAgICAgICAgICAgcmV0dXJuIGBFTk9URU1QVFk6IGRpcmVjdG9yeSBub3QgZW1wdHksICR7ZnVuY30ke3BhdGhGb3JtYXR0ZWR9YDtcbiAgICAgICAgY2FzZSBFTUZJTEU6XG4gICAgICAgICAgICByZXR1cm4gYEVNRklMRTogdG9vIG1hbnkgb3BlbiBmaWxlcywgJHtmdW5jfSR7cGF0aEZvcm1hdHRlZH1gO1xuICAgICAgICBjYXNlIEVOT1NZUzpcbiAgICAgICAgICAgIHJldHVybiBgRU5PU1lTOiBmdW5jdGlvbiBub3QgaW1wbGVtZW50ZWQsICR7ZnVuY30ke3BhdGhGb3JtYXR0ZWR9YDtcbiAgICAgICAgY2FzZSBFUlJfRlNfRUlTRElSOlxuICAgICAgICAgICAgcmV0dXJuIGBbRVJSX0ZTX0VJU0RJUl06IFBhdGggaXMgYSBkaXJlY3Rvcnk6ICR7ZnVuY30gcmV0dXJuZWQgRUlTRElSIChpcyBhIGRpcmVjdG9yeSkgJHtwYXRofWA7XG4gICAgICAgIGNhc2UgRVJSX09VVF9PRl9SQU5HRTpcbiAgICAgICAgICAgIHJldHVybiBgW0VSUl9PVVRfT0ZfUkFOR0VdOiB2YWx1ZSBvdXQgb2YgcmFuZ2UsICR7ZnVuY30ke3BhdGhGb3JtYXR0ZWR9YDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBgJHtlcnJvckNvZGV9OiBlcnJvciBvY2N1cnJlZCwgJHtmdW5jfSR7cGF0aEZvcm1hdHRlZH1gO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUVycm9yKGVycm9yQ29kZSwgZnVuYyA9ICcnLCBwYXRoID0gJycsIHBhdGgyID0gJycsIENvbnN0cnVjdG9yID0gRXJyb3IpIHtcbiAgICBjb25zdCBlcnJvciA9IG5ldyBDb25zdHJ1Y3Rvcihmb3JtYXRFcnJvcihlcnJvckNvZGUsIGZ1bmMsIHBhdGgsIHBhdGgyKSk7XG4gICAgZXJyb3IuY29kZSA9IGVycm9yQ29kZTtcbiAgICBpZiAocGF0aCkge1xuICAgICAgICBlcnJvci5wYXRoID0gcGF0aDtcbiAgICB9XG4gICAgcmV0dXJuIGVycm9yO1xufVxuZnVuY3Rpb24gZ2VuUm5kU3RyNigpIHtcbiAgICBjb25zdCBzdHIgPSAoTWF0aC5yYW5kb20oKSArIDEpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgOCk7XG4gICAgaWYgKHN0ci5sZW5ndGggPT09IDYpXG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgZWxzZVxuICAgICAgICByZXR1cm4gZ2VuUm5kU3RyNigpO1xufVxuZnVuY3Rpb24gZmxhZ3NUb051bWJlcihmbGFncykge1xuICAgIGlmICh0eXBlb2YgZmxhZ3MgPT09ICdudW1iZXInKVxuICAgICAgICByZXR1cm4gZmxhZ3M7XG4gICAgaWYgKHR5cGVvZiBmbGFncyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc3QgZmxhZ3NOdW0gPSBjb25zdGFudHNfMS5GTEFHU1tmbGFnc107XG4gICAgICAgIGlmICh0eXBlb2YgZmxhZ3NOdW0gIT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgcmV0dXJuIGZsYWdzTnVtO1xuICAgIH1cbiAgICAvLyB0aHJvdyBuZXcgVHlwZUVycm9yKGZvcm1hdEVycm9yKEVSUlNUUl9GTEFHKGZsYWdzKSkpO1xuICAgIHRocm93IG5ldyBlcnJvcnMuVHlwZUVycm9yKCdFUlJfSU5WQUxJRF9PUFRfVkFMVUUnLCAnZmxhZ3MnLCBmbGFncyk7XG59XG5mdW5jdGlvbiBpc0ZkKHBhdGgpIHtcbiAgICByZXR1cm4gcGF0aCA+Pj4gMCA9PT0gcGF0aDtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlRmQoZmQpIHtcbiAgICBpZiAoIWlzRmQoZmQpKVxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoY29uc3RhbnRzXzEuRVJSU1RSLkZEKTtcbn1cbmZ1bmN0aW9uIHN0cmVhbVRvQnVmZmVyKHN0cmVhbSkge1xuICAgIGNvbnN0IGNodW5rcyA9IFtdO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHN0cmVhbS5vbignZGF0YScsIGNodW5rID0+IGNodW5rcy5wdXNoKGNodW5rKSk7XG4gICAgICAgIHN0cmVhbS5vbignZW5kJywgKCkgPT4gcmVzb2x2ZShidWZmZXJfMS5CdWZmZXIuY29uY2F0KGNodW5rcykpKTtcbiAgICAgICAgc3RyZWFtLm9uKCdlcnJvcicsIHJlamVjdCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBkYXRhVG9CdWZmZXIoZGF0YSwgZW5jb2RpbmcgPSBlbmNvZGluZ18xLkVOQ09ESU5HX1VURjgpIHtcbiAgICBpZiAoYnVmZmVyXzEuQnVmZmVyLmlzQnVmZmVyKGRhdGEpKVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSlcbiAgICAgICAgcmV0dXJuICgwLCBidWZmZXJfMi5idWZmZXJGcm9tKShkYXRhKTtcbiAgICBlbHNlXG4gICAgICAgIHJldHVybiAoMCwgYnVmZmVyXzIuYnVmZmVyRnJvbSkoU3RyaW5nKGRhdGEpLCBlbmNvZGluZyk7XG59XG5jb25zdCBidWZUb1VpbnQ4ID0gKGJ1ZikgPT4gbmV3IFVpbnQ4QXJyYXkoYnVmLmJ1ZmZlciwgYnVmLmJ5dGVPZmZzZXQsIGJ1Zi5ieXRlTGVuZ3RoKTtcbmV4cG9ydHMuYnVmVG9VaW50OCA9IGJ1ZlRvVWludDg7XG5jb25zdCBnZXRXcml0ZUFyZ3MgPSAoZmQsIGEsIGIsIGMsIGQsIGUpID0+IHtcbiAgICB2YWxpZGF0ZUZkKGZkKTtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBsZXQgbGVuZ3RoO1xuICAgIGxldCBwb3NpdGlvbiA9IG51bGw7XG4gICAgbGV0IGVuY29kaW5nO1xuICAgIGxldCBjYWxsYmFjaztcbiAgICBjb25zdCB0aXBhID0gdHlwZW9mIGE7XG4gICAgY29uc3QgdGlwYiA9IHR5cGVvZiBiO1xuICAgIGNvbnN0IHRpcGMgPSB0eXBlb2YgYztcbiAgICBjb25zdCB0aXBkID0gdHlwZW9mIGQ7XG4gICAgaWYgKHRpcGEgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0aXBiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IGI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGlwYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb2Zmc2V0ID0gYiB8IDA7XG4gICAgICAgICAgICBjYWxsYmFjayA9IGM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGlwZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb2Zmc2V0ID0gYiB8IDA7XG4gICAgICAgICAgICBsZW5ndGggPSBjO1xuICAgICAgICAgICAgY2FsbGJhY2sgPSBkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2Zmc2V0ID0gYiB8IDA7XG4gICAgICAgICAgICBsZW5ndGggPSBjO1xuICAgICAgICAgICAgcG9zaXRpb24gPSBkO1xuICAgICAgICAgICAgY2FsbGJhY2sgPSBlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAodGlwYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSBiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRpcGMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gYjtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gYztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aXBkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGI7XG4gICAgICAgICAgICBlbmNvZGluZyA9IGM7XG4gICAgICAgICAgICBjYWxsYmFjayA9IGQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYnVmID0gZGF0YVRvQnVmZmVyKGEsIGVuY29kaW5nKTtcbiAgICBpZiAodGlwYSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBsZW5ndGggPT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgbGVuZ3RoID0gYnVmLmxlbmd0aDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG9mZnNldCA9IDA7XG4gICAgICAgIGxlbmd0aCA9IGJ1Zi5sZW5ndGg7XG4gICAgfVxuICAgIGNvbnN0IGNiID0gdmFsaWRhdGVDYWxsYmFjayhjYWxsYmFjayk7XG4gICAgcmV0dXJuIFtmZCwgdGlwYSA9PT0gJ3N0cmluZycsIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uLCBjYl07XG59O1xuZXhwb3J0cy5nZXRXcml0ZUFyZ3MgPSBnZXRXcml0ZUFyZ3M7XG5jb25zdCBnZXRXcml0ZVN5bmNBcmdzID0gKGZkLCBhLCBiLCBjLCBkKSA9PiB7XG4gICAgdmFsaWRhdGVGZChmZCk7XG4gICAgbGV0IGVuY29kaW5nO1xuICAgIGxldCBvZmZzZXQ7XG4gICAgbGV0IGxlbmd0aDtcbiAgICBsZXQgcG9zaXRpb247XG4gICAgY29uc3QgaXNCdWZmZXIgPSB0eXBlb2YgYSAhPT0gJ3N0cmluZyc7XG4gICAgaWYgKGlzQnVmZmVyKSB7XG4gICAgICAgIG9mZnNldCA9IChiIHx8IDApIHwgMDtcbiAgICAgICAgbGVuZ3RoID0gYztcbiAgICAgICAgcG9zaXRpb24gPSBkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcG9zaXRpb24gPSBiO1xuICAgICAgICBlbmNvZGluZyA9IGM7XG4gICAgfVxuICAgIGNvbnN0IGJ1ZiA9IGRhdGFUb0J1ZmZlcihhLCBlbmNvZGluZyk7XG4gICAgaWYgKGlzQnVmZmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbGVuZ3RoID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgbGVuZ3RoID0gYnVmLmxlbmd0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgICAgbGVuZ3RoID0gYnVmLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIFtmZCwgYnVmLCBvZmZzZXQgfHwgMCwgbGVuZ3RoLCBwb3NpdGlvbl07XG59O1xuZXhwb3J0cy5nZXRXcml0ZVN5bmNBcmdzID0gZ2V0V3JpdGVTeW5jQXJncztcbmZ1bmN0aW9uIGJ1ZmZlclRvRW5jb2RpbmcoYnVmZmVyLCBlbmNvZGluZykge1xuICAgIGlmICghZW5jb2RpbmcgfHwgZW5jb2RpbmcgPT09ICdidWZmZXInKVxuICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIGJ1ZmZlci50b1N0cmluZyhlbmNvZGluZyk7XG59XG5mdW5jdGlvbiBpc1JlYWRhYmxlU3RyZWFtKHN0cmVhbSkge1xuICAgIHJldHVybiAoc3RyZWFtICE9PSBudWxsICYmXG4gICAgICAgIHR5cGVvZiBzdHJlYW0gPT09ICdvYmplY3QnICYmXG4gICAgICAgIHR5cGVvZiBzdHJlYW0ucGlwZSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICB0eXBlb2Ygc3RyZWFtLm9uID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgIHN0cmVhbS5yZWFkYWJsZSA9PT0gdHJ1ZSk7XG59XG5jb25zdCBpc1NlcGFyYXRvciA9IChzdHIsIGkpID0+IHtcbiAgICBsZXQgY2hhciA9IHN0cltpXTtcbiAgICByZXR1cm4gaSA+IDAgJiYgKGNoYXIgPT09ICcvJyB8fCAoZXhwb3J0cy5pc1dpbiAmJiBjaGFyID09PSAnXFxcXCcpKTtcbn07XG5jb25zdCByZW1vdmVUcmFpbGluZ1NlcGFyYXRvciA9IChzdHIpID0+IHtcbiAgICBsZXQgaSA9IHN0ci5sZW5ndGggLSAxO1xuICAgIGlmIChpIDwgMilcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB3aGlsZSAoaXNTZXBhcmF0b3Ioc3RyLCBpKSlcbiAgICAgICAgaS0tO1xuICAgIHJldHVybiBzdHIuc3Vic3RyKDAsIGkgKyAxKTtcbn07XG5jb25zdCBub3JtYWxpemVQYXRoID0gKHN0ciwgc3RyaXBUcmFpbGluZykgPT4ge1xuICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhwZWN0ZWQgYSBzdHJpbmcnKTtcbiAgICBzdHIgPSBzdHIucmVwbGFjZSgvW1xcXFxcXC9dKy9nLCAnLycpO1xuICAgIGlmIChzdHJpcFRyYWlsaW5nICE9PSBmYWxzZSlcbiAgICAgICAgc3RyID0gcmVtb3ZlVHJhaWxpbmdTZXBhcmF0b3Ioc3RyKTtcbiAgICByZXR1cm4gc3RyO1xufTtcbmNvbnN0IHVuaXhpZnkgPSAoZmlsZXBhdGgsIHN0cmlwVHJhaWxpbmcgPSB0cnVlKSA9PiB7XG4gICAgaWYgKGV4cG9ydHMuaXNXaW4pIHtcbiAgICAgICAgZmlsZXBhdGggPSBub3JtYWxpemVQYXRoKGZpbGVwYXRoLCBzdHJpcFRyYWlsaW5nKTtcbiAgICAgICAgcmV0dXJuIGZpbGVwYXRoLnJlcGxhY2UoL14oW2EtekEtWl0rOnxcXC5cXC8pLywgJycpO1xuICAgIH1cbiAgICByZXR1cm4gZmlsZXBhdGg7XG59O1xuZXhwb3J0cy51bml4aWZ5ID0gdW5peGlmeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuanMubWFwIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG5cblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1Jcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UsIFN1cHByZXNzZWRFcnJvciwgU3ltYm9sLCBJdGVyYXRvciAqL1xuXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcbiAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcbiAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn1cblxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xuICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xuICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHQ7XG4gIH1cbiAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgIHRbcF0gPSBzW3BdO1xuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgIH1cbiAgcmV0dXJuIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXNEZWNvcmF0ZShjdG9yLCBkZXNjcmlwdG9ySW4sIGRlY29yYXRvcnMsIGNvbnRleHRJbiwgaW5pdGlhbGl6ZXJzLCBleHRyYUluaXRpYWxpemVycykge1xuICBmdW5jdGlvbiBhY2NlcHQoZikgeyBpZiAoZiAhPT0gdm9pZCAwICYmIHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGdW5jdGlvbiBleHBlY3RlZFwiKTsgcmV0dXJuIGY7IH1cbiAgdmFyIGtpbmQgPSBjb250ZXh0SW4ua2luZCwga2V5ID0ga2luZCA9PT0gXCJnZXR0ZXJcIiA/IFwiZ2V0XCIgOiBraW5kID09PSBcInNldHRlclwiID8gXCJzZXRcIiA6IFwidmFsdWVcIjtcbiAgdmFyIHRhcmdldCA9ICFkZXNjcmlwdG9ySW4gJiYgY3RvciA/IGNvbnRleHRJbltcInN0YXRpY1wiXSA/IGN0b3IgOiBjdG9yLnByb3RvdHlwZSA6IG51bGw7XG4gIHZhciBkZXNjcmlwdG9yID0gZGVzY3JpcHRvckluIHx8ICh0YXJnZXQgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgY29udGV4dEluLm5hbWUpIDoge30pO1xuICB2YXIgXywgZG9uZSA9IGZhbHNlO1xuICBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGNvbnRleHQgPSB7fTtcbiAgICAgIGZvciAodmFyIHAgaW4gY29udGV4dEluKSBjb250ZXh0W3BdID0gcCA9PT0gXCJhY2Nlc3NcIiA/IHt9IDogY29udGV4dEluW3BdO1xuICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4uYWNjZXNzKSBjb250ZXh0LmFjY2Vzc1twXSA9IGNvbnRleHRJbi5hY2Nlc3NbcF07XG4gICAgICBjb250ZXh0LmFkZEluaXRpYWxpemVyID0gZnVuY3Rpb24gKGYpIHsgaWYgKGRvbmUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgYWRkIGluaXRpYWxpemVycyBhZnRlciBkZWNvcmF0aW9uIGhhcyBjb21wbGV0ZWRcIik7IGV4dHJhSW5pdGlhbGl6ZXJzLnB1c2goYWNjZXB0KGYgfHwgbnVsbCkpOyB9O1xuICAgICAgdmFyIHJlc3VsdCA9ICgwLCBkZWNvcmF0b3JzW2ldKShraW5kID09PSBcImFjY2Vzc29yXCIgPyB7IGdldDogZGVzY3JpcHRvci5nZXQsIHNldDogZGVzY3JpcHRvci5zZXQgfSA6IGRlc2NyaXB0b3Jba2V5XSwgY29udGV4dCk7XG4gICAgICBpZiAoa2luZCA9PT0gXCJhY2Nlc3NvclwiKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSBjb250aW51ZTtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsIHx8IHR5cGVvZiByZXN1bHQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmdldCkpIGRlc2NyaXB0b3IuZ2V0ID0gXztcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuc2V0KSkgZGVzY3JpcHRvci5zZXQgPSBfO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5pbml0KSkgaW5pdGlhbGl6ZXJzLnVuc2hpZnQoXyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChfID0gYWNjZXB0KHJlc3VsdCkpIHtcbiAgICAgICAgICBpZiAoa2luZCA9PT0gXCJmaWVsZFwiKSBpbml0aWFsaXplcnMudW5zaGlmdChfKTtcbiAgICAgICAgICBlbHNlIGRlc2NyaXB0b3Jba2V5XSA9IF87XG4gICAgICB9XG4gIH1cbiAgaWYgKHRhcmdldCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgY29udGV4dEluLm5hbWUsIGRlc2NyaXB0b3IpO1xuICBkb25lID0gdHJ1ZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3J1bkluaXRpYWxpemVycyh0aGlzQXJnLCBpbml0aWFsaXplcnMsIHZhbHVlKSB7XG4gIHZhciB1c2VWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGluaXRpYWxpemVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsdWUgPSB1c2VWYWx1ZSA/IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcsIHZhbHVlKSA6IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcpO1xuICB9XG4gIHJldHVybiB1c2VWYWx1ZSA/IHZhbHVlIDogdm9pZCAwO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fcHJvcEtleSh4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gXCJzeW1ib2xcIiA/IHggOiBcIlwiLmNvbmNhdCh4KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3NldEZ1bmN0aW9uTmFtZShmLCBuYW1lLCBwcmVmaXgpIHtcbiAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN5bWJvbFwiKSBuYW1lID0gbmFtZS5kZXNjcmlwdGlvbiA/IFwiW1wiLmNvbmNhdChuYW1lLmRlc2NyaXB0aW9uLCBcIl1cIikgOiBcIlwiO1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGYsIFwibmFtZVwiLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHByZWZpeCA/IFwiXCIuY29uY2F0KHByZWZpeCwgXCIgXCIsIG5hbWUpIDogbmFtZSB9KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XG4gIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGcgPSBPYmplY3QuY3JlYXRlKCh0eXBlb2YgSXRlcmF0b3IgPT09IFwiZnVuY3Rpb25cIiA/IEl0ZXJhdG9yIDogT2JqZWN0KS5wcm90b3R5cGUpO1xuICByZXR1cm4gZy5uZXh0ID0gdmVyYigwKSwgZ1tcInRocm93XCJdID0gdmVyYigxKSwgZ1tcInJldHVyblwiXSA9IHZlcmIoMiksIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XG4gICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgfVxufVxuXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgb1trMl0gPSBtW2tdO1xufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xuICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XG4gIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xuICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcbiAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICB9XG4gIH07XG4gIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XG4gIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgaWYgKCFtKSByZXR1cm4gbztcbiAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gIHRyeSB7XG4gICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgfVxuICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgfVxuICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gIH1cbiAgcmV0dXJuIGFyO1xufVxuXG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcbiAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XG4gIHJldHVybiBhcjtcbn1cblxuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XG4gIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xuICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXG4gICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcbiAgICAgICAgICByW2tdID0gYVtqXTtcbiAgcmV0dXJuIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tLCBwYWNrKSB7XG4gIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcbiAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xuICByZXR1cm4gaSA9IE9iamVjdC5jcmVhdGUoKHR5cGVvZiBBc3luY0l0ZXJhdG9yID09PSBcImZ1bmN0aW9uXCIgPyBBc3luY0l0ZXJhdG9yIDogT2JqZWN0KS5wcm90b3R5cGUpLCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIsIGF3YWl0UmV0dXJuKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xuICBmdW5jdGlvbiBhd2FpdFJldHVybihmKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZiwgcmVqZWN0KTsgfTsgfVxuICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaWYgKGdbbl0pIHsgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgaWYgKGYpIGlbbl0gPSBmKGlbbl0pOyB9IH1cbiAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxuICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cbiAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxuICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XG4gIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xuICB2YXIgaSwgcDtcbiAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogZmFsc2UgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xuICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XG4gIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cbiAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcbiAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cbiAgcmV0dXJuIGNvb2tlZDtcbn07XG5cbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gIG9bXCJkZWZhdWx0XCJdID0gdjtcbn07XG5cbnZhciBvd25LZXlzID0gZnVuY3Rpb24obykge1xuICBvd25LZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gKG8pIHtcbiAgICB2YXIgYXIgPSBbXTtcbiAgICBmb3IgKHZhciBrIGluIG8pIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgaykpIGFyW2FyLmxlbmd0aF0gPSBrO1xuICAgIHJldHVybiBhcjtcbiAgfTtcbiAgcmV0dXJuIG93bktleXMobyk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xuICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayA9IG93bktleXMobW9kKSwgaSA9IDA7IGkgPCBrLmxlbmd0aDsgaSsrKSBpZiAoa1tpXSAhPT0gXCJkZWZhdWx0XCIpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwga1tpXSk7XG4gIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XG4gIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRJbihzdGF0ZSwgcmVjZWl2ZXIpIHtcbiAgaWYgKHJlY2VpdmVyID09PSBudWxsIHx8ICh0eXBlb2YgcmVjZWl2ZXIgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHJlY2VpdmVyICE9PSBcImZ1bmN0aW9uXCIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHVzZSAnaW4nIG9wZXJhdG9yIG9uIG5vbi1vYmplY3RcIik7XG4gIHJldHVybiB0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyID09PSBzdGF0ZSA6IHN0YXRlLmhhcyhyZWNlaXZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FkZERpc3Bvc2FibGVSZXNvdXJjZShlbnYsIHZhbHVlLCBhc3luYykge1xuICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHZvaWQgMCkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgZXhwZWN0ZWQuXCIpO1xuICAgIHZhciBkaXNwb3NlLCBpbm5lcjtcbiAgICBpZiAoYXN5bmMpIHtcbiAgICAgIGlmICghU3ltYm9sLmFzeW5jRGlzcG9zZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0Rpc3Bvc2UgaXMgbm90IGRlZmluZWQuXCIpO1xuICAgICAgZGlzcG9zZSA9IHZhbHVlW1N5bWJvbC5hc3luY0Rpc3Bvc2VdO1xuICAgIH1cbiAgICBpZiAoZGlzcG9zZSA9PT0gdm9pZCAwKSB7XG4gICAgICBpZiAoIVN5bWJvbC5kaXNwb3NlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmRpc3Bvc2UgaXMgbm90IGRlZmluZWQuXCIpO1xuICAgICAgZGlzcG9zZSA9IHZhbHVlW1N5bWJvbC5kaXNwb3NlXTtcbiAgICAgIGlmIChhc3luYykgaW5uZXIgPSBkaXNwb3NlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRpc3Bvc2UgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBub3QgZGlzcG9zYWJsZS5cIik7XG4gICAgaWYgKGlubmVyKSBkaXNwb3NlID0gZnVuY3Rpb24oKSB7IHRyeSB7IGlubmVyLmNhbGwodGhpcyk7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpOyB9IH07XG4gICAgZW52LnN0YWNrLnB1c2goeyB2YWx1ZTogdmFsdWUsIGRpc3Bvc2U6IGRpc3Bvc2UsIGFzeW5jOiBhc3luYyB9KTtcbiAgfVxuICBlbHNlIGlmIChhc3luYykge1xuICAgIGVudi5zdGFjay5wdXNoKHsgYXN5bmM6IHRydWUgfSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG52YXIgX1N1cHByZXNzZWRFcnJvciA9IHR5cGVvZiBTdXBwcmVzc2VkRXJyb3IgPT09IFwiZnVuY3Rpb25cIiA/IFN1cHByZXNzZWRFcnJvciA6IGZ1bmN0aW9uIChlcnJvciwgc3VwcHJlc3NlZCwgbWVzc2FnZSkge1xuICB2YXIgZSA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGUubmFtZSA9IFwiU3VwcHJlc3NlZEVycm9yXCIsIGUuZXJyb3IgPSBlcnJvciwgZS5zdXBwcmVzc2VkID0gc3VwcHJlc3NlZCwgZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2Rpc3Bvc2VSZXNvdXJjZXMoZW52KSB7XG4gIGZ1bmN0aW9uIGZhaWwoZSkge1xuICAgIGVudi5lcnJvciA9IGVudi5oYXNFcnJvciA/IG5ldyBfU3VwcHJlc3NlZEVycm9yKGUsIGVudi5lcnJvciwgXCJBbiBlcnJvciB3YXMgc3VwcHJlc3NlZCBkdXJpbmcgZGlzcG9zYWwuXCIpIDogZTtcbiAgICBlbnYuaGFzRXJyb3IgPSB0cnVlO1xuICB9XG4gIHZhciByLCBzID0gMDtcbiAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICB3aGlsZSAociA9IGVudi5zdGFjay5wb3AoKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFyLmFzeW5jICYmIHMgPT09IDEpIHJldHVybiBzID0gMCwgZW52LnN0YWNrLnB1c2gociksIFByb21pc2UucmVzb2x2ZSgpLnRoZW4obmV4dCk7XG4gICAgICAgIGlmIChyLmRpc3Bvc2UpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gci5kaXNwb3NlLmNhbGwoci52YWx1ZSk7XG4gICAgICAgICAgaWYgKHIuYXN5bmMpIHJldHVybiBzIHw9IDIsIFByb21pc2UucmVzb2x2ZShyZXN1bHQpLnRoZW4obmV4dCwgZnVuY3Rpb24oZSkgeyBmYWlsKGUpOyByZXR1cm4gbmV4dCgpOyB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHMgfD0gMTtcbiAgICAgIH1cbiAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGZhaWwoZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzID09PSAxKSByZXR1cm4gZW52Lmhhc0Vycm9yID8gUHJvbWlzZS5yZWplY3QoZW52LmVycm9yKSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIGlmIChlbnYuaGFzRXJyb3IpIHRocm93IGVudi5lcnJvcjtcbiAgfVxuICByZXR1cm4gbmV4dCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19yZXdyaXRlUmVsYXRpdmVJbXBvcnRFeHRlbnNpb24ocGF0aCwgcHJlc2VydmVKc3gpIHtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSBcInN0cmluZ1wiICYmIC9eXFwuXFwuP1xcLy8udGVzdChwYXRoKSkge1xuICAgICAgcmV0dXJuIHBhdGgucmVwbGFjZSgvXFwuKHRzeCkkfCgoPzpcXC5kKT8pKCg/OlxcLlteLi9dKz8pPylcXC4oW2NtXT8pdHMkL2ksIGZ1bmN0aW9uIChtLCB0c3gsIGQsIGV4dCwgY20pIHtcbiAgICAgICAgICByZXR1cm4gdHN4ID8gcHJlc2VydmVKc3ggPyBcIi5qc3hcIiA6IFwiLmpzXCIgOiBkICYmICghZXh0IHx8ICFjbSkgPyBtIDogKGQgKyBleHQgKyBcIi5cIiArIGNtLnRvTG93ZXJDYXNlKCkgKyBcImpzXCIpO1xuICAgICAgfSk7XG4gIH1cbiAgcmV0dXJuIHBhdGg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgX19leHRlbmRzLFxuICBfX2Fzc2lnbixcbiAgX19yZXN0LFxuICBfX2RlY29yYXRlLFxuICBfX3BhcmFtLFxuICBfX2VzRGVjb3JhdGUsXG4gIF9fcnVuSW5pdGlhbGl6ZXJzLFxuICBfX3Byb3BLZXksXG4gIF9fc2V0RnVuY3Rpb25OYW1lLFxuICBfX21ldGFkYXRhLFxuICBfX2F3YWl0ZXIsXG4gIF9fZ2VuZXJhdG9yLFxuICBfX2NyZWF0ZUJpbmRpbmcsXG4gIF9fZXhwb3J0U3RhcixcbiAgX192YWx1ZXMsXG4gIF9fcmVhZCxcbiAgX19zcHJlYWQsXG4gIF9fc3ByZWFkQXJyYXlzLFxuICBfX3NwcmVhZEFycmF5LFxuICBfX2F3YWl0LFxuICBfX2FzeW5jR2VuZXJhdG9yLFxuICBfX2FzeW5jRGVsZWdhdG9yLFxuICBfX2FzeW5jVmFsdWVzLFxuICBfX21ha2VUZW1wbGF0ZU9iamVjdCxcbiAgX19pbXBvcnRTdGFyLFxuICBfX2ltcG9ydERlZmF1bHQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRHZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRTZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRJbixcbiAgX19hZGREaXNwb3NhYmxlUmVzb3VyY2UsXG4gIF9fZGlzcG9zZVJlc291cmNlcyxcbiAgX19yZXdyaXRlUmVsYXRpdmVJbXBvcnRFeHRlbnNpb24sXG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vcHJpbnRUcmVlXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3ByaW50QmluYXJ5XCIpLCBleHBvcnRzKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wcmludFRyZWUgPSB2b2lkIDA7XG5jb25zdCBwcmludFRyZWUgPSAodGFiID0gJycsIGNoaWxkcmVuKSA9PiB7XG4gICAgbGV0IHN0ciA9ICcnO1xuICAgIGxldCBsYXN0ID0gY2hpbGRyZW4ubGVuZ3RoIC0gMTtcbiAgICBmb3IgKDsgbGFzdCA+PSAwOyBsYXN0LS0pXG4gICAgICAgIGlmIChjaGlsZHJlbltsYXN0XSlcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IGxhc3Q7IGkrKykge1xuICAgICAgICBjb25zdCBmbiA9IGNoaWxkcmVuW2ldO1xuICAgICAgICBpZiAoIWZuKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNvbnN0IGlzTGFzdCA9IGkgPT09IGxhc3Q7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gZm4odGFiICsgKGlzTGFzdCA/ICcgJyA6ICfilIInKSArICcgICcpO1xuICAgICAgICBjb25zdCBicmFuY2ggPSBjaGlsZCA/IChpc0xhc3QgPyAn4pSU4pSAJyA6ICfilJzilIAnKSA6ICfilIInO1xuICAgICAgICBzdHIgKz0gJ1xcbicgKyB0YWIgKyBicmFuY2ggKyAoY2hpbGQgPyAnICcgKyBjaGlsZCA6ICcnKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn07XG5leHBvcnRzLnByaW50VHJlZSA9IHByaW50VHJlZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wcmludEJpbmFyeSA9IHZvaWQgMDtcbmNvbnN0IHByaW50QmluYXJ5ID0gKHRhYiA9ICcnLCBjaGlsZHJlbikgPT4ge1xuICAgIGNvbnN0IGxlZnQgPSBjaGlsZHJlblswXSwgcmlnaHQgPSBjaGlsZHJlblsxXTtcbiAgICBsZXQgc3RyID0gJyc7XG4gICAgaWYgKGxlZnQpXG4gICAgICAgIHN0ciArPSAnXFxuJyArIHRhYiArICfihpAgJyArIGxlZnQodGFiICsgJyAgJyk7XG4gICAgaWYgKHJpZ2h0KVxuICAgICAgICBzdHIgKz0gJ1xcbicgKyB0YWIgKyAn4oaSICcgKyByaWdodCh0YWIgKyAnICAnKTtcbiAgICByZXR1cm4gc3RyO1xufTtcbmV4cG9ydHMucHJpbnRCaW5hcnkgPSBwcmludEJpbmFyeTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50b1RyZWVTeW5jID0gdm9pZCAwO1xuY29uc3QgdHJlZV9kdW1wXzEgPSByZXF1aXJlKFwidHJlZS1kdW1wXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uL25vZGUtdG8tZnNhL3V0aWxcIik7XG5jb25zdCB0b1RyZWVTeW5jID0gKGZzLCBvcHRzID0ge30pID0+IHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3Qgc2VwYXJhdG9yID0gb3B0cy5zZXBhcmF0b3IgfHwgJy8nO1xuICAgIGxldCBkaXIgPSBvcHRzLmRpciB8fCBzZXBhcmF0b3I7XG4gICAgaWYgKGRpcltkaXIubGVuZ3RoIC0gMV0gIT09IHNlcGFyYXRvcilcbiAgICAgICAgZGlyICs9IHNlcGFyYXRvcjtcbiAgICBjb25zdCB0YWIgPSBvcHRzLnRhYiB8fCAnJztcbiAgICBjb25zdCBkZXB0aCA9IChfYSA9IG9wdHMuZGVwdGgpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDEwO1xuICAgIGxldCBzdWJ0cmVlID0gJyAoLi4uKSc7XG4gICAgaWYgKGRlcHRoID4gMCkge1xuICAgICAgICBjb25zdCBsaXN0ID0gZnMucmVhZGRpclN5bmMoZGlyLCB7IHdpdGhGaWxlVHlwZXM6IHRydWUgfSk7XG4gICAgICAgIHN1YnRyZWUgPSAoMCwgdHJlZV9kdW1wXzEucHJpbnRUcmVlKSh0YWIsIGxpc3QubWFwKGVudHJ5ID0+IHRhYiA9PiB7XG4gICAgICAgICAgICBpZiAoZW50cnkuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgZXhwb3J0cy50b1RyZWVTeW5jKShmcywgeyBkaXI6IGRpciArIGVudHJ5Lm5hbWUsIGRlcHRoOiBkZXB0aCAtIDEsIHRhYiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGVudHJ5LmlzU3ltYm9saWNMaW5rKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJycgKyBlbnRyeS5uYW1lICsgJyDihpIgJyArIGZzLnJlYWRsaW5rU3luYyhkaXIgKyBlbnRyeS5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJyArIGVudHJ5Lm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgY29uc3QgYmFzZSA9ICgwLCB1dGlsXzEuYmFzZW5hbWUpKGRpciwgc2VwYXJhdG9yKSArIHNlcGFyYXRvcjtcbiAgICByZXR1cm4gYmFzZSArIHN1YnRyZWU7XG59O1xuZXhwb3J0cy50b1RyZWVTeW5jID0gdG9UcmVlU3luYztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5uZXdOb3RBbGxvd2VkRXJyb3IgPSBleHBvcnRzLm5ld1R5cGVNaXNtYXRjaEVycm9yID0gZXhwb3J0cy5uZXdOb3RGb3VuZEVycm9yID0gZXhwb3J0cy5hc3NlcnRDYW5Xcml0ZSA9IGV4cG9ydHMuYXNzZXJ0TmFtZSA9IGV4cG9ydHMuYmFzZW5hbWUgPSBleHBvcnRzLmN0eCA9IHZvaWQgMDtcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB7QGxpbmsgTm9kZUZzYUNvbnRleHR9LlxuICovXG5jb25zdCBjdHggPSAocGFydGlhbCA9IHt9KSA9PiB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyBzZXBhcmF0b3I6ICcvJywgc3luY0hhbmRsZUFsbG93ZWQ6IGZhbHNlLCBtb2RlOiAncmVhZCcgfSwgcGFydGlhbCk7XG59O1xuZXhwb3J0cy5jdHggPSBjdHg7XG5jb25zdCBiYXNlbmFtZSA9IChwYXRoLCBzZXBhcmF0b3IpID0+IHtcbiAgICBpZiAocGF0aFtwYXRoLmxlbmd0aCAtIDFdID09PSBzZXBhcmF0b3IpXG4gICAgICAgIHBhdGggPSBwYXRoLnNsaWNlKDAsIC0xKTtcbiAgICBjb25zdCBsYXN0U2xhc2hJbmRleCA9IHBhdGgubGFzdEluZGV4T2Yoc2VwYXJhdG9yKTtcbiAgICByZXR1cm4gbGFzdFNsYXNoSW5kZXggPT09IC0xID8gcGF0aCA6IHBhdGguc2xpY2UobGFzdFNsYXNoSW5kZXggKyAxKTtcbn07XG5leHBvcnRzLmJhc2VuYW1lID0gYmFzZW5hbWU7XG5jb25zdCBuYW1lUmVnZXggPSAvXihcXC57MSwyfSkkfF4oLiooW1xcL1xcXFxdKS4qKSQvO1xuY29uc3QgYXNzZXJ0TmFtZSA9IChuYW1lLCBtZXRob2QsIGtsYXNzKSA9PiB7XG4gICAgY29uc3QgaXNJbnZhbGlkID0gIW5hbWUgfHwgbmFtZVJlZ2V4LnRlc3QobmFtZSk7XG4gICAgaWYgKGlzSW52YWxpZClcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRmFpbGVkIHRvIGV4ZWN1dGUgJyR7bWV0aG9kfScgb24gJyR7a2xhc3N9JzogTmFtZSBpcyBub3QgYWxsb3dlZC5gKTtcbn07XG5leHBvcnRzLmFzc2VydE5hbWUgPSBhc3NlcnROYW1lO1xuY29uc3QgYXNzZXJ0Q2FuV3JpdGUgPSAobW9kZSkgPT4ge1xuICAgIGlmIChtb2RlICE9PSAncmVhZHdyaXRlJylcbiAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbignVGhlIHJlcXVlc3QgaXMgbm90IGFsbG93ZWQgYnkgdGhlIHVzZXIgYWdlbnQgb3IgdGhlIHBsYXRmb3JtIGluIHRoZSBjdXJyZW50IGNvbnRleHQuJywgJ05vdEFsbG93ZWRFcnJvcicpO1xufTtcbmV4cG9ydHMuYXNzZXJ0Q2FuV3JpdGUgPSBhc3NlcnRDYW5Xcml0ZTtcbmNvbnN0IG5ld05vdEZvdW5kRXJyb3IgPSAoKSA9PiBuZXcgRE9NRXhjZXB0aW9uKCdBIHJlcXVlc3RlZCBmaWxlIG9yIGRpcmVjdG9yeSBjb3VsZCBub3QgYmUgZm91bmQgYXQgdGhlIHRpbWUgYW4gb3BlcmF0aW9uIHdhcyBwcm9jZXNzZWQuJywgJ05vdEZvdW5kRXJyb3InKTtcbmV4cG9ydHMubmV3Tm90Rm91bmRFcnJvciA9IG5ld05vdEZvdW5kRXJyb3I7XG5jb25zdCBuZXdUeXBlTWlzbWF0Y2hFcnJvciA9ICgpID0+IG5ldyBET01FeGNlcHRpb24oJ1RoZSBwYXRoIHN1cHBsaWVkIGV4aXN0cywgYnV0IHdhcyBub3QgYW4gZW50cnkgb2YgcmVxdWVzdGVkIHR5cGUuJywgJ1R5cGVNaXNtYXRjaEVycm9yJyk7XG5leHBvcnRzLm5ld1R5cGVNaXNtYXRjaEVycm9yID0gbmV3VHlwZU1pc21hdGNoRXJyb3I7XG5jb25zdCBuZXdOb3RBbGxvd2VkRXJyb3IgPSAoKSA9PiBuZXcgRE9NRXhjZXB0aW9uKCdQZXJtaXNzaW9uIG5vdCBncmFudGVkLicsICdOb3RBbGxvd2VkRXJyb3InKTtcbmV4cG9ydHMubmV3Tm90QWxsb3dlZEVycm9yID0gbmV3Tm90QWxsb3dlZEVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRlNXYXRjaGVyID0gZXhwb3J0cy5TdGF0V2F0Y2hlciA9IGV4cG9ydHMuVm9sdW1lID0gdm9pZCAwO1xuZXhwb3J0cy5maWxlbmFtZVRvU3RlcHMgPSBmaWxlbmFtZVRvU3RlcHM7XG5leHBvcnRzLnBhdGhUb1N0ZXBzID0gcGF0aFRvU3RlcHM7XG5leHBvcnRzLmRhdGFUb1N0ciA9IGRhdGFUb1N0cjtcbmV4cG9ydHMudG9Vbml4VGltZXN0YW1wID0gdG9Vbml4VGltZXN0YW1wO1xuY29uc3QgcGF0aE1vZHVsZSA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuY29uc3Qgbm9kZV8xID0gcmVxdWlyZShcIi4vbm9kZVwiKTtcbmNvbnN0IFN0YXRzXzEgPSByZXF1aXJlKFwiLi9TdGF0c1wiKTtcbmNvbnN0IERpcmVudF8xID0gcmVxdWlyZShcIi4vRGlyZW50XCIpO1xuY29uc3QgYnVmZmVyXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9idWZmZXJcIik7XG5jb25zdCBzZXRJbW1lZGlhdGVfMSA9IHJlcXVpcmUoXCIuL3NldEltbWVkaWF0ZVwiKTtcbmNvbnN0IHF1ZXVlTWljcm90YXNrXzEgPSByZXF1aXJlKFwiLi9xdWV1ZU1pY3JvdGFza1wiKTtcbmNvbnN0IHByb2Nlc3NfMSA9IHJlcXVpcmUoXCIuL3Byb2Nlc3NcIik7XG5jb25zdCBzZXRUaW1lb3V0VW5yZWZfMSA9IHJlcXVpcmUoXCIuL3NldFRpbWVvdXRVbnJlZlwiKTtcbmNvbnN0IHN0cmVhbV8xID0gcmVxdWlyZShcInN0cmVhbVwiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuY29uc3QgZXZlbnRzXzEgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xuY29uc3QgZW5jb2RpbmdfMSA9IHJlcXVpcmUoXCIuL2VuY29kaW5nXCIpO1xuY29uc3QgRmlsZUhhbmRsZV8xID0gcmVxdWlyZShcIi4vbm9kZS9GaWxlSGFuZGxlXCIpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xuY29uc3QgRnNQcm9taXNlc18xID0gcmVxdWlyZShcIi4vbm9kZS9Gc1Byb21pc2VzXCIpO1xuY29uc3QgcHJpbnRfMSA9IHJlcXVpcmUoXCIuL3ByaW50XCIpO1xuY29uc3QgY29uc3RhbnRzXzIgPSByZXF1aXJlKFwiLi9ub2RlL2NvbnN0YW50c1wiKTtcbmNvbnN0IG9wdGlvbnNfMSA9IHJlcXVpcmUoXCIuL25vZGUvb3B0aW9uc1wiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuL25vZGUvdXRpbFwiKTtcbmNvbnN0IERpcl8xID0gcmVxdWlyZShcIi4vRGlyXCIpO1xuY29uc3QgcmVzb2x2ZUNyb3NzUGxhdGZvcm0gPSBwYXRoTW9kdWxlLnJlc29sdmU7XG5jb25zdCB7IE9fUkRPTkxZLCBPX1dST05MWSwgT19SRFdSLCBPX0NSRUFULCBPX0VYQ0wsIE9fVFJVTkMsIE9fQVBQRU5ELCBPX0RJUkVDVE9SWSwgT19TWU1MSU5LLCBGX09LLCBDT1BZRklMRV9FWENMLCBDT1BZRklMRV9GSUNMT05FX0ZPUkNFLCB9ID0gY29uc3RhbnRzXzEuY29uc3RhbnRzO1xuY29uc3QgeyBzZXAsIHJlbGF0aXZlLCBqb2luLCBkaXJuYW1lIH0gPSBwYXRoTW9kdWxlLnBvc2l4ID8gcGF0aE1vZHVsZS5wb3NpeCA6IHBhdGhNb2R1bGU7XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENvbnN0YW50c1xuY29uc3Qga01pblBvb2xTcGFjZSA9IDEyODtcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRXJyb3IgbWVzc2FnZXNcbmNvbnN0IEVQRVJNID0gJ0VQRVJNJztcbmNvbnN0IEVOT0VOVCA9ICdFTk9FTlQnO1xuY29uc3QgRUJBREYgPSAnRUJBREYnO1xuY29uc3QgRUlOVkFMID0gJ0VJTlZBTCc7XG5jb25zdCBFRVhJU1QgPSAnRUVYSVNUJztcbmNvbnN0IEVOT1RESVIgPSAnRU5PVERJUic7XG5jb25zdCBFTUZJTEUgPSAnRU1GSUxFJztcbmNvbnN0IEVBQ0NFUyA9ICdFQUNDRVMnO1xuY29uc3QgRUlTRElSID0gJ0VJU0RJUic7XG5jb25zdCBFTk9URU1QVFkgPSAnRU5PVEVNUFRZJztcbmNvbnN0IEVOT1NZUyA9ICdFTk9TWVMnO1xuY29uc3QgRVJSX0ZTX0VJU0RJUiA9ICdFUlJfRlNfRUlTRElSJztcbmNvbnN0IEVSUl9PVVRfT0ZfUkFOR0UgPSAnRVJSX09VVF9PRl9SQU5HRSc7XG5sZXQgcmVzb2x2ZSA9IChmaWxlbmFtZSwgYmFzZSA9IHByb2Nlc3NfMS5kZWZhdWx0LmN3ZCgpKSA9PiByZXNvbHZlQ3Jvc3NQbGF0Zm9ybShiYXNlLCBmaWxlbmFtZSk7XG5pZiAodXRpbF8xLmlzV2luKSB7XG4gICAgY29uc3QgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIHJlc29sdmUgPSAoZmlsZW5hbWUsIGJhc2UpID0+ICgwLCB1dGlsXzEudW5peGlmeSkoX3Jlc29sdmUoZmlsZW5hbWUsIGJhc2UpKTtcbn1cbmZ1bmN0aW9uIGZpbGVuYW1lVG9TdGVwcyhmaWxlbmFtZSwgYmFzZSkge1xuICAgIGNvbnN0IGZ1bGxQYXRoID0gcmVzb2x2ZShmaWxlbmFtZSwgYmFzZSk7XG4gICAgY29uc3QgZnVsbFBhdGhTYW5zU2xhc2ggPSBmdWxsUGF0aC5zdWJzdHJpbmcoMSk7XG4gICAgaWYgKCFmdWxsUGF0aFNhbnNTbGFzaClcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIHJldHVybiBmdWxsUGF0aFNhbnNTbGFzaC5zcGxpdChzZXApO1xufVxuZnVuY3Rpb24gcGF0aFRvU3RlcHMocGF0aCkge1xuICAgIHJldHVybiBmaWxlbmFtZVRvU3RlcHMoKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkocGF0aCkpO1xufVxuZnVuY3Rpb24gZGF0YVRvU3RyKGRhdGEsIGVuY29kaW5nID0gZW5jb2RpbmdfMS5FTkNPRElOR19VVEY4KSB7XG4gICAgaWYgKGJ1ZmZlcl8xLkJ1ZmZlci5pc0J1ZmZlcihkYXRhKSlcbiAgICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoZW5jb2RpbmcpO1xuICAgIGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KVxuICAgICAgICByZXR1cm4gKDAsIGJ1ZmZlcl8xLmJ1ZmZlckZyb20pKGRhdGEpLnRvU3RyaW5nKGVuY29kaW5nKTtcbiAgICBlbHNlXG4gICAgICAgIHJldHVybiBTdHJpbmcoZGF0YSk7XG59XG4vLyBjb252ZXJ0cyBEYXRlIG9yIG51bWJlciB0byBhIGZyYWN0aW9uYWwgVU5JWCB0aW1lc3RhbXBcbmZ1bmN0aW9uIHRvVW5peFRpbWVzdGFtcCh0aW1lKSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lIHRyaXBsZS1lcXVhbHNcbiAgICBpZiAodHlwZW9mIHRpbWUgPT09ICdzdHJpbmcnICYmICt0aW1lID09IHRpbWUpIHtcbiAgICAgICAgcmV0dXJuICt0aW1lO1xuICAgIH1cbiAgICBpZiAodGltZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgcmV0dXJuIHRpbWUuZ2V0VGltZSgpIC8gMTAwMDtcbiAgICB9XG4gICAgaWYgKGlzRmluaXRlKHRpbWUpKSB7XG4gICAgICAgIGlmICh0aW1lIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIERhdGUubm93KCkgLyAxMDAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aW1lO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBwYXJzZSB0aW1lOiAnICsgdGltZSk7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZVVpZCh1aWQpIHtcbiAgICBpZiAodHlwZW9mIHVpZCAhPT0gJ251bWJlcicpXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihjb25zdGFudHNfMi5FUlJTVFIuVUlEKTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlR2lkKGdpZCkge1xuICAgIGlmICh0eXBlb2YgZ2lkICE9PSAnbnVtYmVyJylcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKGNvbnN0YW50c18yLkVSUlNUUi5HSUQpO1xufVxuZnVuY3Rpb24gZmxhdHRlbkpTT04obmVzdGVkSlNPTikge1xuICAgIGNvbnN0IGZsYXRKU09OID0ge307XG4gICAgZnVuY3Rpb24gZmxhdHRlbihwYXRoUHJlZml4LCBub2RlKSB7XG4gICAgICAgIGZvciAoY29uc3QgcGF0aCBpbiBub2RlKSB7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50T3JOb2RlID0gbm9kZVtwYXRoXTtcbiAgICAgICAgICAgIGNvbnN0IGpvaW5lZFBhdGggPSBqb2luKHBhdGhQcmVmaXgsIHBhdGgpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50T3JOb2RlID09PSAnc3RyaW5nJyB8fCBjb250ZW50T3JOb2RlIGluc3RhbmNlb2YgYnVmZmVyXzEuQnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgZmxhdEpTT05bam9pbmVkUGF0aF0gPSBjb250ZW50T3JOb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGNvbnRlbnRPck5vZGUgPT09ICdvYmplY3QnICYmIGNvbnRlbnRPck5vZGUgIT09IG51bGwgJiYgT2JqZWN0LmtleXMoY29udGVudE9yTm9kZSkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIGVtcHR5IGRpcmVjdG9yaWVzIG5lZWQgYW4gZXhwbGljaXQgZW50cnkgYW5kIHRoZXJlZm9yZSBnZXQgaGFuZGxlZCBpbiBgZWxzZWAsIG5vbi1lbXB0eSBvbmVzIGFyZSBpbXBsaWNpdGx5IGNvbnNpZGVyZWRcbiAgICAgICAgICAgICAgICBmbGF0dGVuKGpvaW5lZFBhdGgsIGNvbnRlbnRPck5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gd2l0aG91dCB0aGlzIGJyYW5jaCBudWxsLCBlbXB0eS1vYmplY3Qgb3Igbm9uLW9iamVjdCBlbnRyaWVzIHdvdWxkIG5vdCBiZSBoYW5kbGVkIGluIHRoZSBzYW1lIHdheVxuICAgICAgICAgICAgICAgIC8vIGJ5IGJvdGggZnJvbUpTT04oKSBhbmQgZnJvbU5lc3RlZEpTT04oKVxuICAgICAgICAgICAgICAgIGZsYXRKU09OW2pvaW5lZFBhdGhdID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmbGF0dGVuKCcnLCBuZXN0ZWRKU09OKTtcbiAgICByZXR1cm4gZmxhdEpTT047XG59XG5jb25zdCBub3RJbXBsZW1lbnRlZCA9ICgpID0+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xufTtcbi8qKlxuICogYFZvbHVtZWAgcmVwcmVzZW50cyBhIGZpbGUgc3lzdGVtLlxuICovXG5jbGFzcyBWb2x1bWUge1xuICAgIHN0YXRpYyBmcm9tSlNPTihqc29uLCBjd2QpIHtcbiAgICAgICAgY29uc3Qgdm9sID0gbmV3IFZvbHVtZSgpO1xuICAgICAgICB2b2wuZnJvbUpTT04oanNvbiwgY3dkKTtcbiAgICAgICAgcmV0dXJuIHZvbDtcbiAgICB9XG4gICAgc3RhdGljIGZyb21OZXN0ZWRKU09OKGpzb24sIGN3ZCkge1xuICAgICAgICBjb25zdCB2b2wgPSBuZXcgVm9sdW1lKCk7XG4gICAgICAgIHZvbC5mcm9tTmVzdGVkSlNPTihqc29uLCBjd2QpO1xuICAgICAgICByZXR1cm4gdm9sO1xuICAgIH1cbiAgICBnZXQgcHJvbWlzZXMoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb21pc2VzQXBpID09PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQcm9taXNlIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudC4nKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvbWlzZXNBcGk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHByb3BzID0ge30pIHtcbiAgICAgICAgLy8gSS1ub2RlIG51bWJlciBjb3VudGVyLlxuICAgICAgICB0aGlzLmlubyA9IDA7XG4gICAgICAgIC8vIEEgbWFwcGluZyBmb3IgaS1ub2RlIG51bWJlcnMgdG8gaS1ub2RlcyAoYE5vZGVgKTtcbiAgICAgICAgdGhpcy5pbm9kZXMgPSB7fTtcbiAgICAgICAgLy8gTGlzdCBvZiByZWxlYXNlZCBpLW5vZGUgbnVtYmVycywgZm9yIHJldXNlLlxuICAgICAgICB0aGlzLnJlbGVhc2VkSW5vcyA9IFtdO1xuICAgICAgICAvLyBBIG1hcHBpbmcgZm9yIGZpbGUgZGVzY3JpcHRvcnMgdG8gYEZpbGVgcy5cbiAgICAgICAgdGhpcy5mZHMgPSB7fTtcbiAgICAgICAgLy8gQSBsaXN0IG9mIHJldXNhYmxlIChvcGVuZWQgYW5kIGNsb3NlZCkgZmlsZSBkZXNjcmlwdG9ycywgdGhhdCBzaG91bGQgYmVcbiAgICAgICAgLy8gdXNlZCBmaXJzdCBiZWZvcmUgY3JlYXRpbmcgYSBuZXcgZmlsZSBkZXNjcmlwdG9yLlxuICAgICAgICB0aGlzLnJlbGVhc2VkRmRzID0gW107XG4gICAgICAgIC8vIE1heCBudW1iZXIgb2Ygb3BlbiBmaWxlcy5cbiAgICAgICAgdGhpcy5tYXhGaWxlcyA9IDEwMDAwO1xuICAgICAgICAvLyBDdXJyZW50IG51bWJlciBvZiBvcGVuIGZpbGVzLlxuICAgICAgICB0aGlzLm9wZW5GaWxlcyA9IDA7XG4gICAgICAgIHRoaXMucHJvbWlzZXNBcGkgPSBuZXcgRnNQcm9taXNlc18xLkZzUHJvbWlzZXModGhpcywgRmlsZUhhbmRsZV8xLkZpbGVIYW5kbGUpO1xuICAgICAgICB0aGlzLnN0YXRXYXRjaGVycyA9IHt9O1xuICAgICAgICB0aGlzLmNwU3luYyA9IG5vdEltcGxlbWVudGVkO1xuICAgICAgICB0aGlzLnN0YXRmc1N5bmMgPSBub3RJbXBsZW1lbnRlZDtcbiAgICAgICAgdGhpcy5jcCA9IG5vdEltcGxlbWVudGVkO1xuICAgICAgICB0aGlzLnN0YXRmcyA9IG5vdEltcGxlbWVudGVkO1xuICAgICAgICB0aGlzLm9wZW5Bc0Jsb2IgPSBub3RJbXBsZW1lbnRlZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IE9iamVjdC5hc3NpZ24oeyBOb2RlOiBub2RlXzEuTm9kZSwgTGluazogbm9kZV8xLkxpbmssIEZpbGU6IG5vZGVfMS5GaWxlIH0sIHByb3BzKTtcbiAgICAgICAgY29uc3Qgcm9vdCA9IHRoaXMuY3JlYXRlTGluaygpO1xuICAgICAgICByb290LnNldE5vZGUodGhpcy5jcmVhdGVOb2RlKHRydWUpKTtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7IC8vIHRzbGludDpkaXNhYmxlLWxpbmUgbm8tdGhpcy1hc3NpZ25tZW50XG4gICAgICAgIHRoaXMuU3RhdFdhdGNoZXIgPSBjbGFzcyBleHRlbmRzIFN0YXRXYXRjaGVyIHtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgICAgIHN1cGVyKHNlbGYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBfUmVhZFN0cmVhbSA9IEZzUmVhZFN0cmVhbTtcbiAgICAgICAgdGhpcy5SZWFkU3RyZWFtID0gY2xhc3MgZXh0ZW5kcyBfUmVhZFN0cmVhbSB7XG4gICAgICAgICAgICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgICAgICAgICAgICAgc3VwZXIoc2VsZiwgLi4uYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IF9Xcml0ZVN0cmVhbSA9IEZzV3JpdGVTdHJlYW07XG4gICAgICAgIHRoaXMuV3JpdGVTdHJlYW0gPSBjbGFzcyBleHRlbmRzIF9Xcml0ZVN0cmVhbSB7XG4gICAgICAgICAgICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgICAgICAgICAgICAgc3VwZXIoc2VsZiwgLi4uYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuRlNXYXRjaGVyID0gY2xhc3MgZXh0ZW5kcyBGU1dhdGNoZXIge1xuICAgICAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICAgICAgc3VwZXIoc2VsZik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJvb3Quc2V0Q2hpbGQoJy4nLCByb290KTtcbiAgICAgICAgcm9vdC5nZXROb2RlKCkubmxpbmsrKztcbiAgICAgICAgcm9vdC5zZXRDaGlsZCgnLi4nLCByb290KTtcbiAgICAgICAgcm9vdC5nZXROb2RlKCkubmxpbmsrKztcbiAgICAgICAgdGhpcy5yb290ID0gcm9vdDtcbiAgICB9XG4gICAgY3JlYXRlTGluayhwYXJlbnQsIG5hbWUsIGlzRGlyZWN0b3J5ID0gZmFsc2UsIHBlcm0pIHtcbiAgICAgICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgdGhpcy5wcm9wcy5MaW5rKHRoaXMsIG51bGwsICcnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY3JlYXRlTGluazogbmFtZSBjYW5ub3QgYmUgZW1wdHknKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyZW50LmNyZWF0ZUNoaWxkKG5hbWUsIHRoaXMuY3JlYXRlTm9kZShpc0RpcmVjdG9yeSwgcGVybSkpO1xuICAgIH1cbiAgICBkZWxldGVMaW5rKGxpbmspIHtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gbGluay5wYXJlbnQ7XG4gICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgIHBhcmVudC5kZWxldGVDaGlsZChsaW5rKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbmV3SW5vTnVtYmVyKCkge1xuICAgICAgICBjb25zdCByZWxlYXNlZEZkID0gdGhpcy5yZWxlYXNlZElub3MucG9wKCk7XG4gICAgICAgIGlmIChyZWxlYXNlZEZkKVxuICAgICAgICAgICAgcmV0dXJuIHJlbGVhc2VkRmQ7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pbm8gPSAodGhpcy5pbm8gKyAxKSAlIDB4ZmZmZmZmZmY7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbm87XG4gICAgICAgIH1cbiAgICB9XG4gICAgbmV3RmROdW1iZXIoKSB7XG4gICAgICAgIGNvbnN0IHJlbGVhc2VkRmQgPSB0aGlzLnJlbGVhc2VkRmRzLnBvcCgpO1xuICAgICAgICByZXR1cm4gdHlwZW9mIHJlbGVhc2VkRmQgPT09ICdudW1iZXInID8gcmVsZWFzZWRGZCA6IFZvbHVtZS5mZC0tO1xuICAgIH1cbiAgICBjcmVhdGVOb2RlKGlzRGlyZWN0b3J5ID0gZmFsc2UsIHBlcm0pIHtcbiAgICAgICAgcGVybSAhPT0gbnVsbCAmJiBwZXJtICE9PSB2b2lkIDAgPyBwZXJtIDogKHBlcm0gPSBpc0RpcmVjdG9yeSA/IDBvNzc3IDogMG82NjYpO1xuICAgICAgICBjb25zdCBub2RlID0gbmV3IHRoaXMucHJvcHMuTm9kZSh0aGlzLm5ld0lub051bWJlcigpLCBwZXJtKTtcbiAgICAgICAgaWYgKGlzRGlyZWN0b3J5KVxuICAgICAgICAgICAgbm9kZS5zZXRJc0RpcmVjdG9yeSgpO1xuICAgICAgICB0aGlzLmlub2Rlc1tub2RlLmlub10gPSBub2RlO1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gICAgZGVsZXRlTm9kZShub2RlKSB7XG4gICAgICAgIG5vZGUuZGVsKCk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmlub2Rlc1tub2RlLmlub107XG4gICAgICAgIHRoaXMucmVsZWFzZWRJbm9zLnB1c2gobm9kZS5pbm8pO1xuICAgIH1cbiAgICB3YWxrKHN0ZXBzT3JGaWxlbmFtZU9yTGluaywgcmVzb2x2ZVN5bWxpbmtzID0gZmFsc2UsIGNoZWNrRXhpc3RlbmNlID0gZmFsc2UsIGNoZWNrQWNjZXNzID0gZmFsc2UsIGZ1bmNOYW1lKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgbGV0IHN0ZXBzO1xuICAgICAgICBsZXQgZmlsZW5hbWU7XG4gICAgICAgIGlmIChzdGVwc09yRmlsZW5hbWVPckxpbmsgaW5zdGFuY2VvZiBub2RlXzEuTGluaykge1xuICAgICAgICAgICAgc3RlcHMgPSBzdGVwc09yRmlsZW5hbWVPckxpbmsuc3RlcHM7XG4gICAgICAgICAgICBmaWxlbmFtZSA9IHNlcCArIHN0ZXBzLmpvaW4oc2VwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2Ygc3RlcHNPckZpbGVuYW1lT3JMaW5rID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgc3RlcHMgPSBmaWxlbmFtZVRvU3RlcHMoc3RlcHNPckZpbGVuYW1lT3JMaW5rKTtcbiAgICAgICAgICAgIGZpbGVuYW1lID0gc3RlcHNPckZpbGVuYW1lT3JMaW5rO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3RlcHMgPSBzdGVwc09yRmlsZW5hbWVPckxpbms7XG4gICAgICAgICAgICBmaWxlbmFtZSA9IHNlcCArIHN0ZXBzLmpvaW4oc2VwKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY3VyciA9IHRoaXMucm9vdDtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHN0ZXBzLmxlbmd0aCkge1xuICAgICAgICAgICAgbGV0IG5vZGUgPSBjdXJyLmdldE5vZGUoKTtcbiAgICAgICAgICAgIC8vIENoZWNrIGFjY2VzcyBwZXJtaXNzaW9ucyBpZiBjdXJyZW50IGxpbmsgaXMgYSBkaXJlY3RvcnlcbiAgICAgICAgICAgIGlmIChub2RlLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tBY2Nlc3MgJiYgIW5vZGUuY2FuRXhlY3V0ZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93ICgwLCB1dGlsXzEuY3JlYXRlRXJyb3IpKEVBQ0NFUywgZnVuY05hbWUsIGZpbGVuYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA8IHN0ZXBzLmxlbmd0aCAtIDEpXG4gICAgICAgICAgICAgICAgICAgIHRocm93ICgwLCB1dGlsXzEuY3JlYXRlRXJyb3IpKEVOT1RESVIsIGZ1bmNOYW1lLCBmaWxlbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyID0gKF9hID0gY3Vyci5nZXRDaGlsZChzdGVwc1tpXSkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG51bGw7XG4gICAgICAgICAgICAvLyBDaGVjayBleGlzdGVuY2Ugb2YgY3VycmVudCBsaW5rXG4gICAgICAgICAgICBpZiAoIWN1cnIpXG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrRXhpc3RlbmNlKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyAoMCwgdXRpbF8xLmNyZWF0ZUVycm9yKShFTk9FTlQsIGZ1bmNOYW1lLCBmaWxlbmFtZSk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIG5vZGUgPSBjdXJyID09PSBudWxsIHx8IGN1cnIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGN1cnIuZ2V0Tm9kZSgpO1xuICAgICAgICAgICAgLy8gUmVzb2x2ZSBzeW1saW5rXG4gICAgICAgICAgICBpZiAocmVzb2x2ZVN5bWxpbmtzICYmIG5vZGUuaXNTeW1saW5rKCkpIHtcbiAgICAgICAgICAgICAgICBzdGVwcyA9IG5vZGUuc3ltbGluay5jb25jYXQoc3RlcHMuc2xpY2UoaSArIDEpKTtcbiAgICAgICAgICAgICAgICBjdXJyID0gdGhpcy5yb290O1xuICAgICAgICAgICAgICAgIGkgPSAwO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdXJyO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIGEgYExpbmtgIChoYXJkIGxpbmspIHJlZmVyZW5jZWQgYnkgcGF0aCBcInNwbGl0XCIgaW50byBzdGVwcy5cbiAgICBnZXRMaW5rKHN0ZXBzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndhbGsoc3RlcHMsIGZhbHNlLCBmYWxzZSwgZmFsc2UpO1xuICAgIH1cbiAgICAvLyBKdXN0IGxpbmsgYGdldExpbmtgLCBidXQgdGhyb3dzIGEgY29ycmVjdCB1c2VyIGVycm9yLCBpZiBsaW5rIHRvIGZvdW5kLlxuICAgIGdldExpbmtPclRocm93KGZpbGVuYW1lLCBmdW5jTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy53YWxrKGZpbGVuYW1lLCBmYWxzZSwgdHJ1ZSwgdHJ1ZSwgZnVuY05hbWUpO1xuICAgIH1cbiAgICAvLyBKdXN0IGxpa2UgYGdldExpbmtgLCBidXQgYWxzbyBkZXJlZmVyZW5jZS9yZXNvbHZlcyBzeW1ib2xpYyBsaW5rcy5cbiAgICBnZXRSZXNvbHZlZExpbmsoZmlsZW5hbWVPclN0ZXBzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndhbGsoZmlsZW5hbWVPclN0ZXBzLCB0cnVlLCBmYWxzZSwgZmFsc2UpO1xuICAgIH1cbiAgICAvLyBKdXN0IGxpa2UgYGdldExpbmtPclRocm93YCwgYnV0IGFsc28gZGVyZWZlcmVuY2UvcmVzb2x2ZXMgc3ltYm9saWMgbGlua3MuXG4gICAgZ2V0UmVzb2x2ZWRMaW5rT3JUaHJvdyhmaWxlbmFtZSwgZnVuY05hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2FsayhmaWxlbmFtZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgZnVuY05hbWUpO1xuICAgIH1cbiAgICByZXNvbHZlU3ltbGlua3MobGluaykge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZXNvbHZlZExpbmsobGluay5zdGVwcy5zbGljZSgxKSk7XG4gICAgfVxuICAgIC8vIEp1c3QgbGlrZSBgZ2V0TGlua09yVGhyb3dgLCBidXQgYWxzbyB2ZXJpZmllcyB0aGF0IHRoZSBsaW5rIGlzIGEgZGlyZWN0b3J5LlxuICAgIGdldExpbmtBc0Rpck9yVGhyb3coZmlsZW5hbWUsIGZ1bmNOYW1lKSB7XG4gICAgICAgIGNvbnN0IGxpbmsgPSB0aGlzLmdldExpbmtPclRocm93KGZpbGVuYW1lLCBmdW5jTmFtZSk7XG4gICAgICAgIGlmICghbGluay5nZXROb2RlKCkuaXNEaXJlY3RvcnkoKSlcbiAgICAgICAgICAgIHRocm93ICgwLCB1dGlsXzEuY3JlYXRlRXJyb3IpKEVOT1RESVIsIGZ1bmNOYW1lLCBmaWxlbmFtZSk7XG4gICAgICAgIHJldHVybiBsaW5rO1xuICAgIH1cbiAgICAvLyBHZXQgdGhlIGltbWVkaWF0ZSBwYXJlbnQgZGlyZWN0b3J5IG9mIHRoZSBsaW5rLlxuICAgIGdldExpbmtQYXJlbnQoc3RlcHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TGluayhzdGVwcy5zbGljZSgwLCAtMSkpO1xuICAgIH1cbiAgICBnZXRMaW5rUGFyZW50QXNEaXJPclRocm93KGZpbGVuYW1lT3JTdGVwcywgZnVuY05hbWUpIHtcbiAgICAgICAgY29uc3Qgc3RlcHMgPSAoZmlsZW5hbWVPclN0ZXBzIGluc3RhbmNlb2YgQXJyYXkgPyBmaWxlbmFtZU9yU3RlcHMgOiBmaWxlbmFtZVRvU3RlcHMoZmlsZW5hbWVPclN0ZXBzKSkuc2xpY2UoMCwgLTEpO1xuICAgICAgICBjb25zdCBmaWxlbmFtZSA9IHNlcCArIHN0ZXBzLmpvaW4oc2VwKTtcbiAgICAgICAgY29uc3QgbGluayA9IHRoaXMuZ2V0TGlua09yVGhyb3coZmlsZW5hbWUsIGZ1bmNOYW1lKTtcbiAgICAgICAgaWYgKCFsaW5rLmdldE5vZGUoKS5pc0RpcmVjdG9yeSgpKVxuICAgICAgICAgICAgdGhyb3cgKDAsIHV0aWxfMS5jcmVhdGVFcnJvcikoRU5PVERJUiwgZnVuY05hbWUsIGZpbGVuYW1lKTtcbiAgICAgICAgcmV0dXJuIGxpbms7XG4gICAgfVxuICAgIGdldEZpbGVCeUZkKGZkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZkc1tTdHJpbmcoZmQpXTtcbiAgICB9XG4gICAgZ2V0RmlsZUJ5RmRPclRocm93KGZkLCBmdW5jTmFtZSkge1xuICAgICAgICBpZiAoISgwLCB1dGlsXzEuaXNGZCkoZmQpKVxuICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKGNvbnN0YW50c18yLkVSUlNUUi5GRCk7XG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmdldEZpbGVCeUZkKGZkKTtcbiAgICAgICAgaWYgKCFmaWxlKVxuICAgICAgICAgICAgdGhyb3cgKDAsIHV0aWxfMS5jcmVhdGVFcnJvcikoRUJBREYsIGZ1bmNOYW1lKTtcbiAgICAgICAgcmV0dXJuIGZpbGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEB0b2RvIFRoaXMgaXMgbm90IHVzZWQgYW55bW9yZS4gUmVtb3ZlLlxuICAgICAqL1xuICAgIC8qXG4gICAgcHJpdmF0ZSBnZXROb2RlQnlJZE9yQ3JlYXRlKGlkOiBURmlsZUlkLCBmbGFnczogbnVtYmVyLCBwZXJtOiBudW1iZXIpOiBOb2RlIHtcbiAgICAgIGlmICh0eXBlb2YgaWQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmdldEZpbGVCeUZkKGlkKTtcbiAgICAgICAgaWYgKCFmaWxlKSB0aHJvdyBFcnJvcignRmlsZSBudG8gZm91bmQnKTtcbiAgICAgICAgcmV0dXJuIGZpbGUubm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHN0ZXBzID0gcGF0aFRvU3RlcHMoaWQgYXMgUGF0aExpa2UpO1xuICAgICAgICBsZXQgbGluayA9IHRoaXMuZ2V0TGluayhzdGVwcyk7XG4gICAgICAgIGlmIChsaW5rKSByZXR1cm4gbGluay5nZXROb2RlKCk7XG4gIFxuICAgICAgICAvLyBUcnkgY3JlYXRpbmcgYSBub2RlIGlmIG5vdCBmb3VuZC5cbiAgICAgICAgaWYgKGZsYWdzICYgT19DUkVBVCkge1xuICAgICAgICAgIGNvbnN0IGRpckxpbmsgPSB0aGlzLmdldExpbmtQYXJlbnQoc3RlcHMpO1xuICAgICAgICAgIGlmIChkaXJMaW5rKSB7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gc3RlcHNbc3RlcHMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBsaW5rID0gdGhpcy5jcmVhdGVMaW5rKGRpckxpbmssIG5hbWUsIGZhbHNlLCBwZXJtKTtcbiAgICAgICAgICAgIHJldHVybiBsaW5rLmdldE5vZGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgXG4gICAgICAgIHRocm93IGNyZWF0ZUVycm9yKEVOT0VOVCwgJ2dldE5vZGVCeUlkT3JDcmVhdGUnLCBwYXRoVG9GaWxlbmFtZShpZCkpO1xuICAgICAgfVxuICAgIH1cbiAgICAqL1xuICAgIHdyYXBBc3luYyhtZXRob2QsIGFyZ3MsIGNhbGxiYWNrKSB7XG4gICAgICAgICgwLCB1dGlsXzEudmFsaWRhdGVDYWxsYmFjaykoY2FsbGJhY2spO1xuICAgICAgICAoMCwgc2V0SW1tZWRpYXRlXzEuZGVmYXVsdCkoKCkgPT4ge1xuICAgICAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF90b0pTT04obGluayA9IHRoaXMucm9vdCwganNvbiA9IHt9LCBwYXRoLCBhc0J1ZmZlcikge1xuICAgICAgICBsZXQgaXNFbXB0eSA9IHRydWU7XG4gICAgICAgIGxldCBjaGlsZHJlbiA9IGxpbmsuY2hpbGRyZW47XG4gICAgICAgIGlmIChsaW5rLmdldE5vZGUoKS5pc0ZpbGUoKSkge1xuICAgICAgICAgICAgY2hpbGRyZW4gPSBuZXcgTWFwKFtbbGluay5nZXROYW1lKCksIGxpbmsucGFyZW50LmdldENoaWxkKGxpbmsuZ2V0TmFtZSgpKV1dKTtcbiAgICAgICAgICAgIGxpbmsgPSBsaW5rLnBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgY2hpbGRyZW4ua2V5cygpKSB7XG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gJy4nIHx8IG5hbWUgPT09ICcuLicpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlzRW1wdHkgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gbGluay5nZXRDaGlsZChuYW1lKTtcbiAgICAgICAgICAgIGlmICghY2hpbGQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ190b0pTT046IHVuZXhwZWN0ZWQgdW5kZWZpbmVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBub2RlID0gY2hpbGQuZ2V0Tm9kZSgpO1xuICAgICAgICAgICAgaWYgKG5vZGUuaXNGaWxlKCkpIHtcbiAgICAgICAgICAgICAgICBsZXQgZmlsZW5hbWUgPSBjaGlsZC5nZXRQYXRoKCk7XG4gICAgICAgICAgICAgICAgaWYgKHBhdGgpXG4gICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lID0gcmVsYXRpdmUocGF0aCwgZmlsZW5hbWUpO1xuICAgICAgICAgICAgICAgIGpzb25bZmlsZW5hbWVdID0gYXNCdWZmZXIgPyBub2RlLmdldEJ1ZmZlcigpIDogbm9kZS5nZXRTdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5vZGUuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RvSlNPTihjaGlsZCwganNvbiwgcGF0aCwgYXNCdWZmZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBkaXJQYXRoID0gbGluay5nZXRQYXRoKCk7XG4gICAgICAgIGlmIChwYXRoKVxuICAgICAgICAgICAgZGlyUGF0aCA9IHJlbGF0aXZlKHBhdGgsIGRpclBhdGgpO1xuICAgICAgICBpZiAoZGlyUGF0aCAmJiBpc0VtcHR5KSB7XG4gICAgICAgICAgICBqc29uW2RpclBhdGhdID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ganNvbjtcbiAgICB9XG4gICAgdG9KU09OKHBhdGhzLCBqc29uID0ge30sIGlzUmVsYXRpdmUgPSBmYWxzZSwgYXNCdWZmZXIgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBsaW5rcyA9IFtdO1xuICAgICAgICBpZiAocGF0aHMpIHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShwYXRocykpXG4gICAgICAgICAgICAgICAgcGF0aHMgPSBbcGF0aHNdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBwYXRoIG9mIHBhdGhzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZW5hbWUgPSAoMCwgdXRpbF8xLnBhdGhUb0ZpbGVuYW1lKShwYXRoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5rID0gdGhpcy5nZXRSZXNvbHZlZExpbmsoZmlsZW5hbWUpO1xuICAgICAgICAgICAgICAgIGlmICghbGluaylcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgbGlua3MucHVzaChsaW5rKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxpbmtzLnB1c2godGhpcy5yb290KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWxpbmtzLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiBqc29uO1xuICAgICAgICBmb3IgKGNvbnN0IGxpbmsgb2YgbGlua3MpXG4gICAgICAgICAgICB0aGlzLl90b0pTT04obGluaywganNvbiwgaXNSZWxhdGl2ZSA/IGxpbmsuZ2V0UGF0aCgpIDogJycsIGFzQnVmZmVyKTtcbiAgICAgICAgcmV0dXJuIGpzb247XG4gICAgfVxuICAgIC8vIFRPRE86IGBjd2RgIHNob3VsZCBwcm9iYWJseSBub3QgaW52b2tlIGBwcm9jZXNzLmN3ZCgpYC5cbiAgICBmcm9tSlNPTihqc29uLCBjd2QgPSBwcm9jZXNzXzEuZGVmYXVsdC5jd2QoKSkge1xuICAgICAgICBmb3IgKGxldCBmaWxlbmFtZSBpbiBqc29uKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0ganNvbltmaWxlbmFtZV07XG4gICAgICAgICAgICBmaWxlbmFtZSA9IHJlc29sdmUoZmlsZW5hbWUsIGN3ZCk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnIHx8IGRhdGEgaW5zdGFuY2VvZiBidWZmZXJfMS5CdWZmZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXIgPSBkaXJuYW1lKGZpbGVuYW1lKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1rZGlycEJhc2UoZGlyLCA1MTEgLyogTU9ERS5ESVIgKi8pO1xuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVGaWxlU3luYyhmaWxlbmFtZSwgZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1rZGlycEJhc2UoZmlsZW5hbWUsIDUxMSAvKiBNT0RFLkRJUiAqLyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnJvbU5lc3RlZEpTT04oanNvbiwgY3dkKSB7XG4gICAgICAgIHRoaXMuZnJvbUpTT04oZmxhdHRlbkpTT04oanNvbiksIGN3ZCk7XG4gICAgfVxuICAgIHRvVHJlZShvcHRzID0geyBzZXBhcmF0b3I6IHNlcCB9KSB7XG4gICAgICAgIHJldHVybiAoMCwgcHJpbnRfMS50b1RyZWVTeW5jKSh0aGlzLCBvcHRzKTtcbiAgICB9XG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuaW5vID0gMDtcbiAgICAgICAgdGhpcy5pbm9kZXMgPSB7fTtcbiAgICAgICAgdGhpcy5yZWxlYXNlZElub3MgPSBbXTtcbiAgICAgICAgdGhpcy5mZHMgPSB7fTtcbiAgICAgICAgdGhpcy5yZWxlYXNlZEZkcyA9IFtdO1xuICAgICAgICB0aGlzLm9wZW5GaWxlcyA9IDA7XG4gICAgICAgIHRoaXMucm9vdCA9IHRoaXMuY3JlYXRlTGluaygpO1xuICAgICAgICB0aGlzLnJvb3Quc2V0Tm9kZSh0aGlzLmNyZWF0ZU5vZGUodHJ1ZSkpO1xuICAgIH1cbiAgICAvLyBMZWdhY3kgaW50ZXJmYWNlXG4gICAgbW91bnRTeW5jKG1vdW50cG9pbnQsIGpzb24pIHtcbiAgICAgICAgdGhpcy5mcm9tSlNPTihqc29uLCBtb3VudHBvaW50KTtcbiAgICB9XG4gICAgb3BlbkxpbmsobGluaywgZmxhZ3NOdW0sIHJlc29sdmVTeW1saW5rcyA9IHRydWUpIHtcbiAgICAgICAgaWYgKHRoaXMub3BlbkZpbGVzID49IHRoaXMubWF4RmlsZXMpIHtcbiAgICAgICAgICAgIC8vIFRvbyBtYW55IG9wZW4gZmlsZXMuXG4gICAgICAgICAgICB0aHJvdyAoMCwgdXRpbF8xLmNyZWF0ZUVycm9yKShFTUZJTEUsICdvcGVuJywgbGluay5nZXRQYXRoKCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlc29sdmUgc3ltbGlua3MuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEBUT0RPOiBUaGlzIHNob3VsZCBiZSBzdXBlcmZsdW91cy4gVGhpcyBtZXRob2QgaXMgb25seSBldmVyIGNhbGxlZCBieSBvcGVuRmlsZSgpLCB3aGljaCBkb2VzIGl0cyBvd24gc3ltbGluayByZXNvbHV0aW9uXG4gICAgICAgIC8vIHByaW9yIHRvIGNhbGxpbmcuXG4gICAgICAgIGxldCByZWFsTGluayA9IGxpbms7XG4gICAgICAgIGlmIChyZXNvbHZlU3ltbGlua3MpXG4gICAgICAgICAgICByZWFsTGluayA9IHRoaXMuZ2V0UmVzb2x2ZWRMaW5rT3JUaHJvdyhsaW5rLmdldFBhdGgoKSwgJ29wZW4nKTtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHJlYWxMaW5rLmdldE5vZGUoKTtcbiAgICAgICAgLy8gQ2hlY2sgd2hldGhlciBub2RlIGlzIGEgZGlyZWN0b3J5XG4gICAgICAgIGlmIChub2RlLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgICAgIGlmICgoZmxhZ3NOdW0gJiAoT19SRE9OTFkgfCBPX1JEV1IgfCBPX1dST05MWSkpICE9PSBPX1JET05MWSlcbiAgICAgICAgICAgICAgICB0aHJvdyAoMCwgdXRpbF8xLmNyZWF0ZUVycm9yKShFSVNESVIsICdvcGVuJywgbGluay5nZXRQYXRoKCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGZsYWdzTnVtICYgT19ESVJFQ1RPUlkpXG4gICAgICAgICAgICAgICAgdGhyb3cgKDAsIHV0aWxfMS5jcmVhdGVFcnJvcikoRU5PVERJUiwgJ29wZW4nLCBsaW5rLmdldFBhdGgoKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2hlY2sgbm9kZSBwZXJtaXNzaW9uc1xuICAgICAgICBpZiAoIShmbGFnc051bSAmIE9fV1JPTkxZKSkge1xuICAgICAgICAgICAgaWYgKCFub2RlLmNhblJlYWQoKSkge1xuICAgICAgICAgICAgICAgIHRocm93ICgwLCB1dGlsXzEuY3JlYXRlRXJyb3IpKEVBQ0NFUywgJ29wZW4nLCBsaW5rLmdldFBhdGgoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoZmxhZ3NOdW0gJiBPX1JET05MWSkpIHtcbiAgICAgICAgICAgIGlmICghbm9kZS5jYW5Xcml0ZSgpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgKDAsIHV0aWxfMS5jcmVhdGVFcnJvcikoRUFDQ0VTLCAnb3BlbicsIGxpbmsuZ2V0UGF0aCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaWxlID0gbmV3IHRoaXMucHJvcHMuRmlsZShsaW5rLCBub2RlLCBmbGFnc051bSwgdGhpcy5uZXdGZE51bWJlcigpKTtcbiAgICAgICAgdGhpcy5mZHNbZmlsZS5mZF0gPSBmaWxlO1xuICAgICAgICB0aGlzLm9wZW5GaWxlcysrO1xuICAgICAgICBpZiAoZmxhZ3NOdW0gJiBPX1RSVU5DKVxuICAgICAgICAgICAgZmlsZS50cnVuY2F0ZSgpO1xuICAgICAgICByZXR1cm4gZmlsZTtcbiAgICB9XG4gICAgb3BlbkZpbGUoZmlsZW5hbWUsIGZsYWdzTnVtLCBtb2RlTnVtLCByZXNvbHZlU3ltbGlua3MgPSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IHN0ZXBzID0gZmlsZW5hbWVUb1N0ZXBzKGZpbGVuYW1lKTtcbiAgICAgICAgbGV0IGxpbms7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsaW5rID0gcmVzb2x2ZVN5bWxpbmtzID8gdGhpcy5nZXRSZXNvbHZlZExpbmtPclRocm93KGZpbGVuYW1lLCAnb3BlbicpIDogdGhpcy5nZXRMaW5rT3JUaHJvdyhmaWxlbmFtZSwgJ29wZW4nKTtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIGZpbGUgYWxyZWFkeSBleGlzdGVkIHdoZW4gdHJ5aW5nIHRvIGNyZWF0ZSBpdCBleGNsdXNpdmVseSAoT19DUkVBVCBhbmQgT19FWENMIGZsYWdzIGFyZSBzZXQpLlxuICAgICAgICAgICAgLy8gVGhpcyBpcyBhbiBlcnJvciwgc2VlIGh0dHBzOi8vcHVicy5vcGVuZ3JvdXAub3JnL29ubGluZXB1YnMvMDA5Njk1Mzk5L2Z1bmN0aW9ucy9vcGVuLmh0bWw6XG4gICAgICAgICAgICAvLyBcIklmIE9fQ1JFQVQgYW5kIE9fRVhDTCBhcmUgc2V0LCBvcGVuKCkgc2hhbGwgZmFpbCBpZiB0aGUgZmlsZSBleGlzdHMuXCJcbiAgICAgICAgICAgIGlmIChsaW5rICYmIGZsYWdzTnVtICYgT19DUkVBVCAmJiBmbGFnc051bSAmIE9fRVhDTClcbiAgICAgICAgICAgICAgICB0aHJvdyAoMCwgdXRpbF8xLmNyZWF0ZUVycm9yKShFRVhJU1QsICdvcGVuJywgZmlsZW5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIC8vIFRyeSBjcmVhdGluZyBhIG5ldyBmaWxlLCBpZiBpdCBkb2VzIG5vdCBleGlzdCBhbmQgT19DUkVBVCBmbGFnIGlzIHNldC5cbiAgICAgICAgICAgIC8vIE5vdGUgdGhhdCB0aGlzIHdpbGwgc3RpbGwgdGhyb3cgaWYgdGhlIEVOT0VOVCBjYW1lIGZyb20gb25lIG9mIHRoZVxuICAgICAgICAgICAgLy8gaW50ZXJtZWRpYXRlIGRpcmVjdG9yaWVzIGluc3RlYWQgb2YgdGhlIGZpbGUgaXRzZWxmLlxuICAgICAgICAgICAgaWYgKGVyci5jb2RlID09PSBFTk9FTlQgJiYgZmxhZ3NOdW0gJiBPX0NSRUFUKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGlybmFtZSA9IHBhdGhNb2R1bGUuZGlybmFtZShmaWxlbmFtZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGlyTGluayA9IHRoaXMuZ2V0UmVzb2x2ZWRMaW5rT3JUaHJvdyhkaXJuYW1lKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXJOb2RlID0gZGlyTGluay5nZXROb2RlKCk7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhhdCB0aGUgcGxhY2Ugd2UgY3JlYXRlIHRoZSBuZXcgZmlsZSBpcyBhY3R1YWxseSBhIGRpcmVjdG9yeSBhbmQgdGhhdCB3ZSBhcmUgYWxsb3dlZCB0byBkbyBzbzpcbiAgICAgICAgICAgICAgICBpZiAoIWRpck5vZGUuaXNEaXJlY3RvcnkoKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgKDAsIHV0aWxfMS5jcmVhdGVFcnJvcikoRU5PVERJUiwgJ29wZW4nLCBmaWxlbmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKCFkaXJOb2RlLmNhbkV4ZWN1dGUoKSB8fCAhZGlyTm9kZS5jYW5Xcml0ZSgpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyAoMCwgdXRpbF8xLmNyZWF0ZUVycm9yKShFQUNDRVMsICdvcGVuJywgZmlsZW5hbWUpO1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBkaWZmZXJlbmNlIHRvIHRoZSBvcmlnaW5hbCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggd291bGQgc2ltcGx5IG5vdCBjcmVhdGUgYSBmaWxlIHVubGVzcyBtb2RlTnVtIHdhcyBzcGVjaWZpZWQuXG4gICAgICAgICAgICAgICAgLy8gSG93ZXZlciwgY3VycmVudCBOb2RlIHZlcnNpb25zIHdpbGwgZGVmYXVsdCB0byAwbzY2Ni5cbiAgICAgICAgICAgICAgICBtb2RlTnVtICE9PSBudWxsICYmIG1vZGVOdW0gIT09IHZvaWQgMCA/IG1vZGVOdW0gOiAobW9kZU51bSA9IDBvNjY2KTtcbiAgICAgICAgICAgICAgICBsaW5rID0gdGhpcy5jcmVhdGVMaW5rKGRpckxpbmssIHN0ZXBzW3N0ZXBzLmxlbmd0aCAtIDFdLCBmYWxzZSwgbW9kZU51bSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaW5rKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3BlbkxpbmsobGluaywgZmxhZ3NOdW0sIHJlc29sdmVTeW1saW5rcyk7XG4gICAgICAgIHRocm93ICgwLCB1dGlsXzEuY3JlYXRlRXJyb3IpKEVOT0VOVCwgJ29wZW4nLCBmaWxlbmFtZSk7XG4gICAgfVxuICAgIG9wZW5CYXNlKGZpbGVuYW1lLCBmbGFnc051bSwgbW9kZU51bSwgcmVzb2x2ZVN5bWxpbmtzID0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5vcGVuRmlsZShmaWxlbmFtZSwgZmxhZ3NOdW0sIG1vZGVOdW0sIHJlc29sdmVTeW1saW5rcyk7XG4gICAgICAgIGlmICghZmlsZSlcbiAgICAgICAgICAgIHRocm93ICgwLCB1dGlsXzEuY3JlYXRlRXJyb3IpKEVOT0VOVCwgJ29wZW4nLCBmaWxlbmFtZSk7XG4gICAgICAgIHJldHVybiBmaWxlLmZkO1xuICAgIH1cbiAgICBvcGVuU3luYyhwYXRoLCBmbGFncywgbW9kZSA9IDQzOCAvKiBNT0RFLkRFRkFVTFQgKi8pIHtcbiAgICAgICAgLy8gVmFsaWRhdGUgKDEpIG1vZGU7ICgyKSBwYXRoOyAoMykgZmxhZ3MgLSBpbiB0aGF0IG9yZGVyLlxuICAgICAgICBjb25zdCBtb2RlTnVtID0gKDAsIHV0aWxfMS5tb2RlVG9OdW1iZXIpKG1vZGUpO1xuICAgICAgICBjb25zdCBmaWxlTmFtZSA9ICgwLCB1dGlsXzEucGF0aFRvRmlsZW5hbWUpKHBhdGgpO1xuICAgICAgICBjb25zdCBmbGFnc051bSA9ICgwLCB1dGlsXzEuZmxhZ3NUb051bWJlcikoZmxhZ3MpO1xuICAgICAgICByZXR1cm4gdGhpcy5vcGVuQmFzZShmaWxlTmFtZSwgZmxhZ3NOdW0sIG1vZGVOdW0sICEoZmxhZ3NOdW0gJiBPX1NZTUxJTkspKTtcbiAgICB9XG4gICAgb3BlbihwYXRoLCBmbGFncywgYSwgYikge1xuICAgICAgICBsZXQgbW9kZSA9IGE7XG4gICAgICAgIGxldCBjYWxsYmFjayA9IGI7XG4gICAgICAgIGlmICh0eXBlb2YgYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgbW9kZSA9IDQzOCAvKiBNT0RFLkRFRkFVTFQgKi87XG4gICAgICAgICAgICBjYWxsYmFjayA9IGE7XG4gICAgICAgIH1cbiAgICAgICAgbW9kZSA9IG1vZGUgfHwgNDM4IC8qIE1PREUuREVGQVVMVCAqLztcbiAgICAgICAgY29uc3QgbW9kZU51bSA9ICgwLCB1dGlsXzEubW9kZVRvTnVtYmVyKShtb2RlKTtcbiAgICAgICAgY29uc3QgZmlsZU5hbWUgPSAoMCwgdXRpbF8xLnBhdGhUb0ZpbGVuYW1lKShwYXRoKTtcbiAgICAgICAgY29uc3QgZmxhZ3NOdW0gPSAoMCwgdXRpbF8xLmZsYWdzVG9OdW1iZXIpKGZsYWdzKTtcbiAgICAgICAgdGhpcy53cmFwQXN5bmModGhpcy5vcGVuQmFzZSwgW2ZpbGVOYW1lLCBmbGFnc051bSwgbW9kZU51bSwgIShmbGFnc051bSAmIE9fU1lNTElOSyldLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIGNsb3NlRmlsZShmaWxlKSB7XG4gICAgICAgIGlmICghdGhpcy5mZHNbZmlsZS5mZF0pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMub3BlbkZpbGVzLS07XG4gICAgICAgIGRlbGV0ZSB0aGlzLmZkc1tmaWxlLmZkXTtcbiAgICAgICAgdGhpcy5yZWxlYXNlZEZkcy5wdXNoKGZpbGUuZmQpO1xuICAgIH1cbiAgICBjbG9zZVN5bmMoZmQpIHtcbiAgICAgICAgKDAsIHV0aWxfMS52YWxpZGF0ZUZkKShmZCk7XG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmdldEZpbGVCeUZkT3JUaHJvdyhmZCwgJ2Nsb3NlJyk7XG4gICAgICAgIHRoaXMuY2xvc2VGaWxlKGZpbGUpO1xuICAgIH1cbiAgICBjbG9zZShmZCwgY2FsbGJhY2spIHtcbiAgICAgICAgKDAsIHV0aWxfMS52YWxpZGF0ZUZkKShmZCk7XG4gICAgICAgIHRoaXMud3JhcEFzeW5jKHRoaXMuY2xvc2VTeW5jLCBbZmRdLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIG9wZW5GaWxlT3JHZXRCeUlkKGlkLCBmbGFnc051bSwgbW9kZU51bSkge1xuICAgICAgICBpZiAodHlwZW9mIGlkID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuZmRzW2lkXTtcbiAgICAgICAgICAgIGlmICghZmlsZSlcbiAgICAgICAgICAgICAgICB0aHJvdyAoMCwgdXRpbF8xLmNyZWF0ZUVycm9yKShFTk9FTlQpO1xuICAgICAgICAgICAgcmV0dXJuIGZpbGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcGVuRmlsZSgoMCwgdXRpbF8xLnBhdGhUb0ZpbGVuYW1lKShpZCksIGZsYWdzTnVtLCBtb2RlTnVtKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZWFkQmFzZShmZCwgYnVmZmVyLCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24pIHtcbiAgICAgICAgaWYgKGJ1ZmZlci5ieXRlTGVuZ3RoIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyAoMCwgdXRpbF8xLmNyZWF0ZUVycm9yKShFUlJfT1VUX09GX1JBTkdFLCAncmVhZCcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBSYW5nZUVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5nZXRGaWxlQnlGZE9yVGhyb3coZmQpO1xuICAgICAgICBpZiAoZmlsZS5ub2RlLmlzU3ltbGluaygpKSB7XG4gICAgICAgICAgICB0aHJvdyAoMCwgdXRpbF8xLmNyZWF0ZUVycm9yKShFUEVSTSwgJ3JlYWQnLCBmaWxlLmxpbmsuZ2V0UGF0aCgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsZS5yZWFkKGJ1ZmZlciwgTnVtYmVyKG9mZnNldCksIE51bWJlcihsZW5ndGgpLCBwb3NpdGlvbiA9PT0gLTEgfHwgdHlwZW9mIHBvc2l0aW9uICE9PSAnbnVtYmVyJyA/IHVuZGVmaW5lZCA6IHBvc2l0aW9uKTtcbiAgICB9XG4gICAgcmVhZFN5bmMoZmQsIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uKSB7XG4gICAgICAgICgwLCB1dGlsXzEudmFsaWRhdGVGZCkoZmQpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkQmFzZShmZCwgYnVmZmVyLCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24pO1xuICAgIH1cbiAgICByZWFkKGZkLCBidWZmZXIsIG9mZnNldCwgbGVuZ3RoLCBwb3NpdGlvbiwgY2FsbGJhY2spIHtcbiAgICAgICAgKDAsIHV0aWxfMS52YWxpZGF0ZUNhbGxiYWNrKShjYWxsYmFjayk7XG4gICAgICAgIC8vIFRoaXMgYGlmYCBicmFuY2ggaXMgZnJvbSBOb2RlLmpzXG4gICAgICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAoMCwgcXVldWVNaWNyb3Rhc2tfMS5kZWZhdWx0KSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKVxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCAwLCBidWZmZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgKDAsIHNldEltbWVkaWF0ZV8xLmRlZmF1bHQpKCgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYnl0ZXMgPSB0aGlzLnJlYWRCYXNlKGZkLCBidWZmZXIsIG9mZnNldCwgbGVuZ3RoLCBwb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgYnl0ZXMsIGJ1ZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlYWR2QmFzZShmZCwgYnVmZmVycywgcG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuZ2V0RmlsZUJ5RmRPclRocm93KGZkKTtcbiAgICAgICAgbGV0IHAgPSBwb3NpdGlvbiAhPT0gbnVsbCAmJiBwb3NpdGlvbiAhPT0gdm9pZCAwID8gcG9zaXRpb24gOiB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChwID09PSAtMSkge1xuICAgICAgICAgICAgcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYnl0ZXNSZWFkID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBidWZmZXIgb2YgYnVmZmVycykge1xuICAgICAgICAgICAgY29uc3QgYnl0ZXMgPSBmaWxlLnJlYWQoYnVmZmVyLCAwLCBidWZmZXIuYnl0ZUxlbmd0aCwgcCk7XG4gICAgICAgICAgICBwID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgYnl0ZXNSZWFkICs9IGJ5dGVzO1xuICAgICAgICAgICAgaWYgKGJ5dGVzIDwgYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ5dGVzUmVhZDtcbiAgICB9XG4gICAgcmVhZHYoZmQsIGJ1ZmZlcnMsIGEsIGIpIHtcbiAgICAgICAgbGV0IHBvc2l0aW9uID0gYTtcbiAgICAgICAgbGV0IGNhbGxiYWNrID0gYjtcbiAgICAgICAgaWYgKHR5cGVvZiBhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IG51bGw7XG4gICAgICAgICAgICBjYWxsYmFjayA9IGE7XG4gICAgICAgIH1cbiAgICAgICAgKDAsIHV0aWxfMS52YWxpZGF0ZUNhbGxiYWNrKShjYWxsYmFjayk7XG4gICAgICAgICgwLCBzZXRJbW1lZGlhdGVfMS5kZWZhdWx0KSgoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gdGhpcy5yZWFkdkJhc2UoZmQsIGJ1ZmZlcnMsIHBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBieXRlcywgYnVmZmVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlYWR2U3luYyhmZCwgYnVmZmVycywgcG9zaXRpb24pIHtcbiAgICAgICAgKDAsIHV0aWxfMS52YWxpZGF0ZUZkKShmZCk7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWR2QmFzZShmZCwgYnVmZmVycywgcG9zaXRpb24pO1xuICAgIH1cbiAgICByZWFkRmlsZUJhc2UoaWQsIGZsYWdzTnVtLCBlbmNvZGluZykge1xuICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICBjb25zdCBpc1VzZXJGZCA9IHR5cGVvZiBpZCA9PT0gJ251bWJlcic7XG4gICAgICAgIGNvbnN0IHVzZXJPd25zRmQgPSBpc1VzZXJGZCAmJiAoMCwgdXRpbF8xLmlzRmQpKGlkKTtcbiAgICAgICAgbGV0IGZkO1xuICAgICAgICBpZiAodXNlck93bnNGZClcbiAgICAgICAgICAgIGZkID0gaWQ7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZmlsZW5hbWUgPSAoMCwgdXRpbF8xLnBhdGhUb0ZpbGVuYW1lKShpZCk7XG4gICAgICAgICAgICBjb25zdCBsaW5rID0gdGhpcy5nZXRSZXNvbHZlZExpbmtPclRocm93KGZpbGVuYW1lLCAnb3BlbicpO1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IGxpbmsuZ2V0Tm9kZSgpO1xuICAgICAgICAgICAgaWYgKG5vZGUuaXNEaXJlY3RvcnkoKSlcbiAgICAgICAgICAgICAgICB0aHJvdyAoMCwgdXRpbF8xLmNyZWF0ZUVycm9yKShFSVNESVIsICdvcGVuJywgbGluay5nZXRQYXRoKCkpO1xuICAgICAgICAgICAgZmQgPSB0aGlzLm9wZW5TeW5jKGlkLCBmbGFnc051bSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9ICgwLCB1dGlsXzEuYnVmZmVyVG9FbmNvZGluZykodGhpcy5nZXRGaWxlQnlGZE9yVGhyb3coZmQpLmdldEJ1ZmZlcigpLCBlbmNvZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoIXVzZXJPd25zRmQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlU3luYyhmZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcmVhZEZpbGVTeW5jKGZpbGUsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9ICgwLCBvcHRpb25zXzEuZ2V0UmVhZEZpbGVPcHRpb25zKShvcHRpb25zKTtcbiAgICAgICAgY29uc3QgZmxhZ3NOdW0gPSAoMCwgdXRpbF8xLmZsYWdzVG9OdW1iZXIpKG9wdHMuZmxhZyk7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRGaWxlQmFzZShmaWxlLCBmbGFnc051bSwgb3B0cy5lbmNvZGluZyk7XG4gICAgfVxuICAgIHJlYWRGaWxlKGlkLCBhLCBiKSB7XG4gICAgICAgIGNvbnN0IFtvcHRzLCBjYWxsYmFja10gPSAoMCwgb3B0aW9uc18xLm9wdHNBbmRDYkdlbmVyYXRvcikob3B0aW9uc18xLmdldFJlYWRGaWxlT3B0aW9ucykoYSwgYik7XG4gICAgICAgIGNvbnN0IGZsYWdzTnVtID0gKDAsIHV0aWxfMS5mbGFnc1RvTnVtYmVyKShvcHRzLmZsYWcpO1xuICAgICAgICB0aGlzLndyYXBBc3luYyh0aGlzLnJlYWRGaWxlQmFzZSwgW2lkLCBmbGFnc051bSwgb3B0cy5lbmNvZGluZ10sIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgd3JpdGVCYXNlKGZkLCBidWYsIG9mZnNldCwgbGVuZ3RoLCBwb3NpdGlvbikge1xuICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5nZXRGaWxlQnlGZE9yVGhyb3coZmQsICd3cml0ZScpO1xuICAgICAgICBpZiAoZmlsZS5ub2RlLmlzU3ltbGluaygpKSB7XG4gICAgICAgICAgICB0aHJvdyAoMCwgdXRpbF8xLmNyZWF0ZUVycm9yKShFQkFERiwgJ3dyaXRlJywgZmlsZS5saW5rLmdldFBhdGgoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbGUud3JpdGUoYnVmLCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24gPT09IC0xIHx8IHR5cGVvZiBwb3NpdGlvbiAhPT0gJ251bWJlcicgPyB1bmRlZmluZWQgOiBwb3NpdGlvbik7XG4gICAgfVxuICAgIHdyaXRlU3luYyhmZCwgYSwgYiwgYywgZCkge1xuICAgICAgICBjb25zdCBbLCBidWYsIG9mZnNldCwgbGVuZ3RoLCBwb3NpdGlvbl0gPSAoMCwgdXRpbF8xLmdldFdyaXRlU3luY0FyZ3MpKGZkLCBhLCBiLCBjLCBkKTtcbiAgICAgICAgcmV0dXJuIHRoaXMud3JpdGVCYXNlKGZkLCBidWYsIG9mZnNldCwgbGVuZ3RoLCBwb3NpdGlvbik7XG4gICAgfVxuICAgIHdyaXRlKGZkLCBhLCBiLCBjLCBkLCBlKSB7XG4gICAgICAgIGNvbnN0IFssIGFzU3RyLCBidWYsIG9mZnNldCwgbGVuZ3RoLCBwb3NpdGlvbiwgY2JdID0gKDAsIHV0aWxfMS5nZXRXcml0ZUFyZ3MpKGZkLCBhLCBiLCBjLCBkLCBlKTtcbiAgICAgICAgKDAsIHNldEltbWVkaWF0ZV8xLmRlZmF1bHQpKCgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYnl0ZXMgPSB0aGlzLndyaXRlQmFzZShmZCwgYnVmLCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIGlmICghYXNTdHIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2IobnVsbCwgYnl0ZXMsIGJ1Zik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjYihudWxsLCBieXRlcywgYSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGNiKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB3cml0ZXZCYXNlKGZkLCBidWZmZXJzLCBwb3NpdGlvbikge1xuICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5nZXRGaWxlQnlGZE9yVGhyb3coZmQpO1xuICAgICAgICBsZXQgcCA9IHBvc2l0aW9uICE9PSBudWxsICYmIHBvc2l0aW9uICE9PSB2b2lkIDAgPyBwb3NpdGlvbiA6IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHAgPT09IC0xKSB7XG4gICAgICAgICAgICBwID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGxldCBieXRlc1dyaXR0ZW4gPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1ZmZlciBvZiBidWZmZXJzKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlQnVmID0gYnVmZmVyXzEuQnVmZmVyLmZyb20oYnVmZmVyLmJ1ZmZlciwgYnVmZmVyLmJ5dGVPZmZzZXQsIGJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gZmlsZS53cml0ZShub2RlQnVmLCAwLCBub2RlQnVmLmJ5dGVMZW5ndGgsIHApO1xuICAgICAgICAgICAgcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGJ5dGVzV3JpdHRlbiArPSBieXRlcztcbiAgICAgICAgICAgIGlmIChieXRlcyA8IG5vZGVCdWYuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnl0ZXNXcml0dGVuO1xuICAgIH1cbiAgICB3cml0ZXYoZmQsIGJ1ZmZlcnMsIGEsIGIpIHtcbiAgICAgICAgbGV0IHBvc2l0aW9uID0gYTtcbiAgICAgICAgbGV0IGNhbGxiYWNrID0gYjtcbiAgICAgICAgaWYgKHR5cGVvZiBhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IG51bGw7XG4gICAgICAgICAgICBjYWxsYmFjayA9IGE7XG4gICAgICAgIH1cbiAgICAgICAgKDAsIHV0aWxfMS52YWxpZGF0ZUNhbGxiYWNrKShjYWxsYmFjayk7XG4gICAgICAgICgwLCBzZXRJbW1lZGlhdGVfMS5kZWZhdWx0KSgoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gdGhpcy53cml0ZXZCYXNlKGZkLCBidWZmZXJzLCBwb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgYnl0ZXMsIGJ1ZmZlcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB3cml0ZXZTeW5jKGZkLCBidWZmZXJzLCBwb3NpdGlvbikge1xuICAgICAgICAoMCwgdXRpbF8xLnZhbGlkYXRlRmQpKGZkKTtcbiAgICAgICAgcmV0dXJuIHRoaXMud3JpdGV2QmFzZShmZCwgYnVmZmVycywgcG9zaXRpb24pO1xuICAgIH1cbiAgICB3cml0ZUZpbGVCYXNlKGlkLCBidWYsIGZsYWdzTnVtLCBtb2RlTnVtKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCd3cml0ZUZpbGVCYXNlJywgaWQsIGJ1ZiwgZmxhZ3NOdW0sIG1vZGVOdW0pO1xuICAgICAgICAvLyBjb25zdCBub2RlID0gdGhpcy5nZXROb2RlQnlJZE9yQ3JlYXRlKGlkLCBmbGFnc051bSwgbW9kZU51bSk7XG4gICAgICAgIC8vIG5vZGUuc2V0QnVmZmVyKGJ1Zik7XG4gICAgICAgIGNvbnN0IGlzVXNlckZkID0gdHlwZW9mIGlkID09PSAnbnVtYmVyJztcbiAgICAgICAgbGV0IGZkO1xuICAgICAgICBpZiAoaXNVc2VyRmQpXG4gICAgICAgICAgICBmZCA9IGlkO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZkID0gdGhpcy5vcGVuQmFzZSgoMCwgdXRpbF8xLnBhdGhUb0ZpbGVuYW1lKShpZCksIGZsYWdzTnVtLCBtb2RlTnVtKTtcbiAgICAgICAgICAgIC8vIGZkID0gdGhpcy5vcGVuU3luYyhpZCBhcyBQYXRoTGlrZSwgZmxhZ3NOdW0sIG1vZGVOdW0pO1xuICAgICAgICB9XG4gICAgICAgIGxldCBvZmZzZXQgPSAwO1xuICAgICAgICBsZXQgbGVuZ3RoID0gYnVmLmxlbmd0aDtcbiAgICAgICAgbGV0IHBvc2l0aW9uID0gZmxhZ3NOdW0gJiBPX0FQUEVORCA/IHVuZGVmaW5lZCA6IDA7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3aGlsZSAobGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHdyaXR0ZW4gPSB0aGlzLndyaXRlU3luYyhmZCwgYnVmLCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSB3cml0dGVuO1xuICAgICAgICAgICAgICAgIGxlbmd0aCAtPSB3cml0dGVuO1xuICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbiAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiArPSB3cml0dGVuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKCFpc1VzZXJGZClcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlU3luYyhmZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgd3JpdGVGaWxlU3luYyhpZCwgZGF0YSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBvcHRzID0gKDAsIG9wdGlvbnNfMS5nZXRXcml0ZUZpbGVPcHRpb25zKShvcHRpb25zKTtcbiAgICAgICAgY29uc3QgZmxhZ3NOdW0gPSAoMCwgdXRpbF8xLmZsYWdzVG9OdW1iZXIpKG9wdHMuZmxhZyk7XG4gICAgICAgIGNvbnN0IG1vZGVOdW0gPSAoMCwgdXRpbF8xLm1vZGVUb051bWJlcikob3B0cy5tb2RlKTtcbiAgICAgICAgY29uc3QgYnVmID0gKDAsIHV0aWxfMS5kYXRhVG9CdWZmZXIpKGRhdGEsIG9wdHMuZW5jb2RpbmcpO1xuICAgICAgICB0aGlzLndyaXRlRmlsZUJhc2UoaWQsIGJ1ZiwgZmxhZ3NOdW0sIG1vZGVOdW0pO1xuICAgIH1cbiAgICB3cml0ZUZpbGUoaWQsIGRhdGEsIGEsIGIpIHtcbiAgICAgICAgbGV0IG9wdGlvbnMgPSBhO1xuICAgICAgICBsZXQgY2FsbGJhY2sgPSBiO1xuICAgICAgICBpZiAodHlwZW9mIGEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zXzEud3JpdGVGaWxlRGVmYXVsdHM7XG4gICAgICAgICAgICBjYWxsYmFjayA9IGE7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2IgPSAoMCwgdXRpbF8xLnZhbGlkYXRlQ2FsbGJhY2spKGNhbGxiYWNrKTtcbiAgICAgICAgY29uc3Qgb3B0cyA9ICgwLCBvcHRpb25zXzEuZ2V0V3JpdGVGaWxlT3B0aW9ucykob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGZsYWdzTnVtID0gKDAsIHV0aWxfMS5mbGFnc1RvTnVtYmVyKShvcHRzLmZsYWcpO1xuICAgICAgICBjb25zdCBtb2RlTnVtID0gKDAsIHV0aWxfMS5tb2RlVG9OdW1iZXIpKG9wdHMubW9kZSk7XG4gICAgICAgIGNvbnN0IGJ1ZiA9ICgwLCB1dGlsXzEuZGF0YVRvQnVmZmVyKShkYXRhLCBvcHRzLmVuY29kaW5nKTtcbiAgICAgICAgdGhpcy53cmFwQXN5bmModGhpcy53cml0ZUZpbGVCYXNlLCBbaWQsIGJ1ZiwgZmxhZ3NOdW0sIG1vZGVOdW1dLCBjYik7XG4gICAgfVxuICAgIGxpbmtCYXNlKGZpbGVuYW1lMSwgZmlsZW5hbWUyKSB7XG4gICAgICAgIGxldCBsaW5rMTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxpbmsxID0gdGhpcy5nZXRMaW5rT3JUaHJvdyhmaWxlbmFtZTEsICdsaW5rJyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgLy8gQXVnbWVudCBlcnJvciB3aXRoIGZpbGVuYW1lMlxuICAgICAgICAgICAgaWYgKGVyci5jb2RlKVxuICAgICAgICAgICAgICAgIGVyciA9ICgwLCB1dGlsXzEuY3JlYXRlRXJyb3IpKGVyci5jb2RlLCAnbGluaycsIGZpbGVuYW1lMSwgZmlsZW5hbWUyKTtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkaXJuYW1lMiA9IHBhdGhNb2R1bGUuZGlybmFtZShmaWxlbmFtZTIpO1xuICAgICAgICBsZXQgZGlyMjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRpcjIgPSB0aGlzLmdldExpbmtPclRocm93KGRpcm5hbWUyLCAnbGluaycpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIC8vIEF1Z21lbnQgZXJyb3Igd2l0aCBmaWxlbmFtZTFcbiAgICAgICAgICAgIGlmIChlcnIuY29kZSlcbiAgICAgICAgICAgICAgICBlcnIgPSAoMCwgdXRpbF8xLmNyZWF0ZUVycm9yKShlcnIuY29kZSwgJ2xpbmsnLCBmaWxlbmFtZTEsIGZpbGVuYW1lMik7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmFtZSA9IHBhdGhNb2R1bGUuYmFzZW5hbWUoZmlsZW5hbWUyKTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgbmV3IGZpbGUgYWxyZWFkeSBleGlzdHMuXG4gICAgICAgIGlmIChkaXIyLmdldENoaWxkKG5hbWUpKVxuICAgICAgICAgICAgdGhyb3cgKDAsIHV0aWxfMS5jcmVhdGVFcnJvcikoRUVYSVNULCAnbGluaycsIGZpbGVuYW1lMSwgZmlsZW5hbWUyKTtcbiAgICAgICAgY29uc3Qgbm9kZSA9IGxpbmsxLmdldE5vZGUoKTtcbiAgICAgICAgbm9kZS5ubGluaysrO1xuICAgICAgICBkaXIyLmNyZWF0ZUNoaWxkKG5hbWUsIG5vZGUpO1xuICAgIH1cbiAgICBjb3B5RmlsZUJhc2Uoc3JjLCBkZXN0LCBmbGFncykge1xuICAgICAgICBjb25zdCBidWYgPSB0aGlzLnJlYWRGaWxlU3luYyhzcmMpO1xuICAgICAgICBpZiAoZmxhZ3MgJiBDT1BZRklMRV9FWENMKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5leGlzdHNTeW5jKGRlc3QpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgKDAsIHV0aWxfMS5jcmVhdGVFcnJvcikoRUVYSVNULCAnY29weUZpbGUnLCBzcmMsIGRlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChmbGFncyAmIENPUFlGSUxFX0ZJQ0xPTkVfRk9SQ0UpIHtcbiAgICAgICAgICAgIHRocm93ICgwLCB1dGlsXzEuY3JlYXRlRXJyb3IpKEVOT1NZUywgJ2NvcHlGaWxlJywgc3JjLCBkZXN0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLndyaXRlRmlsZUJhc2UoZGVzdCwgYnVmLCBjb25zdGFudHNfMi5GTEFHUy53LCA0MzggLyogTU9ERS5ERUZBVUxUICovKTtcbiAgICB9XG4gICAgY29weUZpbGVTeW5jKHNyYywgZGVzdCwgZmxhZ3MpIHtcbiAgICAgICAgY29uc3Qgc3JjRmlsZW5hbWUgPSAoMCwgdXRpbF8xLnBhdGhUb0ZpbGVuYW1lKShzcmMpO1xuICAgICAgICBjb25zdCBkZXN0RmlsZW5hbWUgPSAoMCwgdXRpbF8xLnBhdGhUb0ZpbGVuYW1lKShkZXN0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29weUZpbGVCYXNlKHNyY0ZpbGVuYW1lLCBkZXN0RmlsZW5hbWUsIChmbGFncyB8fCAwKSB8IDApO1xuICAgIH1cbiAgICBjb3B5RmlsZShzcmMsIGRlc3QsIGEsIGIpIHtcbiAgICAgICAgY29uc3Qgc3JjRmlsZW5hbWUgPSAoMCwgdXRpbF8xLnBhdGhUb0ZpbGVuYW1lKShzcmMpO1xuICAgICAgICBjb25zdCBkZXN0RmlsZW5hbWUgPSAoMCwgdXRpbF8xLnBhdGhUb0ZpbGVuYW1lKShkZXN0KTtcbiAgICAgICAgbGV0IGZsYWdzO1xuICAgICAgICBsZXQgY2FsbGJhY2s7XG4gICAgICAgIGlmICh0eXBlb2YgYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgZmxhZ3MgPSAwO1xuICAgICAgICAgICAgY2FsbGJhY2sgPSBhO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZmxhZ3MgPSBhO1xuICAgICAgICAgICAgY2FsbGJhY2sgPSBiO1xuICAgICAgICB9XG4gICAgICAgICgwLCB1dGlsXzEudmFsaWRhdGVDYWxsYmFjaykoY2FsbGJhY2spO1xuICAgICAgICB0aGlzLndyYXBBc3luYyh0aGlzLmNvcHlGaWxlQmFzZSwgW3NyY0ZpbGVuYW1lLCBkZXN0RmlsZW5hbWUsIGZsYWdzXSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBsaW5rU3luYyhleGlzdGluZ1BhdGgsIG5ld1BhdGgpIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdQYXRoRmlsZW5hbWUgPSAoMCwgdXRpbF8xLnBhdGhUb0ZpbGVuYW1lKShleGlzdGluZ1BhdGgpO1xuICAgICAgICBjb25zdCBuZXdQYXRoRmlsZW5hbWUgPSAoMCwgdXRpbF8xLnBhdGhUb0ZpbGVuYW1lKShuZXdQYXRoKTtcbiAgICAgICAgdGhpcy5saW5rQmFzZShleGlzdGluZ1BhdGhGaWxlbmFtZSwgbmV3UGF0aEZpbGVuYW1lKTtcbiAgICB9XG4gICAgbGluayhleGlzdGluZ1BhdGgsIG5ld1BhdGgsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nUGF0aEZpbGVuYW1lID0gKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkoZXhpc3RpbmdQYXRoKTtcbiAgICAgICAgY29uc3QgbmV3UGF0aEZpbGVuYW1lID0gKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkobmV3UGF0aCk7XG4gICAgICAgIHRoaXMud3JhcEFzeW5jKHRoaXMubGlua0Jhc2UsIFtleGlzdGluZ1BhdGhGaWxlbmFtZSwgbmV3UGF0aEZpbGVuYW1lXSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICB1bmxpbmtCYXNlKGZpbGVuYW1lKSB7XG4gICAgICAgIGNvbnN0IGxpbmsgPSB0aGlzLmdldExpbmtPclRocm93KGZpbGVuYW1lLCAndW5saW5rJyk7XG4gICAgICAgIC8vIFRPRE86IENoZWNrIGlmIGl0IGlzIGZpbGUsIGRpciwgb3RoZXIuLi5cbiAgICAgICAgaWYgKGxpbmsubGVuZ3RoKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0RpciBub3QgZW1wdHkuLi4nKTtcbiAgICAgICAgdGhpcy5kZWxldGVMaW5rKGxpbmspO1xuICAgICAgICBjb25zdCBub2RlID0gbGluay5nZXROb2RlKCk7XG4gICAgICAgIG5vZGUubmxpbmstLTtcbiAgICAgICAgLy8gV2hlbiBhbGwgaGFyZCBsaW5rcyB0byBpLW5vZGUgYXJlIGRlbGV0ZWQsIHJlbW92ZSB0aGUgaS1ub2RlLCB0b28uXG4gICAgICAgIGlmIChub2RlLm5saW5rIDw9IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVsZXRlTm9kZShub2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1bmxpbmtTeW5jKHBhdGgpIHtcbiAgICAgICAgY29uc3QgZmlsZW5hbWUgPSAoMCwgdXRpbF8xLnBhdGhUb0ZpbGVuYW1lKShwYXRoKTtcbiAgICAgICAgdGhpcy51bmxpbmtCYXNlKGZpbGVuYW1lKTtcbiAgICB9XG4gICAgdW5saW5rKHBhdGgsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkocGF0aCk7XG4gICAgICAgIHRoaXMud3JhcEFzeW5jKHRoaXMudW5saW5rQmFzZSwgW2ZpbGVuYW1lXSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBzeW1saW5rQmFzZSh0YXJnZXRGaWxlbmFtZSwgcGF0aEZpbGVuYW1lKSB7XG4gICAgICAgIGNvbnN0IHBhdGhTdGVwcyA9IGZpbGVuYW1lVG9TdGVwcyhwYXRoRmlsZW5hbWUpO1xuICAgICAgICAvLyBDaGVjayBpZiBkaXJlY3RvcnkgZXhpc3RzLCB3aGVyZSB3ZSBhYm91dCB0byBjcmVhdGUgYSBzeW1saW5rLlxuICAgICAgICBsZXQgZGlyTGluaztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRpckxpbmsgPSB0aGlzLmdldExpbmtQYXJlbnRBc0Rpck9yVGhyb3cocGF0aFN0ZXBzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAvLyBDYXRjaCBlcnJvciB0byBwb3B1bGF0ZSB3aXRoIHRoZSBjb3JyZWN0IGZpZWxkcyAtIGdldExpbmtQYXJlbnRBc0Rpck9yVGhyb3cgd29uJ3QgYmUgYXdhcmUgb2YgdGhlIHNlY29uZCBwYXRoXG4gICAgICAgICAgICBpZiAoZXJyLmNvZGUpXG4gICAgICAgICAgICAgICAgZXJyID0gKDAsIHV0aWxfMS5jcmVhdGVFcnJvcikoZXJyLmNvZGUsICdzeW1saW5rJywgdGFyZ2V0RmlsZW5hbWUsIHBhdGhGaWxlbmFtZSk7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmFtZSA9IHBhdGhTdGVwc1twYXRoU3RlcHMubGVuZ3RoIC0gMV07XG4gICAgICAgIC8vIENoZWNrIGlmIG5ldyBmaWxlIGFscmVhZHkgZXhpc3RzLlxuICAgICAgICBpZiAoZGlyTGluay5nZXRDaGlsZChuYW1lKSlcbiAgICAgICAgICAgIHRocm93ICgwLCB1dGlsXzEuY3JlYXRlRXJyb3IpKEVFWElTVCwgJ3N5bWxpbmsnLCB0YXJnZXRGaWxlbmFtZSwgcGF0aEZpbGVuYW1lKTtcbiAgICAgICAgLy8gQ2hlY2sgcGVybWlzc2lvbnMgb24gdGhlIHBhdGggd2hlcmUgd2UgYXJlIGNyZWF0aW5nIHRoZSBzeW1saW5rLlxuICAgICAgICAvLyBOb3RlIHdlJ3JlIG5vdCBjaGVja2luZyBwZXJtaXNzaW9ucyBvbiB0aGUgdGFyZ2V0IHBhdGg6IEl0IGlzIG5vdCBhbiBlcnJvciB0byBjcmVhdGUgYSBzeW1saW5rIHRvIGFcbiAgICAgICAgLy8gbm9uLWV4aXN0ZW50IG9yIGluYWNjZXNzaWJsZSB0YXJnZXRcbiAgICAgICAgY29uc3Qgbm9kZSA9IGRpckxpbmsuZ2V0Tm9kZSgpO1xuICAgICAgICBpZiAoIW5vZGUuY2FuRXhlY3V0ZSgpIHx8ICFub2RlLmNhbldyaXRlKCkpXG4gICAgICAgICAgICB0aHJvdyAoMCwgdXRpbF8xLmNyZWF0ZUVycm9yKShFQUNDRVMsICdzeW1saW5rJywgdGFyZ2V0RmlsZW5hbWUsIHBhdGhGaWxlbmFtZSk7XG4gICAgICAgIC8vIENyZWF0ZSBzeW1saW5rLlxuICAgICAgICBjb25zdCBzeW1saW5rID0gZGlyTGluay5jcmVhdGVDaGlsZChuYW1lKTtcbiAgICAgICAgc3ltbGluay5nZXROb2RlKCkubWFrZVN5bWxpbmsoZmlsZW5hbWVUb1N0ZXBzKHRhcmdldEZpbGVuYW1lKSk7XG4gICAgICAgIHJldHVybiBzeW1saW5rO1xuICAgIH1cbiAgICAvLyBgdHlwZWAgYXJndW1lbnQgd29ya3Mgb25seSBvbiBXaW5kb3dzLlxuICAgIHN5bWxpbmtTeW5jKHRhcmdldCwgcGF0aCwgdHlwZSkge1xuICAgICAgICBjb25zdCB0YXJnZXRGaWxlbmFtZSA9ICgwLCB1dGlsXzEucGF0aFRvRmlsZW5hbWUpKHRhcmdldCk7XG4gICAgICAgIGNvbnN0IHBhdGhGaWxlbmFtZSA9ICgwLCB1dGlsXzEucGF0aFRvRmlsZW5hbWUpKHBhdGgpO1xuICAgICAgICB0aGlzLnN5bWxpbmtCYXNlKHRhcmdldEZpbGVuYW1lLCBwYXRoRmlsZW5hbWUpO1xuICAgIH1cbiAgICBzeW1saW5rKHRhcmdldCwgcGF0aCwgYSwgYikge1xuICAgICAgICBjb25zdCBjYWxsYmFjayA9ICgwLCB1dGlsXzEudmFsaWRhdGVDYWxsYmFjaykodHlwZW9mIGEgPT09ICdmdW5jdGlvbicgPyBhIDogYik7XG4gICAgICAgIGNvbnN0IHRhcmdldEZpbGVuYW1lID0gKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkodGFyZ2V0KTtcbiAgICAgICAgY29uc3QgcGF0aEZpbGVuYW1lID0gKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkocGF0aCk7XG4gICAgICAgIHRoaXMud3JhcEFzeW5jKHRoaXMuc3ltbGlua0Jhc2UsIFt0YXJnZXRGaWxlbmFtZSwgcGF0aEZpbGVuYW1lXSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICByZWFscGF0aEJhc2UoZmlsZW5hbWUsIGVuY29kaW5nKSB7XG4gICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICBjb25zdCByZWFsTGluayA9IHRoaXMuZ2V0UmVzb2x2ZWRMaW5rT3JUaHJvdyhmaWxlbmFtZSwgJ3JlYWxwYXRoJyk7XG4gICAgICAgIHJldHVybiAoMCwgZW5jb2RpbmdfMS5zdHJUb0VuY29kaW5nKShyZWFsTGluay5nZXRQYXRoKCkgfHwgJy8nLCBlbmNvZGluZyk7XG4gICAgfVxuICAgIHJlYWxwYXRoU3luYyhwYXRoLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWxwYXRoQmFzZSgoMCwgdXRpbF8xLnBhdGhUb0ZpbGVuYW1lKShwYXRoKSwgKDAsIG9wdGlvbnNfMS5nZXRSZWFscGF0aE9wdGlvbnMpKG9wdGlvbnMpLmVuY29kaW5nKTtcbiAgICB9XG4gICAgcmVhbHBhdGgocGF0aCwgYSwgYikge1xuICAgICAgICBjb25zdCBbb3B0cywgY2FsbGJhY2tdID0gKDAsIG9wdGlvbnNfMS5nZXRSZWFscGF0aE9wdHNBbmRDYikoYSwgYik7XG4gICAgICAgIGNvbnN0IHBhdGhGaWxlbmFtZSA9ICgwLCB1dGlsXzEucGF0aFRvRmlsZW5hbWUpKHBhdGgpO1xuICAgICAgICB0aGlzLndyYXBBc3luYyh0aGlzLnJlYWxwYXRoQmFzZSwgW3BhdGhGaWxlbmFtZSwgb3B0cy5lbmNvZGluZ10sIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgbHN0YXRCYXNlKGZpbGVuYW1lLCBiaWdpbnQgPSBmYWxzZSwgdGhyb3dJZk5vRW50cnkgPSBmYWxzZSkge1xuICAgICAgICBsZXQgbGluaztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxpbmsgPSB0aGlzLmdldExpbmtPclRocm93KGZpbGVuYW1lLCAnbHN0YXQnKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyLmNvZGUgPT09IEVOT0VOVCAmJiAhdGhyb3dJZk5vRW50cnkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFN0YXRzXzEuZGVmYXVsdC5idWlsZChsaW5rLmdldE5vZGUoKSwgYmlnaW50KTtcbiAgICB9XG4gICAgbHN0YXRTeW5jKHBhdGgsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyB0aHJvd0lmTm9FbnRyeSA9IHRydWUsIGJpZ2ludCA9IGZhbHNlIH0gPSAoMCwgb3B0aW9uc18xLmdldFN0YXRPcHRpb25zKShvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubHN0YXRCYXNlKCgwLCB1dGlsXzEucGF0aFRvRmlsZW5hbWUpKHBhdGgpLCBiaWdpbnQsIHRocm93SWZOb0VudHJ5KTtcbiAgICB9XG4gICAgbHN0YXQocGF0aCwgYSwgYikge1xuICAgICAgICBjb25zdCBbeyB0aHJvd0lmTm9FbnRyeSA9IHRydWUsIGJpZ2ludCA9IGZhbHNlIH0sIGNhbGxiYWNrXSA9ICgwLCBvcHRpb25zXzEuZ2V0U3RhdE9wdHNBbmRDYikoYSwgYik7XG4gICAgICAgIHRoaXMud3JhcEFzeW5jKHRoaXMubHN0YXRCYXNlLCBbKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkocGF0aCksIGJpZ2ludCwgdGhyb3dJZk5vRW50cnldLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIHN0YXRCYXNlKGZpbGVuYW1lLCBiaWdpbnQgPSBmYWxzZSwgdGhyb3dJZk5vRW50cnkgPSB0cnVlKSB7XG4gICAgICAgIGxldCBsaW5rO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGluayA9IHRoaXMuZ2V0UmVzb2x2ZWRMaW5rT3JUaHJvdyhmaWxlbmFtZSwgJ3N0YXQnKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyLmNvZGUgPT09IEVOT0VOVCAmJiAhdGhyb3dJZk5vRW50cnkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFN0YXRzXzEuZGVmYXVsdC5idWlsZChsaW5rLmdldE5vZGUoKSwgYmlnaW50KTtcbiAgICB9XG4gICAgc3RhdFN5bmMocGF0aCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGJpZ2ludCA9IHRydWUsIHRocm93SWZOb0VudHJ5ID0gdHJ1ZSB9ID0gKDAsIG9wdGlvbnNfMS5nZXRTdGF0T3B0aW9ucykob3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRCYXNlKCgwLCB1dGlsXzEucGF0aFRvRmlsZW5hbWUpKHBhdGgpLCBiaWdpbnQsIHRocm93SWZOb0VudHJ5KTtcbiAgICB9XG4gICAgc3RhdChwYXRoLCBhLCBiKSB7XG4gICAgICAgIGNvbnN0IFt7IGJpZ2ludCA9IGZhbHNlLCB0aHJvd0lmTm9FbnRyeSA9IHRydWUgfSwgY2FsbGJhY2tdID0gKDAsIG9wdGlvbnNfMS5nZXRTdGF0T3B0c0FuZENiKShhLCBiKTtcbiAgICAgICAgdGhpcy53cmFwQXN5bmModGhpcy5zdGF0QmFzZSwgWygwLCB1dGlsXzEucGF0aFRvRmlsZW5hbWUpKHBhdGgpLCBiaWdpbnQsIHRocm93SWZOb0VudHJ5XSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBmc3RhdEJhc2UoZmQsIGJpZ2ludCA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmdldEZpbGVCeUZkKGZkKTtcbiAgICAgICAgaWYgKCFmaWxlKVxuICAgICAgICAgICAgdGhyb3cgKDAsIHV0aWxfMS5jcmVhdGVFcnJvcikoRUJBREYsICdmc3RhdCcpO1xuICAgICAgICByZXR1cm4gU3RhdHNfMS5kZWZhdWx0LmJ1aWxkKGZpbGUubm9kZSwgYmlnaW50KTtcbiAgICB9XG4gICAgZnN0YXRTeW5jKGZkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZzdGF0QmFzZShmZCwgKDAsIG9wdGlvbnNfMS5nZXRTdGF0T3B0aW9ucykob3B0aW9ucykuYmlnaW50KTtcbiAgICB9XG4gICAgZnN0YXQoZmQsIGEsIGIpIHtcbiAgICAgICAgY29uc3QgW29wdHMsIGNhbGxiYWNrXSA9ICgwLCBvcHRpb25zXzEuZ2V0U3RhdE9wdHNBbmRDYikoYSwgYik7XG4gICAgICAgIHRoaXMud3JhcEFzeW5jKHRoaXMuZnN0YXRCYXNlLCBbZmQsIG9wdHMuYmlnaW50XSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICByZW5hbWVCYXNlKG9sZFBhdGhGaWxlbmFtZSwgbmV3UGF0aEZpbGVuYW1lKSB7XG4gICAgICAgIGxldCBsaW5rO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGluayA9IHRoaXMuZ2V0UmVzb2x2ZWRMaW5rT3JUaHJvdyhvbGRQYXRoRmlsZW5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIC8vIEF1Z21lbnQgZXJyIHdpdGggbmV3UGF0aEZpbGVuYW1lXG4gICAgICAgICAgICBpZiAoZXJyLmNvZGUpXG4gICAgICAgICAgICAgICAgZXJyID0gKDAsIHV0aWxfMS5jcmVhdGVFcnJvcikoZXJyLmNvZGUsICdyZW5hbWUnLCBvbGRQYXRoRmlsZW5hbWUsIG5ld1BhdGhGaWxlbmFtZSk7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVE9ETzogQ2hlY2sgaWYgaXQgaXMgZGlyZWN0b3J5LCBpZiBub24tZW1wdHksIHdlIGNhbm5vdCBtb3ZlIGl0LCByaWdodD9cbiAgICAgICAgLy8gQ2hlY2sgZGlyZWN0b3J5IGV4aXN0cyBmb3IgdGhlIG5ldyBsb2NhdGlvbi5cbiAgICAgICAgbGV0IG5ld1BhdGhEaXJMaW5rO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbmV3UGF0aERpckxpbmsgPSB0aGlzLmdldExpbmtQYXJlbnRBc0Rpck9yVGhyb3cobmV3UGF0aEZpbGVuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAvLyBBdWdtZW50IGVycm9yIHdpdGggb2xkUGF0aEZpbGVuYW1lXG4gICAgICAgICAgICBpZiAoZXJyLmNvZGUpXG4gICAgICAgICAgICAgICAgZXJyID0gKDAsIHV0aWxfMS5jcmVhdGVFcnJvcikoZXJyLmNvZGUsICdyZW5hbWUnLCBvbGRQYXRoRmlsZW5hbWUsIG5ld1BhdGhGaWxlbmFtZSk7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVE9ETzogQWxzbyB0cmVhdCBjYXNlcyB3aXRoIGRpcmVjdG9yaWVzIGFuZCBzeW1ib2xpYyBsaW5rcy5cbiAgICAgICAgLy8gVE9ETzogU2VlOiBodHRwOi8vbWFuNy5vcmcvbGludXgvbWFuLXBhZ2VzL21hbjIvcmVuYW1lLjIuaHRtbFxuICAgICAgICAvLyBSZW1vdmUgaGFyZCBsaW5rIGZyb20gb2xkIGZvbGRlci5cbiAgICAgICAgY29uc3Qgb2xkTGlua1BhcmVudCA9IGxpbmsucGFyZW50O1xuICAgICAgICAvLyBDaGVjayB3ZSBoYXZlIGFjY2VzcyBhbmQgd3JpdGUgcGVybWlzc2lvbnMgaW4gYm90aCBwbGFjZXNcbiAgICAgICAgY29uc3Qgb2xkUGFyZW50Tm9kZSA9IG9sZExpbmtQYXJlbnQuZ2V0Tm9kZSgpO1xuICAgICAgICBjb25zdCBuZXdQYXRoRGlyTm9kZSA9IG5ld1BhdGhEaXJMaW5rLmdldE5vZGUoKTtcbiAgICAgICAgaWYgKCFvbGRQYXJlbnROb2RlLmNhbkV4ZWN1dGUoKSB8fFxuICAgICAgICAgICAgIW9sZFBhcmVudE5vZGUuY2FuV3JpdGUoKSB8fFxuICAgICAgICAgICAgIW5ld1BhdGhEaXJOb2RlLmNhbkV4ZWN1dGUoKSB8fFxuICAgICAgICAgICAgIW5ld1BhdGhEaXJOb2RlLmNhbldyaXRlKCkpIHtcbiAgICAgICAgICAgIHRocm93ICgwLCB1dGlsXzEuY3JlYXRlRXJyb3IpKEVBQ0NFUywgJ3JlbmFtZScsIG9sZFBhdGhGaWxlbmFtZSwgbmV3UGF0aEZpbGVuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBvbGRMaW5rUGFyZW50LmRlbGV0ZUNoaWxkKGxpbmspO1xuICAgICAgICAvLyBSZW5hbWUgc2hvdWxkIG92ZXJ3cml0ZSB0aGUgbmV3IHBhdGgsIGlmIHRoYXQgZXhpc3RzLlxuICAgICAgICBjb25zdCBuYW1lID0gcGF0aE1vZHVsZS5iYXNlbmFtZShuZXdQYXRoRmlsZW5hbWUpO1xuICAgICAgICBsaW5rLm5hbWUgPSBuYW1lO1xuICAgICAgICBsaW5rLnN0ZXBzID0gWy4uLm5ld1BhdGhEaXJMaW5rLnN0ZXBzLCBuYW1lXTtcbiAgICAgICAgbmV3UGF0aERpckxpbmsuc2V0Q2hpbGQobGluay5nZXROYW1lKCksIGxpbmspO1xuICAgIH1cbiAgICByZW5hbWVTeW5jKG9sZFBhdGgsIG5ld1BhdGgpIHtcbiAgICAgICAgY29uc3Qgb2xkUGF0aEZpbGVuYW1lID0gKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkob2xkUGF0aCk7XG4gICAgICAgIGNvbnN0IG5ld1BhdGhGaWxlbmFtZSA9ICgwLCB1dGlsXzEucGF0aFRvRmlsZW5hbWUpKG5ld1BhdGgpO1xuICAgICAgICB0aGlzLnJlbmFtZUJhc2Uob2xkUGF0aEZpbGVuYW1lLCBuZXdQYXRoRmlsZW5hbWUpO1xuICAgIH1cbiAgICByZW5hbWUob2xkUGF0aCwgbmV3UGF0aCwgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3Qgb2xkUGF0aEZpbGVuYW1lID0gKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkob2xkUGF0aCk7XG4gICAgICAgIGNvbnN0IG5ld1BhdGhGaWxlbmFtZSA9ICgwLCB1dGlsXzEucGF0aFRvRmlsZW5hbWUpKG5ld1BhdGgpO1xuICAgICAgICB0aGlzLndyYXBBc3luYyh0aGlzLnJlbmFtZUJhc2UsIFtvbGRQYXRoRmlsZW5hbWUsIG5ld1BhdGhGaWxlbmFtZV0sIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgZXhpc3RzQmFzZShmaWxlbmFtZSkge1xuICAgICAgICByZXR1cm4gISF0aGlzLnN0YXRCYXNlKGZpbGVuYW1lKTtcbiAgICB9XG4gICAgZXhpc3RzU3luYyhwYXRoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5leGlzdHNCYXNlKCgwLCB1dGlsXzEucGF0aFRvRmlsZW5hbWUpKHBhdGgpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZXhpc3RzKHBhdGgsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkocGF0aCk7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihjb25zdGFudHNfMi5FUlJTVFIuQ0IpO1xuICAgICAgICAoMCwgc2V0SW1tZWRpYXRlXzEuZGVmYXVsdCkoKCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh0aGlzLmV4aXN0c0Jhc2UoZmlsZW5hbWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhY2Nlc3NCYXNlKGZpbGVuYW1lLCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IGxpbmsgPSB0aGlzLmdldExpbmtPclRocm93KGZpbGVuYW1lLCAnYWNjZXNzJyk7XG4gICAgfVxuICAgIGFjY2Vzc1N5bmMocGF0aCwgbW9kZSA9IEZfT0spIHtcbiAgICAgICAgY29uc3QgZmlsZW5hbWUgPSAoMCwgdXRpbF8xLnBhdGhUb0ZpbGVuYW1lKShwYXRoKTtcbiAgICAgICAgbW9kZSA9IG1vZGUgfCAwO1xuICAgICAgICB0aGlzLmFjY2Vzc0Jhc2UoZmlsZW5hbWUsIG1vZGUpO1xuICAgIH1cbiAgICBhY2Nlc3MocGF0aCwgYSwgYikge1xuICAgICAgICBsZXQgbW9kZSA9IEZfT0s7XG4gICAgICAgIGxldCBjYWxsYmFjaztcbiAgICAgICAgaWYgKHR5cGVvZiBhICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBtb2RlID0gYSB8IDA7IC8vIGNhc3QgdG8gbnVtYmVyXG4gICAgICAgICAgICBjYWxsYmFjayA9ICgwLCB1dGlsXzEudmFsaWRhdGVDYWxsYmFjaykoYik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IGE7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmlsZW5hbWUgPSAoMCwgdXRpbF8xLnBhdGhUb0ZpbGVuYW1lKShwYXRoKTtcbiAgICAgICAgdGhpcy53cmFwQXN5bmModGhpcy5hY2Nlc3NCYXNlLCBbZmlsZW5hbWUsIG1vZGVdLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIGFwcGVuZEZpbGVTeW5jKGlkLCBkYXRhLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSAoMCwgb3B0aW9uc18xLmdldEFwcGVuZEZpbGVPcHRzKShvcHRpb25zKTtcbiAgICAgICAgLy8gZm9yY2UgYXBwZW5kIGJlaGF2aW9yIHdoZW4gdXNpbmcgYSBzdXBwbGllZCBmaWxlIGRlc2NyaXB0b3JcbiAgICAgICAgaWYgKCFvcHRzLmZsYWcgfHwgKDAsIHV0aWxfMS5pc0ZkKShpZCkpXG4gICAgICAgICAgICBvcHRzLmZsYWcgPSAnYSc7XG4gICAgICAgIHRoaXMud3JpdGVGaWxlU3luYyhpZCwgZGF0YSwgb3B0cyk7XG4gICAgfVxuICAgIGFwcGVuZEZpbGUoaWQsIGRhdGEsIGEsIGIpIHtcbiAgICAgICAgY29uc3QgW29wdHMsIGNhbGxiYWNrXSA9ICgwLCBvcHRpb25zXzEuZ2V0QXBwZW5kRmlsZU9wdHNBbmRDYikoYSwgYik7XG4gICAgICAgIC8vIGZvcmNlIGFwcGVuZCBiZWhhdmlvciB3aGVuIHVzaW5nIGEgc3VwcGxpZWQgZmlsZSBkZXNjcmlwdG9yXG4gICAgICAgIGlmICghb3B0cy5mbGFnIHx8ICgwLCB1dGlsXzEuaXNGZCkoaWQpKVxuICAgICAgICAgICAgb3B0cy5mbGFnID0gJ2EnO1xuICAgICAgICB0aGlzLndyaXRlRmlsZShpZCwgZGF0YSwgb3B0cywgY2FsbGJhY2spO1xuICAgIH1cbiAgICByZWFkZGlyQmFzZShmaWxlbmFtZSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBzdGVwcyA9IGZpbGVuYW1lVG9TdGVwcyhmaWxlbmFtZSk7XG4gICAgICAgIGNvbnN0IGxpbmsgPSB0aGlzLmdldFJlc29sdmVkTGlua09yVGhyb3coZmlsZW5hbWUsICdzY2FuZGlyJyk7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBsaW5rLmdldE5vZGUoKTtcbiAgICAgICAgaWYgKCFub2RlLmlzRGlyZWN0b3J5KCkpXG4gICAgICAgICAgICB0aHJvdyAoMCwgdXRpbF8xLmNyZWF0ZUVycm9yKShFTk9URElSLCAnc2NhbmRpcicsIGZpbGVuYW1lKTtcbiAgICAgICAgLy8gQ2hlY2sgd2UgaGF2ZSBwZXJtaXNzaW9uc1xuICAgICAgICBpZiAoIW5vZGUuY2FuUmVhZCgpKVxuICAgICAgICAgICAgdGhyb3cgKDAsIHV0aWxfMS5jcmVhdGVFcnJvcikoRUFDQ0VTLCAnc2NhbmRpcicsIGZpbGVuYW1lKTtcbiAgICAgICAgY29uc3QgbGlzdCA9IFtdOyAvLyBvdXRwdXQgbGlzdFxuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgbGluay5jaGlsZHJlbi5rZXlzKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gbGluay5nZXRDaGlsZChuYW1lKTtcbiAgICAgICAgICAgIGlmICghY2hpbGQgfHwgbmFtZSA9PT0gJy4nIHx8IG5hbWUgPT09ICcuLicpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBsaXN0LnB1c2goRGlyZW50XzEuZGVmYXVsdC5idWlsZChjaGlsZCwgb3B0aW9ucy5lbmNvZGluZykpO1xuICAgICAgICAgICAgLy8gcmVjdXJzaW9uXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5yZWN1cnNpdmUgJiYgY2hpbGQuY2hpbGRyZW4uc2l6ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlY3Vyc2VPcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSwgeyByZWN1cnNpdmU6IHRydWUsIHdpdGhGaWxlVHlwZXM6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRMaXN0ID0gdGhpcy5yZWFkZGlyQmFzZShjaGlsZC5nZXRQYXRoKCksIHJlY3Vyc2VPcHRpb25zKTtcbiAgICAgICAgICAgICAgICBsaXN0LnB1c2goLi4uY2hpbGRMaXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXV0aWxfMS5pc1dpbiAmJiBvcHRpb25zLmVuY29kaW5nICE9PSAnYnVmZmVyJylcbiAgICAgICAgICAgIGxpc3Quc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChhLm5hbWUgPCBiLm5hbWUpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICBpZiAoYS5uYW1lID4gYi5uYW1lKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBpZiAob3B0aW9ucy53aXRoRmlsZVR5cGVzKVxuICAgICAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgICAgIGxldCBmaWxlbmFtZTIgPSBmaWxlbmFtZTtcbiAgICAgICAgaWYgKHV0aWxfMS5pc1dpbikge1xuICAgICAgICAgICAgZmlsZW5hbWUyID0gZmlsZW5hbWUyLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdC5tYXAoZGlyZW50ID0+IHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnJlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgICAgIGxldCBmdWxsUGF0aCA9IHBhdGhNb2R1bGUuam9pbihkaXJlbnQucGFyZW50UGF0aCwgZGlyZW50Lm5hbWUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgaWYgKHV0aWxfMS5pc1dpbikge1xuICAgICAgICAgICAgICAgICAgICBmdWxsUGF0aCA9IGZ1bGxQYXRoLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bGxQYXRoLnJlcGxhY2UoZmlsZW5hbWUyICsgcGF0aE1vZHVsZS5wb3NpeC5zZXAsICcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkaXJlbnQubmFtZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlYWRkaXJTeW5jKHBhdGgsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9ICgwLCBvcHRpb25zXzEuZ2V0UmVhZGRpck9wdGlvbnMpKG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBmaWxlbmFtZSA9ICgwLCB1dGlsXzEucGF0aFRvRmlsZW5hbWUpKHBhdGgpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkZGlyQmFzZShmaWxlbmFtZSwgb3B0cyk7XG4gICAgfVxuICAgIHJlYWRkaXIocGF0aCwgYSwgYikge1xuICAgICAgICBjb25zdCBbb3B0aW9ucywgY2FsbGJhY2tdID0gKDAsIG9wdGlvbnNfMS5nZXRSZWFkZGlyT3B0c0FuZENiKShhLCBiKTtcbiAgICAgICAgY29uc3QgZmlsZW5hbWUgPSAoMCwgdXRpbF8xLnBhdGhUb0ZpbGVuYW1lKShwYXRoKTtcbiAgICAgICAgdGhpcy53cmFwQXN5bmModGhpcy5yZWFkZGlyQmFzZSwgW2ZpbGVuYW1lLCBvcHRpb25zXSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICByZWFkbGlua0Jhc2UoZmlsZW5hbWUsIGVuY29kaW5nKSB7XG4gICAgICAgIGNvbnN0IGxpbmsgPSB0aGlzLmdldExpbmtPclRocm93KGZpbGVuYW1lLCAncmVhZGxpbmsnKTtcbiAgICAgICAgY29uc3Qgbm9kZSA9IGxpbmsuZ2V0Tm9kZSgpO1xuICAgICAgICBpZiAoIW5vZGUuaXNTeW1saW5rKCkpXG4gICAgICAgICAgICB0aHJvdyAoMCwgdXRpbF8xLmNyZWF0ZUVycm9yKShFSU5WQUwsICdyZWFkbGluaycsIGZpbGVuYW1lKTtcbiAgICAgICAgY29uc3Qgc3RyID0gc2VwICsgbm9kZS5zeW1saW5rLmpvaW4oc2VwKTtcbiAgICAgICAgcmV0dXJuICgwLCBlbmNvZGluZ18xLnN0clRvRW5jb2RpbmcpKHN0ciwgZW5jb2RpbmcpO1xuICAgIH1cbiAgICByZWFkbGlua1N5bmMocGF0aCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBvcHRzID0gKDAsIG9wdGlvbnNfMS5nZXREZWZhdWx0T3B0cykob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkocGF0aCk7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRsaW5rQmFzZShmaWxlbmFtZSwgb3B0cy5lbmNvZGluZyk7XG4gICAgfVxuICAgIHJlYWRsaW5rKHBhdGgsIGEsIGIpIHtcbiAgICAgICAgY29uc3QgW29wdHMsIGNhbGxiYWNrXSA9ICgwLCBvcHRpb25zXzEuZ2V0RGVmYXVsdE9wdHNBbmRDYikoYSwgYik7XG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkocGF0aCk7XG4gICAgICAgIHRoaXMud3JhcEFzeW5jKHRoaXMucmVhZGxpbmtCYXNlLCBbZmlsZW5hbWUsIG9wdHMuZW5jb2RpbmddLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIGZzeW5jQmFzZShmZCkge1xuICAgICAgICB0aGlzLmdldEZpbGVCeUZkT3JUaHJvdyhmZCwgJ2ZzeW5jJyk7XG4gICAgfVxuICAgIGZzeW5jU3luYyhmZCkge1xuICAgICAgICB0aGlzLmZzeW5jQmFzZShmZCk7XG4gICAgfVxuICAgIGZzeW5jKGZkLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLndyYXBBc3luYyh0aGlzLmZzeW5jQmFzZSwgW2ZkXSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBmZGF0YXN5bmNCYXNlKGZkKSB7XG4gICAgICAgIHRoaXMuZ2V0RmlsZUJ5RmRPclRocm93KGZkLCAnZmRhdGFzeW5jJyk7XG4gICAgfVxuICAgIGZkYXRhc3luY1N5bmMoZmQpIHtcbiAgICAgICAgdGhpcy5mZGF0YXN5bmNCYXNlKGZkKTtcbiAgICB9XG4gICAgZmRhdGFzeW5jKGZkLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLndyYXBBc3luYyh0aGlzLmZkYXRhc3luY0Jhc2UsIFtmZF0sIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgZnRydW5jYXRlQmFzZShmZCwgbGVuKSB7XG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmdldEZpbGVCeUZkT3JUaHJvdyhmZCwgJ2Z0cnVuY2F0ZScpO1xuICAgICAgICBmaWxlLnRydW5jYXRlKGxlbik7XG4gICAgfVxuICAgIGZ0cnVuY2F0ZVN5bmMoZmQsIGxlbikge1xuICAgICAgICB0aGlzLmZ0cnVuY2F0ZUJhc2UoZmQsIGxlbik7XG4gICAgfVxuICAgIGZ0cnVuY2F0ZShmZCwgYSwgYikge1xuICAgICAgICBjb25zdCBsZW4gPSB0eXBlb2YgYSA9PT0gJ251bWJlcicgPyBhIDogMDtcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSAoMCwgdXRpbF8xLnZhbGlkYXRlQ2FsbGJhY2spKHR5cGVvZiBhID09PSAnbnVtYmVyJyA/IGIgOiBhKTtcbiAgICAgICAgdGhpcy53cmFwQXN5bmModGhpcy5mdHJ1bmNhdGVCYXNlLCBbZmQsIGxlbl0sIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgdHJ1bmNhdGVCYXNlKHBhdGgsIGxlbikge1xuICAgICAgICBjb25zdCBmZCA9IHRoaXMub3BlblN5bmMocGF0aCwgJ3IrJyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmZ0cnVuY2F0ZVN5bmMoZmQsIGxlbik7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlU3luYyhmZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogYGlkYCBzaG91bGQgYmUgYSBmaWxlIGRlc2NyaXB0b3Igb3IgYSBwYXRoLiBgaWRgIGFzIGZpbGUgZGVzY3JpcHRvciB3aWxsXG4gICAgICogbm90IGJlIHN1cHBvcnRlZCBzb29uLlxuICAgICAqL1xuICAgIHRydW5jYXRlU3luYyhpZCwgbGVuKSB7XG4gICAgICAgIGlmICgoMCwgdXRpbF8xLmlzRmQpKGlkKSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZ0cnVuY2F0ZVN5bmMoaWQsIGxlbik7XG4gICAgICAgIHRoaXMudHJ1bmNhdGVCYXNlKGlkLCBsZW4pO1xuICAgIH1cbiAgICB0cnVuY2F0ZShpZCwgYSwgYikge1xuICAgICAgICBjb25zdCBsZW4gPSB0eXBlb2YgYSA9PT0gJ251bWJlcicgPyBhIDogMDtcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSAoMCwgdXRpbF8xLnZhbGlkYXRlQ2FsbGJhY2spKHR5cGVvZiBhID09PSAnbnVtYmVyJyA/IGIgOiBhKTtcbiAgICAgICAgaWYgKCgwLCB1dGlsXzEuaXNGZCkoaWQpKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZnRydW5jYXRlKGlkLCBsZW4sIGNhbGxiYWNrKTtcbiAgICAgICAgdGhpcy53cmFwQXN5bmModGhpcy50cnVuY2F0ZUJhc2UsIFtpZCwgbGVuXSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBmdXRpbWVzQmFzZShmZCwgYXRpbWUsIG10aW1lKSB7XG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmdldEZpbGVCeUZkT3JUaHJvdyhmZCwgJ2Z1dGltZXMnKTtcbiAgICAgICAgY29uc3Qgbm9kZSA9IGZpbGUubm9kZTtcbiAgICAgICAgbm9kZS5hdGltZSA9IG5ldyBEYXRlKGF0aW1lICogMTAwMCk7XG4gICAgICAgIG5vZGUubXRpbWUgPSBuZXcgRGF0ZShtdGltZSAqIDEwMDApO1xuICAgIH1cbiAgICBmdXRpbWVzU3luYyhmZCwgYXRpbWUsIG10aW1lKSB7XG4gICAgICAgIHRoaXMuZnV0aW1lc0Jhc2UoZmQsIHRvVW5peFRpbWVzdGFtcChhdGltZSksIHRvVW5peFRpbWVzdGFtcChtdGltZSkpO1xuICAgIH1cbiAgICBmdXRpbWVzKGZkLCBhdGltZSwgbXRpbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMud3JhcEFzeW5jKHRoaXMuZnV0aW1lc0Jhc2UsIFtmZCwgdG9Vbml4VGltZXN0YW1wKGF0aW1lKSwgdG9Vbml4VGltZXN0YW1wKG10aW1lKV0sIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgdXRpbWVzQmFzZShmaWxlbmFtZSwgYXRpbWUsIG10aW1lLCBmb2xsb3dTeW1saW5rcyA9IHRydWUpIHtcbiAgICAgICAgY29uc3QgbGluayA9IGZvbGxvd1N5bWxpbmtzXG4gICAgICAgICAgICA/IHRoaXMuZ2V0UmVzb2x2ZWRMaW5rT3JUaHJvdyhmaWxlbmFtZSwgJ3V0aW1lcycpXG4gICAgICAgICAgICA6IHRoaXMuZ2V0TGlua09yVGhyb3coZmlsZW5hbWUsICdsdXRpbWVzJyk7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBsaW5rLmdldE5vZGUoKTtcbiAgICAgICAgbm9kZS5hdGltZSA9IG5ldyBEYXRlKGF0aW1lICogMTAwMCk7XG4gICAgICAgIG5vZGUubXRpbWUgPSBuZXcgRGF0ZShtdGltZSAqIDEwMDApO1xuICAgIH1cbiAgICB1dGltZXNTeW5jKHBhdGgsIGF0aW1lLCBtdGltZSkge1xuICAgICAgICB0aGlzLnV0aW1lc0Jhc2UoKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkocGF0aCksIHRvVW5peFRpbWVzdGFtcChhdGltZSksIHRvVW5peFRpbWVzdGFtcChtdGltZSksIHRydWUpO1xuICAgIH1cbiAgICB1dGltZXMocGF0aCwgYXRpbWUsIG10aW1lLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLndyYXBBc3luYyh0aGlzLnV0aW1lc0Jhc2UsIFsoMCwgdXRpbF8xLnBhdGhUb0ZpbGVuYW1lKShwYXRoKSwgdG9Vbml4VGltZXN0YW1wKGF0aW1lKSwgdG9Vbml4VGltZXN0YW1wKG10aW1lKSwgdHJ1ZV0sIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgbHV0aW1lc1N5bmMocGF0aCwgYXRpbWUsIG10aW1lKSB7XG4gICAgICAgIHRoaXMudXRpbWVzQmFzZSgoMCwgdXRpbF8xLnBhdGhUb0ZpbGVuYW1lKShwYXRoKSwgdG9Vbml4VGltZXN0YW1wKGF0aW1lKSwgdG9Vbml4VGltZXN0YW1wKG10aW1lKSwgZmFsc2UpO1xuICAgIH1cbiAgICBsdXRpbWVzKHBhdGgsIGF0aW1lLCBtdGltZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy53cmFwQXN5bmModGhpcy51dGltZXNCYXNlLCBbKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkocGF0aCksIHRvVW5peFRpbWVzdGFtcChhdGltZSksIHRvVW5peFRpbWVzdGFtcChtdGltZSksIGZhbHNlXSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBta2RpckJhc2UoZmlsZW5hbWUsIG1vZGVOdW0pIHtcbiAgICAgICAgY29uc3Qgc3RlcHMgPSBmaWxlbmFtZVRvU3RlcHMoZmlsZW5hbWUpO1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgaWYgdXNlciB0cmllcyB0byBjcmVhdGUgcm9vdCBkaXIgYGZzLm1rZGlyU3luYygnLycpYC5cbiAgICAgICAgaWYgKCFzdGVwcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93ICgwLCB1dGlsXzEuY3JlYXRlRXJyb3IpKEVFWElTVCwgJ21rZGlyJywgZmlsZW5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRpciA9IHRoaXMuZ2V0TGlua1BhcmVudEFzRGlyT3JUaHJvdyhmaWxlbmFtZSwgJ21rZGlyJyk7XG4gICAgICAgIC8vIENoZWNrIHBhdGggYWxyZWFkeSBleGlzdHMuXG4gICAgICAgIGNvbnN0IG5hbWUgPSBzdGVwc1tzdGVwcy5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKGRpci5nZXRDaGlsZChuYW1lKSlcbiAgICAgICAgICAgIHRocm93ICgwLCB1dGlsXzEuY3JlYXRlRXJyb3IpKEVFWElTVCwgJ21rZGlyJywgZmlsZW5hbWUpO1xuICAgICAgICBjb25zdCBub2RlID0gZGlyLmdldE5vZGUoKTtcbiAgICAgICAgaWYgKCFub2RlLmNhbldyaXRlKCkgfHwgIW5vZGUuY2FuRXhlY3V0ZSgpKVxuICAgICAgICAgICAgdGhyb3cgKDAsIHV0aWxfMS5jcmVhdGVFcnJvcikoRUFDQ0VTLCAnbWtkaXInLCBmaWxlbmFtZSk7XG4gICAgICAgIGRpci5jcmVhdGVDaGlsZChuYW1lLCB0aGlzLmNyZWF0ZU5vZGUodHJ1ZSwgbW9kZU51bSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGRpcmVjdG9yeSB0cmVlIHJlY3Vyc2l2ZWx5LlxuICAgICAqL1xuICAgIG1rZGlycEJhc2UoZmlsZW5hbWUsIG1vZGVOdW0pIHtcbiAgICAgICAgbGV0IGNyZWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgY29uc3Qgc3RlcHMgPSBmaWxlbmFtZVRvU3RlcHMoZmlsZW5hbWUpO1xuICAgICAgICBsZXQgY3VyciA9IG51bGw7XG4gICAgICAgIGxldCBpID0gc3RlcHMubGVuZ3RoO1xuICAgICAgICAvLyBGaW5kIHRoZSBsb25nZXN0IHN1YnBhdGggb2YgZmlsZW5hbWUgdGhhdCBzdGlsbCBleGlzdHM6XG4gICAgICAgIGZvciAoaSA9IHN0ZXBzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGN1cnIgPSB0aGlzLmdldFJlc29sdmVkTGluayhzdGVwcy5zbGljZSgwLCBpKSk7XG4gICAgICAgICAgICBpZiAoY3VycilcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWN1cnIpIHtcbiAgICAgICAgICAgIGN1cnIgPSB0aGlzLnJvb3Q7XG4gICAgICAgICAgICBpID0gMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBjdXJyIGlzIG5vdyB0aGUgbGFzdCBkaXJlY3RvcnkgdGhhdCBzdGlsbCBleGlzdHMuXG4gICAgICAgIC8vIChJZiBub25lIG9mIHRoZW0gZXhpc3RlZCwgY3VyciBpcyB0aGUgcm9vdC4pXG4gICAgICAgIC8vIENoZWNrIGFjY2VzcyB0aGUgbGF6eSB3YXk6XG4gICAgICAgIGN1cnIgPSB0aGlzLmdldFJlc29sdmVkTGlua09yVGhyb3coc2VwICsgc3RlcHMuc2xpY2UoMCwgaSkuam9pbihzZXApLCAnbWtkaXInKTtcbiAgICAgICAgLy8gU3RhcnQgY3JlYXRpbmcgZGlyZWN0b3JpZXM6XG4gICAgICAgIGZvciAoaTsgaSA8IHN0ZXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gY3Vyci5nZXROb2RlKCk7XG4gICAgICAgICAgICBpZiAobm9kZS5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgd2UgaGF2ZSBwZXJtaXNzaW9uc1xuICAgICAgICAgICAgICAgIGlmICghbm9kZS5jYW5FeGVjdXRlKCkgfHwgIW5vZGUuY2FuV3JpdGUoKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgKDAsIHV0aWxfMS5jcmVhdGVFcnJvcikoRUFDQ0VTLCAnbWtkaXInLCBmaWxlbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyAoMCwgdXRpbF8xLmNyZWF0ZUVycm9yKShFTk9URElSLCAnbWtkaXInLCBmaWxlbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjcmVhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGN1cnIgPSBjdXJyLmNyZWF0ZUNoaWxkKHN0ZXBzW2ldLCB0aGlzLmNyZWF0ZU5vZGUodHJ1ZSwgbW9kZU51bSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjcmVhdGVkID8gZmlsZW5hbWUgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIG1rZGlyU3luYyhwYXRoLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSAoMCwgb3B0aW9uc18xLmdldE1rZGlyT3B0aW9ucykob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IG1vZGVOdW0gPSAoMCwgdXRpbF8xLm1vZGVUb051bWJlcikob3B0cy5tb2RlLCAwbzc3Nyk7XG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkocGF0aCk7XG4gICAgICAgIGlmIChvcHRzLnJlY3Vyc2l2ZSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1rZGlycEJhc2UoZmlsZW5hbWUsIG1vZGVOdW0pO1xuICAgICAgICB0aGlzLm1rZGlyQmFzZShmaWxlbmFtZSwgbW9kZU51bSk7XG4gICAgfVxuICAgIG1rZGlyKHBhdGgsIGEsIGIpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9ICgwLCBvcHRpb25zXzEuZ2V0TWtkaXJPcHRpb25zKShhKTtcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSAoMCwgdXRpbF8xLnZhbGlkYXRlQ2FsbGJhY2spKHR5cGVvZiBhID09PSAnZnVuY3Rpb24nID8gYSA6IGIpO1xuICAgICAgICBjb25zdCBtb2RlTnVtID0gKDAsIHV0aWxfMS5tb2RlVG9OdW1iZXIpKG9wdHMubW9kZSwgMG83NzcpO1xuICAgICAgICBjb25zdCBmaWxlbmFtZSA9ICgwLCB1dGlsXzEucGF0aFRvRmlsZW5hbWUpKHBhdGgpO1xuICAgICAgICBpZiAob3B0cy5yZWN1cnNpdmUpXG4gICAgICAgICAgICB0aGlzLndyYXBBc3luYyh0aGlzLm1rZGlycEJhc2UsIFtmaWxlbmFtZSwgbW9kZU51bV0sIGNhbGxiYWNrKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy53cmFwQXN5bmModGhpcy5ta2RpckJhc2UsIFtmaWxlbmFtZSwgbW9kZU51bV0sIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgbWtkdGVtcEJhc2UocHJlZml4LCBlbmNvZGluZywgcmV0cnkgPSA1KSB7XG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gcHJlZml4ICsgKDAsIHV0aWxfMS5nZW5SbmRTdHI2KSgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5ta2RpckJhc2UoZmlsZW5hbWUsIDUxMSAvKiBNT0RFLkRJUiAqLyk7XG4gICAgICAgICAgICByZXR1cm4gKDAsIGVuY29kaW5nXzEuc3RyVG9FbmNvZGluZykoZmlsZW5hbWUsIGVuY29kaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyLmNvZGUgPT09IEVFWElTVCkge1xuICAgICAgICAgICAgICAgIGlmIChyZXRyeSA+IDEpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1rZHRlbXBCYXNlKHByZWZpeCwgZW5jb2RpbmcsIHJldHJ5IC0gMSk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignQ291bGQgbm90IGNyZWF0ZSB0ZW1wIGRpci4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbWtkdGVtcFN5bmMocHJlZml4LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgZW5jb2RpbmcgfSA9ICgwLCBvcHRpb25zXzEuZ2V0RGVmYXVsdE9wdHMpKG9wdGlvbnMpO1xuICAgICAgICBpZiAoIXByZWZpeCB8fCB0eXBlb2YgcHJlZml4ICE9PSAnc3RyaW5nJylcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ZpbGVuYW1lIHByZWZpeCBpcyByZXF1aXJlZCcpO1xuICAgICAgICAoMCwgdXRpbF8xLm51bGxDaGVjaykocHJlZml4KTtcbiAgICAgICAgcmV0dXJuIHRoaXMubWtkdGVtcEJhc2UocHJlZml4LCBlbmNvZGluZyk7XG4gICAgfVxuICAgIG1rZHRlbXAocHJlZml4LCBhLCBiKSB7XG4gICAgICAgIGNvbnN0IFt7IGVuY29kaW5nIH0sIGNhbGxiYWNrXSA9ICgwLCBvcHRpb25zXzEuZ2V0RGVmYXVsdE9wdHNBbmRDYikoYSwgYik7XG4gICAgICAgIGlmICghcHJlZml4IHx8IHR5cGVvZiBwcmVmaXggIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZmlsZW5hbWUgcHJlZml4IGlzIHJlcXVpcmVkJyk7XG4gICAgICAgIGlmICghKDAsIHV0aWxfMS5udWxsQ2hlY2spKHByZWZpeCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMud3JhcEFzeW5jKHRoaXMubWtkdGVtcEJhc2UsIFtwcmVmaXgsIGVuY29kaW5nXSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBybWRpckJhc2UoZmlsZW5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9ICgwLCBvcHRpb25zXzEuZ2V0Um1kaXJPcHRpb25zKShvcHRpb25zKTtcbiAgICAgICAgY29uc3QgbGluayA9IHRoaXMuZ2V0TGlua0FzRGlyT3JUaHJvdyhmaWxlbmFtZSwgJ3JtZGlyJyk7XG4gICAgICAgIC8vIENoZWNrIGRpcmVjdG9yeSBpcyBlbXB0eS5cbiAgICAgICAgaWYgKGxpbmsubGVuZ3RoICYmICFvcHRzLnJlY3Vyc2l2ZSlcbiAgICAgICAgICAgIHRocm93ICgwLCB1dGlsXzEuY3JlYXRlRXJyb3IpKEVOT1RFTVBUWSwgJ3JtZGlyJywgZmlsZW5hbWUpO1xuICAgICAgICB0aGlzLmRlbGV0ZUxpbmsobGluayk7XG4gICAgfVxuICAgIHJtZGlyU3luYyhwYXRoLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMucm1kaXJCYXNlKCgwLCB1dGlsXzEucGF0aFRvRmlsZW5hbWUpKHBhdGgpLCBvcHRpb25zKTtcbiAgICB9XG4gICAgcm1kaXIocGF0aCwgYSwgYikge1xuICAgICAgICBjb25zdCBvcHRzID0gKDAsIG9wdGlvbnNfMS5nZXRSbWRpck9wdGlvbnMpKGEpO1xuICAgICAgICBjb25zdCBjYWxsYmFjayA9ICgwLCB1dGlsXzEudmFsaWRhdGVDYWxsYmFjaykodHlwZW9mIGEgPT09ICdmdW5jdGlvbicgPyBhIDogYik7XG4gICAgICAgIHRoaXMud3JhcEFzeW5jKHRoaXMucm1kaXJCYXNlLCBbKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkocGF0aCksIG9wdHNdLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIHJtQmFzZShmaWxlbmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIC8vIFwic3RhdFwiIGlzIHVzZWQgdG8gbWF0Y2ggTm9kZSdzIG5hdGl2ZSBlcnJvciBtZXNzYWdlLlxuICAgICAgICBsZXQgbGluaztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxpbmsgPSB0aGlzLmdldFJlc29sdmVkTGlua09yVGhyb3coZmlsZW5hbWUsICdzdGF0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgLy8gU2lsZW50bHkgaWdub3JlIG1pc3NpbmcgcGF0aHMgaWYgZm9yY2Ugb3B0aW9uIGlzIHRydWVcbiAgICAgICAgICAgIGlmIChlcnIuY29kZSA9PT0gRU5PRU5UICYmIG9wdGlvbnMuZm9yY2UpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGluay5nZXROb2RlKCkuaXNEaXJlY3RvcnkoKSAmJiAhb3B0aW9ucy5yZWN1cnNpdmUpXG4gICAgICAgICAgICB0aHJvdyAoMCwgdXRpbF8xLmNyZWF0ZUVycm9yKShFUlJfRlNfRUlTRElSLCAncm0nLCBmaWxlbmFtZSk7XG4gICAgICAgIC8vIENoZWNrIHBlcm1pc3Npb25zXG4gICAgICAgIGlmICghbGluay5wYXJlbnQuZ2V0Tm9kZSgpLmNhbldyaXRlKCkpXG4gICAgICAgICAgICB0aHJvdyAoMCwgdXRpbF8xLmNyZWF0ZUVycm9yKShFQUNDRVMsICdybScsIGZpbGVuYW1lKTtcbiAgICAgICAgdGhpcy5kZWxldGVMaW5rKGxpbmspO1xuICAgIH1cbiAgICBybVN5bmMocGF0aCwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLnJtQmFzZSgoMCwgdXRpbF8xLnBhdGhUb0ZpbGVuYW1lKShwYXRoKSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHJtKHBhdGgsIGEsIGIpIHtcbiAgICAgICAgY29uc3QgW29wdHMsIGNhbGxiYWNrXSA9ICgwLCBvcHRpb25zXzEuZ2V0Um1PcHRzQW5kQ2IpKGEsIGIpO1xuICAgICAgICB0aGlzLndyYXBBc3luYyh0aGlzLnJtQmFzZSwgWygwLCB1dGlsXzEucGF0aFRvRmlsZW5hbWUpKHBhdGgpLCBvcHRzXSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBmY2htb2RCYXNlKGZkLCBtb2RlTnVtKSB7XG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmdldEZpbGVCeUZkT3JUaHJvdyhmZCwgJ2ZjaG1vZCcpO1xuICAgICAgICBmaWxlLmNobW9kKG1vZGVOdW0pO1xuICAgIH1cbiAgICBmY2htb2RTeW5jKGZkLCBtb2RlKSB7XG4gICAgICAgIHRoaXMuZmNobW9kQmFzZShmZCwgKDAsIHV0aWxfMS5tb2RlVG9OdW1iZXIpKG1vZGUpKTtcbiAgICB9XG4gICAgZmNobW9kKGZkLCBtb2RlLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLndyYXBBc3luYyh0aGlzLmZjaG1vZEJhc2UsIFtmZCwgKDAsIHV0aWxfMS5tb2RlVG9OdW1iZXIpKG1vZGUpXSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBjaG1vZEJhc2UoZmlsZW5hbWUsIG1vZGVOdW0sIGZvbGxvd1N5bWxpbmtzID0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBsaW5rID0gZm9sbG93U3ltbGlua3NcbiAgICAgICAgICAgID8gdGhpcy5nZXRSZXNvbHZlZExpbmtPclRocm93KGZpbGVuYW1lLCAnY2htb2QnKVxuICAgICAgICAgICAgOiB0aGlzLmdldExpbmtPclRocm93KGZpbGVuYW1lLCAnY2htb2QnKTtcbiAgICAgICAgY29uc3Qgbm9kZSA9IGxpbmsuZ2V0Tm9kZSgpO1xuICAgICAgICBub2RlLmNobW9kKG1vZGVOdW0pO1xuICAgIH1cbiAgICBjaG1vZFN5bmMocGF0aCwgbW9kZSkge1xuICAgICAgICBjb25zdCBtb2RlTnVtID0gKDAsIHV0aWxfMS5tb2RlVG9OdW1iZXIpKG1vZGUpO1xuICAgICAgICBjb25zdCBmaWxlbmFtZSA9ICgwLCB1dGlsXzEucGF0aFRvRmlsZW5hbWUpKHBhdGgpO1xuICAgICAgICB0aGlzLmNobW9kQmFzZShmaWxlbmFtZSwgbW9kZU51bSwgdHJ1ZSk7XG4gICAgfVxuICAgIGNobW9kKHBhdGgsIG1vZGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IG1vZGVOdW0gPSAoMCwgdXRpbF8xLm1vZGVUb051bWJlcikobW9kZSk7XG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkocGF0aCk7XG4gICAgICAgIHRoaXMud3JhcEFzeW5jKHRoaXMuY2htb2RCYXNlLCBbZmlsZW5hbWUsIG1vZGVOdW1dLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIGxjaG1vZEJhc2UoZmlsZW5hbWUsIG1vZGVOdW0pIHtcbiAgICAgICAgdGhpcy5jaG1vZEJhc2UoZmlsZW5hbWUsIG1vZGVOdW0sIGZhbHNlKTtcbiAgICB9XG4gICAgbGNobW9kU3luYyhwYXRoLCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IG1vZGVOdW0gPSAoMCwgdXRpbF8xLm1vZGVUb051bWJlcikobW9kZSk7XG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkocGF0aCk7XG4gICAgICAgIHRoaXMubGNobW9kQmFzZShmaWxlbmFtZSwgbW9kZU51bSk7XG4gICAgfVxuICAgIGxjaG1vZChwYXRoLCBtb2RlLCBjYWxsYmFjaykge1xuICAgICAgICBjb25zdCBtb2RlTnVtID0gKDAsIHV0aWxfMS5tb2RlVG9OdW1iZXIpKG1vZGUpO1xuICAgICAgICBjb25zdCBmaWxlbmFtZSA9ICgwLCB1dGlsXzEucGF0aFRvRmlsZW5hbWUpKHBhdGgpO1xuICAgICAgICB0aGlzLndyYXBBc3luYyh0aGlzLmxjaG1vZEJhc2UsIFtmaWxlbmFtZSwgbW9kZU51bV0sIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgZmNob3duQmFzZShmZCwgdWlkLCBnaWQpIHtcbiAgICAgICAgdGhpcy5nZXRGaWxlQnlGZE9yVGhyb3coZmQsICdmY2hvd24nKS5jaG93bih1aWQsIGdpZCk7XG4gICAgfVxuICAgIGZjaG93blN5bmMoZmQsIHVpZCwgZ2lkKSB7XG4gICAgICAgIHZhbGlkYXRlVWlkKHVpZCk7XG4gICAgICAgIHZhbGlkYXRlR2lkKGdpZCk7XG4gICAgICAgIHRoaXMuZmNob3duQmFzZShmZCwgdWlkLCBnaWQpO1xuICAgIH1cbiAgICBmY2hvd24oZmQsIHVpZCwgZ2lkLCBjYWxsYmFjaykge1xuICAgICAgICB2YWxpZGF0ZVVpZCh1aWQpO1xuICAgICAgICB2YWxpZGF0ZUdpZChnaWQpO1xuICAgICAgICB0aGlzLndyYXBBc3luYyh0aGlzLmZjaG93bkJhc2UsIFtmZCwgdWlkLCBnaWRdLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIGNob3duQmFzZShmaWxlbmFtZSwgdWlkLCBnaWQpIHtcbiAgICAgICAgY29uc3QgbGluayA9IHRoaXMuZ2V0UmVzb2x2ZWRMaW5rT3JUaHJvdyhmaWxlbmFtZSwgJ2Nob3duJyk7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBsaW5rLmdldE5vZGUoKTtcbiAgICAgICAgbm9kZS5jaG93bih1aWQsIGdpZCk7XG4gICAgICAgIC8vIGlmKG5vZGUuaXNGaWxlKCkgfHwgbm9kZS5pc1N5bWxpbmsoKSkge1xuICAgICAgICAvL1xuICAgICAgICAvLyB9IGVsc2UgaWYobm9kZS5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgIC8vIFRPRE86IFdoYXQgZG8gd2UgZG8gaGVyZT9cbiAgICAgICAgLy8gfVxuICAgIH1cbiAgICBjaG93blN5bmMocGF0aCwgdWlkLCBnaWQpIHtcbiAgICAgICAgdmFsaWRhdGVVaWQodWlkKTtcbiAgICAgICAgdmFsaWRhdGVHaWQoZ2lkKTtcbiAgICAgICAgdGhpcy5jaG93bkJhc2UoKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkocGF0aCksIHVpZCwgZ2lkKTtcbiAgICB9XG4gICAgY2hvd24ocGF0aCwgdWlkLCBnaWQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhbGlkYXRlVWlkKHVpZCk7XG4gICAgICAgIHZhbGlkYXRlR2lkKGdpZCk7XG4gICAgICAgIHRoaXMud3JhcEFzeW5jKHRoaXMuY2hvd25CYXNlLCBbKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkocGF0aCksIHVpZCwgZ2lkXSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBsY2hvd25CYXNlKGZpbGVuYW1lLCB1aWQsIGdpZCkge1xuICAgICAgICB0aGlzLmdldExpbmtPclRocm93KGZpbGVuYW1lLCAnbGNob3duJykuZ2V0Tm9kZSgpLmNob3duKHVpZCwgZ2lkKTtcbiAgICB9XG4gICAgbGNob3duU3luYyhwYXRoLCB1aWQsIGdpZCkge1xuICAgICAgICB2YWxpZGF0ZVVpZCh1aWQpO1xuICAgICAgICB2YWxpZGF0ZUdpZChnaWQpO1xuICAgICAgICB0aGlzLmxjaG93bkJhc2UoKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkocGF0aCksIHVpZCwgZ2lkKTtcbiAgICB9XG4gICAgbGNob3duKHBhdGgsIHVpZCwgZ2lkLCBjYWxsYmFjaykge1xuICAgICAgICB2YWxpZGF0ZVVpZCh1aWQpO1xuICAgICAgICB2YWxpZGF0ZUdpZChnaWQpO1xuICAgICAgICB0aGlzLndyYXBBc3luYyh0aGlzLmxjaG93bkJhc2UsIFsoMCwgdXRpbF8xLnBhdGhUb0ZpbGVuYW1lKShwYXRoKSwgdWlkLCBnaWRdLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIHdhdGNoRmlsZShwYXRoLCBhLCBiKSB7XG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkocGF0aCk7XG4gICAgICAgIGxldCBvcHRpb25zID0gYTtcbiAgICAgICAgbGV0IGxpc3RlbmVyID0gYjtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBsaXN0ZW5lciA9IGE7XG4gICAgICAgICAgICBvcHRpb25zID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignXCJ3YXRjaEZpbGUoKVwiIHJlcXVpcmVzIGEgbGlzdGVuZXIgZnVuY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgaW50ZXJ2YWwgPSA1MDA3O1xuICAgICAgICBsZXQgcGVyc2lzdGVudCA9IHRydWU7XG4gICAgICAgIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmludGVydmFsID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICBpbnRlcnZhbCA9IG9wdGlvbnMuaW50ZXJ2YWw7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMucGVyc2lzdGVudCA9PT0gJ2Jvb2xlYW4nKVxuICAgICAgICAgICAgICAgIHBlcnNpc3RlbnQgPSBvcHRpb25zLnBlcnNpc3RlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHdhdGNoZXIgPSB0aGlzLnN0YXRXYXRjaGVyc1tmaWxlbmFtZV07XG4gICAgICAgIGlmICghd2F0Y2hlcikge1xuICAgICAgICAgICAgd2F0Y2hlciA9IG5ldyB0aGlzLlN0YXRXYXRjaGVyKCk7XG4gICAgICAgICAgICB3YXRjaGVyLnN0YXJ0KGZpbGVuYW1lLCBwZXJzaXN0ZW50LCBpbnRlcnZhbCk7XG4gICAgICAgICAgICB0aGlzLnN0YXRXYXRjaGVyc1tmaWxlbmFtZV0gPSB3YXRjaGVyO1xuICAgICAgICB9XG4gICAgICAgIHdhdGNoZXIuYWRkTGlzdGVuZXIoJ2NoYW5nZScsIGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIHdhdGNoZXI7XG4gICAgfVxuICAgIHVud2F0Y2hGaWxlKHBhdGgsIGxpc3RlbmVyKSB7XG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkocGF0aCk7XG4gICAgICAgIGNvbnN0IHdhdGNoZXIgPSB0aGlzLnN0YXRXYXRjaGVyc1tmaWxlbmFtZV07XG4gICAgICAgIGlmICghd2F0Y2hlcilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgd2F0Y2hlci5yZW1vdmVMaXN0ZW5lcignY2hhbmdlJywgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgd2F0Y2hlci5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2NoYW5nZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh3YXRjaGVyLmxpc3RlbmVyQ291bnQoJ2NoYW5nZScpID09PSAwKSB7XG4gICAgICAgICAgICB3YXRjaGVyLnN0b3AoKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnN0YXRXYXRjaGVyc1tmaWxlbmFtZV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3JlYXRlUmVhZFN0cmVhbShwYXRoLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgdGhpcy5SZWFkU3RyZWFtKHBhdGgsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBjcmVhdGVXcml0ZVN0cmVhbShwYXRoLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgdGhpcy5Xcml0ZVN0cmVhbShwYXRoLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLy8gd2F0Y2gocGF0aDogUGF0aExpa2UpOiBGU1dhdGNoZXI7XG4gICAgLy8gd2F0Y2gocGF0aDogUGF0aExpa2UsIG9wdGlvbnM/OiBJV2F0Y2hPcHRpb25zIHwgc3RyaW5nKTogRlNXYXRjaGVyO1xuICAgIHdhdGNoKHBhdGgsIG9wdGlvbnMsIGxpc3RlbmVyKSB7XG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkocGF0aCk7XG4gICAgICAgIGxldCBnaXZlbk9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyID0gb3B0aW9ucztcbiAgICAgICAgICAgIGdpdmVuT3B0aW9ucyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lIHByZWZlci1jb25zdFxuICAgICAgICBsZXQgeyBwZXJzaXN0ZW50LCByZWN1cnNpdmUsIGVuY29kaW5nIH0gPSAoMCwgb3B0aW9uc18xLmdldERlZmF1bHRPcHRzKShnaXZlbk9wdGlvbnMpO1xuICAgICAgICBpZiAocGVyc2lzdGVudCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcGVyc2lzdGVudCA9IHRydWU7XG4gICAgICAgIGlmIChyZWN1cnNpdmUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlY3Vyc2l2ZSA9IGZhbHNlO1xuICAgICAgICBjb25zdCB3YXRjaGVyID0gbmV3IHRoaXMuRlNXYXRjaGVyKCk7XG4gICAgICAgIHdhdGNoZXIuc3RhcnQoZmlsZW5hbWUsIHBlcnNpc3RlbnQsIHJlY3Vyc2l2ZSwgZW5jb2RpbmcpO1xuICAgICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHdhdGNoZXIuYWRkTGlzdGVuZXIoJ2NoYW5nZScsIGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd2F0Y2hlcjtcbiAgICB9XG4gICAgb3BlbmRpckJhc2UoZmlsZW5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgbGluayA9IHRoaXMuZ2V0UmVzb2x2ZWRMaW5rT3JUaHJvdyhmaWxlbmFtZSwgJ3NjYW5kaXInKTtcbiAgICAgICAgY29uc3Qgbm9kZSA9IGxpbmsuZ2V0Tm9kZSgpO1xuICAgICAgICBpZiAoIW5vZGUuaXNEaXJlY3RvcnkoKSlcbiAgICAgICAgICAgIHRocm93ICgwLCB1dGlsXzEuY3JlYXRlRXJyb3IpKEVOT1RESVIsICdzY2FuZGlyJywgZmlsZW5hbWUpO1xuICAgICAgICByZXR1cm4gbmV3IERpcl8xLkRpcihsaW5rLCBvcHRpb25zKTtcbiAgICB9XG4gICAgb3BlbmRpclN5bmMocGF0aCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBvcHRzID0gKDAsIG9wdGlvbnNfMS5nZXRPcGVuZGlyT3B0aW9ucykob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkocGF0aCk7XG4gICAgICAgIHJldHVybiB0aGlzLm9wZW5kaXJCYXNlKGZpbGVuYW1lLCBvcHRzKTtcbiAgICB9XG4gICAgb3BlbmRpcihwYXRoLCBhLCBiKSB7XG4gICAgICAgIGNvbnN0IFtvcHRpb25zLCBjYWxsYmFja10gPSAoMCwgb3B0aW9uc18xLmdldE9wZW5kaXJPcHRzQW5kQ2IpKGEsIGIpO1xuICAgICAgICBjb25zdCBmaWxlbmFtZSA9ICgwLCB1dGlsXzEucGF0aFRvRmlsZW5hbWUpKHBhdGgpO1xuICAgICAgICB0aGlzLndyYXBBc3luYyh0aGlzLm9wZW5kaXJCYXNlLCBbZmlsZW5hbWUsIG9wdGlvbnNdLCBjYWxsYmFjayk7XG4gICAgfVxufVxuZXhwb3J0cy5Wb2x1bWUgPSBWb2x1bWU7XG4vKipcbiAqIEdsb2JhbCBmaWxlIGRlc2NyaXB0b3IgY291bnRlci4gVU5JWCBmaWxlIGRlc2NyaXB0b3JzIHN0YXJ0IGZyb20gMCBhbmQgZ28gc2VxdWVudGlhbGx5XG4gKiB1cCwgc28gaGVyZSwgaW4gb3JkZXIgbm90IHRvIGNvbmZsaWN0IHdpdGggdGhlbSwgd2UgY2hvb3NlIHNvbWUgYmlnIG51bWJlciBhbmQgZGVzY3JlYXNlXG4gKiB0aGUgZmlsZSBkZXNjcmlwdG9yIG9mIGV2ZXJ5IG5ldyBvcGVuZWQgZmlsZS5cbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAdG9kbyBUaGlzIHNob3VsZCBub3QgYmUgc3RhdGljLCByaWdodD9cbiAqL1xuVm9sdW1lLmZkID0gMHg3ZmZmZmZmZjtcbmZ1bmN0aW9uIGVtaXRTdG9wKHNlbGYpIHtcbiAgICBzZWxmLmVtaXQoJ3N0b3AnKTtcbn1cbmNsYXNzIFN0YXRXYXRjaGVyIGV4dGVuZHMgZXZlbnRzXzEuRXZlbnRFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih2b2wpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5vbkludGVydmFsID0gKCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0cyA9IHRoaXMudm9sLnN0YXRTeW5jKHRoaXMuZmlsZW5hbWUpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhc0NoYW5nZWQoc3RhdHMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnY2hhbmdlJywgc3RhdHMsIHRoaXMucHJldik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJldiA9IHN0YXRzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9vcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnZvbCA9IHZvbDtcbiAgICB9XG4gICAgbG9vcCgpIHtcbiAgICAgICAgdGhpcy50aW1lb3V0UmVmID0gdGhpcy5zZXRUaW1lb3V0KHRoaXMub25JbnRlcnZhbCwgdGhpcy5pbnRlcnZhbCk7XG4gICAgfVxuICAgIGhhc0NoYW5nZWQoc3RhdHMpIHtcbiAgICAgICAgLy8gaWYoIXRoaXMucHJldikgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoc3RhdHMubXRpbWVNcyA+IHRoaXMucHJldi5tdGltZU1zKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmIChzdGF0cy5ubGluayAhPT0gdGhpcy5wcmV2Lm5saW5rKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgc3RhcnQocGF0aCwgcGVyc2lzdGVudCA9IHRydWUsIGludGVydmFsID0gNTAwNykge1xuICAgICAgICB0aGlzLmZpbGVuYW1lID0gKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkocGF0aCk7XG4gICAgICAgIHRoaXMuc2V0VGltZW91dCA9IHBlcnNpc3RlbnRcbiAgICAgICAgICAgID8gc2V0VGltZW91dC5iaW5kKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiBnbG9iYWwpXG4gICAgICAgICAgICA6IHNldFRpbWVvdXRVbnJlZl8xLmRlZmF1bHQ7XG4gICAgICAgIHRoaXMuaW50ZXJ2YWwgPSBpbnRlcnZhbDtcbiAgICAgICAgdGhpcy5wcmV2ID0gdGhpcy52b2wuc3RhdFN5bmModGhpcy5maWxlbmFtZSk7XG4gICAgICAgIHRoaXMubG9vcCgpO1xuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0UmVmKTtcbiAgICAgICAgKDAsIHF1ZXVlTWljcm90YXNrXzEuZGVmYXVsdCkoKCkgPT4ge1xuICAgICAgICAgICAgZW1pdFN0b3AuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5TdGF0V2F0Y2hlciA9IFN0YXRXYXRjaGVyO1xuLyogdHNsaW50OmRpc2FibGUgbm8tdmFyLWtleXdvcmQgcHJlZmVyLWNvbnN0ICovXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFJlYWRTdHJlYW1cbnZhciBwb29sO1xuZnVuY3Rpb24gYWxsb2NOZXdQb29sKHBvb2xTaXplKSB7XG4gICAgcG9vbCA9ICgwLCBidWZmZXJfMS5idWZmZXJBbGxvY1Vuc2FmZSkocG9vbFNpemUpO1xuICAgIHBvb2wudXNlZCA9IDA7XG59XG51dGlsLmluaGVyaXRzKEZzUmVhZFN0cmVhbSwgc3RyZWFtXzEuUmVhZGFibGUpO1xuZXhwb3J0cy5SZWFkU3RyZWFtID0gRnNSZWFkU3RyZWFtO1xuZnVuY3Rpb24gRnNSZWFkU3RyZWFtKHZvbCwgcGF0aCwgb3B0aW9ucykge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBGc1JlYWRTdHJlYW0pKVxuICAgICAgICByZXR1cm4gbmV3IEZzUmVhZFN0cmVhbSh2b2wsIHBhdGgsIG9wdGlvbnMpO1xuICAgIHRoaXMuX3ZvbCA9IHZvbDtcbiAgICAvLyBhIGxpdHRsZSBiaXQgYmlnZ2VyIGJ1ZmZlciBhbmQgd2F0ZXIgbWFya3MgYnkgZGVmYXVsdFxuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCAoMCwgb3B0aW9uc18xLmdldE9wdGlvbnMpKG9wdGlvbnMsIHt9KSk7XG4gICAgaWYgKG9wdGlvbnMuaGlnaFdhdGVyTWFyayA9PT0gdW5kZWZpbmVkKVxuICAgICAgICBvcHRpb25zLmhpZ2hXYXRlck1hcmsgPSA2NCAqIDEwMjQ7XG4gICAgc3RyZWFtXzEuUmVhZGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB0aGlzLnBhdGggPSAoMCwgdXRpbF8xLnBhdGhUb0ZpbGVuYW1lKShwYXRoKTtcbiAgICB0aGlzLmZkID0gb3B0aW9ucy5mZCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IG9wdGlvbnMuZmQ7XG4gICAgdGhpcy5mbGFncyA9IG9wdGlvbnMuZmxhZ3MgPT09IHVuZGVmaW5lZCA/ICdyJyA6IG9wdGlvbnMuZmxhZ3M7XG4gICAgdGhpcy5tb2RlID0gb3B0aW9ucy5tb2RlID09PSB1bmRlZmluZWQgPyAwbzY2NiA6IG9wdGlvbnMubW9kZTtcbiAgICB0aGlzLnN0YXJ0ID0gb3B0aW9ucy5zdGFydDtcbiAgICB0aGlzLmVuZCA9IG9wdGlvbnMuZW5kO1xuICAgIHRoaXMuYXV0b0Nsb3NlID0gb3B0aW9ucy5hdXRvQ2xvc2UgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBvcHRpb25zLmF1dG9DbG9zZTtcbiAgICB0aGlzLnBvcyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmJ5dGVzUmVhZCA9IDA7XG4gICAgaWYgKHRoaXMuc3RhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuc3RhcnQgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInN0YXJ0XCIgb3B0aW9uIG11c3QgYmUgYSBOdW1iZXInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5lbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5lbmQgPSBJbmZpbml0eTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdGhpcy5lbmQgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuZFwiIG9wdGlvbiBtdXN0IGJlIGEgTnVtYmVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3RhcnQgPiB0aGlzLmVuZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcInN0YXJ0XCIgb3B0aW9uIG11c3QgYmUgPD0gXCJlbmRcIiBvcHRpb24nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBvcyA9IHRoaXMuc3RhcnQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdGhpcy5mZCAhPT0gJ251bWJlcicpXG4gICAgICAgIHRoaXMub3BlbigpO1xuICAgIHRoaXMub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuYXV0b0Nsb3NlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5kZXN0cm95KVxuICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5Gc1JlYWRTdHJlYW0ucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lIG5vLXRoaXMtYXNzaWdubWVudFxuICAgIHRoaXMuX3ZvbC5vcGVuKHRoaXMucGF0aCwgdGhpcy5mbGFncywgdGhpcy5tb2RlLCAoZXIsIGZkKSA9PiB7XG4gICAgICAgIGlmIChlcikge1xuICAgICAgICAgICAgaWYgKHNlbGYuYXV0b0Nsb3NlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuZGVzdHJveSlcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYuZmQgPSBmZDtcbiAgICAgICAgc2VsZi5lbWl0KCdvcGVuJywgZmQpO1xuICAgICAgICAvLyBzdGFydCB0aGUgZmxvdyBvZiBkYXRhLlxuICAgICAgICBzZWxmLnJlYWQoKTtcbiAgICB9KTtcbn07XG5Gc1JlYWRTdHJlYW0ucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuZmQgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9uY2UoJ29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWFkKG4pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMuZGVzdHJveWVkKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKCFwb29sIHx8IHBvb2wubGVuZ3RoIC0gcG9vbC51c2VkIDwga01pblBvb2xTcGFjZSkge1xuICAgICAgICAvLyBkaXNjYXJkIHRoZSBvbGQgcG9vbC5cbiAgICAgICAgYWxsb2NOZXdQb29sKHRoaXMuX3JlYWRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyayk7XG4gICAgfVxuICAgIC8vIEdyYWIgYW5vdGhlciByZWZlcmVuY2UgdG8gdGhlIHBvb2wgaW4gdGhlIGNhc2UgdGhhdCB3aGlsZSB3ZSdyZVxuICAgIC8vIGluIHRoZSB0aHJlYWQgcG9vbCBhbm90aGVyIHJlYWQoKSBmaW5pc2hlcyB1cCB0aGUgcG9vbCwgYW5kXG4gICAgLy8gYWxsb2NhdGVzIGEgbmV3IG9uZS5cbiAgICB2YXIgdGhpc1Bvb2wgPSBwb29sO1xuICAgIHZhciB0b1JlYWQgPSBNYXRoLm1pbihwb29sLmxlbmd0aCAtIHBvb2wudXNlZCwgbik7XG4gICAgdmFyIHN0YXJ0ID0gcG9vbC51c2VkO1xuICAgIGlmICh0aGlzLnBvcyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICB0b1JlYWQgPSBNYXRoLm1pbih0aGlzLmVuZCAtIHRoaXMucG9zICsgMSwgdG9SZWFkKTtcbiAgICAvLyBhbHJlYWR5IHJlYWQgZXZlcnl0aGluZyB3ZSB3ZXJlIHN1cHBvc2VkIHRvIHJlYWQhXG4gICAgLy8gdHJlYXQgYXMgRU9GLlxuICAgIGlmICh0b1JlYWQgPD0gMClcbiAgICAgICAgcmV0dXJuIHRoaXMucHVzaChudWxsKTtcbiAgICAvLyB0aGUgYWN0dWFsIHJlYWQuXG4gICAgdmFyIHNlbGYgPSB0aGlzOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lIG5vLXRoaXMtYXNzaWdubWVudFxuICAgIHRoaXMuX3ZvbC5yZWFkKHRoaXMuZmQsIHBvb2wsIHBvb2wudXNlZCwgdG9SZWFkLCB0aGlzLnBvcywgb25yZWFkKTtcbiAgICAvLyBtb3ZlIHRoZSBwb29sIHBvc2l0aW9ucywgYW5kIGludGVybmFsIHBvc2l0aW9uIGZvciByZWFkaW5nLlxuICAgIGlmICh0aGlzLnBvcyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICB0aGlzLnBvcyArPSB0b1JlYWQ7XG4gICAgcG9vbC51c2VkICs9IHRvUmVhZDtcbiAgICBmdW5jdGlvbiBvbnJlYWQoZXIsIGJ5dGVzUmVhZCkge1xuICAgICAgICBpZiAoZXIpIHtcbiAgICAgICAgICAgIGlmIChzZWxmLmF1dG9DbG9zZSAmJiBzZWxmLmRlc3Ryb3kpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCBlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bGw7XG4gICAgICAgICAgICBpZiAoYnl0ZXNSZWFkID4gMCkge1xuICAgICAgICAgICAgICAgIHNlbGYuYnl0ZXNSZWFkICs9IGJ5dGVzUmVhZDtcbiAgICAgICAgICAgICAgICBiID0gdGhpc1Bvb2wuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgYnl0ZXNSZWFkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYucHVzaChiKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5Gc1JlYWRTdHJlYW0ucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgICB0aGlzLmNsb3NlKGVycjIgPT4ge1xuICAgICAgICBjYihlcnIgfHwgZXJyMik7XG4gICAgfSk7XG59O1xuRnNSZWFkU3RyZWFtLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIChjYikge1xuICAgIHZhciBfYTtcbiAgICBpZiAoY2IpXG4gICAgICAgIHRoaXMub25jZSgnY2xvc2UnLCBjYik7XG4gICAgaWYgKHRoaXMuY2xvc2VkIHx8IHR5cGVvZiB0aGlzLmZkICE9PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZmQgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLm9uY2UoJ29wZW4nLCBjbG9zZU9uT3Blbik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgwLCBxdWV1ZU1pY3JvdGFza18xLmRlZmF1bHQpKCgpID0+IHRoaXMuZW1pdCgnY2xvc2UnKSk7XG4gICAgfVxuICAgIC8vIFNpbmNlIE5vZGUgMTgsIHRoZXJlIGlzIG9ubHkgYSBnZXR0ZXIgZm9yICcuY2xvc2VkJy5cbiAgICAvLyBUaGUgZmlyc3QgYnJhbmNoIG1pbWljcyBvdGhlciBzZXR0ZXJzIGZyb20gUmVhZGFibGUuXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iL3YxOC4wLjAvbGliL2ludGVybmFsL3N0cmVhbXMvcmVhZGFibGUuanMjTDEyNDNcbiAgICBpZiAodHlwZW9mICgoX2EgPSB0aGlzLl9yZWFkYWJsZVN0YXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2xvc2VkKSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuY2xvc2VkID0gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5fdm9sLmNsb3NlKHRoaXMuZmQsIGVyID0+IHtcbiAgICAgICAgaWYgKGVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdjbG9zZScpO1xuICAgIH0pO1xuICAgIHRoaXMuZmQgPSBudWxsO1xufTtcbi8vIG5lZWRlZCBiZWNhdXNlIGFzIGl0IHdpbGwgYmUgY2FsbGVkIHdpdGggYXJndW1lbnRzXG4vLyB0aGF0IGRvZXMgbm90IG1hdGNoIHRoaXMuY2xvc2UoKSBzaWduYXR1cmVcbmZ1bmN0aW9uIGNsb3NlT25PcGVuKGZkKSB7XG4gICAgdGhpcy5jbG9zZSgpO1xufVxudXRpbC5pbmhlcml0cyhGc1dyaXRlU3RyZWFtLCBzdHJlYW1fMS5Xcml0YWJsZSk7XG5leHBvcnRzLldyaXRlU3RyZWFtID0gRnNXcml0ZVN0cmVhbTtcbmZ1bmN0aW9uIEZzV3JpdGVTdHJlYW0odm9sLCBwYXRoLCBvcHRpb25zKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEZzV3JpdGVTdHJlYW0pKVxuICAgICAgICByZXR1cm4gbmV3IEZzV3JpdGVTdHJlYW0odm9sLCBwYXRoLCBvcHRpb25zKTtcbiAgICB0aGlzLl92b2wgPSB2b2w7XG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sICgwLCBvcHRpb25zXzEuZ2V0T3B0aW9ucykob3B0aW9ucywge30pKTtcbiAgICBzdHJlYW1fMS5Xcml0YWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICAgIHRoaXMucGF0aCA9ICgwLCB1dGlsXzEucGF0aFRvRmlsZW5hbWUpKHBhdGgpO1xuICAgIHRoaXMuZmQgPSBvcHRpb25zLmZkID09PSB1bmRlZmluZWQgPyBudWxsIDogb3B0aW9ucy5mZDtcbiAgICB0aGlzLmZsYWdzID0gb3B0aW9ucy5mbGFncyA9PT0gdW5kZWZpbmVkID8gJ3cnIDogb3B0aW9ucy5mbGFncztcbiAgICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgPT09IHVuZGVmaW5lZCA/IDBvNjY2IDogb3B0aW9ucy5tb2RlO1xuICAgIHRoaXMuc3RhcnQgPSBvcHRpb25zLnN0YXJ0O1xuICAgIHRoaXMuYXV0b0Nsb3NlID0gb3B0aW9ucy5hdXRvQ2xvc2UgPT09IHVuZGVmaW5lZCA/IHRydWUgOiAhIW9wdGlvbnMuYXV0b0Nsb3NlO1xuICAgIHRoaXMucG9zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYnl0ZXNXcml0dGVuID0gMDtcbiAgICB0aGlzLnBlbmRpbmcgPSB0cnVlO1xuICAgIGlmICh0aGlzLnN0YXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnN0YXJ0ICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzdGFydFwiIG9wdGlvbiBtdXN0IGJlIGEgTnVtYmVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3RhcnQgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wic3RhcnRcIiBtdXN0IGJlID49IHplcm8nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBvcyA9IHRoaXMuc3RhcnQ7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmVuY29kaW5nKVxuICAgICAgICB0aGlzLnNldERlZmF1bHRFbmNvZGluZyhvcHRpb25zLmVuY29kaW5nKTtcbiAgICBpZiAodHlwZW9mIHRoaXMuZmQgIT09ICdudW1iZXInKVxuICAgICAgICB0aGlzLm9wZW4oKTtcbiAgICAvLyBkaXNwb3NlIG9uIGZpbmlzaC5cbiAgICB0aGlzLm9uY2UoJ2ZpbmlzaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuYXV0b0Nsb3NlKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbkZzV3JpdGVTdHJlYW0ucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fdm9sLm9wZW4odGhpcy5wYXRoLCB0aGlzLmZsYWdzLCB0aGlzLm1vZGUsIGZ1bmN0aW9uIChlciwgZmQpIHtcbiAgICAgICAgaWYgKGVyKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hdXRvQ2xvc2UgJiYgdGhpcy5kZXN0cm95KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZmQgPSBmZDtcbiAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZW1pdCgnb3BlbicsIGZkKTtcbiAgICB9LmJpbmQodGhpcykpO1xufTtcbkZzV3JpdGVTdHJlYW0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBlbmNvZGluZywgY2IpIHtcbiAgICBpZiAoIShkYXRhIGluc3RhbmNlb2YgYnVmZmVyXzEuQnVmZmVyIHx8IGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KSlcbiAgICAgICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ0ludmFsaWQgZGF0YScpKTtcbiAgICBpZiAodHlwZW9mIHRoaXMuZmQgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9uY2UoJ29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLl93cml0ZShkYXRhLCBlbmNvZGluZywgY2IpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgdmFyIHNlbGYgPSB0aGlzOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lIG5vLXRoaXMtYXNzaWdubWVudFxuICAgIHRoaXMuX3ZvbC53cml0ZSh0aGlzLmZkLCBkYXRhLCAwLCBkYXRhLmxlbmd0aCwgdGhpcy5wb3MsIChlciwgYnl0ZXMpID0+IHtcbiAgICAgICAgaWYgKGVyKSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5hdXRvQ2xvc2UgJiYgc2VsZi5kZXN0cm95KSB7XG4gICAgICAgICAgICAgICAgc2VsZi5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2IoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYuYnl0ZXNXcml0dGVuICs9IGJ5dGVzO1xuICAgICAgICBjYigpO1xuICAgIH0pO1xuICAgIGlmICh0aGlzLnBvcyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICB0aGlzLnBvcyArPSBkYXRhLmxlbmd0aDtcbn07XG5Gc1dyaXRlU3RyZWFtLnByb3RvdHlwZS5fd3JpdGV2ID0gZnVuY3Rpb24gKGRhdGEsIGNiKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmZkICE9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdGhpcy5vbmNlKCdvcGVuJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5fd3JpdGV2KGRhdGEsIGNiKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHNlbGYgPSB0aGlzOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lIG5vLXRoaXMtYXNzaWdubWVudFxuICAgIGNvbnN0IGxlbiA9IGRhdGEubGVuZ3RoO1xuICAgIGNvbnN0IGNodW5rcyA9IG5ldyBBcnJheShsZW4pO1xuICAgIHZhciBzaXplID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhciBjaHVuayA9IGRhdGFbaV0uY2h1bms7XG4gICAgICAgIGNodW5rc1tpXSA9IGNodW5rO1xuICAgICAgICBzaXplICs9IGNodW5rLmxlbmd0aDtcbiAgICB9XG4gICAgY29uc3QgYnVmID0gYnVmZmVyXzEuQnVmZmVyLmNvbmNhdChjaHVua3MpO1xuICAgIHRoaXMuX3ZvbC53cml0ZSh0aGlzLmZkLCBidWYsIDAsIGJ1Zi5sZW5ndGgsIHRoaXMucG9zLCAoZXIsIGJ5dGVzKSA9PiB7XG4gICAgICAgIGlmIChlcikge1xuICAgICAgICAgICAgaWYgKHNlbGYuZGVzdHJveSlcbiAgICAgICAgICAgICAgICBzZWxmLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHJldHVybiBjYihlcik7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5ieXRlc1dyaXR0ZW4gKz0gYnl0ZXM7XG4gICAgICAgIGNiKCk7XG4gICAgfSk7XG4gICAgaWYgKHRoaXMucG9zICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHRoaXMucG9zICs9IHNpemU7XG59O1xuRnNXcml0ZVN0cmVhbS5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoY2IpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKGNiKVxuICAgICAgICB0aGlzLm9uY2UoJ2Nsb3NlJywgY2IpO1xuICAgIGlmICh0aGlzLmNsb3NlZCB8fCB0eXBlb2YgdGhpcy5mZCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmZkICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhpcy5vbmNlKCdvcGVuJywgY2xvc2VPbk9wZW4pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoMCwgcXVldWVNaWNyb3Rhc2tfMS5kZWZhdWx0KSgoKSA9PiB0aGlzLmVtaXQoJ2Nsb3NlJykpO1xuICAgIH1cbiAgICAvLyBTaW5jZSBOb2RlIDE4LCB0aGVyZSBpcyBvbmx5IGEgZ2V0dGVyIGZvciAnLmNsb3NlZCcuXG4gICAgLy8gVGhlIGZpcnN0IGJyYW5jaCBtaW1pY3Mgb3RoZXIgc2V0dGVycyBmcm9tIFdyaXRhYmxlLlxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi92MTguMC4wL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3dyaXRhYmxlLmpzI0w3NjZcbiAgICBpZiAodHlwZW9mICgoX2EgPSB0aGlzLl93cml0YWJsZVN0YXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2xvc2VkKSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuY2xvc2VkID0gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5fdm9sLmNsb3NlKHRoaXMuZmQsIGVyID0+IHtcbiAgICAgICAgaWYgKGVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdjbG9zZScpO1xuICAgIH0pO1xuICAgIHRoaXMuZmQgPSBudWxsO1xufTtcbkZzV3JpdGVTdHJlYW0ucHJvdG90eXBlLl9kZXN0cm95ID0gRnNSZWFkU3RyZWFtLnByb3RvdHlwZS5fZGVzdHJveTtcbi8vIFRoZXJlIGlzIG5vIHNodXRkb3duKCkgZm9yIGZpbGVzLlxuRnNXcml0ZVN0cmVhbS5wcm90b3R5cGUuZGVzdHJveVNvb24gPSBGc1dyaXRlU3RyZWFtLnByb3RvdHlwZS5lbmQ7XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEZTV2F0Y2hlclxuY2xhc3MgRlNXYXRjaGVyIGV4dGVuZHMgZXZlbnRzXzEuRXZlbnRFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih2b2wpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fZmlsZW5hbWUgPSAnJztcbiAgICAgICAgdGhpcy5fZmlsZW5hbWVFbmNvZGVkID0gJyc7XG4gICAgICAgIC8vIF9wZXJzaXN0ZW50OiBib29sZWFuID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcmVjdXJzaXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2VuY29kaW5nID0gZW5jb2RpbmdfMS5FTkNPRElOR19VVEY4O1xuICAgICAgICAvLyBpbm9kZSAtPiByZW1vdmVyc1xuICAgICAgICB0aGlzLl9saXN0ZW5lclJlbW92ZXJzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9vblBhcmVudENoaWxkID0gKGxpbmspID0+IHtcbiAgICAgICAgICAgIGlmIChsaW5rLmdldE5hbWUoKSA9PT0gdGhpcy5fZ2V0TmFtZSgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdCgncmVuYW1lJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2VtaXQgPSAodHlwZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdjaGFuZ2UnLCB0eXBlLCB0aGlzLl9maWxlbmFtZUVuY29kZWQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9wZXJzaXN0ID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fdGltZXIgPSBzZXRUaW1lb3V0KHRoaXMuX3BlcnNpc3QsIDFlNik7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX3ZvbCA9IHZvbDtcbiAgICAgICAgLy8gVE9ETzogRW1pdCBcImVycm9yXCIgbWVzc2FnZXMgd2hlbiB3YXRjaGluZy5cbiAgICAgICAgLy8gdGhpcy5faGFuZGxlLm9uY2hhbmdlID0gZnVuY3Rpb24oc3RhdHVzLCBldmVudFR5cGUsIGZpbGVuYW1lKSB7XG4gICAgICAgIC8vICAgICBpZiAoc3RhdHVzIDwgMCkge1xuICAgICAgICAvLyAgICAgICAgIHNlbGYuX2hhbmRsZS5jbG9zZSgpO1xuICAgICAgICAvLyAgICAgICAgIGNvbnN0IGVycm9yID0gIWZpbGVuYW1lID9cbiAgICAgICAgLy8gICAgICAgICAgICAgZXJybm9FeGNlcHRpb24oc3RhdHVzLCAnRXJyb3Igd2F0Y2hpbmcgZmlsZSBmb3IgY2hhbmdlczonKSA6XG4gICAgICAgIC8vICAgICAgICAgICAgIGVycm5vRXhjZXB0aW9uKHN0YXR1cywgYEVycm9yIHdhdGNoaW5nIGZpbGUgJHtmaWxlbmFtZX0gZm9yIGNoYW5nZXM6YCk7XG4gICAgICAgIC8vICAgICAgICAgZXJyb3IuZmlsZW5hbWUgPSBmaWxlbmFtZTtcbiAgICAgICAgLy8gICAgICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICAvLyAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gICAgICAgICBzZWxmLmVtaXQoJ2NoYW5nZScsIGV2ZW50VHlwZSwgZmlsZW5hbWUpO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9O1xuICAgIH1cbiAgICBfZ2V0TmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0ZXBzW3RoaXMuX3N0ZXBzLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgICBzdGFydChwYXRoLCBwZXJzaXN0ZW50ID0gdHJ1ZSwgcmVjdXJzaXZlID0gZmFsc2UsIGVuY29kaW5nID0gZW5jb2RpbmdfMS5FTkNPRElOR19VVEY4KSB7XG4gICAgICAgIHRoaXMuX2ZpbGVuYW1lID0gKDAsIHV0aWxfMS5wYXRoVG9GaWxlbmFtZSkocGF0aCk7XG4gICAgICAgIHRoaXMuX3N0ZXBzID0gZmlsZW5hbWVUb1N0ZXBzKHRoaXMuX2ZpbGVuYW1lKTtcbiAgICAgICAgdGhpcy5fZmlsZW5hbWVFbmNvZGVkID0gKDAsIGVuY29kaW5nXzEuc3RyVG9FbmNvZGluZykodGhpcy5fZmlsZW5hbWUpO1xuICAgICAgICAvLyB0aGlzLl9wZXJzaXN0ZW50ID0gcGVyc2lzdGVudDtcbiAgICAgICAgdGhpcy5fcmVjdXJzaXZlID0gcmVjdXJzaXZlO1xuICAgICAgICB0aGlzLl9lbmNvZGluZyA9IGVuY29kaW5nO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fbGluayA9IHRoaXMuX3ZvbC5nZXRMaW5rT3JUaHJvdyh0aGlzLl9maWxlbmFtZSwgJ0ZTV2F0Y2hlcicpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGB3YXRjaCAke3RoaXMuX2ZpbGVuYW1lfSAke2Vyci5jb2RlfWApO1xuICAgICAgICAgICAgZXJyb3IuY29kZSA9IGVyci5jb2RlO1xuICAgICAgICAgICAgZXJyb3IuZXJybm8gPSBlcnIuY29kZTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHdhdGNoTGlua05vZGVDaGFuZ2VkID0gKGxpbmspID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVwYXRoID0gbGluay5nZXRQYXRoKCk7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gbGluay5nZXROb2RlKCk7XG4gICAgICAgICAgICBjb25zdCBvbk5vZGVDaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGZpbGVuYW1lID0gcmVsYXRpdmUodGhpcy5fZmlsZW5hbWUsIGZpbGVwYXRoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWZpbGVuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lID0gdGhpcy5fZ2V0TmFtZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbWl0KCdjaGFuZ2UnLCAnY2hhbmdlJywgZmlsZW5hbWUpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG5vZGUub24oJ2NoYW5nZScsIG9uTm9kZUNoYW5nZSk7XG4gICAgICAgICAgICBjb25zdCByZW1vdmVycyA9IChfYSA9IHRoaXMuX2xpc3RlbmVyUmVtb3ZlcnMuZ2V0KG5vZGUuaW5vKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW107XG4gICAgICAgICAgICByZW1vdmVycy5wdXNoKCgpID0+IG5vZGUucmVtb3ZlTGlzdGVuZXIoJ2NoYW5nZScsIG9uTm9kZUNoYW5nZSkpO1xuICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJSZW1vdmVycy5zZXQobm9kZS5pbm8sIHJlbW92ZXJzKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgd2F0Y2hMaW5rQ2hpbGRyZW5DaGFuZ2VkID0gKGxpbmspID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBsaW5rLmdldE5vZGUoKTtcbiAgICAgICAgICAgIC8vIHdoZW4gYSBuZXcgbGluayBhZGRlZFxuICAgICAgICAgICAgY29uc3Qgb25MaW5rQ2hpbGRBZGQgPSAobCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnY2hhbmdlJywgJ3JlbmFtZScsIHJlbGF0aXZlKHRoaXMuX2ZpbGVuYW1lLCBsLmdldFBhdGgoKSkpO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyAxLiB3YXRjaCBjaGFuZ2VzIG9mIHRoZSBuZXcgbGluay1ub2RlXG4gICAgICAgICAgICAgICAgICAgIHdhdGNoTGlua05vZGVDaGFuZ2VkKGwpO1xuICAgICAgICAgICAgICAgICAgICAvLyAyLiB3YXRjaCBjaGFuZ2VzIG9mIHRoZSBuZXcgbGluay1ub2RlJ3MgY2hpbGRyZW5cbiAgICAgICAgICAgICAgICAgICAgd2F0Y2hMaW5rQ2hpbGRyZW5DaGFuZ2VkKGwpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIHdoZW4gYSBuZXcgbGluayBkZWxldGVkXG4gICAgICAgICAgICBjb25zdCBvbkxpbmtDaGlsZERlbGV0ZSA9IChsKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgb2YgdGhlIGNoaWxkcmVuIG5vZGVzXG4gICAgICAgICAgICAgICAgY29uc3QgcmVtb3ZlTGlua05vZGVMaXN0ZW5lcnMgPSAoY3VyTGluaykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbm8gPSBjdXJMaW5rLmdldE5vZGUoKS5pbm87XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbW92ZXJzID0gdGhpcy5fbGlzdGVuZXJSZW1vdmVycy5nZXQoaW5vKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlbW92ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVycy5mb3JFYWNoKHIgPT4gcigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVyUmVtb3ZlcnMuZGVsZXRlKGlubyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbbmFtZSwgY2hpbGRMaW5rXSBvZiBjdXJMaW5rLmNoaWxkcmVuLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkTGluayAmJiBuYW1lICE9PSAnLicgJiYgbmFtZSAhPT0gJy4uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUxpbmtOb2RlTGlzdGVuZXJzKGNoaWxkTGluayk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJlbW92ZUxpbmtOb2RlTGlzdGVuZXJzKGwpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnY2hhbmdlJywgJ3JlbmFtZScsIHJlbGF0aXZlKHRoaXMuX2ZpbGVuYW1lLCBsLmdldFBhdGgoKSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIGNoaWxkcmVuIG5vZGVzIGNoYW5nZWRcbiAgICAgICAgICAgIGZvciAoY29uc3QgW25hbWUsIGNoaWxkTGlua10gb2YgbGluay5jaGlsZHJlbi5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRMaW5rICYmIG5hbWUgIT09ICcuJyAmJiBuYW1lICE9PSAnLi4nKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhdGNoTGlua05vZGVDaGFuZ2VkKGNoaWxkTGluayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gbGluayBjaGlsZHJlbiBhZGQvcmVtb3ZlXG4gICAgICAgICAgICBsaW5rLm9uKCdjaGlsZDphZGQnLCBvbkxpbmtDaGlsZEFkZCk7XG4gICAgICAgICAgICBsaW5rLm9uKCdjaGlsZDpkZWxldGUnLCBvbkxpbmtDaGlsZERlbGV0ZSk7XG4gICAgICAgICAgICBjb25zdCByZW1vdmVycyA9IChfYSA9IHRoaXMuX2xpc3RlbmVyUmVtb3ZlcnMuZ2V0KG5vZGUuaW5vKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW107XG4gICAgICAgICAgICByZW1vdmVycy5wdXNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICBsaW5rLnJlbW92ZUxpc3RlbmVyKCdjaGlsZDphZGQnLCBvbkxpbmtDaGlsZEFkZCk7XG4gICAgICAgICAgICAgICAgbGluay5yZW1vdmVMaXN0ZW5lcignY2hpbGQ6ZGVsZXRlJywgb25MaW5rQ2hpbGREZWxldGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAocmVjdXJzaXZlKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbbmFtZSwgY2hpbGRMaW5rXSBvZiBsaW5rLmNoaWxkcmVuLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGRMaW5rICYmIG5hbWUgIT09ICcuJyAmJiBuYW1lICE9PSAnLi4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YXRjaExpbmtDaGlsZHJlbkNoYW5nZWQoY2hpbGRMaW5rKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgd2F0Y2hMaW5rTm9kZUNoYW5nZWQodGhpcy5fbGluayk7XG4gICAgICAgIHdhdGNoTGlua0NoaWxkcmVuQ2hhbmdlZCh0aGlzLl9saW5rKTtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5fbGluay5wYXJlbnQ7XG4gICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgIC8vIHBhcmVudC5vbignY2hpbGQ6YWRkJywgdGhpcy5fb25QYXJlbnRDaGlsZCk7XG4gICAgICAgICAgICBwYXJlbnQuc2V0TWF4TGlzdGVuZXJzKHBhcmVudC5nZXRNYXhMaXN0ZW5lcnMoKSArIDEpO1xuICAgICAgICAgICAgcGFyZW50Lm9uKCdjaGlsZDpkZWxldGUnLCB0aGlzLl9vblBhcmVudENoaWxkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGVyc2lzdGVudClcbiAgICAgICAgICAgIHRoaXMuX3BlcnNpc3QoKTtcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lcik7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyUmVtb3ZlcnMuZm9yRWFjaChyZW1vdmVycyA9PiB7XG4gICAgICAgICAgICByZW1vdmVycy5mb3JFYWNoKHIgPT4gcigpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyUmVtb3ZlcnMuY2xlYXIoKTtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5fbGluay5wYXJlbnQ7XG4gICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgIC8vIHBhcmVudC5yZW1vdmVMaXN0ZW5lcignY2hpbGQ6YWRkJywgdGhpcy5fb25QYXJlbnRDaGlsZCk7XG4gICAgICAgICAgICBwYXJlbnQucmVtb3ZlTGlzdGVuZXIoJ2NoaWxkOmRlbGV0ZScsIHRoaXMuX29uUGFyZW50Q2hpbGQpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5GU1dhdGNoZXIgPSBGU1dhdGNoZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12b2x1bWUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZpbGUgPSBleHBvcnRzLkxpbmsgPSBleHBvcnRzLk5vZGUgPSBleHBvcnRzLlNFUCA9IHZvaWQgMDtcbmNvbnN0IHByb2Nlc3NfMSA9IHJlcXVpcmUoXCIuL3Byb2Nlc3NcIik7XG5jb25zdCBidWZmZXJfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL2J1ZmZlclwiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuY29uc3QgZXZlbnRzXzEgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xuY29uc3QgU3RhdHNfMSA9IHJlcXVpcmUoXCIuL1N0YXRzXCIpO1xuY29uc3QgeyBTX0lGTVQsIFNfSUZESVIsIFNfSUZSRUcsIFNfSUZMTkssIE9fQVBQRU5EIH0gPSBjb25zdGFudHNfMS5jb25zdGFudHM7XG5jb25zdCBnZXR1aWQgPSAoKSA9PiB7IHZhciBfYSwgX2I7IHJldHVybiAoX2IgPSAoX2EgPSBwcm9jZXNzXzEuZGVmYXVsdC5nZXR1aWQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHByb2Nlc3NfMS5kZWZhdWx0KSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMDsgfTtcbmNvbnN0IGdldGdpZCA9ICgpID0+IHsgdmFyIF9hLCBfYjsgcmV0dXJuIChfYiA9IChfYSA9IHByb2Nlc3NfMS5kZWZhdWx0LmdldGdpZCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwocHJvY2Vzc18xLmRlZmF1bHQpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwOyB9O1xuZXhwb3J0cy5TRVAgPSAnLyc7XG4vKipcbiAqIE5vZGUgaW4gYSBmaWxlIHN5c3RlbSAobGlrZSBpLW5vZGUsIHYtbm9kZSkuXG4gKi9cbmNsYXNzIE5vZGUgZXh0ZW5kcyBldmVudHNfMS5FdmVudEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGlubywgcGVybSA9IDBvNjY2KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8vIFVzZXIgSUQgYW5kIGdyb3VwIElELlxuICAgICAgICB0aGlzLl91aWQgPSBnZXR1aWQoKTtcbiAgICAgICAgdGhpcy5fZ2lkID0gZ2V0Z2lkKCk7XG4gICAgICAgIHRoaXMuX2F0aW1lID0gbmV3IERhdGUoKTtcbiAgICAgICAgdGhpcy5fbXRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB0aGlzLl9jdGltZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIHRoaXMuX3Blcm0gPSAwbzY2NjsgLy8gUGVybWlzc2lvbnMgYGNobW9kYCwgYGZjaG1vZGBcbiAgICAgICAgdGhpcy5tb2RlID0gU19JRlJFRzsgLy8gU19JRkRJUiwgU19JRlJFRywgZXRjLi4gKGZpbGUgYnkgZGVmYXVsdD8pXG4gICAgICAgIC8vIE51bWJlciBvZiBoYXJkIGxpbmtzIHBvaW50aW5nIGF0IHRoaXMgTm9kZS5cbiAgICAgICAgdGhpcy5fbmxpbmsgPSAxO1xuICAgICAgICB0aGlzLl9wZXJtID0gcGVybTtcbiAgICAgICAgdGhpcy5tb2RlIHw9IHBlcm07XG4gICAgICAgIHRoaXMuaW5vID0gaW5vO1xuICAgIH1cbiAgICBzZXQgY3RpbWUoY3RpbWUpIHtcbiAgICAgICAgdGhpcy5fY3RpbWUgPSBjdGltZTtcbiAgICB9XG4gICAgZ2V0IGN0aW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY3RpbWU7XG4gICAgfVxuICAgIHNldCB1aWQodWlkKSB7XG4gICAgICAgIHRoaXMuX3VpZCA9IHVpZDtcbiAgICAgICAgdGhpcy5jdGltZSA9IG5ldyBEYXRlKCk7XG4gICAgfVxuICAgIGdldCB1aWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl91aWQ7XG4gICAgfVxuICAgIHNldCBnaWQoZ2lkKSB7XG4gICAgICAgIHRoaXMuX2dpZCA9IGdpZDtcbiAgICAgICAgdGhpcy5jdGltZSA9IG5ldyBEYXRlKCk7XG4gICAgfVxuICAgIGdldCBnaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9naWQ7XG4gICAgfVxuICAgIHNldCBhdGltZShhdGltZSkge1xuICAgICAgICB0aGlzLl9hdGltZSA9IGF0aW1lO1xuICAgICAgICB0aGlzLmN0aW1lID0gbmV3IERhdGUoKTtcbiAgICB9XG4gICAgZ2V0IGF0aW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXRpbWU7XG4gICAgfVxuICAgIHNldCBtdGltZShtdGltZSkge1xuICAgICAgICB0aGlzLl9tdGltZSA9IG10aW1lO1xuICAgICAgICB0aGlzLmN0aW1lID0gbmV3IERhdGUoKTtcbiAgICB9XG4gICAgZ2V0IG10aW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbXRpbWU7XG4gICAgfVxuICAgIHNldCBwZXJtKHBlcm0pIHtcbiAgICAgICAgdGhpcy5fcGVybSA9IHBlcm07XG4gICAgICAgIHRoaXMuY3RpbWUgPSBuZXcgRGF0ZSgpO1xuICAgIH1cbiAgICBnZXQgcGVybSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Blcm07XG4gICAgfVxuICAgIHNldCBubGluayhubGluaykge1xuICAgICAgICB0aGlzLl9ubGluayA9IG5saW5rO1xuICAgICAgICB0aGlzLmN0aW1lID0gbmV3IERhdGUoKTtcbiAgICB9XG4gICAgZ2V0IG5saW5rKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbmxpbms7XG4gICAgfVxuICAgIGdldFN0cmluZyhlbmNvZGluZyA9ICd1dGY4Jykge1xuICAgICAgICB0aGlzLmF0aW1lID0gbmV3IERhdGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnVmZmVyKCkudG9TdHJpbmcoZW5jb2RpbmcpO1xuICAgIH1cbiAgICBzZXRTdHJpbmcoc3RyKSB7XG4gICAgICAgIC8vIHRoaXMuc2V0QnVmZmVyKGJ1ZmZlckZyb20oc3RyLCAndXRmOCcpKTtcbiAgICAgICAgdGhpcy5idWYgPSAoMCwgYnVmZmVyXzEuYnVmZmVyRnJvbSkoc3RyLCAndXRmOCcpO1xuICAgICAgICB0aGlzLnRvdWNoKCk7XG4gICAgfVxuICAgIGdldEJ1ZmZlcigpIHtcbiAgICAgICAgdGhpcy5hdGltZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGlmICghdGhpcy5idWYpXG4gICAgICAgICAgICB0aGlzLnNldEJ1ZmZlcigoMCwgYnVmZmVyXzEuYnVmZmVyQWxsb2NVbnNhZmUpKDApKTtcbiAgICAgICAgcmV0dXJuICgwLCBidWZmZXJfMS5idWZmZXJGcm9tKSh0aGlzLmJ1Zik7IC8vIFJldHVybiBhIGNvcHkuXG4gICAgfVxuICAgIHNldEJ1ZmZlcihidWYpIHtcbiAgICAgICAgdGhpcy5idWYgPSAoMCwgYnVmZmVyXzEuYnVmZmVyRnJvbSkoYnVmKTsgLy8gQ3JlYXRlcyBhIGNvcHkgb2YgZGF0YS5cbiAgICAgICAgdGhpcy50b3VjaCgpO1xuICAgIH1cbiAgICBnZXRTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWYgPyB0aGlzLmJ1Zi5sZW5ndGggOiAwO1xuICAgIH1cbiAgICBzZXRNb2RlUHJvcGVydHkocHJvcGVydHkpIHtcbiAgICAgICAgdGhpcy5tb2RlID0gKHRoaXMubW9kZSAmIH5TX0lGTVQpIHwgcHJvcGVydHk7XG4gICAgfVxuICAgIHNldElzRmlsZSgpIHtcbiAgICAgICAgdGhpcy5zZXRNb2RlUHJvcGVydHkoU19JRlJFRyk7XG4gICAgfVxuICAgIHNldElzRGlyZWN0b3J5KCkge1xuICAgICAgICB0aGlzLnNldE1vZGVQcm9wZXJ0eShTX0lGRElSKTtcbiAgICB9XG4gICAgc2V0SXNTeW1saW5rKCkge1xuICAgICAgICB0aGlzLnNldE1vZGVQcm9wZXJ0eShTX0lGTE5LKTtcbiAgICB9XG4gICAgaXNGaWxlKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMubW9kZSAmIFNfSUZNVCkgPT09IFNfSUZSRUc7XG4gICAgfVxuICAgIGlzRGlyZWN0b3J5KCkge1xuICAgICAgICByZXR1cm4gKHRoaXMubW9kZSAmIFNfSUZNVCkgPT09IFNfSUZESVI7XG4gICAgfVxuICAgIGlzU3ltbGluaygpIHtcbiAgICAgICAgLy8gcmV0dXJuICEhdGhpcy5zeW1saW5rO1xuICAgICAgICByZXR1cm4gKHRoaXMubW9kZSAmIFNfSUZNVCkgPT09IFNfSUZMTks7XG4gICAgfVxuICAgIG1ha2VTeW1saW5rKHN0ZXBzKSB7XG4gICAgICAgIHRoaXMuc3ltbGluayA9IHN0ZXBzO1xuICAgICAgICB0aGlzLnNldElzU3ltbGluaygpO1xuICAgIH1cbiAgICB3cml0ZShidWYsIG9mZiA9IDAsIGxlbiA9IGJ1Zi5sZW5ndGgsIHBvcyA9IDApIHtcbiAgICAgICAgaWYgKCF0aGlzLmJ1ZilcbiAgICAgICAgICAgIHRoaXMuYnVmID0gKDAsIGJ1ZmZlcl8xLmJ1ZmZlckFsbG9jVW5zYWZlKSgwKTtcbiAgICAgICAgaWYgKHBvcyArIGxlbiA+IHRoaXMuYnVmLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgbmV3QnVmID0gKDAsIGJ1ZmZlcl8xLmJ1ZmZlckFsbG9jVW5zYWZlKShwb3MgKyBsZW4pO1xuICAgICAgICAgICAgdGhpcy5idWYuY29weShuZXdCdWYsIDAsIDAsIHRoaXMuYnVmLmxlbmd0aCk7XG4gICAgICAgICAgICB0aGlzLmJ1ZiA9IG5ld0J1ZjtcbiAgICAgICAgfVxuICAgICAgICBidWYuY29weSh0aGlzLmJ1ZiwgcG9zLCBvZmYsIG9mZiArIGxlbik7XG4gICAgICAgIHRoaXMudG91Y2goKTtcbiAgICAgICAgcmV0dXJuIGxlbjtcbiAgICB9XG4gICAgLy8gUmV0dXJucyB0aGUgbnVtYmVyIG9mIGJ5dGVzIHJlYWQuXG4gICAgcmVhZChidWYsIG9mZiA9IDAsIGxlbiA9IGJ1Zi5ieXRlTGVuZ3RoLCBwb3MgPSAwKSB7XG4gICAgICAgIHRoaXMuYXRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBpZiAoIXRoaXMuYnVmKVxuICAgICAgICAgICAgdGhpcy5idWYgPSAoMCwgYnVmZmVyXzEuYnVmZmVyQWxsb2NVbnNhZmUpKDApO1xuICAgICAgICBsZXQgYWN0dWFsTGVuID0gbGVuO1xuICAgICAgICBpZiAoYWN0dWFsTGVuID4gYnVmLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAgIGFjdHVhbExlbiA9IGJ1Zi5ieXRlTGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhY3R1YWxMZW4gKyBwb3MgPiB0aGlzLmJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFjdHVhbExlbiA9IHRoaXMuYnVmLmxlbmd0aCAtIHBvcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBidWYyID0gYnVmIGluc3RhbmNlb2YgYnVmZmVyXzEuQnVmZmVyID8gYnVmIDogYnVmZmVyXzEuQnVmZmVyLmZyb20oYnVmLmJ1ZmZlcik7XG4gICAgICAgIHRoaXMuYnVmLmNvcHkoYnVmMiwgb2ZmLCBwb3MsIHBvcyArIGFjdHVhbExlbik7XG4gICAgICAgIHJldHVybiBhY3R1YWxMZW47XG4gICAgfVxuICAgIHRydW5jYXRlKGxlbiA9IDApIHtcbiAgICAgICAgaWYgKCFsZW4pXG4gICAgICAgICAgICB0aGlzLmJ1ZiA9ICgwLCBidWZmZXJfMS5idWZmZXJBbGxvY1Vuc2FmZSkoMCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmJ1ZilcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZiA9ICgwLCBidWZmZXJfMS5idWZmZXJBbGxvY1Vuc2FmZSkoMCk7XG4gICAgICAgICAgICBpZiAobGVuIDw9IHRoaXMuYnVmLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmID0gdGhpcy5idWYuc2xpY2UoMCwgbGVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1ZiA9ICgwLCBidWZmZXJfMS5idWZmZXJBbGxvY1Vuc2FmZSkobGVuKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1Zi5jb3B5KGJ1Zik7XG4gICAgICAgICAgICAgICAgYnVmLmZpbGwoMCwgdGhpcy5idWYubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZiA9IGJ1ZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRvdWNoKCk7XG4gICAgfVxuICAgIGNobW9kKHBlcm0pIHtcbiAgICAgICAgdGhpcy5wZXJtID0gcGVybTtcbiAgICAgICAgdGhpcy5tb2RlID0gKHRoaXMubW9kZSAmIH4wbzc3NykgfCBwZXJtO1xuICAgICAgICB0aGlzLnRvdWNoKCk7XG4gICAgfVxuICAgIGNob3duKHVpZCwgZ2lkKSB7XG4gICAgICAgIHRoaXMudWlkID0gdWlkO1xuICAgICAgICB0aGlzLmdpZCA9IGdpZDtcbiAgICAgICAgdGhpcy50b3VjaCgpO1xuICAgIH1cbiAgICB0b3VjaCgpIHtcbiAgICAgICAgdGhpcy5tdGltZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIHRoaXMuZW1pdCgnY2hhbmdlJywgdGhpcyk7XG4gICAgfVxuICAgIGNhblJlYWQodWlkID0gZ2V0dWlkKCksIGdpZCA9IGdldGdpZCgpKSB7XG4gICAgICAgIGlmICh0aGlzLnBlcm0gJiA0IC8qIFMuSVJPVEggKi8pIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChnaWQgPT09IHRoaXMuZ2lkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wZXJtICYgMzIgLyogUy5JUkdSUCAqLykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh1aWQgPT09IHRoaXMudWlkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wZXJtICYgMjU2IC8qIFMuSVJVU1IgKi8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNhbldyaXRlKHVpZCA9IGdldHVpZCgpLCBnaWQgPSBnZXRnaWQoKSkge1xuICAgICAgICBpZiAodGhpcy5wZXJtICYgMiAvKiBTLklXT1RIICovKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2lkID09PSB0aGlzLmdpZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucGVybSAmIDE2IC8qIFMuSVdHUlAgKi8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodWlkID09PSB0aGlzLnVpZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucGVybSAmIDEyOCAvKiBTLklXVVNSICovKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjYW5FeGVjdXRlKHVpZCA9IGdldHVpZCgpLCBnaWQgPSBnZXRnaWQoKSkge1xuICAgICAgICBpZiAodGhpcy5wZXJtICYgMSAvKiBTLklYT1RIICovKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2lkID09PSB0aGlzLmdpZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucGVybSAmIDggLyogUy5JWEdSUCAqLykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh1aWQgPT09IHRoaXMudWlkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wZXJtICYgNjQgLyogUy5JWFVTUiAqLykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZGVsKCkge1xuICAgICAgICB0aGlzLmVtaXQoJ2RlbGV0ZScsIHRoaXMpO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbm86IHRoaXMuaW5vLFxuICAgICAgICAgICAgdWlkOiB0aGlzLnVpZCxcbiAgICAgICAgICAgIGdpZDogdGhpcy5naWQsXG4gICAgICAgICAgICBhdGltZTogdGhpcy5hdGltZS5nZXRUaW1lKCksXG4gICAgICAgICAgICBtdGltZTogdGhpcy5tdGltZS5nZXRUaW1lKCksXG4gICAgICAgICAgICBjdGltZTogdGhpcy5jdGltZS5nZXRUaW1lKCksXG4gICAgICAgICAgICBwZXJtOiB0aGlzLnBlcm0sXG4gICAgICAgICAgICBtb2RlOiB0aGlzLm1vZGUsXG4gICAgICAgICAgICBubGluazogdGhpcy5ubGluayxcbiAgICAgICAgICAgIHN5bWxpbms6IHRoaXMuc3ltbGluayxcbiAgICAgICAgICAgIGRhdGE6IHRoaXMuZ2V0U3RyaW5nKCksXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5Ob2RlID0gTm9kZTtcbi8qKlxuICogUmVwcmVzZW50cyBhIGhhcmQgbGluayB0aGF0IHBvaW50cyB0byBhbiBpLW5vZGUgYG5vZGVgLlxuICovXG5jbGFzcyBMaW5rIGV4dGVuZHMgZXZlbnRzXzEuRXZlbnRFbWl0dGVyIHtcbiAgICBnZXQgc3RlcHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGVwcztcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgc3luYyBjaGlsZHJlbiBzdGVwcywgZS5nLiBpbiBjYXNlIG9mIGRpciByZW5hbWVcbiAgICBzZXQgc3RlcHModmFsKSB7XG4gICAgICAgIHRoaXMuX3N0ZXBzID0gdmFsO1xuICAgICAgICBmb3IgKGNvbnN0IFtjaGlsZCwgbGlua10gb2YgdGhpcy5jaGlsZHJlbi5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZCA9PT0gJy4nIHx8IGNoaWxkID09PSAnLi4nKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsaW5rID09PSBudWxsIHx8IGxpbmsgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxpbmsuc3luY1N0ZXBzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3RydWN0b3Iodm9sLCBwYXJlbnQsIG5hbWUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IG5ldyBNYXAoKTtcbiAgICAgICAgLy8gUGF0aCB0byB0aGlzIG5vZGUgYXMgQXJyYXk6IFsndXNyJywgJ2JpbicsICdub2RlJ10uXG4gICAgICAgIHRoaXMuX3N0ZXBzID0gW107XG4gICAgICAgIC8vIFwiaS1ub2RlXCIgbnVtYmVyIG9mIHRoZSBub2RlLlxuICAgICAgICB0aGlzLmlubyA9IDA7XG4gICAgICAgIC8vIE51bWJlciBvZiBjaGlsZHJlbi5cbiAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLnZvbCA9IHZvbDtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuc3luY1N0ZXBzKCk7XG4gICAgfVxuICAgIHNldE5vZGUobm9kZSkge1xuICAgICAgICB0aGlzLm5vZGUgPSBub2RlO1xuICAgICAgICB0aGlzLmlubyA9IG5vZGUuaW5vO1xuICAgIH1cbiAgICBnZXROb2RlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub2RlO1xuICAgIH1cbiAgICBjcmVhdGVDaGlsZChuYW1lLCBub2RlID0gdGhpcy52b2wuY3JlYXRlTm9kZSgpKSB7XG4gICAgICAgIGNvbnN0IGxpbmsgPSBuZXcgTGluayh0aGlzLnZvbCwgdGhpcywgbmFtZSk7XG4gICAgICAgIGxpbmsuc2V0Tm9kZShub2RlKTtcbiAgICAgICAgaWYgKG5vZGUuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICAgICAgbGluay5jaGlsZHJlbi5zZXQoJy4nLCBsaW5rKTtcbiAgICAgICAgICAgIGxpbmsuZ2V0Tm9kZSgpLm5saW5rKys7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRDaGlsZChuYW1lLCBsaW5rKTtcbiAgICAgICAgcmV0dXJuIGxpbms7XG4gICAgfVxuICAgIHNldENoaWxkKG5hbWUsIGxpbmsgPSBuZXcgTGluayh0aGlzLnZvbCwgdGhpcywgbmFtZSkpIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5zZXQobmFtZSwgbGluayk7XG4gICAgICAgIGxpbmsucGFyZW50ID0gdGhpcztcbiAgICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgICAgY29uc3Qgbm9kZSA9IGxpbmsuZ2V0Tm9kZSgpO1xuICAgICAgICBpZiAobm9kZS5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgICAgICBsaW5rLmNoaWxkcmVuLnNldCgnLi4nLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZ2V0Tm9kZSgpLm5saW5rKys7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5nZXROb2RlKCkubXRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB0aGlzLmVtaXQoJ2NoaWxkOmFkZCcsIGxpbmssIHRoaXMpO1xuICAgICAgICByZXR1cm4gbGluaztcbiAgICB9XG4gICAgZGVsZXRlQ2hpbGQobGluaykge1xuICAgICAgICBjb25zdCBub2RlID0gbGluay5nZXROb2RlKCk7XG4gICAgICAgIGlmIChub2RlLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgICAgIGxpbmsuY2hpbGRyZW4uZGVsZXRlKCcuLicpO1xuICAgICAgICAgICAgdGhpcy5nZXROb2RlKCkubmxpbmstLTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNoaWxkcmVuLmRlbGV0ZShsaW5rLmdldE5hbWUoKSk7XG4gICAgICAgIHRoaXMubGVuZ3RoLS07XG4gICAgICAgIHRoaXMuZ2V0Tm9kZSgpLm10aW1lID0gbmV3IERhdGUoKTtcbiAgICAgICAgdGhpcy5lbWl0KCdjaGlsZDpkZWxldGUnLCBsaW5rLCB0aGlzKTtcbiAgICB9XG4gICAgZ2V0Q2hpbGQobmFtZSkge1xuICAgICAgICB0aGlzLmdldE5vZGUoKS5tdGltZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuLmdldChuYW1lKTtcbiAgICB9XG4gICAgZ2V0UGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RlcHMuam9pbihleHBvcnRzLlNFUCk7XG4gICAgfVxuICAgIGdldFBhcmVudFBhdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0ZXBzLnNsaWNlKDAsIC0xKS5qb2luKGV4cG9ydHMuU0VQKTtcbiAgICB9XG4gICAgZ2V0TmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RlcHNbdGhpcy5zdGVwcy5sZW5ndGggLSAxXTtcbiAgICB9XG4gICAgLy8gZGVsKCkge1xuICAgIC8vICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLnBhcmVudDtcbiAgICAvLyAgICAgaWYocGFyZW50KSB7XG4gICAgLy8gICAgICAgICBwYXJlbnQuZGVsZXRlQ2hpbGQobGluayk7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgIC8vICAgICB0aGlzLnZvbCA9IG51bGw7XG4gICAgLy8gfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0ZXBzOiB0aGlzLnN0ZXBzLFxuICAgICAgICAgICAgaW5vOiB0aGlzLmlubyxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBBcnJheS5mcm9tKHRoaXMuY2hpbGRyZW4ua2V5cygpKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc3luY1N0ZXBzKCkge1xuICAgICAgICB0aGlzLnN0ZXBzID0gdGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC5zdGVwcy5jb25jYXQoW3RoaXMubmFtZV0pIDogW3RoaXMubmFtZV07XG4gICAgfVxufVxuZXhwb3J0cy5MaW5rID0gTGluaztcbi8qKlxuICogUmVwcmVzZW50cyBhbiBvcGVuIGZpbGUgKGZpbGUgZGVzY3JpcHRvcikgdGhhdCBwb2ludHMgdG8gYSBgTGlua2AgKEhhcmQtbGluaykgYW5kIGEgYE5vZGVgLlxuICovXG5jbGFzcyBGaWxlIHtcbiAgICAvKipcbiAgICAgKiBPcGVuIGEgTGluay1Ob2RlIHBhaXIuIGBub2RlYCBpcyBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHRoYXQgbWlnaHQgYmUgYSBkaWZmZXJlbnQgbm9kZVxuICAgICAqIHJhdGhlciB0aGUgb25lIGBsaW5rYCBwb2ludHMgdG8sIGJlY2F1c2UgaXQgbWlnaHQgYmUgYSBzeW1saW5rLlxuICAgICAqIEBwYXJhbSBsaW5rXG4gICAgICogQHBhcmFtIG5vZGVcbiAgICAgKiBAcGFyYW0gZmxhZ3NcbiAgICAgKiBAcGFyYW0gZmRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihsaW5rLCBub2RlLCBmbGFncywgZmQpIHtcbiAgICAgICAgdGhpcy5saW5rID0gbGluaztcbiAgICAgICAgdGhpcy5ub2RlID0gbm9kZTtcbiAgICAgICAgdGhpcy5mbGFncyA9IGZsYWdzO1xuICAgICAgICB0aGlzLmZkID0gZmQ7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSAwO1xuICAgICAgICBpZiAodGhpcy5mbGFncyAmIE9fQVBQRU5EKVxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHRoaXMuZ2V0U2l6ZSgpO1xuICAgIH1cbiAgICBnZXRTdHJpbmcoZW5jb2RpbmcgPSAndXRmOCcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZS5nZXRTdHJpbmcoKTtcbiAgICB9XG4gICAgc2V0U3RyaW5nKHN0cikge1xuICAgICAgICB0aGlzLm5vZGUuc2V0U3RyaW5nKHN0cik7XG4gICAgfVxuICAgIGdldEJ1ZmZlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZS5nZXRCdWZmZXIoKTtcbiAgICB9XG4gICAgc2V0QnVmZmVyKGJ1Zikge1xuICAgICAgICB0aGlzLm5vZGUuc2V0QnVmZmVyKGJ1Zik7XG4gICAgfVxuICAgIGdldFNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGUuZ2V0U2l6ZSgpO1xuICAgIH1cbiAgICB0cnVuY2F0ZShsZW4pIHtcbiAgICAgICAgdGhpcy5ub2RlLnRydW5jYXRlKGxlbik7XG4gICAgfVxuICAgIHNlZWtUbyhwb3NpdGlvbikge1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG4gICAgfVxuICAgIHN0YXRzKCkge1xuICAgICAgICByZXR1cm4gU3RhdHNfMS5kZWZhdWx0LmJ1aWxkKHRoaXMubm9kZSk7XG4gICAgfVxuICAgIHdyaXRlKGJ1Ziwgb2Zmc2V0ID0gMCwgbGVuZ3RoID0gYnVmLmxlbmd0aCwgcG9zaXRpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwb3NpdGlvbiAhPT0gJ251bWJlcicpXG4gICAgICAgICAgICBwb3NpdGlvbiA9IHRoaXMucG9zaXRpb247XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gdGhpcy5ub2RlLndyaXRlKGJ1Ziwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uICsgYnl0ZXM7XG4gICAgICAgIHJldHVybiBieXRlcztcbiAgICB9XG4gICAgcmVhZChidWYsIG9mZnNldCA9IDAsIGxlbmd0aCA9IGJ1Zi5ieXRlTGVuZ3RoLCBwb3NpdGlvbikge1xuICAgICAgICBpZiAodHlwZW9mIHBvc2l0aW9uICE9PSAnbnVtYmVyJylcbiAgICAgICAgICAgIHBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbjtcbiAgICAgICAgY29uc3QgYnl0ZXMgPSB0aGlzLm5vZGUucmVhZChidWYsIG9mZnNldCwgbGVuZ3RoLCBwb3NpdGlvbik7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbiArIGJ5dGVzO1xuICAgICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfVxuICAgIGNobW9kKHBlcm0pIHtcbiAgICAgICAgdGhpcy5ub2RlLmNobW9kKHBlcm0pO1xuICAgIH1cbiAgICBjaG93bih1aWQsIGdpZCkge1xuICAgICAgICB0aGlzLm5vZGUuY2hvd24odWlkLCBnaWQpO1xuICAgIH1cbn1cbmV4cG9ydHMuRmlsZSA9IEZpbGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xubGV0IF9zZXRJbW1lZGlhdGU7XG5pZiAodHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJylcbiAgICBfc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlLmJpbmQodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IGdsb2JhbCk7XG5lbHNlXG4gICAgX3NldEltbWVkaWF0ZSA9IHNldFRpbWVvdXQuYmluZCh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogZ2xvYmFsKTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9zZXRJbW1lZGlhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXRJbW1lZGlhdGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIGBzZXRUaW1lb3V0VW5yZWZgIGlzIGp1c3QgbGlrZSBgc2V0VGltZW91dGAsXG4gKiBvbmx5IGluIE5vZGUncyBlbnZpcm9ubWVudCBpdCB3aWxsIFwidW5yZWZcIiBpdHMgbWFjcm8gdGFzay5cbiAqL1xuZnVuY3Rpb24gc2V0VGltZW91dFVucmVmKGNhbGxiYWNrLCB0aW1lLCBhcmdzKSB7XG4gICAgY29uc3QgcmVmID0gc2V0VGltZW91dC5hcHBseSh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogZ2xvYmFsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZWYgJiYgdHlwZW9mIHJlZiA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHJlZi51bnJlZiA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgcmVmLnVucmVmKCk7XG4gICAgcmV0dXJuIHJlZjtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHNldFRpbWVvdXRVbnJlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNldFRpbWVvdXRVbnJlZi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRmlsZUhhbmRsZSA9IHZvaWQgMDtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5jbGFzcyBGaWxlSGFuZGxlIHtcbiAgICBjb25zdHJ1Y3RvcihmcywgZmQpIHtcbiAgICAgICAgdGhpcy5mcyA9IGZzO1xuICAgICAgICB0aGlzLmZkID0gZmQ7XG4gICAgfVxuICAgIGFwcGVuZEZpbGUoZGF0YSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gKDAsIHV0aWxfMS5wcm9taXNpZnkpKHRoaXMuZnMsICdhcHBlbmRGaWxlJykodGhpcy5mZCwgZGF0YSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGNobW9kKG1vZGUpIHtcbiAgICAgICAgcmV0dXJuICgwLCB1dGlsXzEucHJvbWlzaWZ5KSh0aGlzLmZzLCAnZmNobW9kJykodGhpcy5mZCwgbW9kZSk7XG4gICAgfVxuICAgIGNob3duKHVpZCwgZ2lkKSB7XG4gICAgICAgIHJldHVybiAoMCwgdXRpbF8xLnByb21pc2lmeSkodGhpcy5mcywgJ2ZjaG93bicpKHRoaXMuZmQsIHVpZCwgZ2lkKTtcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHJldHVybiAoMCwgdXRpbF8xLnByb21pc2lmeSkodGhpcy5mcywgJ2Nsb3NlJykodGhpcy5mZCk7XG4gICAgfVxuICAgIGRhdGFzeW5jKCkge1xuICAgICAgICByZXR1cm4gKDAsIHV0aWxfMS5wcm9taXNpZnkpKHRoaXMuZnMsICdmZGF0YXN5bmMnKSh0aGlzLmZkKTtcbiAgICB9XG4gICAgcmVhZGFibGVXZWJTdHJlYW0ob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IFJlYWRhYmxlU3RyZWFtKHtcbiAgICAgICAgICAgIHB1bGw6IGFzeW5jIChjb250cm9sbGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMucmVhZEZpbGUoKTtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoZGF0YSk7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlYWQoYnVmZmVyLCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuICgwLCB1dGlsXzEucHJvbWlzaWZ5KSh0aGlzLmZzLCAncmVhZCcsIGJ5dGVzUmVhZCA9PiAoeyBieXRlc1JlYWQsIGJ1ZmZlciB9KSkodGhpcy5mZCwgYnVmZmVyLCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24pO1xuICAgIH1cbiAgICByZWFkdihidWZmZXJzLCBwb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gKDAsIHV0aWxfMS5wcm9taXNpZnkpKHRoaXMuZnMsICdyZWFkdicsIGJ5dGVzUmVhZCA9PiAoeyBieXRlc1JlYWQsIGJ1ZmZlcnMgfSkpKHRoaXMuZmQsIGJ1ZmZlcnMsIHBvc2l0aW9uKTtcbiAgICB9XG4gICAgcmVhZEZpbGUob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gKDAsIHV0aWxfMS5wcm9taXNpZnkpKHRoaXMuZnMsICdyZWFkRmlsZScpKHRoaXMuZmQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0KG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuICgwLCB1dGlsXzEucHJvbWlzaWZ5KSh0aGlzLmZzLCAnZnN0YXQnKSh0aGlzLmZkLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3luYygpIHtcbiAgICAgICAgcmV0dXJuICgwLCB1dGlsXzEucHJvbWlzaWZ5KSh0aGlzLmZzLCAnZnN5bmMnKSh0aGlzLmZkKTtcbiAgICB9XG4gICAgdHJ1bmNhdGUobGVuKSB7XG4gICAgICAgIHJldHVybiAoMCwgdXRpbF8xLnByb21pc2lmeSkodGhpcy5mcywgJ2Z0cnVuY2F0ZScpKHRoaXMuZmQsIGxlbik7XG4gICAgfVxuICAgIHV0aW1lcyhhdGltZSwgbXRpbWUpIHtcbiAgICAgICAgcmV0dXJuICgwLCB1dGlsXzEucHJvbWlzaWZ5KSh0aGlzLmZzLCAnZnV0aW1lcycpKHRoaXMuZmQsIGF0aW1lLCBtdGltZSk7XG4gICAgfVxuICAgIHdyaXRlKGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiAoMCwgdXRpbF8xLnByb21pc2lmeSkodGhpcy5mcywgJ3dyaXRlJywgYnl0ZXNXcml0dGVuID0+ICh7IGJ5dGVzV3JpdHRlbiwgYnVmZmVyIH0pKSh0aGlzLmZkLCBidWZmZXIsIG9mZnNldCwgbGVuZ3RoLCBwb3NpdGlvbik7XG4gICAgfVxuICAgIHdyaXRldihidWZmZXJzLCBwb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gKDAsIHV0aWxfMS5wcm9taXNpZnkpKHRoaXMuZnMsICd3cml0ZXYnLCBieXRlc1dyaXR0ZW4gPT4gKHsgYnl0ZXNXcml0dGVuLCBidWZmZXJzIH0pKSh0aGlzLmZkLCBidWZmZXJzLCBwb3NpdGlvbik7XG4gICAgfVxuICAgIHdyaXRlRmlsZShkYXRhLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAoMCwgdXRpbF8xLnByb21pc2lmeSkodGhpcy5mcywgJ3dyaXRlRmlsZScpKHRoaXMuZmQsIGRhdGEsIG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuRmlsZUhhbmRsZSA9IEZpbGVIYW5kbGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1GaWxlSGFuZGxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Gc1Byb21pc2VzID0gdm9pZCAwO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcbmNsYXNzIEZzUHJvbWlzZXMge1xuICAgIGNvbnN0cnVjdG9yKGZzLCBGaWxlSGFuZGxlKSB7XG4gICAgICAgIHRoaXMuZnMgPSBmcztcbiAgICAgICAgdGhpcy5GaWxlSGFuZGxlID0gRmlsZUhhbmRsZTtcbiAgICAgICAgdGhpcy5jb25zdGFudHMgPSBjb25zdGFudHNfMS5jb25zdGFudHM7XG4gICAgICAgIHRoaXMuY3AgPSAoMCwgdXRpbF8xLnByb21pc2lmeSkodGhpcy5mcywgJ2NwJyk7XG4gICAgICAgIHRoaXMub3BlbmRpciA9ICgwLCB1dGlsXzEucHJvbWlzaWZ5KSh0aGlzLmZzLCAnb3BlbmRpcicpO1xuICAgICAgICB0aGlzLnN0YXRmcyA9ICgwLCB1dGlsXzEucHJvbWlzaWZ5KSh0aGlzLmZzLCAnc3RhdGZzJyk7XG4gICAgICAgIHRoaXMubHV0aW1lcyA9ICgwLCB1dGlsXzEucHJvbWlzaWZ5KSh0aGlzLmZzLCAnbHV0aW1lcycpO1xuICAgICAgICB0aGlzLmFjY2VzcyA9ICgwLCB1dGlsXzEucHJvbWlzaWZ5KSh0aGlzLmZzLCAnYWNjZXNzJyk7XG4gICAgICAgIHRoaXMuY2htb2QgPSAoMCwgdXRpbF8xLnByb21pc2lmeSkodGhpcy5mcywgJ2NobW9kJyk7XG4gICAgICAgIHRoaXMuY2hvd24gPSAoMCwgdXRpbF8xLnByb21pc2lmeSkodGhpcy5mcywgJ2Nob3duJyk7XG4gICAgICAgIHRoaXMuY29weUZpbGUgPSAoMCwgdXRpbF8xLnByb21pc2lmeSkodGhpcy5mcywgJ2NvcHlGaWxlJyk7XG4gICAgICAgIHRoaXMubGNobW9kID0gKDAsIHV0aWxfMS5wcm9taXNpZnkpKHRoaXMuZnMsICdsY2htb2QnKTtcbiAgICAgICAgdGhpcy5sY2hvd24gPSAoMCwgdXRpbF8xLnByb21pc2lmeSkodGhpcy5mcywgJ2xjaG93bicpO1xuICAgICAgICB0aGlzLmxpbmsgPSAoMCwgdXRpbF8xLnByb21pc2lmeSkodGhpcy5mcywgJ2xpbmsnKTtcbiAgICAgICAgdGhpcy5sc3RhdCA9ICgwLCB1dGlsXzEucHJvbWlzaWZ5KSh0aGlzLmZzLCAnbHN0YXQnKTtcbiAgICAgICAgdGhpcy5ta2RpciA9ICgwLCB1dGlsXzEucHJvbWlzaWZ5KSh0aGlzLmZzLCAnbWtkaXInKTtcbiAgICAgICAgdGhpcy5ta2R0ZW1wID0gKDAsIHV0aWxfMS5wcm9taXNpZnkpKHRoaXMuZnMsICdta2R0ZW1wJyk7XG4gICAgICAgIHRoaXMucmVhZGRpciA9ICgwLCB1dGlsXzEucHJvbWlzaWZ5KSh0aGlzLmZzLCAncmVhZGRpcicpO1xuICAgICAgICB0aGlzLnJlYWRsaW5rID0gKDAsIHV0aWxfMS5wcm9taXNpZnkpKHRoaXMuZnMsICdyZWFkbGluaycpO1xuICAgICAgICB0aGlzLnJlYWxwYXRoID0gKDAsIHV0aWxfMS5wcm9taXNpZnkpKHRoaXMuZnMsICdyZWFscGF0aCcpO1xuICAgICAgICB0aGlzLnJlbmFtZSA9ICgwLCB1dGlsXzEucHJvbWlzaWZ5KSh0aGlzLmZzLCAncmVuYW1lJyk7XG4gICAgICAgIHRoaXMucm1kaXIgPSAoMCwgdXRpbF8xLnByb21pc2lmeSkodGhpcy5mcywgJ3JtZGlyJyk7XG4gICAgICAgIHRoaXMucm0gPSAoMCwgdXRpbF8xLnByb21pc2lmeSkodGhpcy5mcywgJ3JtJyk7XG4gICAgICAgIHRoaXMuc3RhdCA9ICgwLCB1dGlsXzEucHJvbWlzaWZ5KSh0aGlzLmZzLCAnc3RhdCcpO1xuICAgICAgICB0aGlzLnN5bWxpbmsgPSAoMCwgdXRpbF8xLnByb21pc2lmeSkodGhpcy5mcywgJ3N5bWxpbmsnKTtcbiAgICAgICAgdGhpcy50cnVuY2F0ZSA9ICgwLCB1dGlsXzEucHJvbWlzaWZ5KSh0aGlzLmZzLCAndHJ1bmNhdGUnKTtcbiAgICAgICAgdGhpcy51bmxpbmsgPSAoMCwgdXRpbF8xLnByb21pc2lmeSkodGhpcy5mcywgJ3VubGluaycpO1xuICAgICAgICB0aGlzLnV0aW1lcyA9ICgwLCB1dGlsXzEucHJvbWlzaWZ5KSh0aGlzLmZzLCAndXRpbWVzJyk7XG4gICAgICAgIHRoaXMucmVhZEZpbGUgPSAoaWQsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoMCwgdXRpbF8xLnByb21pc2lmeSkodGhpcy5mcywgJ3JlYWRGaWxlJykoaWQgaW5zdGFuY2VvZiB0aGlzLkZpbGVIYW5kbGUgPyBpZC5mZCA6IGlkLCBvcHRpb25zKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hcHBlbmRGaWxlID0gKHBhdGgsIGRhdGEsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoMCwgdXRpbF8xLnByb21pc2lmeSkodGhpcy5mcywgJ2FwcGVuZEZpbGUnKShwYXRoIGluc3RhbmNlb2YgdGhpcy5GaWxlSGFuZGxlID8gcGF0aC5mZCA6IHBhdGgsIGRhdGEsIG9wdGlvbnMpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9wZW4gPSAocGF0aCwgZmxhZ3MgPSAncicsIG1vZGUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoMCwgdXRpbF8xLnByb21pc2lmeSkodGhpcy5mcywgJ29wZW4nLCBmZCA9PiBuZXcgdGhpcy5GaWxlSGFuZGxlKHRoaXMuZnMsIGZkKSkocGF0aCwgZmxhZ3MsIG1vZGUpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLndyaXRlRmlsZSA9IChpZCwgZGF0YSwgb3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGF0YVByb21pc2UgPSAoMCwgdXRpbF8xLmlzUmVhZGFibGVTdHJlYW0pKGRhdGEpID8gKDAsIHV0aWxfMS5zdHJlYW1Ub0J1ZmZlcikoZGF0YSkgOiBQcm9taXNlLnJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gZGF0YVByb21pc2UudGhlbihkYXRhID0+ICgwLCB1dGlsXzEucHJvbWlzaWZ5KSh0aGlzLmZzLCAnd3JpdGVGaWxlJykoaWQgaW5zdGFuY2VvZiB0aGlzLkZpbGVIYW5kbGUgPyBpZC5mZCA6IGlkLCBkYXRhLCBvcHRpb25zKSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMud2F0Y2ggPSAoKSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuRnNQcm9taXNlcyA9IEZzUHJvbWlzZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Gc1Byb21pc2VzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRXcml0ZUZpbGVPcHRpb25zID0gZXhwb3J0cy53cml0ZUZpbGVEZWZhdWx0cyA9IGV4cG9ydHMuZ2V0UmVhbHBhdGhPcHRzQW5kQ2IgPSBleHBvcnRzLmdldFJlYWxwYXRoT3B0aW9ucyA9IGV4cG9ydHMuZ2V0U3RhdE9wdHNBbmRDYiA9IGV4cG9ydHMuZ2V0U3RhdE9wdGlvbnMgPSBleHBvcnRzLmdldEFwcGVuZEZpbGVPcHRzQW5kQ2IgPSBleHBvcnRzLmdldEFwcGVuZEZpbGVPcHRzID0gZXhwb3J0cy5nZXRPcGVuZGlyT3B0c0FuZENiID0gZXhwb3J0cy5nZXRPcGVuZGlyT3B0aW9ucyA9IGV4cG9ydHMuZ2V0UmVhZGRpck9wdHNBbmRDYiA9IGV4cG9ydHMuZ2V0UmVhZGRpck9wdGlvbnMgPSBleHBvcnRzLmdldFJlYWRGaWxlT3B0aW9ucyA9IGV4cG9ydHMuZ2V0Um1PcHRzQW5kQ2IgPSBleHBvcnRzLmdldFJtZGlyT3B0aW9ucyA9IGV4cG9ydHMuZ2V0RGVmYXVsdE9wdHNBbmRDYiA9IGV4cG9ydHMuZ2V0RGVmYXVsdE9wdHMgPSBleHBvcnRzLm9wdHNEZWZhdWx0cyA9IGV4cG9ydHMuZ2V0TWtkaXJPcHRpb25zID0gdm9pZCAwO1xuZXhwb3J0cy5nZXRPcHRpb25zID0gZ2V0T3B0aW9ucztcbmV4cG9ydHMub3B0c0dlbmVyYXRvciA9IG9wdHNHZW5lcmF0b3I7XG5leHBvcnRzLm9wdHNBbmRDYkdlbmVyYXRvciA9IG9wdHNBbmRDYkdlbmVyYXRvcjtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuY29uc3QgZW5jb2RpbmdfMSA9IHJlcXVpcmUoXCIuLi9lbmNvZGluZ1wiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5jb25zdCBta2RpckRlZmF1bHRzID0ge1xuICAgIG1vZGU6IDUxMSAvKiBNT0RFLkRJUiAqLyxcbiAgICByZWN1cnNpdmU6IGZhbHNlLFxufTtcbmNvbnN0IGdldE1rZGlyT3B0aW9ucyA9IChvcHRpb25zKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnbnVtYmVyJylcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIG1rZGlyRGVmYXVsdHMsIHsgbW9kZTogb3B0aW9ucyB9KTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgbWtkaXJEZWZhdWx0cywgb3B0aW9ucyk7XG59O1xuZXhwb3J0cy5nZXRNa2Rpck9wdGlvbnMgPSBnZXRNa2Rpck9wdGlvbnM7XG5jb25zdCBFUlJTVFJfT1BUUyA9IHRpcGVvZiA9PiBgRXhwZWN0ZWQgb3B0aW9ucyB0byBiZSBlaXRoZXIgYW4gb2JqZWN0IG9yIGEgc3RyaW5nLCBidXQgZ290ICR7dGlwZW9mfSBpbnN0ZWFkYDtcbmZ1bmN0aW9uIGdldE9wdGlvbnMoZGVmYXVsdHMsIG9wdGlvbnMpIHtcbiAgICBsZXQgb3B0cztcbiAgICBpZiAoIW9wdGlvbnMpXG4gICAgICAgIHJldHVybiBkZWZhdWx0cztcbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgdGlwZW9mID0gdHlwZW9mIG9wdGlvbnM7XG4gICAgICAgIHN3aXRjaCAodGlwZW9mKSB7XG4gICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgICAgIG9wdHMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0cywgeyBlbmNvZGluZzogb3B0aW9ucyB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgICAgICAgICAgb3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKEVSUlNUUl9PUFRTKHRpcGVvZikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRzLmVuY29kaW5nICE9PSAnYnVmZmVyJylcbiAgICAgICAgKDAsIGVuY29kaW5nXzEuYXNzZXJ0RW5jb2RpbmcpKG9wdHMuZW5jb2RpbmcpO1xuICAgIHJldHVybiBvcHRzO1xufVxuZnVuY3Rpb24gb3B0c0dlbmVyYXRvcihkZWZhdWx0cykge1xuICAgIHJldHVybiBvcHRpb25zID0+IGdldE9wdGlvbnMoZGVmYXVsdHMsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gb3B0c0FuZENiR2VuZXJhdG9yKGdldE9wdHMpIHtcbiAgICByZXR1cm4gKG9wdGlvbnMsIGNhbGxiYWNrKSA9PiB0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJyA/IFtnZXRPcHRzKCksIG9wdGlvbnNdIDogW2dldE9wdHMob3B0aW9ucyksICgwLCB1dGlsXzEudmFsaWRhdGVDYWxsYmFjaykoY2FsbGJhY2spXTtcbn1cbmV4cG9ydHMub3B0c0RlZmF1bHRzID0ge1xuICAgIGVuY29kaW5nOiAndXRmOCcsXG59O1xuZXhwb3J0cy5nZXREZWZhdWx0T3B0cyA9IG9wdHNHZW5lcmF0b3IoZXhwb3J0cy5vcHRzRGVmYXVsdHMpO1xuZXhwb3J0cy5nZXREZWZhdWx0T3B0c0FuZENiID0gb3B0c0FuZENiR2VuZXJhdG9yKGV4cG9ydHMuZ2V0RGVmYXVsdE9wdHMpO1xuY29uc3Qgcm1kaXJEZWZhdWx0cyA9IHtcbiAgICByZWN1cnNpdmU6IGZhbHNlLFxufTtcbmNvbnN0IGdldFJtZGlyT3B0aW9ucyA9IChvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHJtZGlyRGVmYXVsdHMsIG9wdGlvbnMpO1xufTtcbmV4cG9ydHMuZ2V0Um1kaXJPcHRpb25zID0gZ2V0Um1kaXJPcHRpb25zO1xuY29uc3QgZ2V0Um1PcHRzID0gb3B0c0dlbmVyYXRvcihleHBvcnRzLm9wdHNEZWZhdWx0cyk7XG5leHBvcnRzLmdldFJtT3B0c0FuZENiID0gb3B0c0FuZENiR2VuZXJhdG9yKGdldFJtT3B0cyk7XG5jb25zdCByZWFkRmlsZU9wdHNEZWZhdWx0cyA9IHtcbiAgICBmbGFnOiAncicsXG59O1xuZXhwb3J0cy5nZXRSZWFkRmlsZU9wdGlvbnMgPSBvcHRzR2VuZXJhdG9yKHJlYWRGaWxlT3B0c0RlZmF1bHRzKTtcbmNvbnN0IHJlYWRkaXJEZWZhdWx0cyA9IHtcbiAgICBlbmNvZGluZzogJ3V0ZjgnLFxuICAgIHJlY3Vyc2l2ZTogZmFsc2UsXG4gICAgd2l0aEZpbGVUeXBlczogZmFsc2UsXG59O1xuZXhwb3J0cy5nZXRSZWFkZGlyT3B0aW9ucyA9IG9wdHNHZW5lcmF0b3IocmVhZGRpckRlZmF1bHRzKTtcbmV4cG9ydHMuZ2V0UmVhZGRpck9wdHNBbmRDYiA9IG9wdHNBbmRDYkdlbmVyYXRvcihleHBvcnRzLmdldFJlYWRkaXJPcHRpb25zKTtcbmNvbnN0IG9wZW5kaXJEZWZhdWx0cyA9IHtcbiAgICBlbmNvZGluZzogJ3V0ZjgnLFxuICAgIGJ1ZmZlclNpemU6IDMyLFxuICAgIHJlY3Vyc2l2ZTogZmFsc2UsXG59O1xuZXhwb3J0cy5nZXRPcGVuZGlyT3B0aW9ucyA9IG9wdHNHZW5lcmF0b3Iob3BlbmRpckRlZmF1bHRzKTtcbmV4cG9ydHMuZ2V0T3BlbmRpck9wdHNBbmRDYiA9IG9wdHNBbmRDYkdlbmVyYXRvcihleHBvcnRzLmdldE9wZW5kaXJPcHRpb25zKTtcbmNvbnN0IGFwcGVuZEZpbGVEZWZhdWx0cyA9IHtcbiAgICBlbmNvZGluZzogJ3V0ZjgnLFxuICAgIG1vZGU6IDQzOCAvKiBNT0RFLkRFRkFVTFQgKi8sXG4gICAgZmxhZzogY29uc3RhbnRzXzEuRkxBR1NbY29uc3RhbnRzXzEuRkxBR1MuYV0sXG59O1xuZXhwb3J0cy5nZXRBcHBlbmRGaWxlT3B0cyA9IG9wdHNHZW5lcmF0b3IoYXBwZW5kRmlsZURlZmF1bHRzKTtcbmV4cG9ydHMuZ2V0QXBwZW5kRmlsZU9wdHNBbmRDYiA9IG9wdHNBbmRDYkdlbmVyYXRvcihleHBvcnRzLmdldEFwcGVuZEZpbGVPcHRzKTtcbmNvbnN0IHN0YXREZWZhdWx0cyA9IHtcbiAgICBiaWdpbnQ6IGZhbHNlLFxufTtcbmNvbnN0IGdldFN0YXRPcHRpb25zID0gKG9wdGlvbnMgPSB7fSkgPT4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdERlZmF1bHRzLCBvcHRpb25zKTtcbmV4cG9ydHMuZ2V0U3RhdE9wdGlvbnMgPSBnZXRTdGF0T3B0aW9ucztcbmNvbnN0IGdldFN0YXRPcHRzQW5kQ2IgPSAob3B0aW9ucywgY2FsbGJhY2spID0+IHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nID8gWygwLCBleHBvcnRzLmdldFN0YXRPcHRpb25zKSgpLCBvcHRpb25zXSA6IFsoMCwgZXhwb3J0cy5nZXRTdGF0T3B0aW9ucykob3B0aW9ucyksICgwLCB1dGlsXzEudmFsaWRhdGVDYWxsYmFjaykoY2FsbGJhY2spXTtcbmV4cG9ydHMuZ2V0U3RhdE9wdHNBbmRDYiA9IGdldFN0YXRPcHRzQW5kQ2I7XG5jb25zdCByZWFscGF0aERlZmF1bHRzID0gZXhwb3J0cy5vcHRzRGVmYXVsdHM7XG5leHBvcnRzLmdldFJlYWxwYXRoT3B0aW9ucyA9IG9wdHNHZW5lcmF0b3IocmVhbHBhdGhEZWZhdWx0cyk7XG5leHBvcnRzLmdldFJlYWxwYXRoT3B0c0FuZENiID0gb3B0c0FuZENiR2VuZXJhdG9yKGV4cG9ydHMuZ2V0UmVhbHBhdGhPcHRpb25zKTtcbmV4cG9ydHMud3JpdGVGaWxlRGVmYXVsdHMgPSB7XG4gICAgZW5jb2Rpbmc6ICd1dGY4JyxcbiAgICBtb2RlOiA0MzggLyogTU9ERS5ERUZBVUxUICovLFxuICAgIGZsYWc6IGNvbnN0YW50c18xLkZMQUdTW2NvbnN0YW50c18xLkZMQUdTLnddLFxufTtcbmV4cG9ydHMuZ2V0V3JpdGVGaWxlT3B0aW9ucyA9IG9wdHNHZW5lcmF0b3IoZXhwb3J0cy53cml0ZUZpbGVEZWZhdWx0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcHRpb25zLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5EaXIgPSB2b2lkIDA7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi9ub2RlL3V0aWxcIik7XG5jb25zdCBEaXJlbnRfMSA9IHJlcXVpcmUoXCIuL0RpcmVudFwiKTtcbi8qKlxuICogQSBkaXJlY3Rvcnkgc3RyZWFtLCBsaWtlIGBmcy5EaXJgLlxuICovXG5jbGFzcyBEaXIge1xuICAgIGNvbnN0cnVjdG9yKGxpbmssIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5saW5rID0gbGluaztcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5pdGVyYXRvckluZm8gPSBbXTtcbiAgICAgICAgdGhpcy5wYXRoID0gbGluay5nZXRQYXJlbnRQYXRoKCk7XG4gICAgICAgIHRoaXMuaXRlcmF0b3JJbmZvLnB1c2gobGluay5jaGlsZHJlbltTeW1ib2wuaXRlcmF0b3JdKCkpO1xuICAgIH1cbiAgICB3cmFwQXN5bmMobWV0aG9kLCBhcmdzLCBjYWxsYmFjaykge1xuICAgICAgICAoMCwgdXRpbF8xLnZhbGlkYXRlQ2FsbGJhY2spKGNhbGxiYWNrKTtcbiAgICAgICAgc2V0SW1tZWRpYXRlKCgpID0+IHtcbiAgICAgICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG1ldGhvZC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpc0Z1bmN0aW9uKHgpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xuICAgIH1cbiAgICBwcm9taXNpZnkob2JqLCBmbikge1xuICAgICAgICByZXR1cm4gKC4uLmFyZ3MpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRnVuY3Rpb24ob2JqW2ZuXSkpIHtcbiAgICAgICAgICAgICAgICBvYmpbZm5dLmJpbmQob2JqKSguLi5hcmdzLCAoZXJyb3IsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWplY3QoJ05vdCBhIGZ1bmN0aW9uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjbG9zZUJhc2UoKSB7IH1cbiAgICByZWFkQmFzZShpdGVyYXRvckluZm8pIHtcbiAgICAgICAgbGV0IGRvbmU7XG4gICAgICAgIGxldCB2YWx1ZTtcbiAgICAgICAgbGV0IG5hbWU7XG4gICAgICAgIGxldCBsaW5rO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgKHsgZG9uZSwgdmFsdWUgfSA9IGl0ZXJhdG9ySW5mb1tpdGVyYXRvckluZm8ubGVuZ3RoIC0gMV0ubmV4dCgpKTtcbiAgICAgICAgICAgICAgICBpZiAoIWRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgW25hbWUsIGxpbmtdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IHdoaWxlIChuYW1lID09PSAnLicgfHwgbmFtZSA9PT0gJy4uJyk7XG4gICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9ySW5mby5wb3AoKTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlcmF0b3JJbmZvLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJlY3Vyc2l2ZSAmJiBsaW5rLmNoaWxkcmVuLnNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlcmF0b3JJbmZvLnB1c2gobGluay5jaGlsZHJlbltTeW1ib2wuaXRlcmF0b3JdKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gRGlyZW50XzEuZGVmYXVsdC5idWlsZChsaW5rLCB0aGlzLm9wdGlvbnMuZW5jb2RpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICghZG9uZSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjbG9zZUJhc2VBc3luYyhjYWxsYmFjaykge1xuICAgICAgICB0aGlzLndyYXBBc3luYyh0aGlzLmNsb3NlQmFzZSwgW10sIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgY2xvc2UoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5jbG9zZUJhc2VBc3luYyhjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9taXNpZnkodGhpcywgJ2Nsb3NlQmFzZUFzeW5jJykoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjbG9zZVN5bmMoKSB7XG4gICAgICAgIHRoaXMuY2xvc2VCYXNlKCk7XG4gICAgfVxuICAgIHJlYWRCYXNlQXN5bmMoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy53cmFwQXN5bmModGhpcy5yZWFkQmFzZSwgW3RoaXMuaXRlcmF0b3JJbmZvXSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICByZWFkKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMucmVhZEJhc2VBc3luYyhjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9taXNpZnkodGhpcywgJ3JlYWRCYXNlQXN5bmMnKSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlYWRTeW5jKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkQmFzZSh0aGlzLml0ZXJhdG9ySW5mbyk7XG4gICAgfVxuICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgICAgIGNvbnN0IGl0ZXJhdG9ySW5mbyA9IFtdO1xuICAgICAgICBjb25zdCBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGl0ZXJhdG9ySW5mby5wdXNoKF90aGlzLmxpbmsuY2hpbGRyZW5bU3ltYm9sLml0ZXJhdG9yXSgpKTtcbiAgICAgICAgLy8gYXV4aWxpYXJ5IG9iamVjdCBzbyBwcm9taXNpZnkoKSBjYW4gYmUgdXNlZFxuICAgICAgICBjb25zdCBvID0ge1xuICAgICAgICAgICAgcmVhZEJhc2VBc3luYyhjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIF90aGlzLndyYXBBc3luYyhfdGhpcy5yZWFkQmFzZSwgW2l0ZXJhdG9ySW5mb10sIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhc3luYyBuZXh0KCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpckVudCA9IGF3YWl0IF90aGlzLnByb21pc2lmeShvLCAncmVhZEJhc2VBc3luYycpKCk7XG4gICAgICAgICAgICAgICAgaWYgKGRpckVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IGRpckVudCB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHVuZGVmaW5lZCB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuRGlyID0gRGlyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGlyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tZW1mcyA9IGV4cG9ydHMuZnMgPSBleHBvcnRzLnZvbCA9IGV4cG9ydHMuVm9sdW1lID0gdm9pZCAwO1xuZXhwb3J0cy5jcmVhdGVGc0Zyb21Wb2x1bWUgPSBjcmVhdGVGc0Zyb21Wb2x1bWU7XG5jb25zdCBTdGF0c18xID0gcmVxdWlyZShcIi4vU3RhdHNcIik7XG5jb25zdCBEaXJlbnRfMSA9IHJlcXVpcmUoXCIuL0RpcmVudFwiKTtcbmNvbnN0IHZvbHVtZV8xID0gcmVxdWlyZShcIi4vdm9sdW1lXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5jb25zdCBmc1N5bmNocm9ub3VzQXBpTGlzdF8xID0gcmVxdWlyZShcIi4vbm9kZS9saXN0cy9mc1N5bmNocm9ub3VzQXBpTGlzdFwiKTtcbmNvbnN0IGZzQ2FsbGJhY2tBcGlMaXN0XzEgPSByZXF1aXJlKFwiLi9ub2RlL2xpc3RzL2ZzQ2FsbGJhY2tBcGlMaXN0XCIpO1xuY29uc3QgeyBGX09LLCBSX09LLCBXX09LLCBYX09LIH0gPSBjb25zdGFudHNfMS5jb25zdGFudHM7XG5leHBvcnRzLlZvbHVtZSA9IHZvbHVtZV8xLlZvbHVtZTtcbi8vIERlZmF1bHQgdm9sdW1lLlxuZXhwb3J0cy52b2wgPSBuZXcgdm9sdW1lXzEuVm9sdW1lKCk7XG5mdW5jdGlvbiBjcmVhdGVGc0Zyb21Wb2x1bWUodm9sKSB7XG4gICAgY29uc3QgZnMgPSB7IEZfT0ssIFJfT0ssIFdfT0ssIFhfT0ssIGNvbnN0YW50czogY29uc3RhbnRzXzEuY29uc3RhbnRzLCBTdGF0czogU3RhdHNfMS5kZWZhdWx0LCBEaXJlbnQ6IERpcmVudF8xLmRlZmF1bHQgfTtcbiAgICAvLyBCaW5kIEZTIG1ldGhvZHMuXG4gICAgZm9yIChjb25zdCBtZXRob2Qgb2YgZnNTeW5jaHJvbm91c0FwaUxpc3RfMS5mc1N5bmNocm9ub3VzQXBpTGlzdClcbiAgICAgICAgaWYgKHR5cGVvZiB2b2xbbWV0aG9kXSA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIGZzW21ldGhvZF0gPSB2b2xbbWV0aG9kXS5iaW5kKHZvbCk7XG4gICAgZm9yIChjb25zdCBtZXRob2Qgb2YgZnNDYWxsYmFja0FwaUxpc3RfMS5mc0NhbGxiYWNrQXBpTGlzdClcbiAgICAgICAgaWYgKHR5cGVvZiB2b2xbbWV0aG9kXSA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIGZzW21ldGhvZF0gPSB2b2xbbWV0aG9kXS5iaW5kKHZvbCk7XG4gICAgZnMuU3RhdFdhdGNoZXIgPSB2b2wuU3RhdFdhdGNoZXI7XG4gICAgZnMuRlNXYXRjaGVyID0gdm9sLkZTV2F0Y2hlcjtcbiAgICBmcy5Xcml0ZVN0cmVhbSA9IHZvbC5Xcml0ZVN0cmVhbTtcbiAgICBmcy5SZWFkU3RyZWFtID0gdm9sLlJlYWRTdHJlYW07XG4gICAgZnMucHJvbWlzZXMgPSB2b2wucHJvbWlzZXM7XG4gICAgZnMuX3RvVW5peFRpbWVzdGFtcCA9IHZvbHVtZV8xLnRvVW5peFRpbWVzdGFtcDtcbiAgICBmcy5fX3ZvbCA9IHZvbDtcbiAgICByZXR1cm4gZnM7XG59XG5leHBvcnRzLmZzID0gY3JlYXRlRnNGcm9tVm9sdW1lKGV4cG9ydHMudm9sKTtcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxlIHN5c3RlbSBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0ganNvbiBGaWxlIHN5c3RlbSBzdHJ1Y3R1cmUgZXhwcmVzc2VkIGFzIGEgSlNPTiBvYmplY3QuXG4gKiAgICAgICAgVXNlIGBudWxsYCBmb3IgZW1wdHkgZGlyZWN0b3JpZXMgYW5kIGVtcHR5IHN0cmluZyBmb3IgZW1wdHkgZmlsZXMuXG4gKiBAcGFyYW0gY3dkIEN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkuIFRoZSBKU09OIHN0cnVjdHVyZSB3aWxsIGJlIGNyZWF0ZWRcbiAqICAgICAgICByZWxhdGl2ZSB0byB0aGlzIHBhdGguXG4gKiBAcmV0dXJucyBBIGBtZW1mc2AgZmlsZSBzeXN0ZW0gaW5zdGFuY2UsIHdoaWNoIGlzIGEgZHJvcC1pbiByZXBsYWNlbWVudCBmb3JcbiAqICAgICAgICAgIHRoZSBgZnNgIG1vZHVsZS5cbiAqL1xuY29uc3QgbWVtZnMgPSAoanNvbiA9IHt9LCBjd2QgPSAnLycpID0+IHtcbiAgICBjb25zdCB2b2wgPSBleHBvcnRzLlZvbHVtZS5mcm9tTmVzdGVkSlNPTihqc29uLCBjd2QpO1xuICAgIGNvbnN0IGZzID0gY3JlYXRlRnNGcm9tVm9sdW1lKHZvbCk7XG4gICAgcmV0dXJuIHsgZnMsIHZvbCB9O1xufTtcbmV4cG9ydHMubWVtZnMgPSBtZW1mcztcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBtb2R1bGUuZXhwb3J0cyksIGV4cG9ydHMuZnMpO1xubW9kdWxlLmV4cG9ydHMuc2VtYW50aWMgPSB0cnVlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZzU3luY2hyb25vdXNBcGlMaXN0ID0gdm9pZCAwO1xuZXhwb3J0cy5mc1N5bmNocm9ub3VzQXBpTGlzdCA9IFtcbiAgICAnYWNjZXNzU3luYycsXG4gICAgJ2FwcGVuZEZpbGVTeW5jJyxcbiAgICAnY2htb2RTeW5jJyxcbiAgICAnY2hvd25TeW5jJyxcbiAgICAnY2xvc2VTeW5jJyxcbiAgICAnY29weUZpbGVTeW5jJyxcbiAgICAnZXhpc3RzU3luYycsXG4gICAgJ2ZjaG1vZFN5bmMnLFxuICAgICdmY2hvd25TeW5jJyxcbiAgICAnZmRhdGFzeW5jU3luYycsXG4gICAgJ2ZzdGF0U3luYycsXG4gICAgJ2ZzeW5jU3luYycsXG4gICAgJ2Z0cnVuY2F0ZVN5bmMnLFxuICAgICdmdXRpbWVzU3luYycsXG4gICAgJ2xjaG1vZFN5bmMnLFxuICAgICdsY2hvd25TeW5jJyxcbiAgICAnbGlua1N5bmMnLFxuICAgICdsc3RhdFN5bmMnLFxuICAgICdta2RpclN5bmMnLFxuICAgICdta2R0ZW1wU3luYycsXG4gICAgJ29wZW5TeW5jJyxcbiAgICAncmVhZGRpclN5bmMnLFxuICAgICdyZWFkRmlsZVN5bmMnLFxuICAgICdyZWFkbGlua1N5bmMnLFxuICAgICdyZWFkU3luYycsXG4gICAgJ3JlYWR2U3luYycsXG4gICAgJ3JlYWxwYXRoU3luYycsXG4gICAgJ3JlbmFtZVN5bmMnLFxuICAgICdybWRpclN5bmMnLFxuICAgICdybVN5bmMnLFxuICAgICdzdGF0U3luYycsXG4gICAgJ3N5bWxpbmtTeW5jJyxcbiAgICAndHJ1bmNhdGVTeW5jJyxcbiAgICAndW5saW5rU3luYycsXG4gICAgJ3V0aW1lc1N5bmMnLFxuICAgICdsdXRpbWVzU3luYycsXG4gICAgJ3dyaXRlRmlsZVN5bmMnLFxuICAgICd3cml0ZVN5bmMnLFxuICAgICd3cml0ZXZTeW5jJyxcbiAgICAvLyAnY3BTeW5jJyxcbiAgICAvLyAnc3RhdGZzU3luYycsXG5dO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnNTeW5jaHJvbm91c0FwaUxpc3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZzQ2FsbGJhY2tBcGlMaXN0ID0gdm9pZCAwO1xuZXhwb3J0cy5mc0NhbGxiYWNrQXBpTGlzdCA9IFtcbiAgICAnYWNjZXNzJyxcbiAgICAnYXBwZW5kRmlsZScsXG4gICAgJ2NobW9kJyxcbiAgICAnY2hvd24nLFxuICAgICdjbG9zZScsXG4gICAgJ2NvcHlGaWxlJyxcbiAgICAnY3JlYXRlUmVhZFN0cmVhbScsXG4gICAgJ2NyZWF0ZVdyaXRlU3RyZWFtJyxcbiAgICAnZXhpc3RzJyxcbiAgICAnZmNobW9kJyxcbiAgICAnZmNob3duJyxcbiAgICAnZmRhdGFzeW5jJyxcbiAgICAnZnN0YXQnLFxuICAgICdmc3luYycsXG4gICAgJ2Z0cnVuY2F0ZScsXG4gICAgJ2Z1dGltZXMnLFxuICAgICdsY2htb2QnLFxuICAgICdsY2hvd24nLFxuICAgICdsaW5rJyxcbiAgICAnbHN0YXQnLFxuICAgICdta2RpcicsXG4gICAgJ21rZHRlbXAnLFxuICAgICdvcGVuJyxcbiAgICAncmVhZCcsXG4gICAgJ3JlYWR2JyxcbiAgICAncmVhZGRpcicsXG4gICAgJ3JlYWRGaWxlJyxcbiAgICAncmVhZGxpbmsnLFxuICAgICdyZWFscGF0aCcsXG4gICAgJ3JlbmFtZScsXG4gICAgJ3JtJyxcbiAgICAncm1kaXInLFxuICAgICdzdGF0JyxcbiAgICAnc3ltbGluaycsXG4gICAgJ3RydW5jYXRlJyxcbiAgICAndW5saW5rJyxcbiAgICAndW53YXRjaEZpbGUnLFxuICAgICd1dGltZXMnLFxuICAgICdsdXRpbWVzJyxcbiAgICAnd2F0Y2gnLFxuICAgICd3YXRjaEZpbGUnLFxuICAgICd3cml0ZScsXG4gICAgJ3dyaXRldicsXG4gICAgJ3dyaXRlRmlsZScsXG5dO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnNDYWxsYmFja0FwaUxpc3QuanMubWFwIiwiaW1wb3J0ICogYXMgbmd0c2MgZnJvbSAnQGFuZ3VsYXIvY29tcGlsZXItY2xpJztcbi8vIEd1YXJkaW5nIGFnYWluc3QgdW5leHBlY3RlZCBzY2VuYXJpb3MgZnJvbSB3aXRoaW4gdGhlIEJhemVsIHdvcmtlci5cbmV4cG9ydCBjbGFzcyBCYXplbFNhZmVGaWxlc3lzdGVtIGV4dGVuZHMgbmd0c2MuTm9kZUpTRmlsZVN5c3RlbSB7XG4gICAgcmVtb3ZlRmlsZShwYXRoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkLicpO1xuICAgIH1cbiAgICBzeW1saW5rKHRhcmdldCwgcGF0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZC4nKTtcbiAgICB9XG4gICAgY29weUZpbGUoZnJvbSwgdG8pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgfVxuICAgIG1vdmVGaWxlKGZyb20sIHRvKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkLicpO1xuICAgIH1cbiAgICBjaGRpcihwYXRoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkLicpO1xuICAgIH1cbiAgICByZW1vdmVEZWVwKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH1cbn1cbiIsImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuLy8gV2FsayB1cCBibGF6ZS1vdXQvPG1vZGU+L2Jpbi5cbi8vIGBqc19iaW5hcnlgIG9mIGBydWxlc19qc2Agc3RhcnRzIGluIHRoZSBgYmluYCBkaXJlY3RvcnkgYnkgZGVmYXVsdC5cbmV4cG9ydCBjb25zdCBleGVjcm9vdERpc2tQYXRoID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICcuLi8uLi8uLi8nKTtcbi8qKiBXaGV0aGVyIHRoaXMgd29ya2VyLCBvciBpbnN0YW5jZSBzaG91bGQgY29tcGlsZSB1c2luZyB2YW5pbGxhIFRTLiAqL1xuZXhwb3J0IGNvbnN0IGlzVmFuaWxsYVRzQ29tcGlsYXRpb24gPSBwcm9jZXNzLmFyZ3YuaW5jbHVkZXMoJy0tdmFuaWxsYS10cycpO1xuLyoqIFdoZXRoZXIgdG8gcHJpbnQgZGVidWcgaW5mb3JtYXRpb24gZm9yIHRoZSB3b3JrZXIuICovXG5leHBvcnQgY29uc3QgZGVidWdNb2RlID0gcHJvY2Vzcy5lbnZbJ0RFQlVHX1dPUktFUiddID09PSAnMSc7XG4iLCJpbXBvcnQgeyBWb2x1bWUgfSBmcm9tICdtZW1mcyc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aC9wb3NpeCc7XG5pbXBvcnQgbmF0aXZlU3lzUGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IEJhemVsU2FmZUZpbGVzeXN0ZW0gfSBmcm9tICcuL2JhemVsX3NhZmVfZmlsZXN5c3RlbS5tanMnO1xuaW1wb3J0IHsgZXhlY3Jvb3REaXNrUGF0aCB9IGZyb20gJy4vY29uc3RhbnRzLm1qcyc7XG5jb25zdCBSRUFEX0ZST01fRElTS19QTEFDRUhPTERFUiA9ICdAQFJFQUQtLUZST00tRElTS0BAJztcbmxldCBmc0lkID0gMDtcbmV4cG9ydCBjbGFzcyBXb3JrZXJTYW5kYm94RmlsZVN5c3RlbSBleHRlbmRzIEJhemVsU2FmZUZpbGVzeXN0ZW0ge1xuICAgIGlkID0gZnNJZCsrO1xuICAgIF92b2wgPSBuZXcgVm9sdW1lKCk7XG4gICAgLy8gYGpzX2JpbmFyeWAgYWx3YXlzIHJ1bnMgd2l0aCB3b3JraW5nIGRpcmVjdG9yeSBpbiBgYmF6ZWwtb3V0LzwuLj4vYmluYC5cbiAgICBfZGlza0N3ZFN5c1BhdGggPSBwcm9jZXNzLmN3ZCgpO1xuICAgIF92aXJ0dWFsQ3dkID0gdGhpcy5ub3JtYWxpemVQYXRoRnJhZ21lbnRUb1Bvc2l4KGAvJHtuYXRpdmVTeXNQYXRoLnJlbGF0aXZlKGV4ZWNyb290RGlza1BhdGgsIHRoaXMuX2Rpc2tDd2RTeXNQYXRoKX1gKTtcbiAgICBjb25zdHJ1Y3RvcihpbnB1dHMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgZm9yIChjb25zdCBmIG9mIGlucHV0cykge1xuICAgICAgICAgICAgdGhpcy5hZGRGaWxlKGYpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIE5ldmVyIHJlc29sdmUgdXNpbmcgdGhlIHJlYWwgYHByb2Nlc3MuY3dkKClgLiBXZSBhcmUgaW4gYSB2aXJ0dWFsIEZTIHdoZXJlXG4gICAgLy8gdGhlIGBiYXplbGAgYmluIGRpcmVjdG9yeSBzZXJ2ZXMgYXMgb3VyIHJvb3QgdmlhIGAvYC5cbiAgICByZXNvbHZlKC4uLnNlZ21lbnRzKSB7XG4gICAgICAgIHJldHVybiBwYXRoLnJlc29sdmUodGhpcy5fdmlydHVhbEN3ZCwgLi4uc2VnbWVudHMpO1xuICAgIH1cbiAgICBwd2QoKSB7XG4gICAgICAgIC8vIFRoZSBgdHNfcHJvamVjdGAgcnVsZXMgcGFzc2VzIG9wdGlvbnMgbGlrZSBgLS1wcm9qZWN0YCByZWxhdGl2ZSB0byB0aGUgYmF6ZWwtYmluLFxuICAgICAgICAvLyBzbyB3ZSB3aWxsIG1pbWljIHRoZSBleGVjdXRpb24gcnVubmluZyB3aXRoIHRoaXMgYXMgd29ya2luZyBkaXJlY3RvcnkuXG4gICAgICAgIHJldHVybiB0aGlzLl92aXJ0dWFsQ3dkO1xuICAgIH1cbiAgICByZWFkZGlyKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZvbC5yZWFkZGlyU3luYyhwYXRoKTtcbiAgICB9XG4gICAgc3RhdChwYXRoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92b2wuc3RhdFN5bmMocGF0aCk7XG4gICAgfVxuICAgIGxzdGF0KHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZvbC5sc3RhdFN5bmMocGF0aCk7XG4gICAgfVxuICAgIGFkZEZpbGUoZmlsZVBhdGgpIHtcbiAgICAgICAgaWYgKHRoaXMuZXhpc3RzKGZpbGVQYXRoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuc3VyZSB0aGUgYmFzZSBkaXJlY3RvcnkgZXhpc3RzIGluIHRoZSB2aXJ0dWFsIHZvbHVtZS5cbiAgICAgICAgY29uc3QgcGFyZW50RGlyID0gcGF0aC5kaXJuYW1lKGZpbGVQYXRoKTtcbiAgICAgICAgdGhpcy5fdm9sLm1rZGlyU3luYyhwYXJlbnREaXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgICAgICBjb25zdCBzdGF0ID0gdGhpcy5kaXNrTHN0YXQoZmlsZVBhdGgpO1xuICAgICAgICBpZiAoc3RhdD8uaXNTeW1ib2xpY0xpbmsoKSkge1xuICAgICAgICAgICAgY29uc3Qgc3ltbGluayA9IHRoaXMuZGlza1JlYWRsaW5rKGZpbGVQYXRoKTtcbiAgICAgICAgICAgIHRoaXMuYWRkRmlsZShzeW1saW5rKTtcbiAgICAgICAgICAgIHRoaXMuX3ZvbC5zeW1saW5rU3luYyhzeW1saW5rLCBmaWxlUGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RhdD8uaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICAgICAgdGhpcy5fdm9sLm1rZGlyU3luYyhmaWxlUGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBOb3RlOiBXZSBuZXZlciBwcmUtcmVhZCBmaWxlcyBhbmQgc3RvcmUgdGhlbSBpbiB0aGUgdmlydHVhbCBGUyBhcyB0aGlzXG4gICAgICAgICAgICAvLyB3b3VsZCBiZSBvdmVybHkgZXhwZW5zaXZlLiBXZSBqdXN0IHVzZSB0aGUgdmlydHVhbCBGUyBmb3IgZmFzdCBsb29rdXBzLFxuICAgICAgICAgICAgLy8gZGlyZWN0b3J5IHNjYW5zIGV0Yy5cbiAgICAgICAgICAgIHRoaXMuX3ZvbC53cml0ZUZpbGVTeW5jKGZpbGVQYXRoLCBSRUFEX0ZST01fRElTS19QTEFDRUhPTERFUiwge1xuICAgICAgICAgICAgICAgIGVuY29kaW5nOiAndXRmOCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZWFkRmlsZShmaWxlUGF0aCkge1xuICAgICAgICAvLyBUT0RPOiBndWFyZCBiYXplbCBpbnB1dHNcbiAgICAgICAgcmV0dXJuIGZzLnJlYWRGaWxlU3luYyh0aGlzLnRvRGlza1BhdGgoZmlsZVBhdGgpLCB7XG4gICAgICAgICAgICBlbmNvZGluZzogJ3V0ZjgnLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgd3JpdGVGaWxlKHBhdGgsIGRhdGEsIGV4Y2x1c2l2ZSkge1xuICAgICAgICAvLyBUT0RPOiBndWFyZFxuICAgICAgICBmcy53cml0ZUZpbGVTeW5jKHRoaXMudG9EaXNrUGF0aChwYXRoKSwgZGF0YSwgZXhjbHVzaXZlID8geyBmbGFnOiAnd3gnIH0gOiB1bmRlZmluZWQpO1xuICAgIH1cbiAgICBlbnN1cmVEaXIocGF0aCkge1xuICAgICAgICBmcy5ta2RpclN5bmModGhpcy50b0Rpc2tQYXRoKHBhdGgpLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgICB9XG4gICAgZXhpc3RzKGZpbGVQYXRoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92b2wuZXhpc3RzU3luYyhmaWxlUGF0aCk7XG4gICAgfVxuICAgIHJlYWxwYXRoKGZpbGVQYXRoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92b2wucmVhbHBhdGhTeW5jKHRoaXMucmVzb2x2ZShmaWxlUGF0aCksIHtcbiAgICAgICAgICAgIGVuY29kaW5nOiAndXRmOCcsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBkaXNrTHN0YXQoZmlsZVBhdGgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmcy5sc3RhdFN5bmModGhpcy50b0Rpc2tQYXRoKGZpbGVQYXRoKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGlza1JlYWRsaW5rKGZpbGVQYXRoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb21EaXNrUGF0aChmcy5yZWFkbGlua1N5bmModGhpcy50b0Rpc2tQYXRoKGZpbGVQYXRoKSkpO1xuICAgIH1cbiAgICB0b0Rpc2tQYXRoKGZpbGVQYXRoKSB7XG4gICAgICAgIC8vIFJlc29sdmUgYXQgdGhlIGVuZCB0byBhIHN5c3RlbS1zZXBhcmF0ZWQgcGF0aC5cbiAgICAgICAgcmV0dXJuIG5hdGl2ZVN5c1BhdGgucmVzb2x2ZShuYXRpdmVTeXNQYXRoLmpvaW4oZXhlY3Jvb3REaXNrUGF0aCwgZmlsZVBhdGgpKTtcbiAgICB9XG4gICAgZnJvbURpc2tQYXRoKGRpc2tQYXRoKSB7XG4gICAgICAgIGNvbnN0IHJlbGF0aXZlU3lzUGF0aCA9IG5hdGl2ZVN5c1BhdGgucmVsYXRpdmUoZXhlY3Jvb3REaXNrUGF0aCwgZGlza1BhdGgpO1xuICAgICAgICBjb25zdCByZWxhdGl2ZU5vcm1hbGl6ZWQgPSB0aGlzLm5vcm1hbGl6ZVBhdGhGcmFnbWVudFRvUG9zaXgocmVsYXRpdmVTeXNQYXRoKTtcbiAgICAgICAgaWYgKHJlbGF0aXZlTm9ybWFsaXplZC5zdGFydHNXaXRoKCcuLicpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgZGlzayBwYXRoIHRoYXQgY2Fubm90IGJlIHBhcnQgb2YgZXhlY3Jvb3Q6ICR7ZGlza1BhdGh9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAvJHtyZWxhdGl2ZU5vcm1hbGl6ZWR9YDtcbiAgICB9XG4gICAgbm9ybWFsaXplUGF0aEZyYWdtZW50VG9Qb3NpeChwKSB7XG4gICAgICAgIHJldHVybiBwLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBpc1NhbWVEaWdlc3QgfSBmcm9tICcuL2ZpbGVfY2FjaGUvZmlsZV9jYWNoZS5tanMnO1xuY29uc3QgcmVzb3VyY2VGaWxlUmVnZXggPSAvXFwuKGNzc3xodG1sKSQvO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUmVzb3VyY2VGaWxlKGZpbGVQYXRoKSB7XG4gICAgcmV0dXJuIHJlc291cmNlRmlsZVJlZ2V4LnRlc3QoZmlsZVBhdGgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRpZmZXb3JrZXJJbnB1dHNGb3JNb2RpZmllZFJlc291cmNlcyhuZXdJbnB1dHMsIG9sZElucHV0cykge1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBTZXQoKTtcbiAgICAvLyBMb29rIGZvciBpbnB1dHMgdGhhdCBoYXZlIGNoYW5nZWQgc2luY2UgdGhlIGxhc3Qgd29yayByZXF1ZXN0LlxuICAgIC8vIEFsc28gaW5jb3Jwb3JhdGUgZmlsZXMgdGhhdCBhcmUgbmV3bHkgYXZhaWxhYmxlLlxuICAgIGZvciAoY29uc3QgW2YsIGRpZ2VzdF0gb2YgbmV3SW5wdXRzLmVudHJpZXMoKSkge1xuICAgICAgICBpZiAoIWlzUmVzb3VyY2VGaWxlKGYpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYXN0RGlnZXN0ID0gb2xkSW5wdXRzLmdldChmKTtcbiAgICAgICAgaWYgKGxhc3REaWdlc3QgPT09IHVuZGVmaW5lZCB8fCAhaXNTYW1lRGlnZXN0KGRpZ2VzdCwgbGFzdERpZ2VzdCkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5hZGQoZik7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9sZElucHV0cy5oYXMoZikpIHtcbiAgICAgICAgICAgIHJlc3VsdC5hZGQoZik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gTG9vayBmb3IgZGVsZXRlZCByZXNvdXJjZSBmaWxlcy4gQW5ndWxhciBuZWVkcyB0byBrbm93IGFib3V0IHRoZXNlLlxuICAgIC8vIE90aGVyd2lzZSBhbmFseXNpcyBvZiBjb21wb25lbnRzIHJlbHlpbmcgb24gc3VjaCBmaWxlcyB3b3VsZCBiZSByZS11c2VkLlxuICAgIGZvciAoY29uc3QgZiBvZiBvbGRJbnB1dHMua2V5cygpKSB7XG4gICAgICAgIGlmICghaXNSZXNvdXJjZUZpbGUoZikpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbmV3SW5wdXRzLmhhcyhmKSkge1xuICAgICAgICAgICAgcmVzdWx0LmFkZChmKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIiwiZXhwb3J0IGNsYXNzIFdvcmtlclByb2dyYW1DYWNoZUVudHJ5IHtcbiAgICBwcm9ncmFtO1xuICAgIGxhc3RJbnB1dHM7XG4gICAgY29uc3RydWN0b3IocHJvZ3JhbSwgbGFzdElucHV0cykge1xuICAgICAgICB0aGlzLnByb2dyYW0gPSBwcm9ncmFtO1xuICAgICAgICB0aGlzLmxhc3RJbnB1dHMgPSBsYXN0SW5wdXRzO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBQcm9ncmFtRGVzY3JpcHRvciB7XG4gICAgcm9vdE5hbWVzO1xuICAgIG9wdGlvbnM7XG4gICAgaG9zdDtcbiAgICBvbGRQcm9ncmFtO1xuICAgIGNvbnN0cnVjdG9yKHJvb3ROYW1lcywgb3B0aW9ucywgaG9zdCwgb2xkUHJvZ3JhbSkge1xuICAgICAgICB0aGlzLnJvb3ROYW1lcyA9IHJvb3ROYW1lcztcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5ob3N0ID0gaG9zdDtcbiAgICAgICAgdGhpcy5vbGRQcm9ncmFtID0gb2xkUHJvZ3JhbTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBQcm9ncmFtRGVzY3JpcHRvciB9IGZyb20gJy4vcHJvZ3JhbV9kZXNjcmlwdG9yLm1qcyc7XG5pbXBvcnQgKiBhcyBuZ3RzYyBmcm9tICdAYW5ndWxhci9jb21waWxlci1jbGknO1xuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuZXhwb3J0IGNsYXNzIEFuZ3VsYXJQcm9ncmFtIGV4dGVuZHMgUHJvZ3JhbURlc2NyaXB0b3Ige1xuICAgIF9uZ3RzY1Byb2dyYW0gPSBudWxsO1xuICAgIGFzeW5jIGluaXQoKSB7XG4gICAgICAgIHRoaXMuX25ndHNjUHJvZ3JhbSA9IG5ldyBuZ3RzYy5OZ3RzY1Byb2dyYW0odGhpcy5yb290TmFtZXMsIHRoaXMub3B0aW9ucywgdGhpcy5ob3N0LCB0aGlzLm9sZFByb2dyYW0gaW5zdGFuY2VvZiBBbmd1bGFyUHJvZ3JhbVxuICAgICAgICAgICAgPyAodGhpcy5vbGRQcm9ncmFtLl9uZ3RzY1Byb2dyYW0gPz8gdW5kZWZpbmVkKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICAvLyBFbnN1cmUgYW5hbHl6aW5nIGJlZm9yZSBjb2xsZWN0aW5nIGRpYWdub3N0aWNzLlxuICAgICAgICBhd2FpdCB0aGlzLl9uZ3RzY1Byb2dyYW0ubG9hZE5nU3RydWN0dXJlQXN5bmMoKTtcbiAgICB9XG4gICAgZ2V0UHJlRW1pdERpYWdub3N0aWNzKGNhbmNlbGxhdGlvblRva2VuKSB7XG4gICAgICAgIGFzc2VydCh0aGlzLl9uZ3RzY1Byb2dyYW0sICdFeHBlY3RlZCBuZ3RzYyBwcm9ncmFtIHRvIGJlIGluaXRpYWxpemVkLicpO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgLi4udGhpcy5fbmd0c2NQcm9ncmFtLmdldFRzU3ludGFjdGljRGlhZ25vc3RpY3ModW5kZWZpbmVkLCBjYW5jZWxsYXRpb25Ub2tlbiksXG4gICAgICAgICAgICAuLi50aGlzLl9uZ3RzY1Byb2dyYW0uZ2V0VHNTZW1hbnRpY0RpYWdub3N0aWNzKHVuZGVmaW5lZCwgY2FuY2VsbGF0aW9uVG9rZW4pLFxuICAgICAgICAgICAgLi4udGhpcy5fbmd0c2NQcm9ncmFtLmdldFRzUHJvZ3JhbSgpLmdldEdsb2JhbERpYWdub3N0aWNzKGNhbmNlbGxhdGlvblRva2VuKSxcbiAgICAgICAgICAgIC4uLnRoaXMuX25ndHNjUHJvZ3JhbS5nZXROZ1N0cnVjdHVyYWxEaWFnbm9zdGljcyhjYW5jZWxsYXRpb25Ub2tlbiksXG4gICAgICAgICAgICAuLi50aGlzLl9uZ3RzY1Byb2dyYW0uZ2V0TmdTZW1hbnRpY0RpYWdub3N0aWNzKHVuZGVmaW5lZCwgY2FuY2VsbGF0aW9uVG9rZW4pLFxuICAgICAgICBdO1xuICAgIH1cbiAgICBlbWl0KGNhbmNlbGxhdGlvblRva2VuKSB7XG4gICAgICAgIGFzc2VydCh0aGlzLl9uZ3RzY1Byb2dyYW0sICdFeHBlY3RlZCBuZ3RzYyBwcm9ncmFtIHRvIGJlIGluaXRpYWxpemVkLicpO1xuICAgICAgICByZXR1cm4gdGhpcy5fbmd0c2NQcm9ncmFtLmVtaXQoeyBjYW5jZWxsYXRpb25Ub2tlbiwgZm9yY2VFbWl0OiB0cnVlIH0pO1xuICAgIH1cbiAgICBpc1N0cnVjdHVyZVJldXNlZCgpIHtcbiAgICAgICAgYXNzZXJ0KHRoaXMuX25ndHNjUHJvZ3JhbSwgJ0V4cGVjdGVkIG5ndHNjIHByb2dyYW0gdG8gYmUgaW5pdGlhbGl6ZWQuJyk7XG4gICAgICAgIHJldHVybiAodGhpcy5fbmd0c2NQcm9ncmFtPy5nZXRUc1Byb2dyYW0oKSlbJ3N0cnVjdHVyZUlzUmV1c2VkJ107XG4gICAgfVxufVxuIiwiaW1wb3J0IHRzIGZyb20gJ3R5cGVzY3JpcHQnO1xuaW1wb3J0IHsgUHJvZ3JhbURlc2NyaXB0b3IgfSBmcm9tICcuL3Byb2dyYW1fZGVzY3JpcHRvci5tanMnO1xuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuZXhwb3J0IGNsYXNzIFZhbmlsbGFUc1Byb2dyYW0gZXh0ZW5kcyBQcm9ncmFtRGVzY3JpcHRvciB7XG4gICAgX3RzUHJvZ3JhbSA9IG51bGw7XG4gICAgYXN5bmMgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5fdHNQcm9ncmFtID0gdHMuY3JlYXRlUHJvZ3JhbSh7XG4gICAgICAgICAgICByb290TmFtZXM6IHRoaXMucm9vdE5hbWVzLFxuICAgICAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgaG9zdDogdGhpcy5ob3N0LFxuICAgICAgICAgICAgb2xkUHJvZ3JhbTogdGhpcy5vbGRQcm9ncmFtIGluc3RhbmNlb2YgVmFuaWxsYVRzUHJvZ3JhbVxuICAgICAgICAgICAgICAgID8gKHRoaXMub2xkUHJvZ3JhbS5fdHNQcm9ncmFtID8/IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldFByZUVtaXREaWFnbm9zdGljcyhjYW5jZWxsYXRpb25Ub2tlbikge1xuICAgICAgICBhc3NlcnQodGhpcy5fdHNQcm9ncmFtLCAnRXhwZWN0ZWQgVFMgcHJvZ3JhbSB0byBiZSBpbml0aWFsaXplZC4nKTtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIC4uLnRoaXMuX3RzUHJvZ3JhbS5nZXRTeW50YWN0aWNEaWFnbm9zdGljcyh1bmRlZmluZWQsIGNhbmNlbGxhdGlvblRva2VuKSxcbiAgICAgICAgICAgIC4uLnRoaXMuX3RzUHJvZ3JhbS5nZXRTZW1hbnRpY0RpYWdub3N0aWNzKHVuZGVmaW5lZCwgY2FuY2VsbGF0aW9uVG9rZW4pLFxuICAgICAgICAgICAgLi4udGhpcy5fdHNQcm9ncmFtLmdldEdsb2JhbERpYWdub3N0aWNzKGNhbmNlbGxhdGlvblRva2VuKSxcbiAgICAgICAgXTtcbiAgICB9XG4gICAgZW1pdChjYW5jZWxsYXRpb25Ub2tlbikge1xuICAgICAgICBhc3NlcnQodGhpcy5fdHNQcm9ncmFtLCAnRXhwZWN0ZWQgVFMgcHJvZ3JhbSB0byBiZSBpbml0aWFsaXplZC4nKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RzUHJvZ3JhbS5lbWl0KHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjYW5jZWxsYXRpb25Ub2tlbiwgZmFsc2UsIHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIGlzU3RydWN0dXJlUmV1c2VkKCkge1xuICAgICAgICBhc3NlcnQodGhpcy5fdHNQcm9ncmFtLCAnRXhwZWN0ZWQgbmd0c2MgcHJvZ3JhbSB0byBiZSBpbml0aWFsaXplZC4nKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RzUHJvZ3JhbVsnc3RydWN0dXJlSXNSZXVzZWQnXTtcbiAgICB9XG59XG4iLCIvKipcbiAqIEV4dHJhY3RlZCBmcm9tIFR5cGVTY3JpcHQncyBpbnRlcm5hbCBlbnVtIGBTdHJ1Y3R1cmVJc1JldXNlZGAuXG4gKi9cbmV4cG9ydCB2YXIgVHNTdHJ1Y3R1cmVJc1JldXNlZDtcbihmdW5jdGlvbiAoVHNTdHJ1Y3R1cmVJc1JldXNlZCkge1xuICAgIFRzU3RydWN0dXJlSXNSZXVzZWRbVHNTdHJ1Y3R1cmVJc1JldXNlZFtcIk5vdFwiXSA9IDBdID0gXCJOb3RcIjtcbiAgICBUc1N0cnVjdHVyZUlzUmV1c2VkW1RzU3RydWN0dXJlSXNSZXVzZWRbXCJTYWZlTW9kdWxlc1wiXSA9IDFdID0gXCJTYWZlTW9kdWxlc1wiO1xuICAgIFRzU3RydWN0dXJlSXNSZXVzZWRbVHNTdHJ1Y3R1cmVJc1JldXNlZFtcIkNvbXBsZXRlbHlcIl0gPSAyXSA9IFwiQ29tcGxldGVseVwiO1xufSkoVHNTdHJ1Y3R1cmVJc1JldXNlZCB8fCAoVHNTdHJ1Y3R1cmVJc1JldXNlZCA9IHt9KSk7XG4iLCJpbXBvcnQgKiBhcyBuZ3RzYyBmcm9tICdAYW5ndWxhci9jb21waWxlci1jbGknO1xuaW1wb3J0IHRzIGZyb20gJ3R5cGVzY3JpcHQnO1xuaW1wb3J0IHsgV29ya2VyU2FuZGJveEZpbGVTeXN0ZW0gfSBmcm9tICcuL2ZpbGVfc3lzdGVtLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVDYWNoZUNvbXBpbGVySG9zdCB9IGZyb20gJy4vY2FjaGVfY29tcGlsZXJfaG9zdC5tanMnO1xuaW1wb3J0IHsgY3JlYXRlQ2FuY2VsbGF0aW9uVG9rZW4gfSBmcm9tICcuL2NhbmNlbGxhdGlvbl90b2tlbi5tanMnO1xuaW1wb3J0IHsgZGlmZldvcmtlcklucHV0c0Zvck1vZGlmaWVkUmVzb3VyY2VzIH0gZnJvbSAnLi9tb2RpZmllZF9yZXNvdXJjZXMubWpzJztcbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcbmltcG9ydCB7IFdvcmtlclByb2dyYW1DYWNoZUVudHJ5IH0gZnJvbSAnLi9wcm9ncmFtX2NhY2hlLm1qcyc7XG5pbXBvcnQgeyBkZWJ1Z01vZGUsIGlzVmFuaWxsYVRzQ29tcGlsYXRpb24gfSBmcm9tICcuL2NvbnN0YW50cy5tanMnO1xuaW1wb3J0IHsgQW5ndWxhclByb2dyYW0gfSBmcm9tICcuL3Byb2dyYW1fYWJzdHJhY3Rpb25zL25ndHNjLm1qcyc7XG5pbXBvcnQgeyBWYW5pbGxhVHNQcm9ncmFtIH0gZnJvbSAnLi9wcm9ncmFtX2Fic3RyYWN0aW9ucy92YW5pbGxhX3RzLm1qcyc7XG5pbXBvcnQgeyBUc1N0cnVjdHVyZUlzUmV1c2VkIH0gZnJvbSAnLi9wcm9ncmFtX2Fic3RyYWN0aW9ucy9zdHJ1dHVyZV9yZXVzZWQubWpzJztcbi8vIFVzZWQgZm9yIGRlYnVnIGNvdW50aW5nLlxubGV0IGJ1aWxkQ291bnQgPSAwO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVCdWlsZChhcmdzLCB3b3JrZXIpIHtcbiAgICBjb25zdCBwcm9qZWN0ID0gYXJnc1thcmdzLmluZGV4T2YoJy0tcHJvamVjdCcpICsgMV07XG4gICAgY29uc3Qgb3V0RGlyID0gYXJnc1thcmdzLmxhc3RJbmRleE9mKCctLW91dERpcicpICsgMV07XG4gICAgY29uc3QgZGVjbGFyYXRpb25EaXIgPSBhcmdzW2FyZ3MubGFzdEluZGV4T2YoJy0tZGVjbGFyYXRpb25EaXInKSArIDFdO1xuICAgIGNvbnN0IHJvb3REaXIgPSBhcmdzW2FyZ3MubGFzdEluZGV4T2YoJy0tcm9vdERpcicpICsgMV07XG4gICAgY29uc3Qgd29ya2VyS2V5ID0gYCR7cHJvamVjdH0gQCAke291dERpcn0gQCAke2RlY2xhcmF0aW9uRGlyfSBAICR7cm9vdERpcn1gO1xuICAgIGNvbnN0IGV4aXN0aW5nID0gd29ya2VyPy5wcm9ncmFtQ2FjaGUuZ2V0KHdvcmtlcktleSk7XG4gICAgbGV0IGlucHV0cyA9IG51bGw7XG4gICAgLy8gSW4gd29ya2VyIG1vZGUsIHdlIGtub3cgdGhlIGlucHV0cyBhbmQgY2FuIGNvbXB1dGUgdGhlbS4gVGhpcyBhbGxvd3NcbiAgICAvLyB1cyB0byBjb25zdHJ1Y3QgYSB2aXJ0dWFsIGZpbGUgc3lzdGVtIHRvIGVtdWxhdGUgc2FuZGJveGluZy5cbiAgICBpZiAod29ya2VyICE9PSBudWxsKSB7XG4gICAgICAgIGlucHV0cyA9IG5ldyBNYXAod29ya2VyLnJlcS5pbnB1dHNcbiAgICAgICAgICAgIC8vIFdvcmtlciBpbnB1dCBwYXRocyBhcmUgcm9vdGVkIGluIG91ciB2aXJ0dWFsIEZTIGF0IGV4ZWNyb290LlxuICAgICAgICAgICAgLm1hcChpID0+IFtgLyR7aS5wYXRofWAsIGkuZGlnZXN0XSkpO1xuICAgIH1cbiAgICBjb25zb2xlLmVycm9yKGFyZ3MpO1xuICAgIGNvbnNvbGUuZXJyb3IoJ1dvcmtlciBtb2RlOicsIGlucHV0cyAhPT0gbnVsbCk7XG4gICAgY29uc3QgY29tbWFuZCA9IHRzLnBhcnNlQ29tbWFuZExpbmUoYXJncyk7XG4gICAgLy8gSW4gd29ya2VyIG1vZGUsIHVzZSBhIHNhbmRib3gtZW11bGF0aW5nIHZpcnR1YWwgZmlsZSBzeXN0ZW0sIHdoaWxlIGluXG4gICAgLy8gUkJFL3N0YW5kYWxvbmUgZXhlY3V0aW9uIHdlIHNpbXBseSB1c2UgdGhlIG5hdGl2ZSBmaWxlIHN5c3RlbS5cbiAgICBjb25zdCBmcyA9IGlucHV0cyAhPT0gbnVsbFxuICAgICAgICA/IG5ldyBXb3JrZXJTYW5kYm94RmlsZVN5c3RlbShBcnJheS5mcm9tKGlucHV0cy5rZXlzKCkpKVxuICAgICAgICA6IG5ldyBuZ3RzYy5Ob2RlSlNGaWxlU3lzdGVtKCk7XG4gICAgLy8gTm90ZTogVGhpcyBpcyBuZWVkZWQgYmVjYXVzZSBmdW5jdGlvbnMgbGlrZSBgcmVhZENvbmZpZ3VyYXRpb25gIGRvIG5vdCBwcm9wZXJseVxuICAgIC8vIHJlLXVzZSB0aGUgcGFzc2VkIGBmc2AsIGJ1dCBjYWxsIGBnZXRGaWxlU3lzdGVtYC5cbiAgICBuZ3RzYy5zZXRGaWxlU3lzdGVtKGZzKTtcbiAgICBjb25zdCBtb2RpZmllZFJlc291cmNlRmlsZVBhdGhzID0gZXhpc3RpbmcgIT09IHVuZGVmaW5lZCAmJiBpbnB1dHMgIT09IG51bGxcbiAgICAgICAgPyBkaWZmV29ya2VySW5wdXRzRm9yTW9kaWZpZWRSZXNvdXJjZXMoaW5wdXRzLCBleGlzdGluZy5sYXN0SW5wdXRzKVxuICAgICAgICA6IG51bGw7XG4gICAgLy8gVXBkYXRlIGNhY2hlLCBpZiBwcmVzZW50LCBldmljdGluZyBjaGFuZ2VkIGZpbGVzIGFuZCB0aGVpciBBU1QuXG4gICAgaWYgKHdvcmtlciAhPT0gbnVsbCkge1xuICAgICAgICBhc3NlcnQoaW5wdXRzLCAnRXhwZWN0ZWQgaW5wdXRzIHdoZW4gdXNpbmcgcGVyc2lzdGVudCBmaWxlIGNhY2hlLicpO1xuICAgICAgICB3b3JrZXIuZmlsZUNhY2hlLnVwZGF0ZUNhY2hlKGlucHV0cyk7XG4gICAgfVxuICAgIC8vIFBvcHVsYXRlIG9wdGlvbnMgZnJvbSBjb21tYW5kIGxpbmUgYXJndW1lbnRzLlxuICAgIGNvbnN0IHBhcnNlZENvbmZpZyA9IG5ndHNjLnJlYWRDb25maWd1cmF0aW9uKGNvbW1hbmQub3B0aW9ucy5wcm9qZWN0LCBjb21tYW5kLm9wdGlvbnMsIGZzKTtcbiAgICBjb25zdCBvcHRpb25zID0gcGFyc2VkQ29uZmlnLm9wdGlvbnM7XG4gICAgLy8gSW52YWxpZGF0ZSB0aGUgc3lzdGVtIHRvIGVuc3VyZSB3ZSBhbHdheXMgdXNlIHRoZSB2aXJ0dWFsIEZTL2hvc3QuXG4gICAgLy8gT2JqZWN0LmRlZmluZVByb3BlcnR5KHRzLCAnc3lzJywge3ZhbHVlOiB1bmRlZmluZWQsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0pO1xuICAgIGNvbnN0IGZvcm1hdEhvc3QgPSB7XG4gICAgICAgIGdldENhbm9uaWNhbEZpbGVOYW1lOiBmID0+IGYsXG4gICAgICAgIGdldEN1cnJlbnREaXJlY3Rvcnk6ICgpID0+IGZzLnB3ZCgpLFxuICAgICAgICBnZXROZXdMaW5lOiAoKSA9PiAnXFxuJyxcbiAgICB9O1xuICAgIGlmIChwYXJzZWRDb25maWcuZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdDb25maWcgcGFyc2luZyBlcnJvcnM6XFxuJyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IodHMuZm9ybWF0RGlhZ25vc3RpY3NXaXRoQ29sb3JBbmRDb250ZXh0KHBhcnNlZENvbmZpZy5lcnJvcnMsIGZvcm1hdEhvc3QpKTtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGxldCBob3N0O1xuICAgIC8vIEluIHdvcmtlcnMsIHVzZSBhIGNvbXBpbGVyIGhvc3QgdGhhdCBsZXZlcmFnZXMgdGhlIHBlcnNpc3RlbnRcbiAgICAvLyBmaWxlIGNhY2hlLiBPdGhlcndpc2UsIGZhbGwgYmFjayB0byBhbiB1bmNhY2hlZCBob3N0LlxuICAgIGlmICh3b3JrZXIgIT09IG51bGwpIHtcbiAgICAgICAgaG9zdCA9IGNyZWF0ZUNhY2hlQ29tcGlsZXJIb3N0KG9wdGlvbnMsIHdvcmtlci5maWxlQ2FjaGUsIGZzLCBtb2RpZmllZFJlc291cmNlRmlsZVBhdGhzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGhvc3QgPSBuZXcgbmd0c2MuTmd0c2NDb21waWxlckhvc3QoZnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBjb25zdCBwcm9ncmFtRGVzY3JpcHRvciA9IGlzVmFuaWxsYVRzQ29tcGlsYXRpb24gPyBWYW5pbGxhVHNQcm9ncmFtIDogQW5ndWxhclByb2dyYW07XG4gICAgY29uc3QgcHJvZ3JhbSA9IG5ldyBwcm9ncmFtRGVzY3JpcHRvcihwYXJzZWRDb25maWcucm9vdE5hbWVzLCBvcHRpb25zLCBob3N0LCBleGlzdGluZz8ucHJvZ3JhbSk7XG4gICAgaWYgKGlucHV0cyAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoZXhpc3RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZXhpc3RpbmcucHJvZ3JhbSA9IHByb2dyYW07XG4gICAgICAgICAgICBleGlzdGluZy5sYXN0SW5wdXRzID0gaW5wdXRzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgd29ya2VyPy5wcm9ncmFtQ2FjaGUuc2V0KHdvcmtlcktleSwgbmV3IFdvcmtlclByb2dyYW1DYWNoZUVudHJ5KHByb2dyYW0sIGlucHV0cykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGNhbmNlbGxhdGlvblRva2VuID0gd29ya2VyICE9PSBudWxsID8gY3JlYXRlQ2FuY2VsbGF0aW9uVG9rZW4od29ya2VyLnJlcS5zaWduYWwpIDogdW5kZWZpbmVkO1xuICAgIC8vIEluaXQgcHJvZ3JhbVxuICAgIGF3YWl0IHByb2dyYW0uaW5pdCgpO1xuICAgIC8vIERlYnVnIGluZm9ybWF0aW9uLlxuICAgIGlmIChkZWJ1Z01vZGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgV29ya2VyIHJlLXVzZSwgbnVtYmVyIG9mIHByZXZpb3VzIHJ1bnM6ICR7YnVpbGRDb3VudCsrfWApO1xuICAgICAgICBjb25zb2xlLmVycm9yKGBSZS11c2luZyBwcm9ncmFtICYgaG9zdDogJHshIWV4aXN0aW5nfWApO1xuICAgICAgICBjb25zb2xlLmVycm9yKGBWYW5pbGxhIFRTOiAke2lzVmFuaWxsYVRzQ29tcGlsYXRpb259YCk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1vZGlmaWVkIHJlc291cmNlczogJHttb2RpZmllZFJlc291cmNlRmlsZVBhdGhzPy5zaXplfWApO1xuICAgICAgICBjb25zb2xlLmVycm9yKCdTdHJ1Y3R1cmUgcmV1c2VkJywgVHNTdHJ1Y3R1cmVJc1JldXNlZFtwcm9ncmFtLmlzU3RydWN0dXJlUmV1c2VkKCldKTtcbiAgICB9XG4gICAgY29uc3QgdHNQcmVFbWl0RGlhZ25vc3RpY3MgPSBwcm9ncmFtLmdldFByZUVtaXREaWFnbm9zdGljcyhjYW5jZWxsYXRpb25Ub2tlbik7XG4gICAgaWYgKHRzUHJlRW1pdERpYWdub3N0aWNzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdQcmUtZW1pdCBkaWFnbm9zdGljczpcXG4nKTtcbiAgICAgICAgY29uc29sZS5lcnJvcih0cy5mb3JtYXREaWFnbm9zdGljc1dpdGhDb2xvckFuZENvbnRleHQodHNQcmVFbWl0RGlhZ25vc3RpY3MsIGZvcm1hdEhvc3QpKTtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIC8vIEVtaXQuXG4gICAgY29uc3QgZW1pdFJlcyA9IHByb2dyYW0uZW1pdChjYW5jZWxsYXRpb25Ub2tlbik7XG4gICAgaWYgKGVtaXRSZXMuZGlhZ25vc3RpY3MubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VtaXQgZGlhZ25vc3RpY3M6XFxuJyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IodHMuZm9ybWF0RGlhZ25vc3RpY3NXaXRoQ29sb3JBbmRDb250ZXh0KGVtaXRSZXMuZGlhZ25vc3RpY3MsIGZvcm1hdEhvc3QpKTtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHJldHVybiBlbWl0UmVzLmVtaXRTa2lwcGVkID8gMSA6IDA7XG59XG4iLCJpbXBvcnQgdHMgZnJvbSAndHlwZXNjcmlwdCc7XG5pbXBvcnQgKiBhcyBuZ3RzYyBmcm9tICdAYW5ndWxhci9jb21waWxlci1jbGknO1xuaW1wb3J0ICogYXMgbm9kZUZzIGZyb20gJ25vZGU6ZnMnO1xuaW1wb3J0IG1vZHVsZSBmcm9tICdtb2R1bGUnO1xuaW1wb3J0IHBhdGggZnJvbSAnbm9kZTpwYXRoJztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDYWNoZUNvbXBpbGVySG9zdChvcHRpb25zLCBjYWNoZSwgZnMsIG1vZGlmaWVkUmVzb3VyY2VGaWxlUGF0aHMpIHtcbiAgICBjb25zdCBiYXNlID0gbmV3IG5ndHNjLk5ndHNjQ29tcGlsZXJIb3N0KGZzLCBvcHRpb25zKTtcbiAgICBjb25zdCBvcmlnaW5hbEdldFNvdXJjZUZpbGUgPSBiYXNlLmdldFNvdXJjZUZpbGU7XG4gICAgY29uc3QgZGVmYXVsdExpYkxvY2F0aW9uID0gYmFzZS5nZXREZWZhdWx0TGliTG9jYXRpb24/LigpO1xuICAgIC8vIFRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlbiBhcyBgdHMuY3JlYXRlQ29tcGlsZXJIb3N0YCBhbHdheXMgc2V0cyBpdC5cbiAgICBpZiAoZGVmYXVsdExpYkxvY2F0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZGV0ZXJtaW5lIGRlZmF1bHQgVHlwZVNjcmlwdCBsaWIgbG9jYXRpb24uJyk7XG4gICAgfVxuICAgIC8vIEZvciB0aGUgd29ya2VyLCB3ZSB3aWxsIHJlLXVzZSB0aGUgc2FtZSBwcm9ncmFtLiBUeXBlU2NyaXB0IGFuZCB0aGUgQW5ndWxhciBDb21waWxlclxuICAgIC8vIGFyZSBhYmxlIHRvIGRldGVjdCBwaHlzaWNhbGx5IGNoYW5nZWQgVFMgZmlsZXMsIGJ1dCBub3QgcmVzb3VyY2UgZmlsZXMuIFRoaXMgaXMgd2h5XG4gICAgLy8gd2UgbmVlZCB0byB0ZWxsIG5ndHNjIGFib3V0IGUuZy4gbW9kaWZpZWQgdGVtcGxhdGUgZmlsZXMgZm9yIHJlLXVzZWQgYnVpbGQgcmVxdWVzdHMuXG4gICAgaWYgKG1vZGlmaWVkUmVzb3VyY2VGaWxlUGF0aHMgIT09IG51bGwpIHtcbiAgICAgICAgYmFzZS5nZXRNb2RpZmllZFJlc291cmNlRmlsZXMgPSAoKSA9PiBtb2RpZmllZFJlc291cmNlRmlsZVBhdGhzO1xuICAgIH1cbiAgICBiYXNlLnJlYWRSZXNvdXJjZSA9IGZpbGVOYW1lID0+IHtcbiAgICAgICAgLy8gVXNlZCBjYWNoZWQgc291cmNlIGZpbGUgaWYgaXQncyBzdGlsbCB2YWxpZC5cbiAgICAgICAgY29uc3QgY2FjaGVkRmlsZSA9IGNhY2hlLmdldENhY2hlKGZpbGVOYW1lKTtcbiAgICAgICAgaWYgKGNhY2hlZEZpbGUgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgY2FjaGVkRmlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRGaWxlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRpc2tDb250ZW50ID0gZnMucmVhZEZpbGUoZnMucmVzb2x2ZShmaWxlTmFtZSkpO1xuICAgICAgICBpZiAoZGlza0NvbnRlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgcmVhZCByZXNvdXJjZSBmaWxlOiAke2ZpbGVOYW1lfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRpZ2VzdCA9IGNhY2hlLmdldExhc3REaWdlc3QoZmlsZU5hbWUpO1xuICAgICAgICBpZiAoZGlnZXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gZGlnZXN0IGZvdW5kIGZvciByZXNvdXJjZSBmaWxlOiAke2ZpbGVOYW1lfWApO1xuICAgICAgICB9XG4gICAgICAgIGNhY2hlLnB1dENhY2hlKGZpbGVOYW1lLCB7IGRpZ2VzdCwgdmFsdWU6IGRpc2tDb250ZW50IH0pO1xuICAgICAgICByZXR1cm4gZGlza0NvbnRlbnQ7XG4gICAgfTtcbiAgICBiYXNlLmdldFNvdXJjZUZpbGUgPSBmdW5jdGlvbiAoZmlsZU5hbWUsIGxhbmd1YWdlVmVyc2lvbk9yT3B0aW9ucywgb25FcnJvciwgc2hvdWxkQ3JlYXRlTmV3U291cmNlRmlsZSkge1xuICAgICAgICAvLyBVc2VkIGNhY2hlZCBzb3VyY2UgZmlsZSBpZiBpdCdzIHN0aWxsIHZhbGlkLlxuICAgICAgICBjb25zdCBjYWNoZWRGaWxlID0gY2FjaGUuZ2V0Q2FjaGUoZmlsZU5hbWUpO1xuICAgICAgICBpZiAoY2FjaGVkRmlsZSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBjYWNoZWRGaWxlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZEZpbGU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNMaWJGaWxlID0gZGVmYXVsdExpYkxvY2F0aW9uICE9PSB1bmRlZmluZWQgJiYgZmlsZU5hbWUuc3RhcnRzV2l0aChkZWZhdWx0TGliTG9jYXRpb24pO1xuICAgICAgICBsZXQgY3JlYXRlZEZpbGU7XG4gICAgICAgIC8vIExpYiBmaWxlcyBuZWVkIHRvIGJlIHJlc29sdmVkIGZyb20gcmVhbCBkaXNrIGFzIHRoZXkgYXJlbid0XG4gICAgICAgIC8vIHBhcnQgb2YgYWN0aW9uIGlucHV0cyB0aGVyZWZvcmUgbm90IHBhcnQgb2YgdGhlIHZpcnR1YWwgRlMvaG9zdC5cbiAgICAgICAgaWYgKGlzTGliRmlsZSkge1xuICAgICAgICAgICAgbGV0IGZpbGVQYXRoID0gcGF0aC5yZWxhdGl2ZShkZWZhdWx0TGliTG9jYXRpb24sIGZpbGVOYW1lKTtcbiAgICAgICAgICAgIC8vIElmIHRoZSBmaWxlIGRvZXMgbm90IGV4aXN0IGF0IHRoZSBleHBlY3RlZCBwYXRoLCB3ZSBhc3N1bWUgaXQgbmVlZHMgdG8gYmUgZm91bmQgdXNpbmcgcmVxdWlyZS5yZXNvbHZlXG4gICAgICAgICAgICAvLyB0byBsb2FkIGl0IGZyb20gdGhlIHR5cGVzY3JpcHQgbGliIGZvbGRlci5cbiAgICAgICAgICAgIGlmICghbm9kZUZzLmV4aXN0c1N5bmMoZmlsZVBhdGgpKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVxID0gbW9kdWxlLmNyZWF0ZVJlcXVpcmUoaW1wb3J0Lm1ldGEudXJsKTtcbiAgICAgICAgICAgICAgICAgICAgZmlsZVBhdGggPSByZXEucmVzb2x2ZShgdHlwZXNjcmlwdC9saWIvJHtwYXRoLmJhc2VuYW1lKGZpbGVOYW1lKX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihgQ2Fubm90IGZpbmQgJHtmaWxlTmFtZX0gZGlyZWN0bHkgb3Igd2l0aGluIHR5cGVzY3JpcHQvbGliYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3JlYXRlZEZpbGUgPSB0cy5jcmVhdGVTb3VyY2VGaWxlKGZpbGVOYW1lLCBub2RlRnMucmVhZEZpbGVTeW5jKGZpbGVQYXRoLCAndXRmOCcpLCBsYW5ndWFnZVZlcnNpb25Pck9wdGlvbnMsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNyZWF0ZWRGaWxlID0gb3JpZ2luYWxHZXRTb3VyY2VGaWxlLmNhbGwodGhpcywgZmlsZU5hbWUsIGxhbmd1YWdlVmVyc2lvbk9yT3B0aW9ucywgb25FcnJvciwgc2hvdWxkQ3JlYXRlTmV3U291cmNlRmlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNyZWF0ZWRGaWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIE5vdGU6IEZvciBsaWJyYXJ5IGZpbGVzLCB3ZSB3aWxsIG5ldmVyIGhhdmUgYSBkaWdlc3QuIFRoaXMgaXMgYmVjYXVzZSB0aGUgbGlicmFyeSBpcyBub3RcbiAgICAgICAgICAgIC8vIHBhcnQgb2YgdGhlIGBXb3JrUmVxdWVzdGAgaW5wdXRzLCBidXQgcmF0aGVyIGlzIHBhcnQgb2YgdGhlIHdvcmtlciBganNfYmluYXJ5YC4gVG8gbWFrZVxuICAgICAgICAgICAgLy8gc3VyZSBsaWIgZmlsZXMgY2FuIGJlIGNhY2hlZCwgd2UgYXNzaWduIGFuIGFyYml0cmFyeSBkaWdlc3QuIFRoZSBlbnRyeSB3b3VsZCBuZXZlciBiZSBldmljdGVkXG4gICAgICAgICAgICAvLyBieSBgY2FjaGUudXBkYXRlQ2FjaGVgIGFueXdheS4gQmF6ZWwgd2lsbCBpbnZhbGlkYXRlIHRoZSB3b3JrZXIgd2hlbiB0aGUgVFMgcGFja2FnZSBjaGFuZ2VzLlxuICAgICAgICAgICAgY29uc3QgZGlnZXN0ID0gaXNMaWJGaWxlID8gbmV3IFVpbnQ4QXJyYXkoKSA6IGNhY2hlLmdldExhc3REaWdlc3QoZmlsZU5hbWUpO1xuICAgICAgICAgICAgaWYgKGRpZ2VzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBkaWdlc3QgZm91bmQgZm9yIHNvdXJjZSBmaWxlOiAke2ZpbGVOYW1lfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FjaGUucHV0Q2FjaGUoZmlsZU5hbWUsIHsgZGlnZXN0LCB2YWx1ZTogY3JlYXRlZEZpbGUgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNyZWF0ZWRGaWxlO1xuICAgIH07XG4gICAgcmV0dXJuIGJhc2U7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2FuY2VsbGF0aW9uVG9rZW4oc2lnbmFsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXNDYW5jZWxsYXRpb25SZXF1ZXN0ZWQ6ICgpID0+IHNpZ25hbC5hYm9ydGVkLFxuICAgICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkOiAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Ioc2lnbmFsLnJlYXNvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciB0PXJlcXVpcmUoXCJzdHJlYW1cIiksZT1mdW5jdGlvbih0LG8pe3JldHVybiBlPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbih0LGUpe3QuX19wcm90b19fPWV9fHxmdW5jdGlvbih0LGUpe2Zvcih2YXIgbyBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG8pJiYodFtvXT1lW29dKX0sZSh0LG8pfTtmdW5jdGlvbiBvKHQsbyl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgbyYmbnVsbCE9PW8pdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIrU3RyaW5nKG8pK1wiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9dH1lKHQsbyksdC5wcm90b3R5cGU9bnVsbD09PW8/T2JqZWN0LmNyZWF0ZShvKTooci5wcm90b3R5cGU9by5wcm90b3R5cGUsbmV3IHIpfWZ1bmN0aW9uIHIodCxlLG8scil7cmV0dXJuIG5ldyhvfHwobz1Qcm9taXNlKSkoKGZ1bmN0aW9uKG4saSl7ZnVuY3Rpb24gcCh0KXt0cnl7cyhyLm5leHQodCkpfWNhdGNoKHQpe2kodCl9fWZ1bmN0aW9uIGEodCl7dHJ5e3Moci50aHJvdyh0KSl9Y2F0Y2godCl7aSh0KX19ZnVuY3Rpb24gcyh0KXt2YXIgZTt0LmRvbmU/bih0LnZhbHVlKTooZT10LnZhbHVlLGUgaW5zdGFuY2VvZiBvP2U6bmV3IG8oKGZ1bmN0aW9uKHQpe3QoZSl9KSkpLnRoZW4ocCxhKX1zKChyPXIuYXBwbHkodCxlfHxbXSkpLm5leHQoKSl9KSl9ZnVuY3Rpb24gbih0LGUpe3ZhciBvLHIsbixpPXtsYWJlbDowLHNlbnQ6ZnVuY3Rpb24oKXtpZigxJm5bMF0pdGhyb3cgblsxXTtyZXR1cm4gblsxXX0sdHJ5czpbXSxvcHM6W119LHA9T2JqZWN0LmNyZWF0ZSgoXCJmdW5jdGlvblwiPT10eXBlb2YgSXRlcmF0b3I/SXRlcmF0b3I6T2JqZWN0KS5wcm90b3R5cGUpO3JldHVybiBwLm5leHQ9YSgwKSxwLnRocm93PWEoMSkscC5yZXR1cm49YSgyKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJihwW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pLHA7ZnVuY3Rpb24gYShhKXtyZXR1cm4gZnVuY3Rpb24ocyl7cmV0dXJuIGZ1bmN0aW9uKGEpe2lmKG8pdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7Zm9yKDtwJiYocD0wLGFbMF0mJihpPTApKSxpOyl0cnl7aWYobz0xLHImJihuPTImYVswXT9yLnJldHVybjphWzBdP3IudGhyb3d8fCgobj1yLnJldHVybikmJm4uY2FsbChyKSwwKTpyLm5leHQpJiYhKG49bi5jYWxsKHIsYVsxXSkpLmRvbmUpcmV0dXJuIG47c3dpdGNoKHI9MCxuJiYoYT1bMiZhWzBdLG4udmFsdWVdKSxhWzBdKXtjYXNlIDA6Y2FzZSAxOm49YTticmVhaztjYXNlIDQ6cmV0dXJuIGkubGFiZWwrKyx7dmFsdWU6YVsxXSxkb25lOiExfTtjYXNlIDU6aS5sYWJlbCsrLHI9YVsxXSxhPVswXTtjb250aW51ZTtjYXNlIDc6YT1pLm9wcy5wb3AoKSxpLnRyeXMucG9wKCk7Y29udGludWU7ZGVmYXVsdDppZighKG49aS50cnlzLChuPW4ubGVuZ3RoPjAmJm5bbi5sZW5ndGgtMV0pfHw2IT09YVswXSYmMiE9PWFbMF0pKXtpPTA7Y29udGludWV9aWYoMz09PWFbMF0mJighbnx8YVsxXT5uWzBdJiZhWzFdPG5bM10pKXtpLmxhYmVsPWFbMV07YnJlYWt9aWYoNj09PWFbMF0mJmkubGFiZWw8blsxXSl7aS5sYWJlbD1uWzFdLG49YTticmVha31pZihuJiZpLmxhYmVsPG5bMl0pe2kubGFiZWw9blsyXSxpLm9wcy5wdXNoKGEpO2JyZWFrfW5bMl0mJmkub3BzLnBvcCgpLGkudHJ5cy5wb3AoKTtjb250aW51ZX1hPWUuY2FsbCh0LGkpfWNhdGNoKHQpe2E9WzYsdF0scj0wfWZpbmFsbHl7bz1uPTB9aWYoNSZhWzBdKXRocm93IGFbMV07cmV0dXJue3ZhbHVlOmFbMF0/YVsxXTp2b2lkIDAsZG9uZTohMH19KFthLHNdKX19fWZ1bmN0aW9uIGkodCl7dmFyIGU9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Isbz1lJiZ0W2VdLHI9MDtpZihvKXJldHVybiBvLmNhbGwodCk7aWYodCYmXCJudW1iZXJcIj09dHlwZW9mIHQubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIHQmJnI+PXQubGVuZ3RoJiYodD12b2lkIDApLHt2YWx1ZTp0JiZ0W3IrK10sZG9uZTohdH19fTt0aHJvdyBuZXcgVHlwZUVycm9yKGU/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX1mdW5jdGlvbiBwKHQpe2lmKCFTeW1ib2wuYXN5bmNJdGVyYXRvcil0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO3ZhciBlLG89dFtTeW1ib2wuYXN5bmNJdGVyYXRvcl07cmV0dXJuIG8/by5jYWxsKHQpOih0PWkodCksZT17fSxyKFwibmV4dFwiKSxyKFwidGhyb3dcIikscihcInJldHVyblwiKSxlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSxlKTtmdW5jdGlvbiByKG8pe2Vbb109dFtvXSYmZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihyLG4peyhmdW5jdGlvbih0LGUsbyxyKXtQcm9taXNlLnJlc29sdmUocikudGhlbigoZnVuY3Rpb24oZSl7dCh7dmFsdWU6ZSxkb25lOm99KX0pLGUpfSkocixuLChlPXRbb10oZSkpLmRvbmUsZS52YWx1ZSl9KSl9fX1mdW5jdGlvbiBhKHQsZSxvLHIpe2lmKFwiYVwiPT09byYmIXIpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlP3QhPT1lfHwhcjohZS5oYXModCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtyZXR1cm5cIm1cIj09PW8/cjpcImFcIj09PW8/ci5jYWxsKHQpOnI/ci52YWx1ZTplLmdldCh0KX1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTdXBwcmVzc2VkRXJyb3ImJlN1cHByZXNzZWRFcnJvcjt2YXIgcz1cInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6e307IWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gZSh0LGUpe2Zvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXt2YXIgcj1lW29dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxyLmtleSxyKX19ZnVuY3Rpb24gbyh0LG8scil7cmV0dXJuIG8mJmUodC5wcm90b3R5cGUsbyksciYmZSh0LHIpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksdH1mdW5jdGlvbiByKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGUmJmkodCxlKX1mdW5jdGlvbiBuKHQpe3JldHVybiBuPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSxuKHQpfWZ1bmN0aW9uIGkodCxlKXtyZXR1cm4gaT1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LGkodCxlKX1mdW5jdGlvbiBwKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19ZnVuY3Rpb24gYSh0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH1mdW5jdGlvbiB1KHQsZSl7aWYoZSYmKFwib2JqZWN0XCI9PXR5cGVvZiBlfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gYSh0KX1mdW5jdGlvbiBoKHQpe3ZhciBlPXAoKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgbyxyPW4odCk7aWYoZSl7dmFyIGk9bih0aGlzKS5jb25zdHJ1Y3RvcjtvPVJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGkpfWVsc2Ugbz1yLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gdSh0aGlzLG8pfX1mdW5jdGlvbiBsKHQsZSl7Zm9yKDshT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSkmJm51bGwhPT0odD1uKHQpKTspO3JldHVybiB0fWZ1bmN0aW9uIGMoKXtyZXR1cm4gYz1cInVuZGVmaW5lZFwiIT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5nZXQ/UmVmbGVjdC5nZXQuYmluZCgpOmZ1bmN0aW9uKHQsZSxvKXt2YXIgcj1sKHQsZSk7aWYocil7dmFyIG49T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLGUpO3JldHVybiBuLmdldD9uLmdldC5jYWxsKGFyZ3VtZW50cy5sZW5ndGg8Mz90Om8pOm4udmFsdWV9fSxjLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt0KHRoaXMsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJsaXN0ZW5lcnNcIix7dmFsdWU6e30sd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfSl9cmV0dXJuIG8oZSxbe2tleTpcImFkZEV2ZW50TGlzdGVuZXJcIix2YWx1ZTpmdW5jdGlvbih0LGUsbyl7dCBpbiB0aGlzLmxpc3RlbmVyc3x8KHRoaXMubGlzdGVuZXJzW3RdPVtdKSx0aGlzLmxpc3RlbmVyc1t0XS5wdXNoKHtjYWxsYmFjazplLG9wdGlvbnM6b30pfX0se2tleTpcInJlbW92ZUV2ZW50TGlzdGVuZXJcIix2YWx1ZTpmdW5jdGlvbih0LGUpe2lmKHQgaW4gdGhpcy5saXN0ZW5lcnMpZm9yKHZhciBvPXRoaXMubGlzdGVuZXJzW3RdLHI9MCxuPW8ubGVuZ3RoO3I8bjtyKyspaWYob1tyXS5jYWxsYmFjaz09PWUpcmV0dXJuIHZvaWQgby5zcGxpY2UociwxKX19LHtrZXk6XCJkaXNwYXRjaEV2ZW50XCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYodC50eXBlIGluIHRoaXMubGlzdGVuZXJzKXtmb3IodmFyIGU9dGhpcy5saXN0ZW5lcnNbdC50eXBlXS5zbGljZSgpLG89MCxyPWUubGVuZ3RoO288cjtvKyspe3ZhciBuPWVbb107dHJ5e24uY2FsbGJhY2suY2FsbCh0aGlzLHQpfWNhdGNoKHQpe1Byb21pc2UucmVzb2x2ZSgpLnRoZW4oKGZ1bmN0aW9uKCl7dGhyb3cgdH0pKX1uLm9wdGlvbnMmJm4ub3B0aW9ucy5vbmNlJiZ0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIodC50eXBlLG4uY2FsbGJhY2spfXJldHVybiF0LmRlZmF1bHRQcmV2ZW50ZWR9fX1dKSxlfSgpLHk9ZnVuY3Rpb24oZSl7cihwLGUpO3ZhciBpPWgocCk7ZnVuY3Rpb24gcCgpe3ZhciBlO3JldHVybiB0KHRoaXMscCksKGU9aS5jYWxsKHRoaXMpKS5saXN0ZW5lcnN8fGYuY2FsbChhKGUpKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYShlKSxcImFib3J0ZWRcIix7dmFsdWU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGEoZSksXCJvbmFib3J0XCIse3ZhbHVlOm51bGwsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGEoZSksXCJyZWFzb25cIix7dmFsdWU6dm9pZCAwLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGV9cmV0dXJuIG8ocCxbe2tleTpcInRvU3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm5cIltvYmplY3QgQWJvcnRTaWduYWxdXCJ9fSx7a2V5OlwiZGlzcGF0Y2hFdmVudFwiLHZhbHVlOmZ1bmN0aW9uKHQpe1wiYWJvcnRcIj09PXQudHlwZSYmKHRoaXMuYWJvcnRlZD0hMCxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLm9uYWJvcnQmJnRoaXMub25hYm9ydC5jYWxsKHRoaXMsdCkpLGMobihwLnByb3RvdHlwZSksXCJkaXNwYXRjaEV2ZW50XCIsdGhpcykuY2FsbCh0aGlzLHQpfX1dKSxwfShmKSxkPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3QodGhpcyxlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInNpZ25hbFwiLHt2YWx1ZTpuZXcgeSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9KX1yZXR1cm4gbyhlLFt7a2V5OlwiYWJvcnRcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZTt0cnl7ZT1uZXcgRXZlbnQoXCJhYm9ydFwiKX1jYXRjaCh0KXtcInVuZGVmaW5lZFwiIT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQuY3JlYXRlRXZlbnQ/KGU9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKSkuaW5pdEV2ZW50KFwiYWJvcnRcIiwhMSwhMSk6KGU9ZG9jdW1lbnQuY3JlYXRlRXZlbnRPYmplY3QoKSkudHlwZT1cImFib3J0XCI6ZT17dHlwZTpcImFib3J0XCIsYnViYmxlczohMSxjYW5jZWxhYmxlOiExfX12YXIgbz10O2lmKHZvaWQgMD09PW8paWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGRvY3VtZW50KShvPW5ldyBFcnJvcihcIlRoaXMgb3BlcmF0aW9uIHdhcyBhYm9ydGVkXCIpKS5uYW1lPVwiQWJvcnRFcnJvclwiO2Vsc2UgdHJ5e289bmV3IERPTUV4Y2VwdGlvbihcInNpZ25hbCBpcyBhYm9ydGVkIHdpdGhvdXQgcmVhc29uXCIpfWNhdGNoKHQpeyhvPW5ldyBFcnJvcihcIlRoaXMgb3BlcmF0aW9uIHdhcyBhYm9ydGVkXCIpKS5uYW1lPVwiQWJvcnRFcnJvclwifXRoaXMuc2lnbmFsLnJlYXNvbj1vLHRoaXMuc2lnbmFsLmRpc3BhdGNoRXZlbnQoZSl9fSx7a2V5OlwidG9TdHJpbmdcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVyblwiW29iamVjdCBBYm9ydENvbnRyb2xsZXJdXCJ9fV0pLGV9KCk7ZnVuY3Rpb24gYih0KXtyZXR1cm4gdC5fX0ZPUkNFX0lOU1RBTExfQUJPUlRDT05UUk9MTEVSX1BPTFlGSUxMPyhjb25zb2xlLmxvZyhcIl9fRk9SQ0VfSU5TVEFMTF9BQk9SVENPTlRST0xMRVJfUE9MWUZJTEw9dHJ1ZSBpcyBzZXQsIHdpbGwgZm9yY2UgaW5zdGFsbCBwb2x5ZmlsbFwiKSwhMCk6XCJmdW5jdGlvblwiPT10eXBlb2YgdC5SZXF1ZXN0JiYhdC5SZXF1ZXN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eShcInNpZ25hbFwiKXx8IXQuQWJvcnRDb250cm9sbGVyfVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmKGQucHJvdG90eXBlW1N5bWJvbC50b1N0cmluZ1RhZ109XCJBYm9ydENvbnRyb2xsZXJcIix5LnByb3RvdHlwZVtTeW1ib2wudG9TdHJpbmdUYWddPVwiQWJvcnRTaWduYWxcIiksZnVuY3Rpb24odCl7Yih0KSYmKHQuQWJvcnRDb250cm9sbGVyPWQsdC5BYm9ydFNpZ25hbD15KX0oXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpzKX0oKTt2YXIgdSxoPXt9OyFmdW5jdGlvbih0KXt2YXIgZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBPYmplY3QuZGVmaW5lUHJvcGVydGllcz9PYmplY3QuZGVmaW5lUHJvcGVydHk6ZnVuY3Rpb24odCxlLG8pe3QhPUFycmF5LnByb3RvdHlwZSYmdCE9T2JqZWN0LnByb3RvdHlwZSYmKHRbZV09by52YWx1ZSl9LG89KFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdyxzKTtmdW5jdGlvbiByKCl7cj1mdW5jdGlvbigpe30sby5TeW1ib2x8fChvLlN5bWJvbD1wKX1mdW5jdGlvbiBuKHQsbyl7dGhpcy5hPXQsZSh0aGlzLFwiZGVzY3JpcHRpb25cIix7Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOm99KX1uLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmF9O3ZhciBpLHA9KGk9MCxmdW5jdGlvbiB0KGUpe2lmKHRoaXMgaW5zdGFuY2VvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3JcIik7cmV0dXJuIG5ldyBuKFwianNjb21wX3N5bWJvbF9cIisoZXx8XCJcIikrXCJfXCIraSsrLGUpfSk7ZnVuY3Rpb24gYSgpe3IoKTt2YXIgdD1vLlN5bWJvbC5pdGVyYXRvcjt0fHwodD1vLlN5bWJvbC5pdGVyYXRvcj1vLlN5bWJvbChcIlN5bWJvbC5pdGVyYXRvclwiKSksXCJmdW5jdGlvblwiIT10eXBlb2YgQXJyYXkucHJvdG90eXBlW3RdJiZlKEFycmF5LnByb3RvdHlwZSx0LHtjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIGEoKSx0PXtuZXh0OnR9LHRbby5TeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LHR9KGZ1bmN0aW9uKHQpe3ZhciBlPTA7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGU8dC5sZW5ndGg/e2RvbmU6ITEsdmFsdWU6dFtlKytdfTp7ZG9uZTohMH19fSh0aGlzKSl9fSksYT1mdW5jdGlvbigpe319IWZ1bmN0aW9uKHQscil7aWYocil7dmFyIG49bzt0PXQuc3BsaXQoXCIuXCIpO2Zvcih2YXIgaT0wO2k8dC5sZW5ndGgtMTtpKyspe3ZhciBwPXRbaV07cCBpbiBufHwobltwXT17fSksbj1uW3BdfShyPXIoaT1uW3Q9dFt0Lmxlbmd0aC0xXV0pKSE9aSYmbnVsbCE9ciYmZShuLHQse2NvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTpyfSl9fShcIkFycmF5LnByb3RvdHlwZS5lbnRyaWVzXCIsKGZ1bmN0aW9uKHQpe3JldHVybiB0fHxmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUpe2EoKSx0IGluc3RhbmNlb2YgU3RyaW5nJiYodCs9XCJcIik7dmFyIG89MCxyPXtuZXh0OmZ1bmN0aW9uKCl7aWYobzx0Lmxlbmd0aCl7dmFyIG49bysrO3JldHVybnt2YWx1ZTplKG4sdFtuXSksZG9uZTohMX19cmV0dXJuIHIubmV4dD1mdW5jdGlvbigpe3JldHVybntkb25lOiEwLHZhbHVlOnZvaWQgMH19LHIubmV4dCgpfX07cmV0dXJuIHJbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiByfSxyfSh0aGlzLChmdW5jdGlvbih0LGUpe3JldHVyblt0LGVdfSkpfX0pKTt2YXIgdT1zfHxzZWxmO2Z1bmN0aW9uIGgodCxlLG8pe3Q9dC5zcGxpdChcIi5cIiksbz1vfHx1LHRbMF1pbiBvfHx2b2lkIDA9PT1vLmV4ZWNTY3JpcHR8fG8uZXhlY1NjcmlwdChcInZhciBcIit0WzBdKTtmb3IodmFyIHI7dC5sZW5ndGgmJihyPXQuc2hpZnQoKSk7KXQubGVuZ3RofHx2b2lkIDA9PT1lP289b1tyXSYmb1tyXSE9PU9iamVjdC5wcm90b3R5cGVbcl0/b1tyXTpvW3JdPXt9Om9bcl09ZX1mdW5jdGlvbiBsKHQpe3ZhciBlPXR5cGVvZiB0O2lmKFwib2JqZWN0XCI9PWUpe2lmKCF0KXJldHVyblwibnVsbFwiO2lmKHQgaW5zdGFuY2VvZiBBcnJheSlyZXR1cm5cImFycmF5XCI7aWYodCBpbnN0YW5jZW9mIE9iamVjdClyZXR1cm4gZTt2YXIgbz1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCk7aWYoXCJbb2JqZWN0IFdpbmRvd11cIj09bylyZXR1cm5cIm9iamVjdFwiO2lmKFwiW29iamVjdCBBcnJheV1cIj09b3x8XCJudW1iZXJcIj09dHlwZW9mIHQubGVuZ3RoJiZ2b2lkIDAhPT10LnNwbGljZSYmdm9pZCAwIT09dC5wcm9wZXJ0eUlzRW51bWVyYWJsZSYmIXQucHJvcGVydHlJc0VudW1lcmFibGUoXCJzcGxpY2VcIikpcmV0dXJuXCJhcnJheVwiO2lmKFwiW29iamVjdCBGdW5jdGlvbl1cIj09b3x8dm9pZCAwIT09dC5jYWxsJiZ2b2lkIDAhPT10LnByb3BlcnR5SXNFbnVtZXJhYmxlJiYhdC5wcm9wZXJ0eUlzRW51bWVyYWJsZShcImNhbGxcIikpcmV0dXJuXCJmdW5jdGlvblwifWVsc2UgaWYoXCJmdW5jdGlvblwiPT1lJiZ2b2lkIDA9PT10LmNhbGwpcmV0dXJuXCJvYmplY3RcIjtyZXR1cm4gZX1mdW5jdGlvbiBjKHQpe3ZhciBlPXR5cGVvZiB0O3JldHVyblwib2JqZWN0XCI9PWUmJm51bGwhPXR8fFwiZnVuY3Rpb25cIj09ZX12YXIgZj1cImNvbnN0cnVjdG9yIGhhc093blByb3BlcnR5IGlzUHJvdG90eXBlT2YgcHJvcGVydHlJc0VudW1lcmFibGUgdG9Mb2NhbGVTdHJpbmcgdG9TdHJpbmcgdmFsdWVPZlwiLnNwbGl0KFwiIFwiKTt2YXIgeT1BcnJheS5wcm90b3R5cGUuZm9yRWFjaD9mdW5jdGlvbih0LGUpe0FycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwodCxlLHZvaWQgMCl9OmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBvPXQubGVuZ3RoLHI9XCJzdHJpbmdcIj09dHlwZW9mIHQ/dC5zcGxpdChcIlwiKTp0LG49MDtuPG87bisrKW4gaW4gciYmZS5jYWxsKHZvaWQgMCxyW25dLG4sdCl9LGQ9QXJyYXkucHJvdG90eXBlLm1hcD9mdW5jdGlvbih0LGUpe3JldHVybiBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwodCxlLHZvaWQgMCl9OmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBvPXQubGVuZ3RoLHI9QXJyYXkobyksbj1cInN0cmluZ1wiPT10eXBlb2YgdD90LnNwbGl0KFwiXCIpOnQsaT0wO2k8bztpKyspaSBpbiBuJiYocltpXT1lLmNhbGwodm9pZCAwLG5baV0saSx0KSk7cmV0dXJuIHJ9O2Z1bmN0aW9uIGIodCxlLG8pe3JldHVybiAyPj1hcmd1bWVudHMubGVuZ3RoP0FycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHQsZSk6QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodCxlLG8pfWZ1bmN0aW9uIGcodCxlLG8scil7dmFyIG49XCJBc3NlcnRpb24gZmFpbGVkXCI7aWYobyl7bis9XCI6IFwiK287dmFyIGk9cn1lbHNlIHQmJihuKz1cIjogXCIrdCxpPWUpO3Rocm93IEVycm9yKG4saXx8W10pfWZ1bmN0aW9uIHYodCxlLG8pe2Zvcih2YXIgcj1bXSxuPTI7bjxhcmd1bWVudHMubGVuZ3RoOysrbilyW24tMl09YXJndW1lbnRzW25dO3JldHVybiB0fHxnKFwiXCIsbnVsbCxlLHIpLHR9ZnVuY3Rpb24gdyh0LGUpe2Zvcih2YXIgbz1bXSxyPTE7cjxhcmd1bWVudHMubGVuZ3RoOysrcilvW3ItMV09YXJndW1lbnRzW3JdO3Rocm93IEVycm9yKFwiRmFpbHVyZVwiKyh0P1wiOiBcIit0OlwiXCIpLG8pfWZ1bmN0aW9uIFModCxlLG8scil7Zm9yKHZhciBuPVtdLGk9MztpPGFyZ3VtZW50cy5sZW5ndGg7KytpKW5baS0zXT1hcmd1bWVudHNbaV07dCBpbnN0YW5jZW9mIGV8fGcoXCJFeHBlY3RlZCBpbnN0YW5jZW9mICVzIGJ1dCBnb3QgJXMuXCIsW20oZSksbSh0KV0sbyxuKX1mdW5jdGlvbiBtKHQpe3JldHVybiB0IGluc3RhbmNlb2YgRnVuY3Rpb24/dC5kaXNwbGF5TmFtZXx8dC5uYW1lfHxcInVua25vd24gdHlwZSBuYW1lXCI6dCBpbnN0YW5jZW9mIE9iamVjdD90LmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lfHx0LmNvbnN0cnVjdG9yLm5hbWV8fE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KTpudWxsPT09dD9cIm51bGxcIjp0eXBlb2YgdH1mdW5jdGlvbiBqKHQsZSl7aWYodGhpcy5jPXQsdGhpcy5iPWUsdGhpcy5hPXt9LHRoaXMuYXJyQ2xlYW49ITAsMDx0aGlzLmMubGVuZ3RoKXtmb3IodD0wO3Q8dGhpcy5jLmxlbmd0aDt0Kyspe3ZhciBvPShlPXRoaXMuY1t0XSlbMF07dGhpcy5hW28udG9TdHJpbmcoKV09bmV3IE8obyxlWzFdKX10aGlzLmFyckNsZWFuPSEwfX1mdW5jdGlvbiB4KHQpe3RoaXMuYT0wLHRoaXMuYj10fWZ1bmN0aW9uIGsodCxlKXtyZXR1cm4gdC5iPyhlLmF8fChlLmE9bmV3IHQuYihlLnZhbHVlKSksZS5hKTplLnZhbHVlfWZ1bmN0aW9uIEYodCl7dD10LmE7dmFyIGUsbz1bXTtmb3IoZSBpbiB0KU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGUpJiZvLnB1c2goZSk7cmV0dXJuIG99ZnVuY3Rpb24gTyh0LGUpe3RoaXMua2V5PXQsdGhpcy52YWx1ZT1lLHRoaXMuYT12b2lkIDB9ZnVuY3Rpb24gQSh0KXtpZig4MTkyPj10Lmxlbmd0aClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLHQpO2Zvcih2YXIgZT1cIlwiLG89MDtvPHQubGVuZ3RoO28rPTgxOTIpZSs9U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLGIodCxvLG8rODE5MikpO3JldHVybiBlfWgoXCJqc3BiLk1hcFwiLGosdm9pZCAwKSxqLnByb3RvdHlwZS5nPWZ1bmN0aW9uKCl7aWYodGhpcy5hcnJDbGVhbil7aWYodGhpcy5iKXt2YXIgdCxlPXRoaXMuYTtmb3IodCBpbiBlKWlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpKXt2YXIgbz1lW3RdLmE7byYmby5nKCl9fX1lbHNle2Zvcih0aGlzLmMubGVuZ3RoPTAsKGU9Rih0aGlzKSkuc29ydCgpLHQ9MDt0PGUubGVuZ3RoO3QrKyl7dmFyIHI9dGhpcy5hW2VbdF1dOyhvPXIuYSkmJm8uZygpLHRoaXMuYy5wdXNoKFtyLmtleSxyLnZhbHVlXSl9dGhpcy5hcnJDbGVhbj0hMH1yZXR1cm4gdGhpcy5jfSxqLnByb3RvdHlwZS50b0FycmF5PWoucHJvdG90eXBlLmcsai5wcm90b3R5cGUuTWM9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG89dGhpcy5nKCkscj1bXSxuPTA7bjxvLmxlbmd0aDtuKyspe3ZhciBpPXRoaXMuYVtvW25dWzBdLnRvU3RyaW5nKCldO2sodGhpcyxpKTt2YXIgcD1pLmE7cD8odihlKSxyLnB1c2goW2kua2V5LGUodCxwKV0pKTpyLnB1c2goW2kua2V5LGkudmFsdWVdKX1yZXR1cm4gcn0sai5wcm90b3R5cGUudG9PYmplY3Q9ai5wcm90b3R5cGUuTWMsai5mcm9tT2JqZWN0PWZ1bmN0aW9uKHQsZSxvKXtlPW5ldyBqKFtdLGUpO2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgbj10W3JdWzBdLGk9byh0W3JdWzFdKTtlLnNldChuLGkpfXJldHVybiBlfSx4LnByb3RvdHlwZS5uZXh0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYTx0aGlzLmIubGVuZ3RoP3tkb25lOiExLHZhbHVlOnRoaXMuYlt0aGlzLmErK119Ontkb25lOiEwLHZhbHVlOnZvaWQgMH19LFwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJih4LnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxqLnByb3RvdHlwZS5KYj1mdW5jdGlvbigpe3JldHVybiBGKHRoaXMpLmxlbmd0aH0sai5wcm90b3R5cGUuZ2V0TGVuZ3RoPWoucHJvdG90eXBlLkpiLGoucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5hPXt9LHRoaXMuYXJyQ2xlYW49ITF9LGoucHJvdG90eXBlLmNsZWFyPWoucHJvdG90eXBlLmNsZWFyLGoucHJvdG90eXBlLkNiPWZ1bmN0aW9uKHQpe3Q9dC50b1N0cmluZygpO3ZhciBlPXRoaXMuYS5oYXNPd25Qcm9wZXJ0eSh0KTtyZXR1cm4gZGVsZXRlIHRoaXMuYVt0XSx0aGlzLmFyckNsZWFuPSExLGV9LGoucHJvdG90eXBlLmRlbD1qLnByb3RvdHlwZS5DYixqLnByb3RvdHlwZS5FYj1mdW5jdGlvbigpe3ZhciB0PVtdLGU9Rih0aGlzKTtlLnNvcnQoKTtmb3IodmFyIG89MDtvPGUubGVuZ3RoO28rKyl7dmFyIHI9dGhpcy5hW2Vbb11dO3QucHVzaChbci5rZXksci52YWx1ZV0pfXJldHVybiB0fSxqLnByb3RvdHlwZS5nZXRFbnRyeUxpc3Q9ai5wcm90b3R5cGUuRWIsai5wcm90b3R5cGUuZW50cmllcz1mdW5jdGlvbigpe3ZhciB0PVtdLGU9Rih0aGlzKTtlLnNvcnQoKTtmb3IodmFyIG89MDtvPGUubGVuZ3RoO28rKyl7dmFyIHI9dGhpcy5hW2Vbb11dO3QucHVzaChbci5rZXksayh0aGlzLHIpXSl9cmV0dXJuIG5ldyB4KHQpfSxqLnByb3RvdHlwZS5lbnRyaWVzPWoucHJvdG90eXBlLmVudHJpZXMsai5wcm90b3R5cGUua2V5cz1mdW5jdGlvbigpe3ZhciB0PVtdLGU9Rih0aGlzKTtlLnNvcnQoKTtmb3IodmFyIG89MDtvPGUubGVuZ3RoO28rKyl0LnB1c2godGhpcy5hW2Vbb11dLmtleSk7cmV0dXJuIG5ldyB4KHQpfSxqLnByb3RvdHlwZS5rZXlzPWoucHJvdG90eXBlLmtleXMsai5wcm90b3R5cGUudmFsdWVzPWZ1bmN0aW9uKCl7dmFyIHQ9W10sZT1GKHRoaXMpO2Uuc29ydCgpO2Zvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXQucHVzaChrKHRoaXMsdGhpcy5hW2Vbb11dKSk7cmV0dXJuIG5ldyB4KHQpfSxqLnByb3RvdHlwZS52YWx1ZXM9ai5wcm90b3R5cGUudmFsdWVzLGoucHJvdG90eXBlLmZvckVhY2g9ZnVuY3Rpb24odCxlKXt2YXIgbz1GKHRoaXMpO28uc29ydCgpO2Zvcih2YXIgcj0wO3I8by5sZW5ndGg7cisrKXt2YXIgbj10aGlzLmFbb1tyXV07dC5jYWxsKGUsayh0aGlzLG4pLG4ua2V5LHRoaXMpfX0sai5wcm90b3R5cGUuZm9yRWFjaD1qLnByb3RvdHlwZS5mb3JFYWNoLGoucHJvdG90eXBlLnNldD1mdW5jdGlvbih0LGUpe3ZhciBvPW5ldyBPKHQpO3JldHVybiB0aGlzLmI/KG8uYT1lLG8udmFsdWU9ZS5nKCkpOm8udmFsdWU9ZSx0aGlzLmFbdC50b1N0cmluZygpXT1vLHRoaXMuYXJyQ2xlYW49ITEsdGhpc30sai5wcm90b3R5cGUuc2V0PWoucHJvdG90eXBlLnNldCxqLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24odCl7aWYodD10aGlzLmFbdC50b1N0cmluZygpXSlyZXR1cm4gayh0aGlzLHQpfSxqLnByb3RvdHlwZS5nZXQ9ai5wcm90b3R5cGUuZ2V0LGoucHJvdG90eXBlLmhhcz1mdW5jdGlvbih0KXtyZXR1cm4gdC50b1N0cmluZygpaW4gdGhpcy5hfSxqLnByb3RvdHlwZS5oYXM9ai5wcm90b3R5cGUuaGFzLGoucHJvdG90eXBlLkpjPWZ1bmN0aW9uKHQsZSxvLHIsbil7dmFyIGk9Rih0aGlzKTtpLnNvcnQoKTtmb3IodmFyIHA9MDtwPGkubGVuZ3RoO3ArKyl7dmFyIGE9dGhpcy5hW2lbcF1dO2UuVmEodCksby5jYWxsKGUsMSxhLmtleSksdGhpcy5iP3IuY2FsbChlLDIsayh0aGlzLGEpLG4pOnIuY2FsbChlLDIsYS52YWx1ZSksZS5ZYSgpfX0sai5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWoucHJvdG90eXBlLkpjLGouZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24odCxlLG8scixuLGkscCl7Zm9yKDtlLm9hKCkmJiFlLmJiKCk7KXt2YXIgYT1lLmM7MT09YT9pPW8uY2FsbChlKToyPT1hJiYodC5iPyh2KG4pLHB8fChwPW5ldyB0LmIpLHIuY2FsbChlLHAsbikpOnA9ci5jYWxsKGUpKX12KG51bGwhPWkpLHYobnVsbCE9cCksdC5zZXQoaSxwKX07dmFyIF89e1wiXFwwXCI6XCJcXFxcMFwiLFwiXFxiXCI6XCJcXFxcYlwiLFwiXFxmXCI6XCJcXFxcZlwiLFwiXFxuXCI6XCJcXFxcblwiLFwiXFxyXCI6XCJcXFxcclwiLFwiXFx0XCI6XCJcXFxcdFwiLFwiXFx2XCI6XCJcXFxceDBCXCIsJ1wiJzonXFxcXFwiJyxcIlxcXFxcIjpcIlxcXFxcXFxcXCIsXCI8XCI6XCJcXFxcdTAwM0NcIn0sTT17XCInXCI6XCJcXFxcJ1wifSxQPXt9LEU9bnVsbDtmdW5jdGlvbiBCKHQsZSl7dm9pZCAwPT09ZSYmKGU9MCksQygpLGU9UFtlXTtmb3IodmFyIG89W10scj0wO3I8dC5sZW5ndGg7cis9Myl7dmFyIG49dFtyXSxpPXIrMTx0Lmxlbmd0aCxwPWk/dFtyKzFdOjAsYT1yKzI8dC5sZW5ndGgscz1hP3RbcisyXTowLHU9bj4+MjtuPSgzJm4pPDw0fHA+PjQscD0oMTUmcCk8PDJ8cz4+NixzJj02MyxhfHwocz02NCxpfHwocD02NCkpLG8ucHVzaChlW3VdLGVbbl0sZVtwXXx8XCJcIixlW3NdfHxcIlwiKX1yZXR1cm4gby5qb2luKFwiXCIpfWZ1bmN0aW9uIEkodCl7dmFyIGU9dC5sZW5ndGgsbz0zKmUvNDtvJTM/bz1NYXRoLmZsb29yKG8pOi0xIT1cIj0uXCIuaW5kZXhPZih0W2UtMV0pJiYobz0tMSE9XCI9LlwiLmluZGV4T2YodFtlLTJdKT9vLTI6by0xKTt2YXIgcj1uZXcgVWludDhBcnJheShvKSxuPTA7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gbyhlKXtmb3IoO3I8dC5sZW5ndGg7KXt2YXIgbz10LmNoYXJBdChyKyspLG49RVtvXTtpZihudWxsIT1uKXJldHVybiBuO2lmKCEvXltcXHNcXHhhMF0qJC8udGVzdChvKSl0aHJvdyBFcnJvcihcIlVua25vd24gYmFzZTY0IGVuY29kaW5nIGF0IGNoYXI6IFwiK28pfXJldHVybiBlfUMoKTtmb3IodmFyIHI9MDs7KXt2YXIgbj1vKC0xKSxpPW8oMCkscD1vKDY0KSxhPW8oNjQpO2lmKDY0PT09YSYmLTE9PT1uKWJyZWFrO2Uobjw8MnxpPj40KSw2NCE9cCYmKGUoaTw8NCYyNDB8cD4+MiksNjQhPWEmJmUocDw8NiYxOTJ8YSkpfX0odCwoZnVuY3Rpb24odCl7cltuKytdPXR9KSksci5zdWJhcnJheSgwLG4pfWZ1bmN0aW9uIEMoKXtpZighRSl7RT17fTtmb3IodmFyIHQ9XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OVwiLnNwbGl0KFwiXCIpLGU9W1wiKy89XCIsXCIrL1wiLFwiLV89XCIsXCItXy5cIixcIi1fXCJdLG89MDs1Pm87bysrKXt2YXIgcj10LmNvbmNhdChlW29dLnNwbGl0KFwiXCIpKTtQW29dPXI7Zm9yKHZhciBuPTA7bjxyLmxlbmd0aDtuKyspe3ZhciBpPXJbbl07dm9pZCAwPT09RVtpXSYmKEVbaV09bil9fX19aChcImpzcGIuQ29uc3RCaW5hcnlNZXNzYWdlXCIsKGZ1bmN0aW9uKCl7fSksdm9pZCAwKSxoKFwianNwYi5CaW5hcnlNZXNzYWdlXCIsKGZ1bmN0aW9uKCl7fSksdm9pZCAwKSxoKFwianNwYi5CaW5hcnlDb25zdGFudHMuRmllbGRUeXBlXCIse3liOi0xLGVlOjEsRkxPQVQ6MixrZTozLHRlOjQsamU6NSx4Yjo2LHdiOjcsQk9PTDo4LHJlOjksaWU6MTAsbGU6MTEsY2U6MTIsc2U6MTMsZ2U6MTQsbWU6MTUsbmU6MTYsb2U6MTcscGU6MTgsaGU6MzAsdmU6MzF9LHZvaWQgMCksaChcImpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlXCIse3liOi0xLHVlOjAseGI6MSxkZToyLHFlOjMsZmU6NCx3Yjo1fSx2b2lkIDApLGgoXCJqc3BiLkJpbmFyeUNvbnN0YW50cy5GaWVsZFR5cGVUb1dpcmVUeXBlXCIsKGZ1bmN0aW9uKHQpe3N3aXRjaCh0KXtjYXNlIDU6Y2FzZSAzOmNhc2UgMTM6Y2FzZSA0OmNhc2UgMTc6Y2FzZSAxODpjYXNlIDg6Y2FzZSAxNDpjYXNlIDMxOnJldHVybiAwO2Nhc2UgMTpjYXNlIDY6Y2FzZSAxNjpjYXNlIDMwOnJldHVybiAxO2Nhc2UgOTpjYXNlIDExOmNhc2UgMTI6cmV0dXJuIDI7Y2FzZSAyOmNhc2UgNzpjYXNlIDE1OnJldHVybiA1O2RlZmF1bHQ6cmV0dXJuLTF9fSksdm9pZCAwKSxoKFwianNwYi5CaW5hcnlDb25zdGFudHMuSU5WQUxJRF9GSUVMRF9OVU1CRVJcIiwtMSx2b2lkIDApLGgoXCJqc3BiLkJpbmFyeUNvbnN0YW50cy5GTE9BVDMyX0VQU1wiLDE0MDEyOTg0NjQzMjQ4MTdlLTYwLHZvaWQgMCksaChcImpzcGIuQmluYXJ5Q29uc3RhbnRzLkZMT0FUMzJfTUlOXCIsMTE3NTQ5NDM1MDgyMjI4NzVlLTU0LHZvaWQgMCksaChcImpzcGIuQmluYXJ5Q29uc3RhbnRzLkZMT0FUMzJfTUFYXCIsMzQwMjgyMzQ2NjM4NTI4ODZlMjIsdm9pZCAwKSxoKFwianNwYi5CaW5hcnlDb25zdGFudHMuRkxPQVQ2NF9FUFNcIiw1ZS0zMjQsdm9pZCAwKSxoKFwianNwYi5CaW5hcnlDb25zdGFudHMuRkxPQVQ2NF9NSU5cIiwyMjI1MDczODU4NTA3MjAxNGUtMzI0LHZvaWQgMCksaChcImpzcGIuQmluYXJ5Q29uc3RhbnRzLkZMT0FUNjRfTUFYXCIsMTc5NzY5MzEzNDg2MjMxNTdlMjkyLHZvaWQgMCksaChcImpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18yMFwiLDEwNDg1NzYsdm9pZCAwKSxoKFwianNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzIzXCIsODM4ODYwOCx2b2lkIDApLGgoXCJqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzFcIiwyMTQ3NDgzNjQ4LHZvaWQgMCksaChcImpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMlwiLDQyOTQ5NjcyOTYsdm9pZCAwKSxoKFwianNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzUyXCIsNDUwMzU5OTYyNzM3MDQ5Nix2b2lkIDApLGgoXCJqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fNjNcIiwweDgwMDAwMDAwMDAwMDAwMDAsdm9pZCAwKSxoKFwianNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzY0XCIsMHgxMDAwMDAwMDAwMDAwMDAwMCx2b2lkIDApLGgoXCJqc3BiLkJpbmFyeUNvbnN0YW50cy5aRVJPX0hBU0hcIixcIlxcMFxcMFxcMFxcMFxcMFxcMFxcMFxcMFwiLHZvaWQgMCk7dmFyIFI9MCxUPTA7ZnVuY3Rpb24gVSh0KXt2YXIgZT10Pj4+MDt0PU1hdGguZmxvb3IoKHQtZSkvNDI5NDk2NzI5Nik+Pj4wLFI9ZSxUPXR9ZnVuY3Rpb24geih0KXt2YXIgZT0wPnQsbz0odD1NYXRoLmFicyh0KSk+Pj4wO3Q9TWF0aC5mbG9vcigodC1vKS80Mjk0OTY3Mjk2KSx0Pj4+PTAsZSYmKHQ9fnQ+Pj4wLDQyOTQ5NjcyOTU8KG89MSsofm8+Pj4wKSkmJihvPTAsNDI5NDk2NzI5NTwrK3QmJih0PTApKSksUj1vLFQ9dH1mdW5jdGlvbiBXKHQpe3ZhciBlPTA+dDtVKHQ9MipNYXRoLmFicyh0KSksdD1SO3ZhciBvPVQ7ZSYmKDA9PXQ/MD09bz9vPXQ9NDI5NDk2NzI5NTooby0tLHQ9NDI5NDk2NzI5NSk6dC0tKSxSPXQsVD1vfWZ1bmN0aW9uIEwodCl7dmFyIGU9MD50PzE6MDtpZigwPT09KHQ9ZT8tdDp0KSkwPDEvdD9SPVQ9MDooVD0wLFI9MjE0NzQ4MzY0OCk7ZWxzZSBpZihpc05hTih0KSlUPTAsUj0yMTQ3NDgzNjQ3O2Vsc2UgaWYoMzQwMjgyMzQ2NjM4NTI4ODZlMjI8dClUPTAsUj0oZTw8MzF8MjEzOTA5NTA0MCk+Pj4wO2Vsc2UgaWYoMTE3NTQ5NDM1MDgyMjI4NzVlLTU0PnQpdD1NYXRoLnJvdW5kKHQvTWF0aC5wb3coMiwtMTQ5KSksVD0wLFI9KGU8PDMxfHQpPj4+MDtlbHNle3ZhciBvPU1hdGguZmxvb3IoTWF0aC5sb2codCkvTWF0aC5MTjIpO3QqPU1hdGgucG93KDIsLW8pLDE2Nzc3MjE2PD0odD1NYXRoLnJvdW5kKDgzODg2MDgqdCkpJiYrK28sVD0wLFI9KGU8PDMxfG8rMTI3PDwyM3w4Mzg4NjA3JnQpPj4+MH19ZnVuY3Rpb24gVih0KXt2YXIgZT0wPnQ/MTowO2lmKDA9PT0odD1lPy10OnQpKVQ9MDwxL3Q/MDoyMTQ3NDgzNjQ4LFI9MDtlbHNlIGlmKGlzTmFOKHQpKVQ9MjE0NzQ4MzY0NyxSPTQyOTQ5NjcyOTU7ZWxzZSBpZigxNzk3NjkzMTM0ODYyMzE1N2UyOTI8dClUPShlPDwzMXwyMTQ2NDM1MDcyKT4+PjAsUj0wO2Vsc2UgaWYoMjIyNTA3Mzg1ODUwNzIwMTRlLTMyND50KXQvPU1hdGgucG93KDIsLTEwNzQpLFQ9KGU8PDMxfHQvNDI5NDk2NzI5Nik+Pj4wLFI9dD4+PjA7ZWxzZXt2YXIgbz10LHI9MDtpZigyPD1vKWZvcig7Mjw9byYmMTAyMz5yOylyKyssby89MjtlbHNlIGZvcig7MT5vJiYtMTAyMjxyOylvKj0yLHItLTt0Kj1NYXRoLnBvdygyLC1yKSxUPShlPDwzMXxyKzEwMjM8PDIwfDEwNDg1NzYqdCYxMDQ4NTc1KT4+PjAsUj00NTAzNTk5NjI3MzcwNDk2KnQ+Pj4wfX1mdW5jdGlvbiBEKHQpe3ZhciBlPXQuY2hhckNvZGVBdCg0KSxvPXQuY2hhckNvZGVBdCg1KSxyPXQuY2hhckNvZGVBdCg2KSxuPXQuY2hhckNvZGVBdCg3KTtSPXQuY2hhckNvZGVBdCgwKSsodC5jaGFyQ29kZUF0KDEpPDw4KSsodC5jaGFyQ29kZUF0KDIpPDwxNikrKHQuY2hhckNvZGVBdCgzKTw8MjQpPj4+MCxUPWUrKG88PDgpKyhyPDwxNikrKG48PDI0KT4+PjB9ZnVuY3Rpb24gTih0LGUpe3JldHVybiA0Mjk0OTY3Mjk2KmUrKHQ+Pj4wKX1mdW5jdGlvbiBxKHQsZSl7dmFyIG89MjE0NzQ4MzY0OCZlO3JldHVybiBvJiYoZT1+ZT4+PjAsMD09KHQ9MSt+dD4+PjApJiYoZT1lKzE+Pj4wKSksdD1OKHQsZSksbz8tdDp0fWZ1bmN0aW9uIEgodCxlLG8pe3ZhciByPWU+PjMxO3JldHVybiBvKHQ8PDFeciwoZTw8MXx0Pj4+MzEpXnIpfWZ1bmN0aW9uIFoodCxlKXtyZXR1cm4gRyh0LGUscSl9ZnVuY3Rpb24gRyh0LGUsbyl7dmFyIHI9LSgxJnQpO3JldHVybiBvKCh0Pj4+MXxlPDwzMSlecixlPj4+MV5yKX1mdW5jdGlvbiBKKHQpe3ZhciBlPTIqKHQ+PjMxKSsxLG89dD4+PjIzJjI1NTtyZXR1cm4gdCY9ODM4ODYwNywyNTU9PW8/dD9OYU46MS8wKmU6MD09bz9lKk1hdGgucG93KDIsLTE0OSkqdDplKk1hdGgucG93KDIsby0xNTApKih0K01hdGgucG93KDIsMjMpKX1mdW5jdGlvbiAkKHQsZSl7dmFyIG89MiooZT4+MzEpKzEscj1lPj4+MjAmMjA0NztyZXR1cm4gdD00Mjk0OTY3Mjk2KigxMDQ4NTc1JmUpK3QsMjA0Nz09cj90P05hTjoxLzAqbzowPT1yP28qTWF0aC5wb3coMiwtMTA3NCkqdDpvKk1hdGgucG93KDIsci0xMDc1KSoodCs0NTAzNTk5NjI3MzcwNDk2KX1mdW5jdGlvbiBLKHQsZSl7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUodD4+PjAmMjU1LHQ+Pj44JjI1NSx0Pj4+MTYmMjU1LHQ+Pj4yNCYyNTUsZT4+PjAmMjU1LGU+Pj44JjI1NSxlPj4+MTYmMjU1LGU+Pj4yNCYyNTUpfWZ1bmN0aW9uIFgodCxlKXtmdW5jdGlvbiBvKHQsZSl7cmV0dXJuIHQ9dD9TdHJpbmcodCk6XCJcIixlP1wiMDAwMDAwMFwiLnNsaWNlKHQubGVuZ3RoKSt0OnR9aWYoMjA5NzE1MT49ZSlyZXR1cm5cIlwiK04odCxlKTt2YXIgcj0odD4+PjI0fGU8PDgpPj4+MCYxNjc3NzIxNTtyZXR1cm4gdD0oMTY3NzcyMTUmdCkrNjc3NzIxNipyKzY3MTA2NTYqKGU9ZT4+MTYmNjU1MzUpLHIrPTgxNDc0OTcqZSxlKj0yLDFlNzw9dCYmKHIrPU1hdGguZmxvb3IodC8xZTcpLHQlPTFlNyksMWU3PD1yJiYoZSs9TWF0aC5mbG9vcihyLzFlNyksciU9MWU3KSxvKGUsMCkrbyhyLGUpK28odCwxKX1mdW5jdGlvbiBZKHQsZSl7dmFyIG89MjE0NzQ4MzY0OCZlO3JldHVybiBvJiYoZT1+ZSsoMD09KHQ9MSt+dD4+PjApPzE6MCk+Pj4wKSx0PVgodCxlKSxvP1wiLVwiK3Q6dH1mdW5jdGlvbiBRKHQsZSl7RCh0KSx0PVI7dmFyIG89VDtyZXR1cm4gZT9ZKHQsbyk6WCh0LG8pfWZ1bmN0aW9uIHR0KHQpe2Z1bmN0aW9uIGUodCxlKXtmb3IodmFyIG89MDs4Pm8mJigxIT09dHx8MDxlKTtvKyspZT10KnJbb10rZSxyW29dPTI1NSZlLGU+Pj49OH12KDA8dC5sZW5ndGgpO3ZhciBvPSExO1wiLVwiPT09dFswXSYmKG89ITAsdD10LnNsaWNlKDEpKTtmb3IodmFyIHI9WzAsMCwwLDAsMCwwLDAsMF0sbj0wO248dC5sZW5ndGg7bisrKWUoMTAsdC5jaGFyQ29kZUF0KG4pLTQ4KTtyZXR1cm4gbyYmKGZ1bmN0aW9uKCl7Zm9yKHZhciB0PTA7OD50O3QrKylyW3RdPTI1NSZ+clt0XX0oKSxlKDEsMSkpLEEocil9ZnVuY3Rpb24gZXQodCl7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoMTA+dD80OCt0Ojg3K3QpfWZ1bmN0aW9uIG90KHQpe3JldHVybiA5Nzw9dD90LTk3KzEwOnQtNDh9ZnVuY3Rpb24gcnQodCxlLG8scixuKXt2YXIgaT0wO2lmKDEyOD5yKWZvcig7ZTxvJiZ0W2UrK109PXI7KWkrKyxlKz1uO2Vsc2UgZm9yKDtlPG87KXtmb3IodmFyIHA9cjsxMjg8cDspe2lmKHRbZSsrXSE9KDEyNyZwfDEyOCkpcmV0dXJuIGk7cD4+PTd9aWYodFtlKytdIT1wKWJyZWFrO2krKyxlKz1ufXJldHVybiBpfWZ1bmN0aW9uIG50KHQpe3JldHVybiB0LmNvbnN0cnVjdG9yPT09VWludDhBcnJheT90OnQuY29uc3RydWN0b3I9PT1BcnJheUJ1ZmZlcnx8dC5jb25zdHJ1Y3Rvcj09PUFycmF5P25ldyBVaW50OEFycmF5KHQpOnQuY29uc3RydWN0b3I9PT1TdHJpbmc/SSh0KTp0IGluc3RhbmNlb2YgVWludDhBcnJheT9uZXcgVWludDhBcnJheSh0LmJ1ZmZlcix0LmJ5dGVPZmZzZXQsdC5ieXRlTGVuZ3RoKToodyhcIlR5cGUgbm90IGNvbnZlcnRpYmxlIHRvIFVpbnQ4QXJyYXkuXCIpLG5ldyBVaW50OEFycmF5KDApKX1mdW5jdGlvbiBpdCh0LGUsbyl7dGhpcy5iPW51bGwsdGhpcy5hPXRoaXMuYz10aGlzLmg9MCx0aGlzLnY9ITEsdCYmdGhpcy5IKHQsZSxvKX1oKFwianNwYi51dGlscy5nZXRTcGxpdDY0TG93XCIsKGZ1bmN0aW9uKCl7cmV0dXJuIFJ9KSx2b2lkIDApLGgoXCJqc3BiLnV0aWxzLmdldFNwbGl0NjRIaWdoXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIFR9KSx2b2lkIDApLGgoXCJqc3BiLnV0aWxzLnNwbGl0VWludDY0XCIsVSx2b2lkIDApLGgoXCJqc3BiLnV0aWxzLnNwbGl0SW50NjRcIix6LHZvaWQgMCksaChcImpzcGIudXRpbHMuc3BsaXRaaWd6YWc2NFwiLFcsdm9pZCAwKSxoKFwianNwYi51dGlscy5zcGxpdEZsb2F0MzJcIixMLHZvaWQgMCksaChcImpzcGIudXRpbHMuc3BsaXRGbG9hdDY0XCIsVix2b2lkIDApLGgoXCJqc3BiLnV0aWxzLnNwbGl0SGFzaDY0XCIsRCx2b2lkIDApLGgoXCJqc3BiLnV0aWxzLmpvaW5VaW50NjRcIixOLHZvaWQgMCksaChcImpzcGIudXRpbHMuam9pbkludDY0XCIscSx2b2lkIDApLGgoXCJqc3BiLnV0aWxzLnRvWmlnemFnNjRcIixILHZvaWQgMCksaChcImpzcGIudXRpbHMuam9pblppZ3phZzY0XCIsWix2b2lkIDApLGgoXCJqc3BiLnV0aWxzLmZyb21aaWd6YWc2NFwiLEcsdm9pZCAwKSxoKFwianNwYi51dGlscy5qb2luRmxvYXQzMlwiLEosdm9pZCAwKSxoKFwianNwYi51dGlscy5qb2luRmxvYXQ2NFwiLCQsdm9pZCAwKSxoKFwianNwYi51dGlscy5qb2luSGFzaDY0XCIsSyx2b2lkIDApLGgoXCJqc3BiLnV0aWxzLkRJR0lUU1wiLFwiMDEyMzQ1Njc4OWFiY2RlZlwiLnNwbGl0KFwiXCIpLHZvaWQgMCksaChcImpzcGIudXRpbHMuam9pblVuc2lnbmVkRGVjaW1hbFN0cmluZ1wiLFgsdm9pZCAwKSxoKFwianNwYi51dGlscy5qb2luU2lnbmVkRGVjaW1hbFN0cmluZ1wiLFksdm9pZCAwKSxoKFwianNwYi51dGlscy5oYXNoNjRUb0RlY2ltYWxTdHJpbmdcIixRLHZvaWQgMCksaChcImpzcGIudXRpbHMuaGFzaDY0QXJyYXlUb0RlY2ltYWxTdHJpbmdzXCIsKGZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBvPUFycmF5KHQubGVuZ3RoKSxyPTA7cjx0Lmxlbmd0aDtyKyspb1tyXT1RKHRbcl0sZSk7cmV0dXJuIG99KSx2b2lkIDApLGgoXCJqc3BiLnV0aWxzLmRlY2ltYWxTdHJpbmdUb0hhc2g2NFwiLHR0LHZvaWQgMCksaChcImpzcGIudXRpbHMuc3BsaXREZWNpbWFsU3RyaW5nXCIsKGZ1bmN0aW9uKHQpe0QodHQodCkpfSksdm9pZCAwKSxoKFwianNwYi51dGlscy5oYXNoNjRUb0hleFN0cmluZ1wiLChmdW5jdGlvbih0KXt2YXIgZT1BcnJheSgxOCk7ZVswXT1cIjBcIixlWzFdPVwieFwiO2Zvcih2YXIgbz0wOzg+bztvKyspe3ZhciByPXQuY2hhckNvZGVBdCg3LW8pO2VbMipvKzJdPWV0KHI+PjQpLGVbMipvKzNdPWV0KDE1JnIpfXJldHVybiBlLmpvaW4oXCJcIil9KSx2b2lkIDApLGgoXCJqc3BiLnV0aWxzLmhleFN0cmluZ1RvSGFzaDY0XCIsKGZ1bmN0aW9uKHQpe3YoMTg9PSh0PXQudG9Mb3dlckNhc2UoKSkubGVuZ3RoKSx2KFwiMFwiPT10WzBdKSx2KFwieFwiPT10WzFdKTtmb3IodmFyIGU9XCJcIixvPTA7OD5vO28rKyllPVN0cmluZy5mcm9tQ2hhckNvZGUoMTYqb3QodC5jaGFyQ29kZUF0KDIqbysyKSkrb3QodC5jaGFyQ29kZUF0KDIqbyszKSkpK2U7cmV0dXJuIGV9KSx2b2lkIDApLGgoXCJqc3BiLnV0aWxzLmhhc2g2NFRvTnVtYmVyXCIsKGZ1bmN0aW9uKHQsZSl7RCh0KSx0PVI7dmFyIG89VDtyZXR1cm4gZT9xKHQsbyk6Tih0LG8pfSksdm9pZCAwKSxoKFwianNwYi51dGlscy5udW1iZXJUb0hhc2g2NFwiLChmdW5jdGlvbih0KXtyZXR1cm4geih0KSxLKFIsVCl9KSx2b2lkIDApLGgoXCJqc3BiLnV0aWxzLmNvdW50VmFyaW50c1wiLChmdW5jdGlvbih0LGUsbyl7Zm9yKHZhciByPTAsbj1lO248bztuKyspcis9dFtuXT4+NztyZXR1cm4gby1lLXJ9KSx2b2lkIDApLGgoXCJqc3BiLnV0aWxzLmNvdW50VmFyaW50RmllbGRzXCIsKGZ1bmN0aW9uKHQsZSxvLHIpe3ZhciBuPTA7aWYoMTI4PihyKj04KSlmb3IoO2U8byYmdFtlKytdPT1yOylmb3IobisrOzspe3ZhciBpPXRbZSsrXTtpZighKDEyOCZpKSlicmVha31lbHNlIGZvcig7ZTxvOyl7Zm9yKGk9cjsxMjg8aTspe2lmKHRbZV0hPSgxMjcmaXwxMjgpKXJldHVybiBuO2UrKyxpPj49N31pZih0W2UrK10hPWkpYnJlYWs7Zm9yKG4rKzsxMjgmKGk9dFtlKytdKTspO31yZXR1cm4gbn0pLHZvaWQgMCksaChcImpzcGIudXRpbHMuY291bnRGaXhlZDMyRmllbGRzXCIsKGZ1bmN0aW9uKHQsZSxvLHIpe3JldHVybiBydCh0LGUsbyw4KnIrNSw0KX0pLHZvaWQgMCksaChcImpzcGIudXRpbHMuY291bnRGaXhlZDY0RmllbGRzXCIsKGZ1bmN0aW9uKHQsZSxvLHIpe3JldHVybiBydCh0LGUsbyw4KnIrMSw4KX0pLHZvaWQgMCksaChcImpzcGIudXRpbHMuY291bnREZWxpbWl0ZWRGaWVsZHNcIiwoZnVuY3Rpb24odCxlLG8scil7dmFyIG49MDtmb3Iocj04KnIrMjtlPG87KXtmb3IodmFyIGk9cjsxMjg8aTspe2lmKHRbZSsrXSE9KDEyNyZpfDEyOCkpcmV0dXJuIG47aT4+PTd9aWYodFtlKytdIT1pKWJyZWFrO24rKztmb3IodmFyIHA9MCxhPTE7cCs9KDEyNyYoaT10W2UrK10pKSphLGEqPTEyOCwxMjgmaTspO2UrPXB9cmV0dXJuIG59KSx2b2lkIDApLGgoXCJqc3BiLnV0aWxzLmRlYnVnQnl0ZXNUb1RleHRGb3JtYXRcIiwoZnVuY3Rpb24odCl7dmFyIGU9J1wiJztpZih0KXt0PW50KHQpO2Zvcih2YXIgbz0wO288dC5sZW5ndGg7bysrKWUrPVwiXFxcXHhcIiwxNj50W29dJiYoZSs9XCIwXCIpLGUrPXRbb10udG9TdHJpbmcoMTYpfXJldHVybiBlKydcIid9KSx2b2lkIDApLGgoXCJqc3BiLnV0aWxzLmRlYnVnU2NhbGFyVG9UZXh0Rm9ybWF0XCIsKGZ1bmN0aW9uKHQpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXt0PVN0cmluZyh0KTtmb3IodmFyIGU9WydcIiddLG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIHIsbj10LmNoYXJBdChvKSxpPW4uY2hhckNvZGVBdCgwKSxwPW8rMTsocj1fW25dKXx8KDMxPGkmJjEyNz5pfHwoKGk9bilpbiBNP249TVtpXTppIGluIF8/bj1NW2ldPV9baV06KDMxPChyPWkuY2hhckNvZGVBdCgwKSkmJjEyNz5yP249aTooMjU2PnI/KG49XCJcXFxceFwiLCgxNj5yfHwyNTY8cikmJihuKz1cIjBcIikpOihuPVwiXFxcXHVcIiw0MDk2PnImJihuKz1cIjBcIikpLG4rPXIudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkpLG49TVtpXT1uKSkscj1uKSxlW3BdPXJ9ZS5wdXNoKCdcIicpLHQ9ZS5qb2luKFwiXCIpfWVsc2UgdD10LnRvU3RyaW5nKCk7cmV0dXJuIHR9KSx2b2lkIDApLGgoXCJqc3BiLnV0aWxzLnN0cmluZ1RvQnl0ZUFycmF5XCIsKGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1uZXcgVWludDhBcnJheSh0Lmxlbmd0aCksbz0wO288dC5sZW5ndGg7bysrKXt2YXIgcj10LmNoYXJDb2RlQXQobyk7aWYoMjU1PHIpdGhyb3cgRXJyb3IoXCJDb252ZXJzaW9uIGVycm9yOiBzdHJpbmcgY29udGFpbnMgY29kZXBvaW50IG91dHNpZGUgb2YgYnl0ZSByYW5nZVwiKTtlW29dPXJ9cmV0dXJuIGV9KSx2b2lkIDApLGgoXCJqc3BiLnV0aWxzLmJ5dGVTb3VyY2VUb1VpbnQ4QXJyYXlcIixudCx2b2lkIDApLGgoXCJqc3BiLkJpbmFyeURlY29kZXJcIixpdCx2b2lkIDApO3ZhciBwdD1bXTtmdW5jdGlvbiBhdCh0LGUsbyl7aWYocHQubGVuZ3RoKXt2YXIgcj1wdC5wb3AoKTtyZXR1cm4gdCYmci5IKHQsZSxvKSxyfXJldHVybiBuZXcgaXQodCxlLG8pfWZ1bmN0aW9uIHN0KHQsZSxvKXt0aGlzLmE9YXQodCxlLG8pLHRoaXMuTz10aGlzLmEuQigpLHRoaXMuYj10aGlzLmM9LTEsdGhpcy5oPSExLHRoaXMudj1udWxsfWl0LmdldEluc3RhbmNlQ2FjaGVMZW5ndGg9ZnVuY3Rpb24oKXtyZXR1cm4gcHQubGVuZ3RofSxpdC5hbGxvYz1hdCxpdC5wcm90b3R5cGUuQ2E9ZnVuY3Rpb24oKXt0aGlzLmNsZWFyKCksMTAwPnB0Lmxlbmd0aCYmcHQucHVzaCh0aGlzKX0saXQucHJvdG90eXBlLmZyZWU9aXQucHJvdG90eXBlLkNhLGl0LnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3JldHVybiBhdCh0aGlzLmIsdGhpcy5oLHRoaXMuYy10aGlzLmgpfSxpdC5wcm90b3R5cGUuY2xvbmU9aXQucHJvdG90eXBlLmNsb25lLGl0LnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuYj1udWxsLHRoaXMuYT10aGlzLmM9dGhpcy5oPTAsdGhpcy52PSExfSxpdC5wcm90b3R5cGUuY2xlYXI9aXQucHJvdG90eXBlLmNsZWFyLGl0LnByb3RvdHlwZS5ZPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYn0saXQucHJvdG90eXBlLmdldEJ1ZmZlcj1pdC5wcm90b3R5cGUuWSxpdC5wcm90b3R5cGUuSD1mdW5jdGlvbih0LGUsbyl7dGhpcy5iPW50KHQpLHRoaXMuaD12b2lkIDAhPT1lP2U6MCx0aGlzLmM9dm9pZCAwIT09bz90aGlzLmgrbzp0aGlzLmIubGVuZ3RoLHRoaXMuYT10aGlzLmh9LGl0LnByb3RvdHlwZS5zZXRCbG9jaz1pdC5wcm90b3R5cGUuSCxpdC5wcm90b3R5cGUuRGI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jfSxpdC5wcm90b3R5cGUuZ2V0RW5kPWl0LnByb3RvdHlwZS5EYixpdC5wcm90b3R5cGUuc2V0RW5kPWZ1bmN0aW9uKHQpe3RoaXMuYz10fSxpdC5wcm90b3R5cGUuc2V0RW5kPWl0LnByb3RvdHlwZS5zZXRFbmQsaXQucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7dGhpcy5hPXRoaXMuaH0saXQucHJvdG90eXBlLnJlc2V0PWl0LnByb3RvdHlwZS5yZXNldCxpdC5wcm90b3R5cGUuQj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmF9LGl0LnByb3RvdHlwZS5nZXRDdXJzb3I9aXQucHJvdG90eXBlLkIsaXQucHJvdG90eXBlLk1hPWZ1bmN0aW9uKHQpe3RoaXMuYT10fSxpdC5wcm90b3R5cGUuc2V0Q3Vyc29yPWl0LnByb3RvdHlwZS5NYSxpdC5wcm90b3R5cGUuYWR2YW5jZT1mdW5jdGlvbih0KXt0aGlzLmErPXQsdih0aGlzLmE8PXRoaXMuYyl9LGl0LnByb3RvdHlwZS5hZHZhbmNlPWl0LnByb3RvdHlwZS5hZHZhbmNlLGl0LnByb3RvdHlwZS55YT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmE9PXRoaXMuY30saXQucHJvdG90eXBlLmF0RW5kPWl0LnByb3RvdHlwZS55YSxpdC5wcm90b3R5cGUuUWI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hPnRoaXMuY30saXQucHJvdG90eXBlLnBhc3RFbmQ9aXQucHJvdG90eXBlLlFiLGl0LnByb3RvdHlwZS5nZXRFcnJvcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZ8fDA+dGhpcy5hfHx0aGlzLmE+dGhpcy5jfSxpdC5wcm90b3R5cGUuZ2V0RXJyb3I9aXQucHJvdG90eXBlLmdldEVycm9yLGl0LnByb3RvdHlwZS53PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0xMjgsbz0wLHI9MCxuPTA7ND5uJiYxMjg8PWU7bisrKW98PSgxMjcmKGU9dGhpcy5iW3RoaXMuYSsrXSkpPDw3Km47aWYoMTI4PD1lJiYob3w9KDEyNyYoZT10aGlzLmJbdGhpcy5hKytdKSk8PDI4LHJ8PSgxMjcmZSk+PjQpLDEyODw9ZSlmb3Iobj0wOzU+biYmMTI4PD1lO24rKylyfD0oMTI3JihlPXRoaXMuYlt0aGlzLmErK10pKTw8NypuKzM7aWYoMTI4PmUpcmV0dXJuIHQobz4+PjAscj4+PjApO3coXCJGYWlsZWQgdG8gcmVhZCB2YXJpbnQsIGVuY29kaW5nIGlzIGludmFsaWQuXCIpLHRoaXMudj0hMH0saXQucHJvdG90eXBlLnJlYWRTcGxpdFZhcmludDY0PWl0LnByb3RvdHlwZS53LGl0LnByb3RvdHlwZS5lYT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy53KChmdW5jdGlvbihlLG8pe3JldHVybiBHKGUsbyx0KX0pKX0saXQucHJvdG90eXBlLnJlYWRTcGxpdFppZ3phZ1ZhcmludDY0PWl0LnByb3RvdHlwZS5lYSxpdC5wcm90b3R5cGUudGE9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5iLG89dGhpcy5hO3RoaXMuYSs9ODtmb3IodmFyIHI9MCxuPTAsaT1vKzc7aT49bztpLS0pcj1yPDw4fGVbaV0sbj1uPDw4fGVbaSs0XTtyZXR1cm4gdChyLG4pfSxpdC5wcm90b3R5cGUucmVhZFNwbGl0Rml4ZWQ2ND1pdC5wcm90b3R5cGUudGEsaXQucHJvdG90eXBlLmtiPWZ1bmN0aW9uKCl7Zm9yKDsxMjgmdGhpcy5iW3RoaXMuYV07KXRoaXMuYSsrO3RoaXMuYSsrfSxpdC5wcm90b3R5cGUuc2tpcFZhcmludD1pdC5wcm90b3R5cGUua2IsaXQucHJvdG90eXBlLm1iPWZ1bmN0aW9uKHQpe2Zvcig7MTI4PHQ7KXRoaXMuYS0tLHQ+Pj49Nzt0aGlzLmEtLX0saXQucHJvdG90eXBlLnVuc2tpcFZhcmludD1pdC5wcm90b3R5cGUubWIsaXQucHJvdG90eXBlLm89ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmIsZT10W3RoaXMuYV0sbz0xMjcmZTtyZXR1cm4gMTI4PmU/KHRoaXMuYSs9MSx2KHRoaXMuYTw9dGhpcy5jKSxvKToob3w9KDEyNyYoZT10W3RoaXMuYSsxXSkpPDw3LDEyOD5lPyh0aGlzLmErPTIsdih0aGlzLmE8PXRoaXMuYyksbyk6KG98PSgxMjcmKGU9dFt0aGlzLmErMl0pKTw8MTQsMTI4PmU/KHRoaXMuYSs9Myx2KHRoaXMuYTw9dGhpcy5jKSxvKToob3w9KDEyNyYoZT10W3RoaXMuYSszXSkpPDwyMSwxMjg+ZT8odGhpcy5hKz00LHYodGhpcy5hPD10aGlzLmMpLG8pOihvfD0oMTUmKGU9dFt0aGlzLmErNF0pKTw8MjgsMTI4PmU/KHRoaXMuYSs9NSx2KHRoaXMuYTw9dGhpcy5jKSxvPj4+MCk6KHRoaXMuYSs9NSwxMjg8PXRbdGhpcy5hKytdJiYxMjg8PXRbdGhpcy5hKytdJiYxMjg8PXRbdGhpcy5hKytdJiYxMjg8PXRbdGhpcy5hKytdJiYxMjg8PXRbdGhpcy5hKytdJiZ2KCExKSx2KHRoaXMuYTw9dGhpcy5jKSxvKSkpKSl9LGl0LnByb3RvdHlwZS5yZWFkVW5zaWduZWRWYXJpbnQzMj1pdC5wcm90b3R5cGUubyxpdC5wcm90b3R5cGUuZGE9ZnVuY3Rpb24oKXtyZXR1cm5+fnRoaXMubygpfSxpdC5wcm90b3R5cGUucmVhZFNpZ25lZFZhcmludDMyPWl0LnByb3RvdHlwZS5kYSxpdC5wcm90b3R5cGUuTz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm8oKS50b1N0cmluZygpfSxpdC5wcm90b3R5cGUuRWE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kYSgpLnRvU3RyaW5nKCl9LGl0LnByb3RvdHlwZS5yZWFkU2lnbmVkVmFyaW50MzJTdHJpbmc9aXQucHJvdG90eXBlLkVhLGl0LnByb3RvdHlwZS5JYT1mdW5jdGlvbigpe3ZhciB0PXRoaXMubygpO3JldHVybiB0Pj4+MV4tKDEmdCl9LGl0LnByb3RvdHlwZS5yZWFkWmlnemFnVmFyaW50MzI9aXQucHJvdG90eXBlLklhLGl0LnByb3RvdHlwZS5HYT1mdW5jdGlvbigpe3JldHVybiB0aGlzLncoTil9LGl0LnByb3RvdHlwZS5yZWFkVW5zaWduZWRWYXJpbnQ2ND1pdC5wcm90b3R5cGUuR2EsaXQucHJvdG90eXBlLkhhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudyhYKX0saXQucHJvdG90eXBlLnJlYWRVbnNpZ25lZFZhcmludDY0U3RyaW5nPWl0LnByb3RvdHlwZS5IYSxpdC5wcm90b3R5cGUuc2E9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy53KHEpfSxpdC5wcm90b3R5cGUucmVhZFNpZ25lZFZhcmludDY0PWl0LnByb3RvdHlwZS5zYSxpdC5wcm90b3R5cGUuRmE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy53KFkpfSxpdC5wcm90b3R5cGUucmVhZFNpZ25lZFZhcmludDY0U3RyaW5nPWl0LnByb3RvdHlwZS5GYSxpdC5wcm90b3R5cGUuSmE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy53KFopfSxpdC5wcm90b3R5cGUucmVhZFppZ3phZ1ZhcmludDY0PWl0LnByb3RvdHlwZS5KYSxpdC5wcm90b3R5cGUuZmI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lYShLKX0saXQucHJvdG90eXBlLnJlYWRaaWd6YWdWYXJpbnRIYXNoNjQ9aXQucHJvdG90eXBlLmZiLGl0LnByb3RvdHlwZS5LYT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVhKFkpfSxpdC5wcm90b3R5cGUucmVhZFppZ3phZ1ZhcmludDY0U3RyaW5nPWl0LnByb3RvdHlwZS5LYSxpdC5wcm90b3R5cGUuR2M9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmJbdGhpcy5hXTtyZXR1cm4gdGhpcy5hKz0xLHYodGhpcy5hPD10aGlzLmMpLHR9LGl0LnByb3RvdHlwZS5yZWFkVWludDg9aXQucHJvdG90eXBlLkdjLGl0LnByb3RvdHlwZS5FYz1mdW5jdGlvbigpe3ZhciB0PXRoaXMuYlt0aGlzLmFdLGU9dGhpcy5iW3RoaXMuYSsxXTtyZXR1cm4gdGhpcy5hKz0yLHYodGhpcy5hPD10aGlzLmMpLHR8ZTw8OH0saXQucHJvdG90eXBlLnJlYWRVaW50MTY9aXQucHJvdG90eXBlLkVjLGl0LnByb3RvdHlwZS5tPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5iW3RoaXMuYV0sZT10aGlzLmJbdGhpcy5hKzFdLG89dGhpcy5iW3RoaXMuYSsyXSxyPXRoaXMuYlt0aGlzLmErM107cmV0dXJuIHRoaXMuYSs9NCx2KHRoaXMuYTw9dGhpcy5jKSwodHxlPDw4fG88PDE2fHI8PDI0KT4+PjB9LGl0LnByb3RvdHlwZS5yZWFkVWludDMyPWl0LnByb3RvdHlwZS5tLGl0LnByb3RvdHlwZS5nYT1mdW5jdGlvbigpe3JldHVybiBOKHRoaXMubSgpLHRoaXMubSgpKX0saXQucHJvdG90eXBlLnJlYWRVaW50NjQ9aXQucHJvdG90eXBlLmdhLGl0LnByb3RvdHlwZS5oYT1mdW5jdGlvbigpe3JldHVybiBYKHRoaXMubSgpLHRoaXMubSgpKX0saXQucHJvdG90eXBlLnJlYWRVaW50NjRTdHJpbmc9aXQucHJvdG90eXBlLmhhLGl0LnByb3RvdHlwZS5YYj1mdW5jdGlvbigpe3ZhciB0PXRoaXMuYlt0aGlzLmFdO3JldHVybiB0aGlzLmErPTEsdih0aGlzLmE8PXRoaXMuYyksdDw8MjQ+PjI0fSxpdC5wcm90b3R5cGUucmVhZEludDg9aXQucHJvdG90eXBlLlhiLGl0LnByb3RvdHlwZS5WYj1mdW5jdGlvbigpe3ZhciB0PXRoaXMuYlt0aGlzLmFdLGU9dGhpcy5iW3RoaXMuYSsxXTtyZXR1cm4gdGhpcy5hKz0yLHYodGhpcy5hPD10aGlzLmMpLCh0fGU8PDgpPDwxNj4+MTZ9LGl0LnByb3RvdHlwZS5yZWFkSW50MTY9aXQucHJvdG90eXBlLlZiLGl0LnByb3RvdHlwZS5QPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5iW3RoaXMuYV0sZT10aGlzLmJbdGhpcy5hKzFdLG89dGhpcy5iW3RoaXMuYSsyXSxyPXRoaXMuYlt0aGlzLmErM107cmV0dXJuIHRoaXMuYSs9NCx2KHRoaXMuYTw9dGhpcy5jKSx0fGU8PDh8bzw8MTZ8cjw8MjR9LGl0LnByb3RvdHlwZS5yZWFkSW50MzI9aXQucHJvdG90eXBlLlAsaXQucHJvdG90eXBlLmJhPWZ1bmN0aW9uKCl7cmV0dXJuIHEodGhpcy5tKCksdGhpcy5tKCkpfSxpdC5wcm90b3R5cGUucmVhZEludDY0PWl0LnByb3RvdHlwZS5iYSxpdC5wcm90b3R5cGUuY2E9ZnVuY3Rpb24oKXtyZXR1cm4gWSh0aGlzLm0oKSx0aGlzLm0oKSl9LGl0LnByb3RvdHlwZS5yZWFkSW50NjRTdHJpbmc9aXQucHJvdG90eXBlLmNhLGl0LnByb3RvdHlwZS5hYT1mdW5jdGlvbigpe3JldHVybiBKKHRoaXMubSgpKX0saXQucHJvdG90eXBlLnJlYWRGbG9hdD1pdC5wcm90b3R5cGUuYWEsaXQucHJvdG90eXBlLlo9ZnVuY3Rpb24oKXtyZXR1cm4gJCh0aGlzLm0oKSx0aGlzLm0oKSl9LGl0LnByb3RvdHlwZS5yZWFkRG91YmxlPWl0LnByb3RvdHlwZS5aLGl0LnByb3RvdHlwZS5wYT1mdW5jdGlvbigpe3JldHVybiEhdGhpcy5iW3RoaXMuYSsrXX0saXQucHJvdG90eXBlLnJlYWRCb29sPWl0LnByb3RvdHlwZS5wYSxpdC5wcm90b3R5cGUucmE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kYSgpfSxpdC5wcm90b3R5cGUucmVhZEVudW09aXQucHJvdG90eXBlLnJhLGl0LnByb3RvdHlwZS5mYT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLmIsbz10aGlzLmE7dD1vK3Q7Zm9yKHZhciByPVtdLG49XCJcIjtvPHQ7KXt2YXIgaT1lW28rK107aWYoMTI4Pmkpci5wdXNoKGkpO2Vsc2V7aWYoMTkyPmkpY29udGludWU7aWYoMjI0Pmkpe3ZhciBwPWVbbysrXTtyLnB1c2goKDMxJmkpPDw2fDYzJnApfWVsc2UgaWYoMjQwPmkpe3A9ZVtvKytdO3ZhciBhPWVbbysrXTtyLnB1c2goKDE1JmkpPDwxMnwoNjMmcCk8PDZ8NjMmYSl9ZWxzZSBpZigyNDg+aSl7aT0oNyZpKTw8MTh8KDYzJihwPWVbbysrXSkpPDwxMnwoNjMmKGE9ZVtvKytdKSk8PDZ8NjMmZVtvKytdLGktPTY1NTM2LHIucHVzaCg1NTI5NisoaT4+MTAmMTAyMyksNTYzMjArKDEwMjMmaSkpfX04MTkyPD1yLmxlbmd0aCYmKG4rPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxyKSxyLmxlbmd0aD0wKX1yZXR1cm4gbis9QShyKSx0aGlzLmE9byxufSxpdC5wcm90b3R5cGUucmVhZFN0cmluZz1pdC5wcm90b3R5cGUuZmEsaXQucHJvdG90eXBlLkRjPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5vKCk7cmV0dXJuIHRoaXMuZmEodCl9LGl0LnByb3RvdHlwZS5yZWFkU3RyaW5nV2l0aExlbmd0aD1pdC5wcm90b3R5cGUuRGMsaXQucHJvdG90eXBlLnFhPWZ1bmN0aW9uKHQpe2lmKDA+dHx8dGhpcy5hK3Q+dGhpcy5iLmxlbmd0aClyZXR1cm4gdGhpcy52PSEwLHcoXCJJbnZhbGlkIGJ5dGUgbGVuZ3RoIVwiKSxuZXcgVWludDhBcnJheSgwKTt2YXIgZT10aGlzLmIuc3ViYXJyYXkodGhpcy5hLHRoaXMuYSt0KTtyZXR1cm4gdGhpcy5hKz10LHYodGhpcy5hPD10aGlzLmMpLGV9LGl0LnByb3RvdHlwZS5yZWFkQnl0ZXM9aXQucHJvdG90eXBlLnFhLGl0LnByb3RvdHlwZS5pYT1mdW5jdGlvbigpe3JldHVybiB0aGlzLncoSyl9LGl0LnByb3RvdHlwZS5yZWFkVmFyaW50SGFzaDY0PWl0LnByb3RvdHlwZS5pYSxpdC5wcm90b3R5cGUuJD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuYixlPXRoaXMuYSxvPXRbZV0scj10W2UrMV0sbj10W2UrMl0saT10W2UrM10scD10W2UrNF0sYT10W2UrNV0scz10W2UrNl07cmV0dXJuIHQ9dFtlKzddLHRoaXMuYSs9OCxTdHJpbmcuZnJvbUNoYXJDb2RlKG8scixuLGkscCxhLHMsdCl9LGl0LnByb3RvdHlwZS5yZWFkRml4ZWRIYXNoNjQ9aXQucHJvdG90eXBlLiQsaChcImpzcGIuQmluYXJ5UmVhZGVyXCIsc3Qsdm9pZCAwKTt2YXIgdXQ9W107ZnVuY3Rpb24gaHQodCxlLG8pe2lmKHV0Lmxlbmd0aCl7dmFyIHI9dXQucG9wKCk7cmV0dXJuIHQmJnIuYS5IKHQsZSxvKSxyfXJldHVybiBuZXcgc3QodCxlLG8pfWZ1bmN0aW9uIGx0KHQsZSl7digyPT10LmIpO3ZhciBvPXQuYS5vKCk7bz10LmEuQigpK287Zm9yKHZhciByPVtdO3QuYS5CKCk8bzspci5wdXNoKGUuY2FsbCh0LmEpKTtyZXR1cm4gcn1mdW5jdGlvbiBjdCh0LGUsbyxyLG4pe3RoaXMubWE9dCx0aGlzLkJhPWUsdGhpcy5sYT1vLHRoaXMuTmE9cix0aGlzLm5hPW59ZnVuY3Rpb24gZnQodCxlLG8scixuLGkpe3RoaXMuWmE9dCx0aGlzLnphPWUsdGhpcy5BYT1vLHRoaXMuV2E9cix0aGlzLkFiPW4sdGhpcy5OYj1pfWZ1bmN0aW9uIHl0KCl7fXN0LmNsZWFySW5zdGFuY2VDYWNoZT1mdW5jdGlvbigpe3V0PVtdfSxzdC5nZXRJbnN0YW5jZUNhY2hlTGVuZ3RoPWZ1bmN0aW9uKCl7cmV0dXJuIHV0Lmxlbmd0aH0sc3QuYWxsb2M9aHQsc3QucHJvdG90eXBlLnpiPWh0LHN0LnByb3RvdHlwZS5hbGxvYz1zdC5wcm90b3R5cGUuemIsc3QucHJvdG90eXBlLkNhPWZ1bmN0aW9uKCl7dGhpcy5hLmNsZWFyKCksdGhpcy5iPXRoaXMuYz0tMSx0aGlzLmg9ITEsdGhpcy52PW51bGwsMTAwPnV0Lmxlbmd0aCYmdXQucHVzaCh0aGlzKX0sc3QucHJvdG90eXBlLmZyZWU9c3QucHJvdG90eXBlLkNhLHN0LnByb3RvdHlwZS5GYj1mdW5jdGlvbigpe3JldHVybiB0aGlzLk99LHN0LnByb3RvdHlwZS5nZXRGaWVsZEN1cnNvcj1zdC5wcm90b3R5cGUuRmIsc3QucHJvdG90eXBlLkI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hLkIoKX0sc3QucHJvdG90eXBlLmdldEN1cnNvcj1zdC5wcm90b3R5cGUuQixzdC5wcm90b3R5cGUuWT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmEuWSgpfSxzdC5wcm90b3R5cGUuZ2V0QnVmZmVyPXN0LnByb3RvdHlwZS5ZLHN0LnByb3RvdHlwZS5IYj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmN9LHN0LnByb3RvdHlwZS5nZXRGaWVsZE51bWJlcj1zdC5wcm90b3R5cGUuSGIsc3QucHJvdG90eXBlLkxiPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYn0sc3QucHJvdG90eXBlLmdldFdpcmVUeXBlPXN0LnByb3RvdHlwZS5MYixzdC5wcm90b3R5cGUuTWI9ZnVuY3Rpb24oKXtyZXR1cm4gMj09dGhpcy5ifSxzdC5wcm90b3R5cGUuaXNEZWxpbWl0ZWQ9c3QucHJvdG90eXBlLk1iLHN0LnByb3RvdHlwZS5iYj1mdW5jdGlvbigpe3JldHVybiA0PT10aGlzLmJ9LHN0LnByb3RvdHlwZS5pc0VuZEdyb3VwPXN0LnByb3RvdHlwZS5iYixzdC5wcm90b3R5cGUuZ2V0RXJyb3I9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ofHx0aGlzLmEuZ2V0RXJyb3IoKX0sc3QucHJvdG90eXBlLmdldEVycm9yPXN0LnByb3RvdHlwZS5nZXRFcnJvcixzdC5wcm90b3R5cGUuSD1mdW5jdGlvbih0LGUsbyl7dGhpcy5hLkgodCxlLG8pLHRoaXMuYj10aGlzLmM9LTF9LHN0LnByb3RvdHlwZS5zZXRCbG9jaz1zdC5wcm90b3R5cGUuSCxzdC5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmEucmVzZXQoKSx0aGlzLmI9dGhpcy5jPS0xfSxzdC5wcm90b3R5cGUucmVzZXQ9c3QucHJvdG90eXBlLnJlc2V0LHN0LnByb3RvdHlwZS5hZHZhbmNlPWZ1bmN0aW9uKHQpe3RoaXMuYS5hZHZhbmNlKHQpfSxzdC5wcm90b3R5cGUuYWR2YW5jZT1zdC5wcm90b3R5cGUuYWR2YW5jZSxzdC5wcm90b3R5cGUub2E9ZnVuY3Rpb24oKXtpZih0aGlzLmEueWEoKSlyZXR1cm4hMTtpZih0aGlzLmdldEVycm9yKCkpcmV0dXJuIHcoXCJEZWNvZGVyIGhpdCBhbiBlcnJvclwiKSwhMTt0aGlzLk89dGhpcy5hLkIoKTt2YXIgdD10aGlzLmEubygpLGU9dD4+PjM7cmV0dXJuIDAhPSh0Jj03KSYmNSE9dCYmMSE9dCYmMiE9dCYmMyE9dCYmNCE9dD8odyhcIkludmFsaWQgd2lyZSB0eXBlOiAlcyAoYXQgcG9zaXRpb24gJXMpXCIsdCx0aGlzLk8pLHRoaXMuaD0hMCwhMSk6KHRoaXMuYz1lLHRoaXMuYj10LCEwKX0sc3QucHJvdG90eXBlLm5leHRGaWVsZD1zdC5wcm90b3R5cGUub2Esc3QucHJvdG90eXBlLk9hPWZ1bmN0aW9uKCl7dGhpcy5hLm1iKHRoaXMuYzw8M3x0aGlzLmIpfSxzdC5wcm90b3R5cGUudW5za2lwSGVhZGVyPXN0LnByb3RvdHlwZS5PYSxzdC5wcm90b3R5cGUuTGM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmM7Zm9yKHRoaXMuT2EoKTt0aGlzLm9hKCkmJnRoaXMuYz09dDspdGhpcy5DKCk7dGhpcy5hLnlhKCl8fHRoaXMuT2EoKX0sc3QucHJvdG90eXBlLnNraXBNYXRjaGluZ0ZpZWxkcz1zdC5wcm90b3R5cGUuTGMsc3QucHJvdG90eXBlLmxiPWZ1bmN0aW9uKCl7MCE9dGhpcy5iPyh3KFwiSW52YWxpZCB3aXJlIHR5cGUgZm9yIHNraXBWYXJpbnRGaWVsZFwiKSx0aGlzLkMoKSk6dGhpcy5hLmtiKCl9LHN0LnByb3RvdHlwZS5za2lwVmFyaW50RmllbGQ9c3QucHJvdG90eXBlLmxiLHN0LnByb3RvdHlwZS5nYj1mdW5jdGlvbigpe2lmKDIhPXRoaXMuYil3KFwiSW52YWxpZCB3aXJlIHR5cGUgZm9yIHNraXBEZWxpbWl0ZWRGaWVsZFwiKSx0aGlzLkMoKTtlbHNle3ZhciB0PXRoaXMuYS5vKCk7dGhpcy5hLmFkdmFuY2UodCl9fSxzdC5wcm90b3R5cGUuc2tpcERlbGltaXRlZEZpZWxkPXN0LnByb3RvdHlwZS5nYixzdC5wcm90b3R5cGUuaGI9ZnVuY3Rpb24oKXs1IT10aGlzLmI/KHcoXCJJbnZhbGlkIHdpcmUgdHlwZSBmb3Igc2tpcEZpeGVkMzJGaWVsZFwiKSx0aGlzLkMoKSk6dGhpcy5hLmFkdmFuY2UoNCl9LHN0LnByb3RvdHlwZS5za2lwRml4ZWQzMkZpZWxkPXN0LnByb3RvdHlwZS5oYixzdC5wcm90b3R5cGUuaWI9ZnVuY3Rpb24oKXsxIT10aGlzLmI/KHcoXCJJbnZhbGlkIHdpcmUgdHlwZSBmb3Igc2tpcEZpeGVkNjRGaWVsZFwiKSx0aGlzLkMoKSk6dGhpcy5hLmFkdmFuY2UoOCl9LHN0LnByb3RvdHlwZS5za2lwRml4ZWQ2NEZpZWxkPXN0LnByb3RvdHlwZS5pYixzdC5wcm90b3R5cGUuamI9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5jOzspe2lmKCF0aGlzLm9hKCkpe3coXCJVbm1hdGNoZWQgc3RhcnQtZ3JvdXAgdGFnOiBzdHJlYW0gRU9GXCIpLHRoaXMuaD0hMDticmVha31pZig0PT10aGlzLmIpe3RoaXMuYyE9dCYmKHcoXCJVbm1hdGNoZWQgZW5kLWdyb3VwIHRhZ1wiKSx0aGlzLmg9ITApO2JyZWFrfXRoaXMuQygpfX0sc3QucHJvdG90eXBlLnNraXBHcm91cD1zdC5wcm90b3R5cGUuamIsc3QucHJvdG90eXBlLkM9ZnVuY3Rpb24oKXtzd2l0Y2godGhpcy5iKXtjYXNlIDA6dGhpcy5sYigpO2JyZWFrO2Nhc2UgMTp0aGlzLmliKCk7YnJlYWs7Y2FzZSAyOnRoaXMuZ2IoKTticmVhaztjYXNlIDU6dGhpcy5oYigpO2JyZWFrO2Nhc2UgMzp0aGlzLmpiKCk7YnJlYWs7ZGVmYXVsdDp3KFwiSW52YWxpZCB3aXJlIGVuY29kaW5nIGZvciBmaWVsZC5cIil9fSxzdC5wcm90b3R5cGUuc2tpcEZpZWxkPXN0LnByb3RvdHlwZS5DLHN0LnByb3RvdHlwZS5IYz1mdW5jdGlvbih0LGUpe251bGw9PT10aGlzLnYmJih0aGlzLnY9e30pLHYoIXRoaXMudlt0XSksdGhpcy52W3RdPWV9LHN0LnByb3RvdHlwZS5yZWdpc3RlclJlYWRDYWxsYmFjaz1zdC5wcm90b3R5cGUuSGMsc3QucHJvdG90eXBlLkljPWZ1bmN0aW9uKHQpe3JldHVybiB2KG51bGwhPT10aGlzLnYpLHYodD10aGlzLnZbdF0pLHQodGhpcyl9LHN0LnByb3RvdHlwZS5ydW5SZWFkQ2FsbGJhY2s9c3QucHJvdG90eXBlLkljLHN0LnByb3RvdHlwZS5ZYj1mdW5jdGlvbih0LGUpe3YoMj09dGhpcy5iKTt2YXIgbz10aGlzLmEuYyxyPXRoaXMuYS5vKCk7cj10aGlzLmEuQigpK3IsdGhpcy5hLnNldEVuZChyKSxlKHQsdGhpcyksdGhpcy5hLk1hKHIpLHRoaXMuYS5zZXRFbmQobyl9LHN0LnByb3RvdHlwZS5yZWFkTWVzc2FnZT1zdC5wcm90b3R5cGUuWWIsc3QucHJvdG90eXBlLlViPWZ1bmN0aW9uKHQsZSxvKXt2KDM9PXRoaXMuYiksdih0aGlzLmM9PXQpLG8oZSx0aGlzKSx0aGlzLmh8fDQ9PXRoaXMuYnx8KHcoXCJHcm91cCBzdWJtZXNzYWdlIGRpZCBub3QgZW5kIHdpdGggYW4gRU5EX0dST1VQIHRhZ1wiKSx0aGlzLmg9ITApfSxzdC5wcm90b3R5cGUucmVhZEdyb3VwPXN0LnByb3RvdHlwZS5VYixzdC5wcm90b3R5cGUuR2I9ZnVuY3Rpb24oKXt2KDI9PXRoaXMuYik7dmFyIHQ9dGhpcy5hLm8oKSxlPXRoaXMuYS5CKCksbz1lK3Q7cmV0dXJuIHQ9YXQodGhpcy5hLlkoKSxlLHQpLHRoaXMuYS5NYShvKSx0fSxzdC5wcm90b3R5cGUuZ2V0RmllbGREZWNvZGVyPXN0LnByb3RvdHlwZS5HYixzdC5wcm90b3R5cGUuUD1mdW5jdGlvbigpe3JldHVybiB2KDA9PXRoaXMuYiksdGhpcy5hLmRhKCl9LHN0LnByb3RvdHlwZS5yZWFkSW50MzI9c3QucHJvdG90eXBlLlAsc3QucHJvdG90eXBlLldiPWZ1bmN0aW9uKCl7cmV0dXJuIHYoMD09dGhpcy5iKSx0aGlzLmEuRWEoKX0sc3QucHJvdG90eXBlLnJlYWRJbnQzMlN0cmluZz1zdC5wcm90b3R5cGUuV2Isc3QucHJvdG90eXBlLmJhPWZ1bmN0aW9uKCl7cmV0dXJuIHYoMD09dGhpcy5iKSx0aGlzLmEuc2EoKX0sc3QucHJvdG90eXBlLnJlYWRJbnQ2ND1zdC5wcm90b3R5cGUuYmEsc3QucHJvdG90eXBlLmNhPWZ1bmN0aW9uKCl7cmV0dXJuIHYoMD09dGhpcy5iKSx0aGlzLmEuRmEoKX0sc3QucHJvdG90eXBlLnJlYWRJbnQ2NFN0cmluZz1zdC5wcm90b3R5cGUuY2Esc3QucHJvdG90eXBlLm09ZnVuY3Rpb24oKXtyZXR1cm4gdigwPT10aGlzLmIpLHRoaXMuYS5vKCl9LHN0LnByb3RvdHlwZS5yZWFkVWludDMyPXN0LnByb3RvdHlwZS5tLHN0LnByb3RvdHlwZS5GYz1mdW5jdGlvbigpe3JldHVybiB2KDA9PXRoaXMuYiksdGhpcy5hLk8oKX0sc3QucHJvdG90eXBlLnJlYWRVaW50MzJTdHJpbmc9c3QucHJvdG90eXBlLkZjLHN0LnByb3RvdHlwZS5nYT1mdW5jdGlvbigpe3JldHVybiB2KDA9PXRoaXMuYiksdGhpcy5hLkdhKCl9LHN0LnByb3RvdHlwZS5yZWFkVWludDY0PXN0LnByb3RvdHlwZS5nYSxzdC5wcm90b3R5cGUuaGE9ZnVuY3Rpb24oKXtyZXR1cm4gdigwPT10aGlzLmIpLHRoaXMuYS5IYSgpfSxzdC5wcm90b3R5cGUucmVhZFVpbnQ2NFN0cmluZz1zdC5wcm90b3R5cGUuaGEsc3QucHJvdG90eXBlLnpjPWZ1bmN0aW9uKCl7cmV0dXJuIHYoMD09dGhpcy5iKSx0aGlzLmEuSWEoKX0sc3QucHJvdG90eXBlLnJlYWRTaW50MzI9c3QucHJvdG90eXBlLnpjLHN0LnByb3RvdHlwZS5BYz1mdW5jdGlvbigpe3JldHVybiB2KDA9PXRoaXMuYiksdGhpcy5hLkphKCl9LHN0LnByb3RvdHlwZS5yZWFkU2ludDY0PXN0LnByb3RvdHlwZS5BYyxzdC5wcm90b3R5cGUuQmM9ZnVuY3Rpb24oKXtyZXR1cm4gdigwPT10aGlzLmIpLHRoaXMuYS5LYSgpfSxzdC5wcm90b3R5cGUucmVhZFNpbnQ2NFN0cmluZz1zdC5wcm90b3R5cGUuQmMsc3QucHJvdG90eXBlLlJiPWZ1bmN0aW9uKCl7cmV0dXJuIHYoNT09dGhpcy5iKSx0aGlzLmEubSgpfSxzdC5wcm90b3R5cGUucmVhZEZpeGVkMzI9c3QucHJvdG90eXBlLlJiLHN0LnByb3RvdHlwZS5TYj1mdW5jdGlvbigpe3JldHVybiB2KDE9PXRoaXMuYiksdGhpcy5hLmdhKCl9LHN0LnByb3RvdHlwZS5yZWFkRml4ZWQ2ND1zdC5wcm90b3R5cGUuU2Isc3QucHJvdG90eXBlLlRiPWZ1bmN0aW9uKCl7cmV0dXJuIHYoMT09dGhpcy5iKSx0aGlzLmEuaGEoKX0sc3QucHJvdG90eXBlLnJlYWRGaXhlZDY0U3RyaW5nPXN0LnByb3RvdHlwZS5UYixzdC5wcm90b3R5cGUudmM9ZnVuY3Rpb24oKXtyZXR1cm4gdig1PT10aGlzLmIpLHRoaXMuYS5QKCl9LHN0LnByb3RvdHlwZS5yZWFkU2ZpeGVkMzI9c3QucHJvdG90eXBlLnZjLHN0LnByb3RvdHlwZS53Yz1mdW5jdGlvbigpe3JldHVybiB2KDU9PXRoaXMuYiksdGhpcy5hLlAoKS50b1N0cmluZygpfSxzdC5wcm90b3R5cGUucmVhZFNmaXhlZDMyU3RyaW5nPXN0LnByb3RvdHlwZS53YyxzdC5wcm90b3R5cGUueGM9ZnVuY3Rpb24oKXtyZXR1cm4gdigxPT10aGlzLmIpLHRoaXMuYS5iYSgpfSxzdC5wcm90b3R5cGUucmVhZFNmaXhlZDY0PXN0LnByb3RvdHlwZS54YyxzdC5wcm90b3R5cGUueWM9ZnVuY3Rpb24oKXtyZXR1cm4gdigxPT10aGlzLmIpLHRoaXMuYS5jYSgpfSxzdC5wcm90b3R5cGUucmVhZFNmaXhlZDY0U3RyaW5nPXN0LnByb3RvdHlwZS55YyxzdC5wcm90b3R5cGUuYWE9ZnVuY3Rpb24oKXtyZXR1cm4gdig1PT10aGlzLmIpLHRoaXMuYS5hYSgpfSxzdC5wcm90b3R5cGUucmVhZEZsb2F0PXN0LnByb3RvdHlwZS5hYSxzdC5wcm90b3R5cGUuWj1mdW5jdGlvbigpe3JldHVybiB2KDE9PXRoaXMuYiksdGhpcy5hLlooKX0sc3QucHJvdG90eXBlLnJlYWREb3VibGU9c3QucHJvdG90eXBlLlosc3QucHJvdG90eXBlLnBhPWZ1bmN0aW9uKCl7cmV0dXJuIHYoMD09dGhpcy5iKSwhIXRoaXMuYS5vKCl9LHN0LnByb3RvdHlwZS5yZWFkQm9vbD1zdC5wcm90b3R5cGUucGEsc3QucHJvdG90eXBlLnJhPWZ1bmN0aW9uKCl7cmV0dXJuIHYoMD09dGhpcy5iKSx0aGlzLmEuc2EoKX0sc3QucHJvdG90eXBlLnJlYWRFbnVtPXN0LnByb3RvdHlwZS5yYSxzdC5wcm90b3R5cGUuZmE9ZnVuY3Rpb24oKXt2KDI9PXRoaXMuYik7dmFyIHQ9dGhpcy5hLm8oKTtyZXR1cm4gdGhpcy5hLmZhKHQpfSxzdC5wcm90b3R5cGUucmVhZFN0cmluZz1zdC5wcm90b3R5cGUuZmEsc3QucHJvdG90eXBlLnFhPWZ1bmN0aW9uKCl7digyPT10aGlzLmIpO3ZhciB0PXRoaXMuYS5vKCk7cmV0dXJuIHRoaXMuYS5xYSh0KX0sc3QucHJvdG90eXBlLnJlYWRCeXRlcz1zdC5wcm90b3R5cGUucWEsc3QucHJvdG90eXBlLmlhPWZ1bmN0aW9uKCl7cmV0dXJuIHYoMD09dGhpcy5iKSx0aGlzLmEuaWEoKX0sc3QucHJvdG90eXBlLnJlYWRWYXJpbnRIYXNoNjQ9c3QucHJvdG90eXBlLmlhLHN0LnByb3RvdHlwZS5DYz1mdW5jdGlvbigpe3JldHVybiB2KDA9PXRoaXMuYiksdGhpcy5hLmZiKCl9LHN0LnByb3RvdHlwZS5yZWFkU2ludEhhc2g2ND1zdC5wcm90b3R5cGUuQ2Msc3QucHJvdG90eXBlLnc9ZnVuY3Rpb24odCl7cmV0dXJuIHYoMD09dGhpcy5iKSx0aGlzLmEudyh0KX0sc3QucHJvdG90eXBlLnJlYWRTcGxpdFZhcmludDY0PXN0LnByb3RvdHlwZS53LHN0LnByb3RvdHlwZS5lYT1mdW5jdGlvbih0KXtyZXR1cm4gdigwPT10aGlzLmIpLHRoaXMuYS53KChmdW5jdGlvbihlLG8pe3JldHVybiBHKGUsbyx0KX0pKX0sc3QucHJvdG90eXBlLnJlYWRTcGxpdFppZ3phZ1ZhcmludDY0PXN0LnByb3RvdHlwZS5lYSxzdC5wcm90b3R5cGUuJD1mdW5jdGlvbigpe3JldHVybiB2KDE9PXRoaXMuYiksdGhpcy5hLiQoKX0sc3QucHJvdG90eXBlLnJlYWRGaXhlZEhhc2g2ND1zdC5wcm90b3R5cGUuJCxzdC5wcm90b3R5cGUudGE9ZnVuY3Rpb24odCl7cmV0dXJuIHYoMT09dGhpcy5iKSx0aGlzLmEudGEodCl9LHN0LnByb3RvdHlwZS5yZWFkU3BsaXRGaXhlZDY0PXN0LnByb3RvdHlwZS50YSxzdC5wcm90b3R5cGUuZ2M9ZnVuY3Rpb24oKXtyZXR1cm4gbHQodGhpcyx0aGlzLmEuZGEpfSxzdC5wcm90b3R5cGUucmVhZFBhY2tlZEludDMyPXN0LnByb3RvdHlwZS5nYyxzdC5wcm90b3R5cGUuaGM9ZnVuY3Rpb24oKXtyZXR1cm4gbHQodGhpcyx0aGlzLmEuRWEpfSxzdC5wcm90b3R5cGUucmVhZFBhY2tlZEludDMyU3RyaW5nPXN0LnByb3RvdHlwZS5oYyxzdC5wcm90b3R5cGUuaWM9ZnVuY3Rpb24oKXtyZXR1cm4gbHQodGhpcyx0aGlzLmEuc2EpfSxzdC5wcm90b3R5cGUucmVhZFBhY2tlZEludDY0PXN0LnByb3RvdHlwZS5pYyxzdC5wcm90b3R5cGUuamM9ZnVuY3Rpb24oKXtyZXR1cm4gbHQodGhpcyx0aGlzLmEuRmEpfSxzdC5wcm90b3R5cGUucmVhZFBhY2tlZEludDY0U3RyaW5nPXN0LnByb3RvdHlwZS5qYyxzdC5wcm90b3R5cGUucWM9ZnVuY3Rpb24oKXtyZXR1cm4gbHQodGhpcyx0aGlzLmEubyl9LHN0LnByb3RvdHlwZS5yZWFkUGFja2VkVWludDMyPXN0LnByb3RvdHlwZS5xYyxzdC5wcm90b3R5cGUucmM9ZnVuY3Rpb24oKXtyZXR1cm4gbHQodGhpcyx0aGlzLmEuTyl9LHN0LnByb3RvdHlwZS5yZWFkUGFja2VkVWludDMyU3RyaW5nPXN0LnByb3RvdHlwZS5yYyxzdC5wcm90b3R5cGUuc2M9ZnVuY3Rpb24oKXtyZXR1cm4gbHQodGhpcyx0aGlzLmEuR2EpfSxzdC5wcm90b3R5cGUucmVhZFBhY2tlZFVpbnQ2ND1zdC5wcm90b3R5cGUuc2Msc3QucHJvdG90eXBlLnRjPWZ1bmN0aW9uKCl7cmV0dXJuIGx0KHRoaXMsdGhpcy5hLkhhKX0sc3QucHJvdG90eXBlLnJlYWRQYWNrZWRVaW50NjRTdHJpbmc9c3QucHJvdG90eXBlLnRjLHN0LnByb3RvdHlwZS5uYz1mdW5jdGlvbigpe3JldHVybiBsdCh0aGlzLHRoaXMuYS5JYSl9LHN0LnByb3RvdHlwZS5yZWFkUGFja2VkU2ludDMyPXN0LnByb3RvdHlwZS5uYyxzdC5wcm90b3R5cGUub2M9ZnVuY3Rpb24oKXtyZXR1cm4gbHQodGhpcyx0aGlzLmEuSmEpfSxzdC5wcm90b3R5cGUucmVhZFBhY2tlZFNpbnQ2ND1zdC5wcm90b3R5cGUub2Msc3QucHJvdG90eXBlLnBjPWZ1bmN0aW9uKCl7cmV0dXJuIGx0KHRoaXMsdGhpcy5hLkthKX0sc3QucHJvdG90eXBlLnJlYWRQYWNrZWRTaW50NjRTdHJpbmc9c3QucHJvdG90eXBlLnBjLHN0LnByb3RvdHlwZS5iYz1mdW5jdGlvbigpe3JldHVybiBsdCh0aGlzLHRoaXMuYS5tKX0sc3QucHJvdG90eXBlLnJlYWRQYWNrZWRGaXhlZDMyPXN0LnByb3RvdHlwZS5iYyxzdC5wcm90b3R5cGUuY2M9ZnVuY3Rpb24oKXtyZXR1cm4gbHQodGhpcyx0aGlzLmEuZ2EpfSxzdC5wcm90b3R5cGUucmVhZFBhY2tlZEZpeGVkNjQ9c3QucHJvdG90eXBlLmNjLHN0LnByb3RvdHlwZS5kYz1mdW5jdGlvbigpe3JldHVybiBsdCh0aGlzLHRoaXMuYS5oYSl9LHN0LnByb3RvdHlwZS5yZWFkUGFja2VkRml4ZWQ2NFN0cmluZz1zdC5wcm90b3R5cGUuZGMsc3QucHJvdG90eXBlLmtjPWZ1bmN0aW9uKCl7cmV0dXJuIGx0KHRoaXMsdGhpcy5hLlApfSxzdC5wcm90b3R5cGUucmVhZFBhY2tlZFNmaXhlZDMyPXN0LnByb3RvdHlwZS5rYyxzdC5wcm90b3R5cGUubGM9ZnVuY3Rpb24oKXtyZXR1cm4gbHQodGhpcyx0aGlzLmEuYmEpfSxzdC5wcm90b3R5cGUucmVhZFBhY2tlZFNmaXhlZDY0PXN0LnByb3RvdHlwZS5sYyxzdC5wcm90b3R5cGUubWM9ZnVuY3Rpb24oKXtyZXR1cm4gbHQodGhpcyx0aGlzLmEuY2EpfSxzdC5wcm90b3R5cGUucmVhZFBhY2tlZFNmaXhlZDY0U3RyaW5nPXN0LnByb3RvdHlwZS5tYyxzdC5wcm90b3R5cGUuZmM9ZnVuY3Rpb24oKXtyZXR1cm4gbHQodGhpcyx0aGlzLmEuYWEpfSxzdC5wcm90b3R5cGUucmVhZFBhY2tlZEZsb2F0PXN0LnByb3RvdHlwZS5mYyxzdC5wcm90b3R5cGUuJGI9ZnVuY3Rpb24oKXtyZXR1cm4gbHQodGhpcyx0aGlzLmEuWil9LHN0LnByb3RvdHlwZS5yZWFkUGFja2VkRG91YmxlPXN0LnByb3RvdHlwZS4kYixzdC5wcm90b3R5cGUuWmI9ZnVuY3Rpb24oKXtyZXR1cm4gbHQodGhpcyx0aGlzLmEucGEpfSxzdC5wcm90b3R5cGUucmVhZFBhY2tlZEJvb2w9c3QucHJvdG90eXBlLlpiLHN0LnByb3RvdHlwZS5hYz1mdW5jdGlvbigpe3JldHVybiBsdCh0aGlzLHRoaXMuYS5yYSl9LHN0LnByb3RvdHlwZS5yZWFkUGFja2VkRW51bT1zdC5wcm90b3R5cGUuYWMsc3QucHJvdG90eXBlLnVjPWZ1bmN0aW9uKCl7cmV0dXJuIGx0KHRoaXMsdGhpcy5hLmlhKX0sc3QucHJvdG90eXBlLnJlYWRQYWNrZWRWYXJpbnRIYXNoNjQ9c3QucHJvdG90eXBlLnVjLHN0LnByb3RvdHlwZS5lYz1mdW5jdGlvbigpe3JldHVybiBsdCh0aGlzLHRoaXMuYS4kKX0sc3QucHJvdG90eXBlLnJlYWRQYWNrZWRGaXhlZEhhc2g2ND1zdC5wcm90b3R5cGUuZWMsaChcImpzcGIuRXh0ZW5zaW9uRmllbGRJbmZvXCIsY3Qsdm9pZCAwKSxoKFwianNwYi5FeHRlbnNpb25GaWVsZEJpbmFyeUluZm9cIixmdCx2b2lkIDApLGN0LnByb3RvdHlwZS5GPWZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLmxhfSxjdC5wcm90b3R5cGUuaXNNZXNzYWdlVHlwZT1jdC5wcm90b3R5cGUuRixoKFwianNwYi5NZXNzYWdlXCIseXQsdm9pZCAwKSx5dC5HRU5FUkFURV9UT19PQkpFQ1Q9ITAseXQuR0VORVJBVEVfRlJPTV9PQkpFQ1Q9ITA7dmFyIGR0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFVpbnQ4QXJyYXk7eXQucHJvdG90eXBlLkliPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYn0seXQucHJvdG90eXBlLmdldEpzUGJNZXNzYWdlSWQ9eXQucHJvdG90eXBlLkliLHl0LmluaXRpYWxpemU9ZnVuY3Rpb24odCxlLG8scixuLGkpe2lmKHQuZj1udWxsLGV8fChlPW8/W29dOltdKSx0LmI9bz9TdHJpbmcobyk6dm9pZCAwLHQuRD0wPT09bz8tMTowLHQudT1lLGU9LTEsIShvPXQudS5sZW5ndGgpfHwoZT1vLTEsbnVsbD09PShvPXQudVtlXSl8fFwib2JqZWN0XCIhPXR5cGVvZiBvfHxBcnJheS5pc0FycmF5KG8pfHxkdCYmbyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpPy0xPHI/KHQuRz1NYXRoLm1heChyLGUrMS10LkQpLHQuaT1udWxsKTp0Lkc9TnVtYmVyLk1BWF9WQUxVRToodC5HPWUtdC5ELHQuaT1vKSx0LmE9e30sbilmb3Iocj0wO3I8bi5sZW5ndGg7cisrKShlPW5bcl0pPHQuRz8oZSs9dC5ELHQudVtlXT10LnVbZV18fGJ0KTooZ3QodCksdC5pW2VdPXQuaVtlXXx8YnQpO2lmKGkmJmkubGVuZ3RoKWZvcihyPTA7cjxpLmxlbmd0aDtyKyspTXQodCxpW3JdKX07dmFyIGJ0PU9iamVjdC5mcmVlemU/T2JqZWN0LmZyZWV6ZShbXSk6W107ZnVuY3Rpb24gZ3QodCl7dmFyIGU9dC5HK3QuRDt0LnVbZV18fCh0Lmk9dC51W2VdPXt9KX1mdW5jdGlvbiB2dCh0LGUsbyl7Zm9yKHZhciByPVtdLG49MDtuPHQubGVuZ3RoO24rKylyW25dPWUuY2FsbCh0W25dLG8sdFtuXSk7cmV0dXJuIHJ9ZnVuY3Rpb24gd3QodCxlKXtpZihlPHQuRyl7ZSs9dC5EO3ZhciBvPXQudVtlXTtyZXR1cm4gbz09PWJ0P3QudVtlXT1bXTpvfWlmKHQuaSlyZXR1cm4obz10LmlbZV0pPT09YnQ/dC5pW2VdPVtdOm99ZnVuY3Rpb24gU3QodCxlKXtyZXR1cm4gbnVsbD09KHQ9d3QodCxlKSk/dDordH1mdW5jdGlvbiBtdCh0LGUpe3JldHVybiBudWxsPT0odD13dCh0LGUpKT90OiEhdH1mdW5jdGlvbiBqdCh0KXtyZXR1cm4gbnVsbD09dHx8XCJzdHJpbmdcIj09dHlwZW9mIHQ/dDpkdCYmdCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXk/Qih0KToodyhcIkNhbm5vdCBjb2VyY2UgdG8gYjY0IHN0cmluZzogXCIrbCh0KSksbnVsbCl9ZnVuY3Rpb24geHQodCl7cmV0dXJuIG51bGw9PXR8fHQgaW5zdGFuY2VvZiBVaW50OEFycmF5P3Q6XCJzdHJpbmdcIj09dHlwZW9mIHQ/SSh0KToodyhcIkNhbm5vdCBjb2VyY2UgdG8gVWludDhBcnJheTogXCIrbCh0KSksbnVsbCl9ZnVuY3Rpb24ga3QodCl7aWYodCYmMTx0Lmxlbmd0aCl7dmFyIGU9bCh0WzBdKTt5KHQsKGZ1bmN0aW9uKHQpe2wodCkhPWUmJncoXCJJbmNvbnNpc3RlbnQgdHlwZSBpbiBKU1BCIHJlcGVhdGVkIGZpZWxkIGFycmF5LiBHb3QgXCIrbCh0KStcIiBleHBlY3RlZCBcIitlKX0pKX19ZnVuY3Rpb24gRnQodCxlLG8pe3JldHVybiBudWxsPT0odD13dCh0LGUpKT9vOnR9ZnVuY3Rpb24gT3QodCxlLG8pe3JldHVybiBTKHQseXQpLGU8dC5HP3QudVtlK3QuRF09bzooZ3QodCksdC5pW2VdPW8pLHR9ZnVuY3Rpb24gQXQodCxlLG8scil7cmV0dXJuIFModCx5dCksbyE9PXI/T3QodCxlLG8pOmU8dC5HP3QudVtlK3QuRF09bnVsbDooZ3QodCksZGVsZXRlIHQuaVtlXSksdH1mdW5jdGlvbiBfdCh0LGUsbyxyKXtyZXR1cm4gUyh0LHl0KSwobz1NdCh0LG8pKSYmbyE9PWUmJnZvaWQgMCE9PXImJih0LmYmJm8gaW4gdC5mJiYodC5mW29dPXZvaWQgMCksT3QodCxvLHZvaWQgMCkpLE90KHQsZSxyKX1mdW5jdGlvbiBNdCh0LGUpe2Zvcih2YXIgbyxyLG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIGk9ZVtuXSxwPXd0KHQsaSk7bnVsbCE9cCYmKG89aSxyPXAsT3QodCxpLHZvaWQgMCkpfXJldHVybiBvPyhPdCh0LG8sciksbyk6MH1mdW5jdGlvbiBQdCh0LGUsbyl7aWYodC5mfHwodC5mPXt9KSwhdC5mW29dKXtmb3IodmFyIHI9d3QodCxvKSxuPVtdLGk9MDtpPHIubGVuZ3RoO2krKyluW2ldPW5ldyBlKHJbaV0pO3QuZltvXT1ufX1mdW5jdGlvbiBFdCh0KXtpZih0LmYpZm9yKHZhciBlIGluIHQuZil7dmFyIG89dC5mW2VdO2lmKEFycmF5LmlzQXJyYXkobykpZm9yKHZhciByPTA7cjxvLmxlbmd0aDtyKyspb1tyXSYmb1tyXS5nKCk7ZWxzZSBvJiZvLmcoKX19ZnVuY3Rpb24gQnQodCxlKXt0PXR8fHt9LGU9ZXx8e307dmFyIG8scj17fTtmb3IobyBpbiB0KXJbb109MDtmb3IobyBpbiBlKXJbb109MDtmb3IobyBpbiByKWlmKCFJdCh0W29dLGVbb10pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIEl0KHQsZSl7aWYodD09ZSlyZXR1cm4hMDtpZighYyh0KXx8IWMoZSkpcmV0dXJuISEoXCJudW1iZXJcIj09dHlwZW9mIHQmJmlzTmFOKHQpfHxcIm51bWJlclwiPT10eXBlb2YgZSYmaXNOYU4oZSkpJiZTdHJpbmcodCk9PVN0cmluZyhlKTtpZih0LmNvbnN0cnVjdG9yIT1lLmNvbnN0cnVjdG9yKXJldHVybiExO2lmKGR0JiZ0LmNvbnN0cnVjdG9yPT09VWludDhBcnJheSl7aWYodC5sZW5ndGghPWUubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgbz0wO288dC5sZW5ndGg7bysrKWlmKHRbb10hPWVbb10pcmV0dXJuITE7cmV0dXJuITB9aWYodC5jb25zdHJ1Y3Rvcj09PUFycmF5KXt2YXIgcj12b2lkIDAsbj12b2lkIDAsaT1NYXRoLm1heCh0Lmxlbmd0aCxlLmxlbmd0aCk7Zm9yKG89MDtvPGk7bysrKXt2YXIgcD10W29dLGE9ZVtvXTtpZihwJiZwLmNvbnN0cnVjdG9yPT1PYmplY3QmJih2KHZvaWQgMD09PXIpLHYobz09PXQubGVuZ3RoLTEpLHI9cCxwPXZvaWQgMCksYSYmYS5jb25zdHJ1Y3Rvcj09T2JqZWN0JiYodih2b2lkIDA9PT1uKSx2KG89PT1lLmxlbmd0aC0xKSxuPWEsYT12b2lkIDApLCFJdChwLGEpKXJldHVybiExfXJldHVybiFyJiYhbnx8QnQocj1yfHx7fSxuPW58fHt9KX1pZih0LmNvbnN0cnVjdG9yPT09T2JqZWN0KXJldHVybiBCdCh0LGUpO3Rocm93IEVycm9yKFwiSW52YWxpZCB0eXBlIGluIEpTUEIgYXJyYXlcIil9ZnVuY3Rpb24gQ3QodCl7cmV0dXJuIG5ldyB0LmNvbnN0cnVjdG9yKFJ0KHQuZygpKSl9ZnVuY3Rpb24gUnQodCl7aWYoQXJyYXkuaXNBcnJheSh0KSl7Zm9yKHZhciBlPUFycmF5KHQubGVuZ3RoKSxvPTA7bzx0Lmxlbmd0aDtvKyspe3ZhciByPXRbb107bnVsbCE9ciYmKGVbb109XCJvYmplY3RcIj09dHlwZW9mIHI/UnQodihyKSk6cil9cmV0dXJuIGV9aWYoZHQmJnQgaW5zdGFuY2VvZiBVaW50OEFycmF5KXJldHVybiBuZXcgVWludDhBcnJheSh0KTtmb3IobyBpbiBlPXt9LHQpbnVsbCE9KHI9dFtvXSkmJihlW29dPVwib2JqZWN0XCI9PXR5cGVvZiByP1J0KHYocikpOnIpO3JldHVybiBlfXl0LnRvT2JqZWN0TGlzdD12dCx5dC50b09iamVjdEV4dGVuc2lvbj1mdW5jdGlvbih0LGUsbyxyLG4pe2Zvcih2YXIgaSBpbiBvKXt2YXIgcD1vW2ldLGE9ci5jYWxsKHQscCk7aWYobnVsbCE9YSl7Zm9yKHZhciBzIGluIHAuQmEpaWYocC5CYS5oYXNPd25Qcm9wZXJ0eShzKSlicmVhaztlW3NdPXAuTmE/cC5uYT92dChhLHAuTmEsbik6cC5OYShuLGEpOmF9fX0seXQuc2VyaWFsaXplQmluYXJ5RXh0ZW5zaW9ucz1mdW5jdGlvbih0LGUsbyxyKXtmb3IodmFyIG4gaW4gbyl7dmFyIGk9b1tuXSxwPWkuWmE7aWYoIWkuQWEpdGhyb3cgRXJyb3IoXCJNZXNzYWdlIGV4dGVuc2lvbiBwcmVzZW50IHRoYXQgd2FzIGdlbmVyYXRlZCB3aXRob3V0IGJpbmFyeSBzZXJpYWxpemF0aW9uIHN1cHBvcnRcIik7dmFyIGE9ci5jYWxsKHQscCk7aWYobnVsbCE9YSlpZihwLkYoKSl7aWYoIWkuV2EpdGhyb3cgRXJyb3IoXCJNZXNzYWdlIGV4dGVuc2lvbiBwcmVzZW50IGhvbGRpbmcgc3VibWVzc2FnZSB3aXRob3V0IGJpbmFyeSBzdXBwb3J0IGVuYWJsZWQsIGFuZCBtZXNzYWdlIGlzIGJlaW5nIHNlcmlhbGl6ZWQgdG8gYmluYXJ5IGZvcm1hdFwiKTtpLkFhLmNhbGwoZSxwLm1hLGEsaS5XYSl9ZWxzZSBpLkFhLmNhbGwoZSxwLm1hLGEpfX0seXQucmVhZEJpbmFyeUV4dGVuc2lvbj1mdW5jdGlvbih0LGUsbyxyLG4pe3ZhciBpPW9bZS5jXTtpZihpKXtpZihvPWkuWmEsIWkuemEpdGhyb3cgRXJyb3IoXCJEZXNlcmlhbGl6aW5nIGV4dGVuc2lvbiB3aG9zZSBnZW5lcmF0ZWQgY29kZSBkb2VzIG5vdCBzdXBwb3J0IGJpbmFyeSBmb3JtYXRcIik7aWYoby5GKCkpe3ZhciBwPW5ldyBvLmxhO2kuemEuY2FsbChlLHAsaS5BYil9ZWxzZSBwPWkuemEuY2FsbChlKTtvLm5hJiYhaS5OYj8oZT1yLmNhbGwodCxvKSk/ZS5wdXNoKHApOm4uY2FsbCh0LG8sW3BdKTpuLmNhbGwodCxvLHApfWVsc2UgZS5DKCl9LHl0LmdldEZpZWxkPXd0LHl0LmdldFJlcGVhdGVkRmllbGQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd3QodCxlKX0seXQuZ2V0T3B0aW9uYWxGbG9hdGluZ1BvaW50RmllbGQ9U3QseXQuZ2V0Qm9vbGVhbkZpZWxkPW10LHl0LmdldFJlcGVhdGVkRmxvYXRpbmdQb2ludEZpZWxkPWZ1bmN0aW9uKHQsZSl7dmFyIG89d3QodCxlKTtpZih0LmF8fCh0LmE9e30pLCF0LmFbZV0pe2Zvcih2YXIgcj0wO3I8by5sZW5ndGg7cisrKW9bcl09K29bcl07dC5hW2VdPSEwfXJldHVybiBvfSx5dC5nZXRSZXBlYXRlZEJvb2xlYW5GaWVsZD1mdW5jdGlvbih0LGUpe3ZhciBvPXd0KHQsZSk7aWYodC5hfHwodC5hPXt9KSwhdC5hW2VdKXtmb3IodmFyIHI9MDtyPG8ubGVuZ3RoO3IrKylvW3JdPSEhb1tyXTt0LmFbZV09ITB9cmV0dXJuIG99LHl0LmJ5dGVzQXNCNjQ9anQseXQuYnl0ZXNBc1U4PXh0LHl0LmJ5dGVzTGlzdEFzQjY0PWZ1bmN0aW9uKHQpe3JldHVybiBrdCh0KSx0Lmxlbmd0aCYmXCJzdHJpbmdcIiE9dHlwZW9mIHRbMF0/ZCh0LGp0KTp0fSx5dC5ieXRlc0xpc3RBc1U4PWZ1bmN0aW9uKHQpe3JldHVybiBrdCh0KSwhdC5sZW5ndGh8fHRbMF1pbnN0YW5jZW9mIFVpbnQ4QXJyYXk/dDpkKHQseHQpfSx5dC5nZXRGaWVsZFdpdGhEZWZhdWx0PUZ0LHl0LmdldEJvb2xlYW5GaWVsZFdpdGhEZWZhdWx0PWZ1bmN0aW9uKHQsZSxvKXtyZXR1cm4gbnVsbD09KHQ9bXQodCxlKSk/bzp0fSx5dC5nZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdD1mdW5jdGlvbih0LGUsbyl7cmV0dXJuIG51bGw9PSh0PVN0KHQsZSkpP286dH0seXQuZ2V0RmllbGRQcm90bzM9RnQseXQuZ2V0TWFwRmllbGQ9ZnVuY3Rpb24odCxlLG8scil7aWYodC5mfHwodC5mPXt9KSxlIGluIHQuZilyZXR1cm4gdC5mW2VdO3ZhciBuPXd0KHQsZSk7aWYoIW4pe2lmKG8pcmV0dXJuO090KHQsZSxuPVtdKX1yZXR1cm4gdC5mW2VdPW5ldyBqKG4scil9LHl0LnNldEZpZWxkPU90LHl0LnNldFByb3RvM0ludEZpZWxkPWZ1bmN0aW9uKHQsZSxvKXtyZXR1cm4gQXQodCxlLG8sMCl9LHl0LnNldFByb3RvM0Zsb2F0RmllbGQ9ZnVuY3Rpb24odCxlLG8pe3JldHVybiBBdCh0LGUsbywwKX0seXQuc2V0UHJvdG8zQm9vbGVhbkZpZWxkPWZ1bmN0aW9uKHQsZSxvKXtyZXR1cm4gQXQodCxlLG8sITEpfSx5dC5zZXRQcm90bzNTdHJpbmdGaWVsZD1mdW5jdGlvbih0LGUsbyl7cmV0dXJuIEF0KHQsZSxvLFwiXCIpfSx5dC5zZXRQcm90bzNCeXRlc0ZpZWxkPWZ1bmN0aW9uKHQsZSxvKXtyZXR1cm4gQXQodCxlLG8sXCJcIil9LHl0LnNldFByb3RvM0VudW1GaWVsZD1mdW5jdGlvbih0LGUsbyl7cmV0dXJuIEF0KHQsZSxvLDApfSx5dC5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZD1mdW5jdGlvbih0LGUsbyl7cmV0dXJuIEF0KHQsZSxvLFwiMFwiKX0seXQuYWRkVG9SZXBlYXRlZEZpZWxkPWZ1bmN0aW9uKHQsZSxvLHIpe3JldHVybiBTKHQseXQpLGU9d3QodCxlKSxudWxsIT1yP2Uuc3BsaWNlKHIsMCxvKTplLnB1c2gobyksdH0seXQuc2V0T25lb2ZGaWVsZD1fdCx5dC5jb21wdXRlT25lb2ZDYXNlPU10LHl0LmdldFdyYXBwZXJGaWVsZD1mdW5jdGlvbih0LGUsbyxyKXtpZih0LmZ8fCh0LmY9e30pLCF0LmZbb10pe3ZhciBuPXd0KHQsbyk7KHJ8fG4pJiYodC5mW29dPW5ldyBlKG4pKX1yZXR1cm4gdC5mW29dfSx5dC5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZD1mdW5jdGlvbih0LGUsbyl7cmV0dXJuIFB0KHQsZSxvKSwoZT10LmZbb10pPT1idCYmKGU9dC5mW29dPVtdKSxlfSx5dC5zZXRXcmFwcGVyRmllbGQ9ZnVuY3Rpb24odCxlLG8pe1ModCx5dCksdC5mfHwodC5mPXt9KTt2YXIgcj1vP28uZygpOm87cmV0dXJuIHQuZltlXT1vLE90KHQsZSxyKX0seXQuc2V0T25lb2ZXcmFwcGVyRmllbGQ9ZnVuY3Rpb24odCxlLG8scil7Uyh0LHl0KSx0LmZ8fCh0LmY9e30pO3ZhciBuPXI/ci5nKCk6cjtyZXR1cm4gdC5mW2VdPXIsX3QodCxlLG8sbil9LHl0LnNldFJlcGVhdGVkV3JhcHBlckZpZWxkPWZ1bmN0aW9uKHQsZSxvKXtTKHQseXQpLHQuZnx8KHQuZj17fSksbz1vfHxbXTtmb3IodmFyIHI9W10sbj0wO248by5sZW5ndGg7bisrKXJbbl09b1tuXS5nKCk7cmV0dXJuIHQuZltlXT1vLE90KHQsZSxyKX0seXQuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZD1mdW5jdGlvbih0LGUsbyxyLG4pe1B0KHQscixlKTt2YXIgaT10LmZbZV07cmV0dXJuIGl8fChpPXQuZltlXT1bXSksbz1vfHxuZXcgcix0PXd0KHQsZSksbnVsbCE9bj8oaS5zcGxpY2UobiwwLG8pLHQuc3BsaWNlKG4sMCxvLmcoKSkpOihpLnB1c2gobyksdC5wdXNoKG8uZygpKSksb30seXQudG9NYXA9ZnVuY3Rpb24odCxlLG8scil7Zm9yKHZhciBuPXt9LGk9MDtpPHQubGVuZ3RoO2krKyluW2UuY2FsbCh0W2ldKV09bz9vLmNhbGwodFtpXSxyLHRbaV0pOnRbaV07cmV0dXJuIG59LHl0LnByb3RvdHlwZS5nPWZ1bmN0aW9uKCl7cmV0dXJuIEV0KHRoaXMpLHRoaXMudX0seXQucHJvdG90eXBlLnRvQXJyYXk9eXQucHJvdG90eXBlLmcseXQucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIEV0KHRoaXMpLHRoaXMudS50b1N0cmluZygpfSx5dC5wcm90b3R5cGUuZ2V0RXh0ZW5zaW9uPWZ1bmN0aW9uKHQpe2lmKHRoaXMuaSl7dGhpcy5mfHwodGhpcy5mPXt9KTt2YXIgZT10Lm1hO2lmKHQubmEpe2lmKHQuRigpKXJldHVybiB0aGlzLmZbZV18fCh0aGlzLmZbZV09ZCh0aGlzLmlbZV18fFtdLChmdW5jdGlvbihlKXtyZXR1cm4gbmV3IHQubGEoZSl9KSkpLHRoaXMuZltlXX1lbHNlIGlmKHQuRigpKXJldHVybiF0aGlzLmZbZV0mJnRoaXMuaVtlXSYmKHRoaXMuZltlXT1uZXcgdC5sYSh0aGlzLmlbZV0pKSx0aGlzLmZbZV07cmV0dXJuIHRoaXMuaVtlXX19LHl0LnByb3RvdHlwZS5nZXRFeHRlbnNpb249eXQucHJvdG90eXBlLmdldEV4dGVuc2lvbix5dC5wcm90b3R5cGUuS2M9ZnVuY3Rpb24odCxlKXt0aGlzLmZ8fCh0aGlzLmY9e30pLGd0KHRoaXMpO3ZhciBvPXQubWE7cmV0dXJuIHQubmE/KGU9ZXx8W10sdC5GKCk/KHRoaXMuZltvXT1lLHRoaXMuaVtvXT1kKGUsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmcoKX0pKSk6dGhpcy5pW29dPWUpOnQuRigpPyh0aGlzLmZbb109ZSx0aGlzLmlbb109ZT9lLmcoKTplKTp0aGlzLmlbb109ZSx0aGlzfSx5dC5wcm90b3R5cGUuc2V0RXh0ZW5zaW9uPXl0LnByb3RvdHlwZS5LYyx5dC5kaWZmZXJlbmNlPWZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZS5jb25zdHJ1Y3RvcikpdGhyb3cgRXJyb3IoXCJNZXNzYWdlcyBoYXZlIGRpZmZlcmVudCB0eXBlcy5cIik7dmFyIG89dC5nKCk7ZT1lLmcoKTt2YXIgcj1bXSxuPTAsaT1vLmxlbmd0aD5lLmxlbmd0aD9vLmxlbmd0aDplLmxlbmd0aDtmb3IodC5iJiYoclswXT10LmIsbj0xKTtuPGk7bisrKUl0KG9bbl0sZVtuXSl8fChyW25dPWVbbl0pO3JldHVybiBuZXcgdC5jb25zdHJ1Y3RvcihyKX0seXQuZXF1YWxzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ9PWV8fCEoIXR8fCFlKSYmdCBpbnN0YW5jZW9mIGUuY29uc3RydWN0b3ImJkl0KHQuZygpLGUuZygpKX0seXQuY29tcGFyZUV4dGVuc2lvbnM9QnQseXQuY29tcGFyZUZpZWxkcz1JdCx5dC5wcm90b3R5cGUuQmI9ZnVuY3Rpb24oKXtyZXR1cm4gQ3QodGhpcyl9LHl0LnByb3RvdHlwZS5jbG9uZU1lc3NhZ2U9eXQucHJvdG90eXBlLkJiLHl0LnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3JldHVybiBDdCh0aGlzKX0seXQucHJvdG90eXBlLmNsb25lPXl0LnByb3RvdHlwZS5jbG9uZSx5dC5jbG9uZT1mdW5jdGlvbih0KXtyZXR1cm4gQ3QodCl9LHl0LmNvcHlJbnRvPWZ1bmN0aW9uKHQsZSl7Uyh0LHl0KSxTKGUseXQpLHYodC5jb25zdHJ1Y3Rvcj09ZS5jb25zdHJ1Y3RvcixcIkNvcHkgc291cmNlIGFuZCB0YXJnZXQgbWVzc2FnZSBzaG91bGQgaGF2ZSB0aGUgc2FtZSB0eXBlLlwiKSx0PUN0KHQpO2Zvcih2YXIgbz1lLmcoKSxyPXQuZygpLG49by5sZW5ndGg9MDtuPHIubGVuZ3RoO24rKylvW25dPXJbbl07ZS5mPXQuZixlLmk9dC5pfSx5dC5yZWdpc3Rlck1lc3NhZ2VUeXBlPWZ1bmN0aW9uKHQsZSl7ZS53ZT10fTt2YXIgVHQ9e2R1bXA6ZnVuY3Rpb24odCl7cmV0dXJuIFModCx5dCxcImpzcGIuTWVzc2FnZSBpbnN0YW5jZSBleHBlY3RlZFwiKSx2KHQuZ2V0RXh0ZW5zaW9uLFwiT25seSB1bm9iZnVzY2F0ZWQgYW5kIHVub3B0aW1pemVkIGNvbXBpbGF0aW9uIG1vZGVzIHN1cHBvcnRlZC5cIiksVHQuWCh0KX19O2Z1bmN0aW9uIFV0KCl7dGhpcy5hPVtdfWZ1bmN0aW9uIHp0KHQsZSl7dGhpcy5sbz10LHRoaXMuaGk9ZX1mdW5jdGlvbiBXdCh0LGUpe3ZhciBvPTY1NTM1JnQscj02NTUzNSZlLG49ZT4+PjE2O2ZvcihlPW8qcis2NTUzNioobypuJjY1NTM1KSs2NTUzNiooKHQ+Pj49MTYpKnImNjU1MzUpLG89dCpuKyhvKm4+Pj4xNikrKHQqcj4+PjE2KTs0Mjk0OTY3Mjk2PD1lOyllLT00Mjk0OTY3Mjk2LG8rPTE7cmV0dXJuIG5ldyB6dChlPj4+MCxvPj4+MCl9ZnVuY3Rpb24gTHQodCl7Zm9yKHZhciBlPW5ldyB6dCgwLDApLG89bmV3IHp0KDAsMCkscj0wO3I8dC5sZW5ndGg7cisrKXtpZihcIjBcIj50W3JdfHxcIjlcIjx0W3JdKXJldHVybiBudWxsO28ubG89cGFyc2VJbnQodFtyXSwxMCksZT1lLmViKDEwKS5hZGQobyl9cmV0dXJuIGV9ZnVuY3Rpb24gVnQodCxlKXt0aGlzLmxvPXQsdGhpcy5oaT1lfWZ1bmN0aW9uIER0KHQpe3ZhciBlPTA8dC5sZW5ndGgmJlwiLVwiPT10WzBdO3JldHVybiBlJiYodD10LnN1YnN0cmluZygxKSksbnVsbD09PSh0PUx0KHQpKT9udWxsOihlJiYodD1uZXcgenQoMCwwKS5zdWIodCkpLG5ldyBWdCh0LmxvLHQuaGkpKX1mdW5jdGlvbiBOdCgpe3RoaXMuYz1bXSx0aGlzLmI9MCx0aGlzLmE9bmV3IFV0LHRoaXMuaD1bXX1mdW5jdGlvbiBxdCh0LGUpe3ZhciBvPXQuYS5lbmQoKTt0LmMucHVzaChvKSx0LmMucHVzaChlKSx0LmIrPW8ubGVuZ3RoK2UubGVuZ3RofWZ1bmN0aW9uIEh0KHQsZSl7cmV0dXJuIEd0KHQsZSwyKSxlPXQuYS5lbmQoKSx0LmMucHVzaChlKSx0LmIrPWUubGVuZ3RoLGUucHVzaCh0LmIpLGV9ZnVuY3Rpb24gWnQodCxlKXt2YXIgbz1lLnBvcCgpO2Zvcih2KDA8PShvPXQuYit0LmEubGVuZ3RoKCktbykpOzEyNzxvOyllLnB1c2goMTI3Jm98MTI4KSxvPj4+PTcsdC5iKys7ZS5wdXNoKG8pLHQuYisrfWZ1bmN0aW9uIEd0KHQsZSxvKXt2KDE8PWUmJmU9PU1hdGguZmxvb3IoZSkpLHQuYS5qKDgqZStvKX1mdW5jdGlvbiBKdCh0LGUsbyl7bnVsbCE9byYmKEd0KHQsZSwwKSx0LmEuaihvKSl9ZnVuY3Rpb24gJHQodCxlLG8pe251bGwhPW8mJihHdCh0LGUsMCksdC5hLk0obykpfWgoXCJqc3BiLmRlYnVnLmR1bXBcIixUdC5kdW1wLHZvaWQgMCksVHQuWD1mdW5jdGlvbih0KXt2YXIgZT1sKHQpO2lmKFwibnVtYmVyXCI9PWV8fFwic3RyaW5nXCI9PWV8fFwiYm9vbGVhblwiPT1lfHxcIm51bGxcIj09ZXx8XCJ1bmRlZmluZWRcIj09ZXx8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQ4QXJyYXkmJnQgaW5zdGFuY2VvZiBVaW50OEFycmF5KXJldHVybiB0O2lmKFwiYXJyYXlcIj09ZSlyZXR1cm4gZnVuY3Rpb24odCxlLG8pe2Zvcih2YXIgcj1bXSxuPTI7bjxhcmd1bWVudHMubGVuZ3RoOysrbilyW24tMl09YXJndW1lbnRzW25dO0FycmF5LmlzQXJyYXkodCl8fGcoXCJFeHBlY3RlZCBhcnJheSBidXQgZ290ICVzOiAlcy5cIixbbCh0KSx0XSxlLHIpfSh0KSxkKHQsVHQuWCk7aWYodCBpbnN0YW5jZW9mIGope2Zvcih2YXIgbz17fSxyPSh0PXQuZW50cmllcygpKS5uZXh0KCk7IXIuZG9uZTtyPXQubmV4dCgpKW9bci52YWx1ZVswXV09VHQuWChyLnZhbHVlWzFdKTtyZXR1cm4gb31TKHQseXQsXCJPbmx5IG1lc3NhZ2VzIGV4cGVjdGVkOiBcIit0KTt2YXIgbj17JG5hbWU6KGU9dC5jb25zdHJ1Y3RvcikubmFtZXx8ZS5kaXNwbGF5TmFtZX07Zm9yKGEgaW4gZS5wcm90b3R5cGUpe3ZhciBpPS9eZ2V0KFtBLVpdXFx3KikvLmV4ZWMoYSk7aWYoaSYmXCJnZXRFeHRlbnNpb25cIiE9YSYmXCJnZXRKc1BiTWVzc2FnZUlkXCIhPWEpe3ZhciBwPVwiaGFzXCIraVsxXTt0W3BdJiYhdFtwXSgpfHwocD10W2FdKCksbltUdC4kYShpWzFdKV09VHQuWChwKSl9fWlmKHQuZXh0ZW5zaW9uT2JqZWN0XylyZXR1cm4gbi4kZXh0ZW5zaW9ucz1cIlJlY3Vyc2l2ZSBkdW1waW5nIG9mIGV4dGVuc2lvbnMgbm90IHN1cHBvcnRlZCBpbiBjb21waWxlZCBjb2RlLiBTd2l0Y2ggdG8gdW5jb21waWxlZCBvciBkdW1wIGV4dGVuc2lvbiBvYmplY3QgZGlyZWN0bHlcIixuO2ZvcihyIGluIGUuZXh0ZW5zaW9ucylpZigvXlxcZCskLy50ZXN0KHIpKXtwPWUuZXh0ZW5zaW9uc1tyXTt2YXIgYT10LmdldEV4dGVuc2lvbihwKTtpPXZvaWQgMCxwPXAuQmE7dmFyIHM9W10sdT0wO2ZvcihpIGluIHApc1t1KytdPWk7aT1zWzBdLG51bGwhPWEmJihvfHwobz1uLiRleHRlbnNpb25zPXt9KSxvW1R0LiRhKGkpXT1UdC5YKGEpKX1yZXR1cm4gbn0sVHQuJGE9ZnVuY3Rpb24odCl7cmV0dXJuIHQucmVwbGFjZSgvXltBLVpdLywoZnVuY3Rpb24odCl7cmV0dXJuIHQudG9Mb3dlckNhc2UoKX0pKX0saChcImpzcGIuQmluYXJ5RW5jb2RlclwiLFV0LHZvaWQgMCksVXQucHJvdG90eXBlLmxlbmd0aD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmEubGVuZ3RofSxVdC5wcm90b3R5cGUubGVuZ3RoPVV0LnByb3RvdHlwZS5sZW5ndGgsVXQucHJvdG90eXBlLmVuZD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuYTtyZXR1cm4gdGhpcy5hPVtdLHR9LFV0LnByb3RvdHlwZS5lbmQ9VXQucHJvdG90eXBlLmVuZCxVdC5wcm90b3R5cGUubD1mdW5jdGlvbih0LGUpe2Zvcih2KHQ9PU1hdGguZmxvb3IodCkpLHYoZT09TWF0aC5mbG9vcihlKSksdigwPD10JiY0Mjk0OTY3Mjk2PnQpLHYoMDw9ZSYmNDI5NDk2NzI5Nj5lKTswPGV8fDEyNzx0Oyl0aGlzLmEucHVzaCgxMjcmdHwxMjgpLHQ9KHQ+Pj43fGU8PDI1KT4+PjAsZT4+Pj03O3RoaXMuYS5wdXNoKHQpfSxVdC5wcm90b3R5cGUud3JpdGVTcGxpdFZhcmludDY0PVV0LnByb3RvdHlwZS5sLFV0LnByb3RvdHlwZS5BPWZ1bmN0aW9uKHQsZSl7dih0PT1NYXRoLmZsb29yKHQpKSx2KGU9PU1hdGguZmxvb3IoZSkpLHYoMDw9dCYmNDI5NDk2NzI5Nj50KSx2KDA8PWUmJjQyOTQ5NjcyOTY+ZSksdGhpcy5zKHQpLHRoaXMucyhlKX0sVXQucHJvdG90eXBlLndyaXRlU3BsaXRGaXhlZDY0PVV0LnByb3RvdHlwZS5BLFV0LnByb3RvdHlwZS5qPWZ1bmN0aW9uKHQpe2Zvcih2KHQ9PU1hdGguZmxvb3IodCkpLHYoMDw9dCYmNDI5NDk2NzI5Nj50KTsxMjc8dDspdGhpcy5hLnB1c2goMTI3JnR8MTI4KSx0Pj4+PTc7dGhpcy5hLnB1c2godCl9LFV0LnByb3RvdHlwZS53cml0ZVVuc2lnbmVkVmFyaW50MzI9VXQucHJvdG90eXBlLmosVXQucHJvdG90eXBlLk09ZnVuY3Rpb24odCl7aWYodih0PT1NYXRoLmZsb29yKHQpKSx2KC0yMTQ3NDgzNjQ4PD10JiYyMTQ3NDgzNjQ4PnQpLDA8PXQpdGhpcy5qKHQpO2Vsc2V7Zm9yKHZhciBlPTA7OT5lO2UrKyl0aGlzLmEucHVzaCgxMjcmdHwxMjgpLHQ+Pj03O3RoaXMuYS5wdXNoKDEpfX0sVXQucHJvdG90eXBlLndyaXRlU2lnbmVkVmFyaW50MzI9VXQucHJvdG90eXBlLk0sVXQucHJvdG90eXBlLnZhPWZ1bmN0aW9uKHQpe3YodD09TWF0aC5mbG9vcih0KSksdigwPD10JiYweDEwMDAwMDAwMDAwMDAwMDAwPnQpLHoodCksdGhpcy5sKFIsVCl9LFV0LnByb3RvdHlwZS53cml0ZVVuc2lnbmVkVmFyaW50NjQ9VXQucHJvdG90eXBlLnZhLFV0LnByb3RvdHlwZS51YT1mdW5jdGlvbih0KXt2KHQ9PU1hdGguZmxvb3IodCkpLHYoLTB4ODAwMDAwMDAwMDAwMDAwMDw9dCYmMHg4MDAwMDAwMDAwMDAwMDAwPnQpLHoodCksdGhpcy5sKFIsVCl9LFV0LnByb3RvdHlwZS53cml0ZVNpZ25lZFZhcmludDY0PVV0LnByb3RvdHlwZS51YSxVdC5wcm90b3R5cGUud2E9ZnVuY3Rpb24odCl7dih0PT1NYXRoLmZsb29yKHQpKSx2KC0yMTQ3NDgzNjQ4PD10JiYyMTQ3NDgzNjQ4PnQpLHRoaXMuaigodDw8MV50Pj4zMSk+Pj4wKX0sVXQucHJvdG90eXBlLndyaXRlWmlnemFnVmFyaW50MzI9VXQucHJvdG90eXBlLndhLFV0LnByb3RvdHlwZS54YT1mdW5jdGlvbih0KXt2KHQ9PU1hdGguZmxvb3IodCkpLHYoLTB4ODAwMDAwMDAwMDAwMDAwMDw9dCYmMHg4MDAwMDAwMDAwMDAwMDAwPnQpLFcodCksdGhpcy5sKFIsVCl9LFV0LnByb3RvdHlwZS53cml0ZVppZ3phZ1ZhcmludDY0PVV0LnByb3RvdHlwZS54YSxVdC5wcm90b3R5cGUuVGE9ZnVuY3Rpb24odCl7dGhpcy5XKHR0KHQpKX0sVXQucHJvdG90eXBlLndyaXRlWmlnemFnVmFyaW50NjRTdHJpbmc9VXQucHJvdG90eXBlLlRhLFV0LnByb3RvdHlwZS5XPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7RCh0KSxIKFIsVCwoZnVuY3Rpb24odCxvKXtlLmwodD4+PjAsbz4+PjApfSkpfSxVdC5wcm90b3R5cGUud3JpdGVaaWd6YWdWYXJpbnRIYXNoNjQ9VXQucHJvdG90eXBlLlcsVXQucHJvdG90eXBlLmJlPWZ1bmN0aW9uKHQpe3YodD09TWF0aC5mbG9vcih0KSksdigwPD10JiYyNTY+dCksdGhpcy5hLnB1c2godD4+PjAmMjU1KX0sVXQucHJvdG90eXBlLndyaXRlVWludDg9VXQucHJvdG90eXBlLmJlLFV0LnByb3RvdHlwZS5hZT1mdW5jdGlvbih0KXt2KHQ9PU1hdGguZmxvb3IodCkpLHYoMDw9dCYmNjU1MzY+dCksdGhpcy5hLnB1c2godD4+PjAmMjU1KSx0aGlzLmEucHVzaCh0Pj4+OCYyNTUpfSxVdC5wcm90b3R5cGUud3JpdGVVaW50MTY9VXQucHJvdG90eXBlLmFlLFV0LnByb3RvdHlwZS5zPWZ1bmN0aW9uKHQpe3YodD09TWF0aC5mbG9vcih0KSksdigwPD10JiY0Mjk0OTY3Mjk2PnQpLHRoaXMuYS5wdXNoKHQ+Pj4wJjI1NSksdGhpcy5hLnB1c2godD4+PjgmMjU1KSx0aGlzLmEucHVzaCh0Pj4+MTYmMjU1KSx0aGlzLmEucHVzaCh0Pj4+MjQmMjU1KX0sVXQucHJvdG90eXBlLndyaXRlVWludDMyPVV0LnByb3RvdHlwZS5zLFV0LnByb3RvdHlwZS5WPWZ1bmN0aW9uKHQpe3YodD09TWF0aC5mbG9vcih0KSksdigwPD10JiYweDEwMDAwMDAwMDAwMDAwMDAwPnQpLFUodCksdGhpcy5zKFIpLHRoaXMucyhUKX0sVXQucHJvdG90eXBlLndyaXRlVWludDY0PVV0LnByb3RvdHlwZS5WLFV0LnByb3RvdHlwZS5RYz1mdW5jdGlvbih0KXt2KHQ9PU1hdGguZmxvb3IodCkpLHYoLTEyODw9dCYmMTI4PnQpLHRoaXMuYS5wdXNoKHQ+Pj4wJjI1NSl9LFV0LnByb3RvdHlwZS53cml0ZUludDg9VXQucHJvdG90eXBlLlFjLFV0LnByb3RvdHlwZS5QYz1mdW5jdGlvbih0KXt2KHQ9PU1hdGguZmxvb3IodCkpLHYoLTMyNzY4PD10JiYzMjc2OD50KSx0aGlzLmEucHVzaCh0Pj4+MCYyNTUpLHRoaXMuYS5wdXNoKHQ+Pj44JjI1NSl9LFV0LnByb3RvdHlwZS53cml0ZUludDE2PVV0LnByb3RvdHlwZS5QYyxVdC5wcm90b3R5cGUuUz1mdW5jdGlvbih0KXt2KHQ9PU1hdGguZmxvb3IodCkpLHYoLTIxNDc0ODM2NDg8PXQmJjIxNDc0ODM2NDg+dCksdGhpcy5hLnB1c2godD4+PjAmMjU1KSx0aGlzLmEucHVzaCh0Pj4+OCYyNTUpLHRoaXMuYS5wdXNoKHQ+Pj4xNiYyNTUpLHRoaXMuYS5wdXNoKHQ+Pj4yNCYyNTUpfSxVdC5wcm90b3R5cGUud3JpdGVJbnQzMj1VdC5wcm90b3R5cGUuUyxVdC5wcm90b3R5cGUuVD1mdW5jdGlvbih0KXt2KHQ9PU1hdGguZmxvb3IodCkpLHYoLTB4ODAwMDAwMDAwMDAwMDAwMDw9dCYmMHg4MDAwMDAwMDAwMDAwMDAwPnQpLHoodCksdGhpcy5BKFIsVCl9LFV0LnByb3RvdHlwZS53cml0ZUludDY0PVV0LnByb3RvdHlwZS5ULFV0LnByb3RvdHlwZS5rYT1mdW5jdGlvbih0KXt2KHQ9PU1hdGguZmxvb3IodCkpLHYoLTB4ODAwMDAwMDAwMDAwMDAwMDw9K3QmJjB4ODAwMDAwMDAwMDAwMDAwMD4rdCksRCh0dCh0KSksdGhpcy5BKFIsVCl9LFV0LnByb3RvdHlwZS53cml0ZUludDY0U3RyaW5nPVV0LnByb3RvdHlwZS5rYSxVdC5wcm90b3R5cGUuTD1mdW5jdGlvbih0KXt2KDEvMD09PXR8fC0xLzA9PT10fHxpc05hTih0KXx8LTM0MDI4MjM0NjYzODUyODg2ZTIyPD10JiYzNDAyODIzNDY2Mzg1Mjg4NmUyMj49dCksTCh0KSx0aGlzLnMoUil9LFV0LnByb3RvdHlwZS53cml0ZUZsb2F0PVV0LnByb3RvdHlwZS5MLFV0LnByb3RvdHlwZS5KPWZ1bmN0aW9uKHQpe3YoMS8wPT09dHx8LTEvMD09PXR8fGlzTmFOKHQpfHwtMTc5NzY5MzEzNDg2MjMxNTdlMjkyPD10JiYxNzk3NjkzMTM0ODYyMzE1N2UyOTI+PXQpLFYodCksdGhpcy5zKFIpLHRoaXMucyhUKX0sVXQucHJvdG90eXBlLndyaXRlRG91YmxlPVV0LnByb3RvdHlwZS5KLFV0LnByb3RvdHlwZS5JPWZ1bmN0aW9uKHQpe3YoXCJib29sZWFuXCI9PXR5cGVvZiB0fHxcIm51bWJlclwiPT10eXBlb2YgdCksdGhpcy5hLnB1c2godD8xOjApfSxVdC5wcm90b3R5cGUud3JpdGVCb29sPVV0LnByb3RvdHlwZS5JLFV0LnByb3RvdHlwZS5SPWZ1bmN0aW9uKHQpe3YodD09TWF0aC5mbG9vcih0KSksdigtMjE0NzQ4MzY0ODw9dCYmMjE0NzQ4MzY0OD50KSx0aGlzLk0odCl9LFV0LnByb3RvdHlwZS53cml0ZUVudW09VXQucHJvdG90eXBlLlIsVXQucHJvdG90eXBlLmphPWZ1bmN0aW9uKHQpe3RoaXMuYS5wdXNoLmFwcGx5KHRoaXMuYSx0KX0sVXQucHJvdG90eXBlLndyaXRlQnl0ZXM9VXQucHJvdG90eXBlLmphLFV0LnByb3RvdHlwZS5OPWZ1bmN0aW9uKHQpe0QodCksdGhpcy5sKFIsVCl9LFV0LnByb3RvdHlwZS53cml0ZVZhcmludEhhc2g2ND1VdC5wcm90b3R5cGUuTixVdC5wcm90b3R5cGUuSz1mdW5jdGlvbih0KXtEKHQpLHRoaXMucyhSKSx0aGlzLnMoVCl9LFV0LnByb3RvdHlwZS53cml0ZUZpeGVkSGFzaDY0PVV0LnByb3RvdHlwZS5LLFV0LnByb3RvdHlwZS5VPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuYS5sZW5ndGg7IWZ1bmN0aW9uKHQsZSxvKXtmb3IodmFyIHI9W10sbj0yO248YXJndW1lbnRzLmxlbmd0aDsrK24pcltuLTJdPWFyZ3VtZW50c1tuXTtcInN0cmluZ1wiIT10eXBlb2YgdCYmZyhcIkV4cGVjdGVkIHN0cmluZyBidXQgZ290ICVzOiAlcy5cIixbbCh0KSx0XSxlLHIpfSh0KTtmb3IodmFyIG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIHI9dC5jaGFyQ29kZUF0KG8pO2lmKDEyOD5yKXRoaXMuYS5wdXNoKHIpO2Vsc2UgaWYoMjA0OD5yKXRoaXMuYS5wdXNoKHI+PjZ8MTkyKSx0aGlzLmEucHVzaCg2MyZyfDEyOCk7ZWxzZSBpZig2NTUzNj5yKWlmKDU1Mjk2PD1yJiY1NjMxOT49ciYmbysxPHQubGVuZ3RoKXt2YXIgbj10LmNoYXJDb2RlQXQobysxKTs1NjMyMDw9biYmNTczNDM+PW4mJihyPTEwMjQqKHItNTUyOTYpK24tNTYzMjArNjU1MzYsdGhpcy5hLnB1c2gocj4+MTh8MjQwKSx0aGlzLmEucHVzaChyPj4xMiY2M3wxMjgpLHRoaXMuYS5wdXNoKHI+PjYmNjN8MTI4KSx0aGlzLmEucHVzaCg2MyZyfDEyOCksbysrKX1lbHNlIHRoaXMuYS5wdXNoKHI+PjEyfDIyNCksdGhpcy5hLnB1c2gocj4+NiY2M3wxMjgpLHRoaXMuYS5wdXNoKDYzJnJ8MTI4KX1yZXR1cm4gdGhpcy5hLmxlbmd0aC1lfSxVdC5wcm90b3R5cGUud3JpdGVTdHJpbmc9VXQucHJvdG90eXBlLlUsaChcImpzcGIuYXJpdGguVUludDY0XCIsenQsdm9pZCAwKSx6dC5wcm90b3R5cGUuY21wPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmhpPHQuaGl8fHRoaXMuaGk9PXQuaGkmJnRoaXMubG88dC5sbz8tMTp0aGlzLmhpPT10LmhpJiZ0aGlzLmxvPT10LmxvPzA6MX0senQucHJvdG90eXBlLmNtcD16dC5wcm90b3R5cGUuY21wLHp0LnByb3RvdHlwZS5MYT1mdW5jdGlvbigpe3JldHVybiBuZXcgenQoKHRoaXMubG8+Pj4xfCgxJnRoaXMuaGkpPDwzMSk+Pj4wLHRoaXMuaGk+Pj4xPj4+MCl9LHp0LnByb3RvdHlwZS5yaWdodFNoaWZ0PXp0LnByb3RvdHlwZS5MYSx6dC5wcm90b3R5cGUuRGE9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHp0KHRoaXMubG88PDE+Pj4wLCh0aGlzLmhpPDwxfHRoaXMubG8+Pj4zMSk+Pj4wKX0senQucHJvdG90eXBlLmxlZnRTaGlmdD16dC5wcm90b3R5cGUuRGEsenQucHJvdG90eXBlLmNiPWZ1bmN0aW9uKCl7cmV0dXJuISEoMjE0NzQ4MzY0OCZ0aGlzLmhpKX0senQucHJvdG90eXBlLm1zYj16dC5wcm90b3R5cGUuY2IsenQucHJvdG90eXBlLk9iPWZ1bmN0aW9uKCl7cmV0dXJuISEoMSZ0aGlzLmxvKX0senQucHJvdG90eXBlLmxzYj16dC5wcm90b3R5cGUuT2IsenQucHJvdG90eXBlLlVhPWZ1bmN0aW9uKCl7cmV0dXJuIDA9PXRoaXMubG8mJjA9PXRoaXMuaGl9LHp0LnByb3RvdHlwZS56ZXJvPXp0LnByb3RvdHlwZS5VYSx6dC5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgenQoKHRoaXMubG8rdC5sbyY0Mjk0OTY3Mjk1KT4+PjA+Pj4wLCgodGhpcy5oaSt0LmhpJjQyOTQ5NjcyOTUpPj4+MCkrKDQyOTQ5NjcyOTY8PXRoaXMubG8rdC5sbz8xOjApPj4+MCl9LHp0LnByb3RvdHlwZS5hZGQ9enQucHJvdG90eXBlLmFkZCx6dC5wcm90b3R5cGUuc3ViPWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgenQoKHRoaXMubG8tdC5sbyY0Mjk0OTY3Mjk1KT4+PjA+Pj4wLCgodGhpcy5oaS10LmhpJjQyOTQ5NjcyOTUpPj4+MCktKDA+dGhpcy5sby10LmxvPzE6MCk+Pj4wKX0senQucHJvdG90eXBlLnN1Yj16dC5wcm90b3R5cGUuc3ViLHp0Lm11bDMyeDMyPVd0LHp0LnByb3RvdHlwZS5lYj1mdW5jdGlvbih0KXt2YXIgZT1XdCh0aGlzLmxvLHQpO3JldHVybih0PVd0KHRoaXMuaGksdCkpLmhpPXQubG8sdC5sbz0wLGUuYWRkKHQpfSx6dC5wcm90b3R5cGUubXVsPXp0LnByb3RvdHlwZS5lYix6dC5wcm90b3R5cGUuWGE9ZnVuY3Rpb24odCl7aWYoMD09dClyZXR1cm5bXTt2YXIgZT1uZXcgenQoMCwwKSxvPW5ldyB6dCh0aGlzLmxvLHRoaXMuaGkpO3Q9bmV3IHp0KHQsMCk7Zm9yKHZhciByPW5ldyB6dCgxLDApOyF0LmNiKCk7KXQ9dC5EYSgpLHI9ci5EYSgpO2Zvcig7IXIuVWEoKTspMD49dC5jbXAobykmJihlPWUuYWRkKHIpLG89by5zdWIodCkpLHQ9dC5MYSgpLHI9ci5MYSgpO3JldHVybltlLG9dfSx6dC5wcm90b3R5cGUuZGl2PXp0LnByb3RvdHlwZS5YYSx6dC5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9XCJcIixlPXRoaXM7IWUuVWEoKTspe3ZhciBvPShlPWUuWGEoMTApKVswXTt0PWVbMV0ubG8rdCxlPW99cmV0dXJuXCJcIj09dCYmKHQ9XCIwXCIpLHR9LHp0LnByb3RvdHlwZS50b1N0cmluZz16dC5wcm90b3R5cGUudG9TdHJpbmcsenQuZnJvbVN0cmluZz1MdCx6dC5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHp0KHRoaXMubG8sdGhpcy5oaSl9LHp0LnByb3RvdHlwZS5jbG9uZT16dC5wcm90b3R5cGUuY2xvbmUsaChcImpzcGIuYXJpdGguSW50NjRcIixWdCx2b2lkIDApLFZ0LnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBWdCgodGhpcy5sbyt0LmxvJjQyOTQ5NjcyOTUpPj4+MD4+PjAsKCh0aGlzLmhpK3QuaGkmNDI5NDk2NzI5NSk+Pj4wKSsoNDI5NDk2NzI5Njw9dGhpcy5sbyt0LmxvPzE6MCk+Pj4wKX0sVnQucHJvdG90eXBlLmFkZD1WdC5wcm90b3R5cGUuYWRkLFZ0LnByb3RvdHlwZS5zdWI9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBWdCgodGhpcy5sby10LmxvJjQyOTQ5NjcyOTUpPj4+MD4+PjAsKCh0aGlzLmhpLXQuaGkmNDI5NDk2NzI5NSk+Pj4wKS0oMD50aGlzLmxvLXQubG8/MTowKT4+PjApfSxWdC5wcm90b3R5cGUuc3ViPVZ0LnByb3RvdHlwZS5zdWIsVnQucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBWdCh0aGlzLmxvLHRoaXMuaGkpfSxWdC5wcm90b3R5cGUuY2xvbmU9VnQucHJvdG90eXBlLmNsb25lLFZ0LnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3ZhciB0PSEhKDIxNDc0ODM2NDgmdGhpcy5oaSksZT1uZXcgenQodGhpcy5sbyx0aGlzLmhpKTtyZXR1cm4gdCYmKGU9bmV3IHp0KDAsMCkuc3ViKGUpKSwodD9cIi1cIjpcIlwiKStlLnRvU3RyaW5nKCl9LFZ0LnByb3RvdHlwZS50b1N0cmluZz1WdC5wcm90b3R5cGUudG9TdHJpbmcsVnQuZnJvbVN0cmluZz1EdCxoKFwianNwYi5CaW5hcnlXcml0ZXJcIixOdCx2b2lkIDApLE50LnByb3RvdHlwZS5wYj1mdW5jdGlvbih0LGUsbyl7cXQodGhpcyx0LnN1YmFycmF5KGUsbykpfSxOdC5wcm90b3R5cGUud3JpdGVTZXJpYWxpemVkTWVzc2FnZT1OdC5wcm90b3R5cGUucGIsTnQucHJvdG90eXBlLlBiPWZ1bmN0aW9uKHQsZSxvKXtudWxsIT10JiZudWxsIT1lJiZudWxsIT1vJiZ0aGlzLnBiKHQsZSxvKX0sTnQucHJvdG90eXBlLm1heWJlV3JpdGVTZXJpYWxpemVkTWVzc2FnZT1OdC5wcm90b3R5cGUuUGIsTnQucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7dGhpcy5jPVtdLHRoaXMuYS5lbmQoKSx0aGlzLmI9MCx0aGlzLmg9W119LE50LnByb3RvdHlwZS5yZXNldD1OdC5wcm90b3R5cGUucmVzZXQsTnQucHJvdG90eXBlLmFiPWZ1bmN0aW9uKCl7digwPT10aGlzLmgubGVuZ3RoKTtmb3IodmFyIHQ9bmV3IFVpbnQ4QXJyYXkodGhpcy5iK3RoaXMuYS5sZW5ndGgoKSksZT10aGlzLmMsbz1lLmxlbmd0aCxyPTAsbj0wO248bztuKyspe3ZhciBpPWVbbl07dC5zZXQoaSxyKSxyKz1pLmxlbmd0aH1yZXR1cm4gZT10aGlzLmEuZW5kKCksdC5zZXQoZSxyKSx2KChyKz1lLmxlbmd0aCk9PXQubGVuZ3RoKSx0aGlzLmM9W3RdLHR9LE50LnByb3RvdHlwZS5nZXRSZXN1bHRCdWZmZXI9TnQucHJvdG90eXBlLmFiLE50LnByb3RvdHlwZS5LYj1mdW5jdGlvbih0KXtyZXR1cm4gQih0aGlzLmFiKCksdCl9LE50LnByb3RvdHlwZS5nZXRSZXN1bHRCYXNlNjRTdHJpbmc9TnQucHJvdG90eXBlLktiLE50LnByb3RvdHlwZS5WYT1mdW5jdGlvbih0KXt0aGlzLmgucHVzaChIdCh0aGlzLHQpKX0sTnQucHJvdG90eXBlLmJlZ2luU3ViTWVzc2FnZT1OdC5wcm90b3R5cGUuVmEsTnQucHJvdG90eXBlLllhPWZ1bmN0aW9uKCl7digwPD10aGlzLmgubGVuZ3RoKSxadCh0aGlzLHRoaXMuaC5wb3AoKSl9LE50LnByb3RvdHlwZS5lbmRTdWJNZXNzYWdlPU50LnByb3RvdHlwZS5ZYSxOdC5wcm90b3R5cGUuTmM9ZnVuY3Rpb24odCxlLG8pe3N3aXRjaCh0KXtjYXNlIDE6dGhpcy5KKGUsbyk7YnJlYWs7Y2FzZSAyOnRoaXMuTChlLG8pO2JyZWFrO2Nhc2UgMzp0aGlzLlQoZSxvKTticmVhaztjYXNlIDQ6dGhpcy5WKGUsbyk7YnJlYWs7Y2FzZSA1OnRoaXMuUyhlLG8pO2JyZWFrO2Nhc2UgNjp0aGlzLlFhKGUsbyk7YnJlYWs7Y2FzZSA3OnRoaXMuUGEoZSxvKTticmVhaztjYXNlIDg6dGhpcy5JKGUsbyk7YnJlYWs7Y2FzZSA5OnRoaXMuVShlLG8pO2JyZWFrO2Nhc2UgMTA6dyhcIkdyb3VwIGZpZWxkIHR5cGUgbm90IHN1cHBvcnRlZCBpbiB3cml0ZUFueSgpXCIpO2JyZWFrO2Nhc2UgMTE6dyhcIk1lc3NhZ2UgZmllbGQgdHlwZSBub3Qgc3VwcG9ydGVkIGluIHdyaXRlQW55KClcIik7YnJlYWs7Y2FzZSAxMjp0aGlzLmphKGUsbyk7YnJlYWs7Y2FzZSAxMzp0aGlzLnMoZSxvKTticmVhaztjYXNlIDE0OnRoaXMuUihlLG8pO2JyZWFrO2Nhc2UgMTU6dGhpcy5SYShlLG8pO2JyZWFrO2Nhc2UgMTY6dGhpcy5TYShlLG8pO2JyZWFrO2Nhc2UgMTc6dGhpcy5yYihlLG8pO2JyZWFrO2Nhc2UgMTg6dGhpcy5zYihlLG8pO2JyZWFrO2Nhc2UgMzA6dGhpcy5LKGUsbyk7YnJlYWs7Y2FzZSAzMTp0aGlzLk4oZSxvKTticmVhaztkZWZhdWx0OncoXCJJbnZhbGlkIGZpZWxkIHR5cGUgaW4gd3JpdGVBbnkoKVwiKX19LE50LnByb3RvdHlwZS53cml0ZUFueT1OdC5wcm90b3R5cGUuTmMsTnQucHJvdG90eXBlLlM9ZnVuY3Rpb24odCxlKXtudWxsIT1lJiYodigtMjE0NzQ4MzY0ODw9ZSYmMjE0NzQ4MzY0OD5lKSwkdCh0aGlzLHQsZSkpfSxOdC5wcm90b3R5cGUud3JpdGVJbnQzMj1OdC5wcm90b3R5cGUuUyxOdC5wcm90b3R5cGUub2I9ZnVuY3Rpb24odCxlKXtudWxsIT1lJiYodigtMjE0NzQ4MzY0ODw9KGU9cGFyc2VJbnQoZSwxMCkpJiYyMTQ3NDgzNjQ4PmUpLCR0KHRoaXMsdCxlKSl9LE50LnByb3RvdHlwZS53cml0ZUludDMyU3RyaW5nPU50LnByb3RvdHlwZS5vYixOdC5wcm90b3R5cGUuVD1mdW5jdGlvbih0LGUpe251bGwhPWUmJih2KC0weDgwMDAwMDAwMDAwMDAwMDA8PWUmJjB4ODAwMDAwMDAwMDAwMDAwMD5lKSxudWxsIT1lJiYoR3QodGhpcyx0LDApLHRoaXMuYS51YShlKSkpfSxOdC5wcm90b3R5cGUud3JpdGVJbnQ2ND1OdC5wcm90b3R5cGUuVCxOdC5wcm90b3R5cGUua2E9ZnVuY3Rpb24odCxlKXtudWxsIT1lJiYoZT1EdChlKSxHdCh0aGlzLHQsMCksdGhpcy5hLmwoZS5sbyxlLmhpKSl9LE50LnByb3RvdHlwZS53cml0ZUludDY0U3RyaW5nPU50LnByb3RvdHlwZS5rYSxOdC5wcm90b3R5cGUucz1mdW5jdGlvbih0LGUpe251bGwhPWUmJih2KDA8PWUmJjQyOTQ5NjcyOTY+ZSksSnQodGhpcyx0LGUpKX0sTnQucHJvdG90eXBlLndyaXRlVWludDMyPU50LnByb3RvdHlwZS5zLE50LnByb3RvdHlwZS51Yj1mdW5jdGlvbih0LGUpe251bGwhPWUmJih2KDA8PShlPXBhcnNlSW50KGUsMTApKSYmNDI5NDk2NzI5Nj5lKSxKdCh0aGlzLHQsZSkpfSxOdC5wcm90b3R5cGUud3JpdGVVaW50MzJTdHJpbmc9TnQucHJvdG90eXBlLnViLE50LnByb3RvdHlwZS5WPWZ1bmN0aW9uKHQsZSl7bnVsbCE9ZSYmKHYoMDw9ZSYmMHgxMDAwMDAwMDAwMDAwMDAwMD5lKSxudWxsIT1lJiYoR3QodGhpcyx0LDApLHRoaXMuYS52YShlKSkpfSxOdC5wcm90b3R5cGUud3JpdGVVaW50NjQ9TnQucHJvdG90eXBlLlYsTnQucHJvdG90eXBlLnZiPWZ1bmN0aW9uKHQsZSl7bnVsbCE9ZSYmKGU9THQoZSksR3QodGhpcyx0LDApLHRoaXMuYS5sKGUubG8sZS5oaSkpfSxOdC5wcm90b3R5cGUud3JpdGVVaW50NjRTdHJpbmc9TnQucHJvdG90eXBlLnZiLE50LnByb3RvdHlwZS5yYj1mdW5jdGlvbih0LGUpe251bGwhPWUmJih2KC0yMTQ3NDgzNjQ4PD1lJiYyMTQ3NDgzNjQ4PmUpLG51bGwhPWUmJihHdCh0aGlzLHQsMCksdGhpcy5hLndhKGUpKSl9LE50LnByb3RvdHlwZS53cml0ZVNpbnQzMj1OdC5wcm90b3R5cGUucmIsTnQucHJvdG90eXBlLnNiPWZ1bmN0aW9uKHQsZSl7bnVsbCE9ZSYmKHYoLTB4ODAwMDAwMDAwMDAwMDAwMDw9ZSYmMHg4MDAwMDAwMDAwMDAwMDAwPmUpLG51bGwhPWUmJihHdCh0aGlzLHQsMCksdGhpcy5hLnhhKGUpKSl9LE50LnByb3RvdHlwZS53cml0ZVNpbnQ2ND1OdC5wcm90b3R5cGUuc2IsTnQucHJvdG90eXBlLiRkPWZ1bmN0aW9uKHQsZSl7bnVsbCE9ZSYmbnVsbCE9ZSYmKEd0KHRoaXMsdCwwKSx0aGlzLmEuVyhlKSl9LE50LnByb3RvdHlwZS53cml0ZVNpbnRIYXNoNjQ9TnQucHJvdG90eXBlLiRkLE50LnByb3RvdHlwZS5aZD1mdW5jdGlvbih0LGUpe251bGwhPWUmJm51bGwhPWUmJihHdCh0aGlzLHQsMCksdGhpcy5hLlRhKGUpKX0sTnQucHJvdG90eXBlLndyaXRlU2ludDY0U3RyaW5nPU50LnByb3RvdHlwZS5aZCxOdC5wcm90b3R5cGUuUGE9ZnVuY3Rpb24odCxlKXtudWxsIT1lJiYodigwPD1lJiY0Mjk0OTY3Mjk2PmUpLEd0KHRoaXMsdCw1KSx0aGlzLmEucyhlKSl9LE50LnByb3RvdHlwZS53cml0ZUZpeGVkMzI9TnQucHJvdG90eXBlLlBhLE50LnByb3RvdHlwZS5RYT1mdW5jdGlvbih0LGUpe251bGwhPWUmJih2KDA8PWUmJjB4MTAwMDAwMDAwMDAwMDAwMDA+ZSksR3QodGhpcyx0LDEpLHRoaXMuYS5WKGUpKX0sTnQucHJvdG90eXBlLndyaXRlRml4ZWQ2ND1OdC5wcm90b3R5cGUuUWEsTnQucHJvdG90eXBlLm5iPWZ1bmN0aW9uKHQsZSl7bnVsbCE9ZSYmKGU9THQoZSksR3QodGhpcyx0LDEpLHRoaXMuYS5BKGUubG8sZS5oaSkpfSxOdC5wcm90b3R5cGUud3JpdGVGaXhlZDY0U3RyaW5nPU50LnByb3RvdHlwZS5uYixOdC5wcm90b3R5cGUuUmE9ZnVuY3Rpb24odCxlKXtudWxsIT1lJiYodigtMjE0NzQ4MzY0ODw9ZSYmMjE0NzQ4MzY0OD5lKSxHdCh0aGlzLHQsNSksdGhpcy5hLlMoZSkpfSxOdC5wcm90b3R5cGUud3JpdGVTZml4ZWQzMj1OdC5wcm90b3R5cGUuUmEsTnQucHJvdG90eXBlLlNhPWZ1bmN0aW9uKHQsZSl7bnVsbCE9ZSYmKHYoLTB4ODAwMDAwMDAwMDAwMDAwMDw9ZSYmMHg4MDAwMDAwMDAwMDAwMDAwPmUpLEd0KHRoaXMsdCwxKSx0aGlzLmEuVChlKSl9LE50LnByb3RvdHlwZS53cml0ZVNmaXhlZDY0PU50LnByb3RvdHlwZS5TYSxOdC5wcm90b3R5cGUucWI9ZnVuY3Rpb24odCxlKXtudWxsIT1lJiYoZT1EdChlKSxHdCh0aGlzLHQsMSksdGhpcy5hLkEoZS5sbyxlLmhpKSl9LE50LnByb3RvdHlwZS53cml0ZVNmaXhlZDY0U3RyaW5nPU50LnByb3RvdHlwZS5xYixOdC5wcm90b3R5cGUuTD1mdW5jdGlvbih0LGUpe251bGwhPWUmJihHdCh0aGlzLHQsNSksdGhpcy5hLkwoZSkpfSxOdC5wcm90b3R5cGUud3JpdGVGbG9hdD1OdC5wcm90b3R5cGUuTCxOdC5wcm90b3R5cGUuSj1mdW5jdGlvbih0LGUpe251bGwhPWUmJihHdCh0aGlzLHQsMSksdGhpcy5hLkooZSkpfSxOdC5wcm90b3R5cGUud3JpdGVEb3VibGU9TnQucHJvdG90eXBlLkosTnQucHJvdG90eXBlLkk9ZnVuY3Rpb24odCxlKXtudWxsIT1lJiYodihcImJvb2xlYW5cIj09dHlwZW9mIGV8fFwibnVtYmVyXCI9PXR5cGVvZiBlKSxHdCh0aGlzLHQsMCksdGhpcy5hLkkoZSkpfSxOdC5wcm90b3R5cGUud3JpdGVCb29sPU50LnByb3RvdHlwZS5JLE50LnByb3RvdHlwZS5SPWZ1bmN0aW9uKHQsZSl7bnVsbCE9ZSYmKHYoLTIxNDc0ODM2NDg8PWUmJjIxNDc0ODM2NDg+ZSksR3QodGhpcyx0LDApLHRoaXMuYS5NKGUpKX0sTnQucHJvdG90eXBlLndyaXRlRW51bT1OdC5wcm90b3R5cGUuUixOdC5wcm90b3R5cGUuVT1mdW5jdGlvbih0LGUpe251bGwhPWUmJih0PUh0KHRoaXMsdCksdGhpcy5hLlUoZSksWnQodGhpcyx0KSl9LE50LnByb3RvdHlwZS53cml0ZVN0cmluZz1OdC5wcm90b3R5cGUuVSxOdC5wcm90b3R5cGUuamE9ZnVuY3Rpb24odCxlKXtudWxsIT1lJiYoZT1udChlKSxHdCh0aGlzLHQsMiksdGhpcy5hLmooZS5sZW5ndGgpLHF0KHRoaXMsZSkpfSxOdC5wcm90b3R5cGUud3JpdGVCeXRlcz1OdC5wcm90b3R5cGUuamEsTnQucHJvdG90eXBlLlJjPWZ1bmN0aW9uKHQsZSxvKXtudWxsIT1lJiYodD1IdCh0aGlzLHQpLG8oZSx0aGlzKSxadCh0aGlzLHQpKX0sTnQucHJvdG90eXBlLndyaXRlTWVzc2FnZT1OdC5wcm90b3R5cGUuUmMsTnQucHJvdG90eXBlLlNjPWZ1bmN0aW9uKHQsZSxvKXtudWxsIT1lJiYoR3QodGhpcywxLDMpLEd0KHRoaXMsMiwwKSx0aGlzLmEuTSh0KSx0PUh0KHRoaXMsMyksbyhlLHRoaXMpLFp0KHRoaXMsdCksR3QodGhpcywxLDQpKX0sTnQucHJvdG90eXBlLndyaXRlTWVzc2FnZVNldD1OdC5wcm90b3R5cGUuU2MsTnQucHJvdG90eXBlLk9jPWZ1bmN0aW9uKHQsZSxvKXtudWxsIT1lJiYoR3QodGhpcyx0LDMpLG8oZSx0aGlzKSxHdCh0aGlzLHQsNCkpfSxOdC5wcm90b3R5cGUud3JpdGVHcm91cD1OdC5wcm90b3R5cGUuT2MsTnQucHJvdG90eXBlLks9ZnVuY3Rpb24odCxlKXtudWxsIT1lJiYodig4PT1lLmxlbmd0aCksR3QodGhpcyx0LDEpLHRoaXMuYS5LKGUpKX0sTnQucHJvdG90eXBlLndyaXRlRml4ZWRIYXNoNjQ9TnQucHJvdG90eXBlLkssTnQucHJvdG90eXBlLk49ZnVuY3Rpb24odCxlKXtudWxsIT1lJiYodig4PT1lLmxlbmd0aCksR3QodGhpcyx0LDApLHRoaXMuYS5OKGUpKX0sTnQucHJvdG90eXBlLndyaXRlVmFyaW50SGFzaDY0PU50LnByb3RvdHlwZS5OLE50LnByb3RvdHlwZS5BPWZ1bmN0aW9uKHQsZSxvKXtHdCh0aGlzLHQsMSksdGhpcy5hLkEoZSxvKX0sTnQucHJvdG90eXBlLndyaXRlU3BsaXRGaXhlZDY0PU50LnByb3RvdHlwZS5BLE50LnByb3RvdHlwZS5sPWZ1bmN0aW9uKHQsZSxvKXtHdCh0aGlzLHQsMCksdGhpcy5hLmwoZSxvKX0sTnQucHJvdG90eXBlLndyaXRlU3BsaXRWYXJpbnQ2ND1OdC5wcm90b3R5cGUubCxOdC5wcm90b3R5cGUudGI9ZnVuY3Rpb24odCxlLG8pe0d0KHRoaXMsdCwwKTt2YXIgcj10aGlzLmE7SChlLG8sKGZ1bmN0aW9uKHQsZSl7ci5sKHQ+Pj4wLGU+Pj4wKX0pKX0sTnQucHJvdG90eXBlLndyaXRlU3BsaXRaaWd6YWdWYXJpbnQ2ND1OdC5wcm90b3R5cGUudGIsTnQucHJvdG90eXBlLkVkPWZ1bmN0aW9uKHQsZSl7aWYobnVsbCE9ZSlmb3IodmFyIG89MDtvPGUubGVuZ3RoO28rKykkdCh0aGlzLHQsZVtvXSl9LE50LnByb3RvdHlwZS53cml0ZVJlcGVhdGVkSW50MzI9TnQucHJvdG90eXBlLkVkLE50LnByb3RvdHlwZS5GZD1mdW5jdGlvbih0LGUpe2lmKG51bGwhPWUpZm9yKHZhciBvPTA7bzxlLmxlbmd0aDtvKyspdGhpcy5vYih0LGVbb10pfSxOdC5wcm90b3R5cGUud3JpdGVSZXBlYXRlZEludDMyU3RyaW5nPU50LnByb3RvdHlwZS5GZCxOdC5wcm90b3R5cGUuR2Q9ZnVuY3Rpb24odCxlKXtpZihudWxsIT1lKWZvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXt2YXIgcj1lW29dO251bGwhPXImJihHdCh0aGlzLHQsMCksdGhpcy5hLnVhKHIpKX19LE50LnByb3RvdHlwZS53cml0ZVJlcGVhdGVkSW50NjQ9TnQucHJvdG90eXBlLkdkLE50LnByb3RvdHlwZS5RZD1mdW5jdGlvbih0LGUsbyxyKXtpZihudWxsIT1lKWZvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXRoaXMuQSh0LG8oZVtuXSkscihlW25dKSl9LE50LnByb3RvdHlwZS53cml0ZVJlcGVhdGVkU3BsaXRGaXhlZDY0PU50LnByb3RvdHlwZS5RZCxOdC5wcm90b3R5cGUuUmQ9ZnVuY3Rpb24odCxlLG8scil7aWYobnVsbCE9ZSlmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl0aGlzLmwodCxvKGVbbl0pLHIoZVtuXSkpfSxOdC5wcm90b3R5cGUud3JpdGVSZXBlYXRlZFNwbGl0VmFyaW50NjQ9TnQucHJvdG90eXBlLlJkLE50LnByb3RvdHlwZS5TZD1mdW5jdGlvbih0LGUsbyxyKXtpZihudWxsIT1lKWZvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXRoaXMudGIodCxvKGVbbl0pLHIoZVtuXSkpfSxOdC5wcm90b3R5cGUud3JpdGVSZXBlYXRlZFNwbGl0WmlnemFnVmFyaW50NjQ9TnQucHJvdG90eXBlLlNkLE50LnByb3RvdHlwZS5IZD1mdW5jdGlvbih0LGUpe2lmKG51bGwhPWUpZm9yKHZhciBvPTA7bzxlLmxlbmd0aDtvKyspdGhpcy5rYSh0LGVbb10pfSxOdC5wcm90b3R5cGUud3JpdGVSZXBlYXRlZEludDY0U3RyaW5nPU50LnByb3RvdHlwZS5IZCxOdC5wcm90b3R5cGUuVWQ9ZnVuY3Rpb24odCxlKXtpZihudWxsIT1lKWZvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKUp0KHRoaXMsdCxlW29dKX0sTnQucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRVaW50MzI9TnQucHJvdG90eXBlLlVkLE50LnByb3RvdHlwZS5WZD1mdW5jdGlvbih0LGUpe2lmKG51bGwhPWUpZm9yKHZhciBvPTA7bzxlLmxlbmd0aDtvKyspdGhpcy51Yih0LGVbb10pfSxOdC5wcm90b3R5cGUud3JpdGVSZXBlYXRlZFVpbnQzMlN0cmluZz1OdC5wcm90b3R5cGUuVmQsTnQucHJvdG90eXBlLldkPWZ1bmN0aW9uKHQsZSl7aWYobnVsbCE9ZSlmb3IodmFyIG89MDtvPGUubGVuZ3RoO28rKyl7dmFyIHI9ZVtvXTtudWxsIT1yJiYoR3QodGhpcyx0LDApLHRoaXMuYS52YShyKSl9fSxOdC5wcm90b3R5cGUud3JpdGVSZXBlYXRlZFVpbnQ2ND1OdC5wcm90b3R5cGUuV2QsTnQucHJvdG90eXBlLlhkPWZ1bmN0aW9uKHQsZSl7aWYobnVsbCE9ZSlmb3IodmFyIG89MDtvPGUubGVuZ3RoO28rKyl0aGlzLnZiKHQsZVtvXSl9LE50LnByb3RvdHlwZS53cml0ZVJlcGVhdGVkVWludDY0U3RyaW5nPU50LnByb3RvdHlwZS5YZCxOdC5wcm90b3R5cGUuTWQ9ZnVuY3Rpb24odCxlKXtpZihudWxsIT1lKWZvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXt2YXIgcj1lW29dO251bGwhPXImJihHdCh0aGlzLHQsMCksdGhpcy5hLndhKHIpKX19LE50LnByb3RvdHlwZS53cml0ZVJlcGVhdGVkU2ludDMyPU50LnByb3RvdHlwZS5NZCxOdC5wcm90b3R5cGUuTmQ9ZnVuY3Rpb24odCxlKXtpZihudWxsIT1lKWZvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXt2YXIgcj1lW29dO251bGwhPXImJihHdCh0aGlzLHQsMCksdGhpcy5hLnhhKHIpKX19LE50LnByb3RvdHlwZS53cml0ZVJlcGVhdGVkU2ludDY0PU50LnByb3RvdHlwZS5OZCxOdC5wcm90b3R5cGUuT2Q9ZnVuY3Rpb24odCxlKXtpZihudWxsIT1lKWZvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXt2YXIgcj1lW29dO251bGwhPXImJihHdCh0aGlzLHQsMCksdGhpcy5hLlRhKHIpKX19LE50LnByb3RvdHlwZS53cml0ZVJlcGVhdGVkU2ludDY0U3RyaW5nPU50LnByb3RvdHlwZS5PZCxOdC5wcm90b3R5cGUuUGQ9ZnVuY3Rpb24odCxlKXtpZihudWxsIT1lKWZvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXt2YXIgcj1lW29dO251bGwhPXImJihHdCh0aGlzLHQsMCksdGhpcy5hLlcocikpfX0sTnQucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRTaW50SGFzaDY0PU50LnByb3RvdHlwZS5QZCxOdC5wcm90b3R5cGUueWQ9ZnVuY3Rpb24odCxlKXtpZihudWxsIT1lKWZvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXRoaXMuUGEodCxlW29dKX0sTnQucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRGaXhlZDMyPU50LnByb3RvdHlwZS55ZCxOdC5wcm90b3R5cGUuemQ9ZnVuY3Rpb24odCxlKXtpZihudWxsIT1lKWZvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXRoaXMuUWEodCxlW29dKX0sTnQucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRGaXhlZDY0PU50LnByb3RvdHlwZS56ZCxOdC5wcm90b3R5cGUuQWQ9ZnVuY3Rpb24odCxlKXtpZihudWxsIT1lKWZvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXRoaXMubmIodCxlW29dKX0sTnQucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRGaXhlZDY0U3RyaW5nPU50LnByb3RvdHlwZS5BZCxOdC5wcm90b3R5cGUuSmQ9ZnVuY3Rpb24odCxlKXtpZihudWxsIT1lKWZvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXRoaXMuUmEodCxlW29dKX0sTnQucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRTZml4ZWQzMj1OdC5wcm90b3R5cGUuSmQsTnQucHJvdG90eXBlLktkPWZ1bmN0aW9uKHQsZSl7aWYobnVsbCE9ZSlmb3IodmFyIG89MDtvPGUubGVuZ3RoO28rKyl0aGlzLlNhKHQsZVtvXSl9LE50LnByb3RvdHlwZS53cml0ZVJlcGVhdGVkU2ZpeGVkNjQ9TnQucHJvdG90eXBlLktkLE50LnByb3RvdHlwZS5MZD1mdW5jdGlvbih0LGUpe2lmKG51bGwhPWUpZm9yKHZhciBvPTA7bzxlLmxlbmd0aDtvKyspdGhpcy5xYih0LGVbb10pfSxOdC5wcm90b3R5cGUud3JpdGVSZXBlYXRlZFNmaXhlZDY0U3RyaW5nPU50LnByb3RvdHlwZS5MZCxOdC5wcm90b3R5cGUuQ2Q9ZnVuY3Rpb24odCxlKXtpZihudWxsIT1lKWZvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXRoaXMuTCh0LGVbb10pfSxOdC5wcm90b3R5cGUud3JpdGVSZXBlYXRlZEZsb2F0PU50LnByb3RvdHlwZS5DZCxOdC5wcm90b3R5cGUud2Q9ZnVuY3Rpb24odCxlKXtpZihudWxsIT1lKWZvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXRoaXMuSih0LGVbb10pfSxOdC5wcm90b3R5cGUud3JpdGVSZXBlYXRlZERvdWJsZT1OdC5wcm90b3R5cGUud2QsTnQucHJvdG90eXBlLnVkPWZ1bmN0aW9uKHQsZSl7aWYobnVsbCE9ZSlmb3IodmFyIG89MDtvPGUubGVuZ3RoO28rKyl0aGlzLkkodCxlW29dKX0sTnQucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRCb29sPU50LnByb3RvdHlwZS51ZCxOdC5wcm90b3R5cGUueGQ9ZnVuY3Rpb24odCxlKXtpZihudWxsIT1lKWZvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXRoaXMuUih0LGVbb10pfSxOdC5wcm90b3R5cGUud3JpdGVSZXBlYXRlZEVudW09TnQucHJvdG90eXBlLnhkLE50LnByb3RvdHlwZS5UZD1mdW5jdGlvbih0LGUpe2lmKG51bGwhPWUpZm9yKHZhciBvPTA7bzxlLmxlbmd0aDtvKyspdGhpcy5VKHQsZVtvXSl9LE50LnByb3RvdHlwZS53cml0ZVJlcGVhdGVkU3RyaW5nPU50LnByb3RvdHlwZS5UZCxOdC5wcm90b3R5cGUudmQ9ZnVuY3Rpb24odCxlKXtpZihudWxsIT1lKWZvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXRoaXMuamEodCxlW29dKX0sTnQucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRCeXRlcz1OdC5wcm90b3R5cGUudmQsTnQucHJvdG90eXBlLklkPWZ1bmN0aW9uKHQsZSxvKXtpZihudWxsIT1lKWZvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKXt2YXIgbj1IdCh0aGlzLHQpO28oZVtyXSx0aGlzKSxadCh0aGlzLG4pfX0sTnQucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRNZXNzYWdlPU50LnByb3RvdHlwZS5JZCxOdC5wcm90b3R5cGUuRGQ9ZnVuY3Rpb24odCxlLG8pe2lmKG51bGwhPWUpZm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspR3QodGhpcyx0LDMpLG8oZVtyXSx0aGlzKSxHdCh0aGlzLHQsNCl9LE50LnByb3RvdHlwZS53cml0ZVJlcGVhdGVkR3JvdXA9TnQucHJvdG90eXBlLkRkLE50LnByb3RvdHlwZS5CZD1mdW5jdGlvbih0LGUpe2lmKG51bGwhPWUpZm9yKHZhciBvPTA7bzxlLmxlbmd0aDtvKyspdGhpcy5LKHQsZVtvXSl9LE50LnByb3RvdHlwZS53cml0ZVJlcGVhdGVkRml4ZWRIYXNoNjQ9TnQucHJvdG90eXBlLkJkLE50LnByb3RvdHlwZS5ZZD1mdW5jdGlvbih0LGUpe2lmKG51bGwhPWUpZm9yKHZhciBvPTA7bzxlLmxlbmd0aDtvKyspdGhpcy5OKHQsZVtvXSl9LE50LnByb3RvdHlwZS53cml0ZVJlcGVhdGVkVmFyaW50SGFzaDY0PU50LnByb3RvdHlwZS5ZZCxOdC5wcm90b3R5cGUuYWQ9ZnVuY3Rpb24odCxlKXtpZihudWxsIT1lJiZlLmxlbmd0aCl7dD1IdCh0aGlzLHQpO2Zvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXRoaXMuYS5NKGVbb10pO1p0KHRoaXMsdCl9fSxOdC5wcm90b3R5cGUud3JpdGVQYWNrZWRJbnQzMj1OdC5wcm90b3R5cGUuYWQsTnQucHJvdG90eXBlLmJkPWZ1bmN0aW9uKHQsZSl7aWYobnVsbCE9ZSYmZS5sZW5ndGgpe3Q9SHQodGhpcyx0KTtmb3IodmFyIG89MDtvPGUubGVuZ3RoO28rKyl0aGlzLmEuTShwYXJzZUludChlW29dLDEwKSk7WnQodGhpcyx0KX19LE50LnByb3RvdHlwZS53cml0ZVBhY2tlZEludDMyU3RyaW5nPU50LnByb3RvdHlwZS5iZCxOdC5wcm90b3R5cGUuY2Q9ZnVuY3Rpb24odCxlKXtpZihudWxsIT1lJiZlLmxlbmd0aCl7dD1IdCh0aGlzLHQpO2Zvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXRoaXMuYS51YShlW29dKTtadCh0aGlzLHQpfX0sTnQucHJvdG90eXBlLndyaXRlUGFja2VkSW50NjQ9TnQucHJvdG90eXBlLmNkLE50LnByb3RvdHlwZS5tZD1mdW5jdGlvbih0LGUsbyxyKXtpZihudWxsIT1lKXt0PUh0KHRoaXMsdCk7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspdGhpcy5hLkEobyhlW25dKSxyKGVbbl0pKTtadCh0aGlzLHQpfX0sTnQucHJvdG90eXBlLndyaXRlUGFja2VkU3BsaXRGaXhlZDY0PU50LnByb3RvdHlwZS5tZCxOdC5wcm90b3R5cGUubmQ9ZnVuY3Rpb24odCxlLG8scil7aWYobnVsbCE9ZSl7dD1IdCh0aGlzLHQpO2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXRoaXMuYS5sKG8oZVtuXSkscihlW25dKSk7WnQodGhpcyx0KX19LE50LnByb3RvdHlwZS53cml0ZVBhY2tlZFNwbGl0VmFyaW50NjQ9TnQucHJvdG90eXBlLm5kLE50LnByb3RvdHlwZS5vZD1mdW5jdGlvbih0LGUsbyxyKXtpZihudWxsIT1lKXt0PUh0KHRoaXMsdCk7Zm9yKHZhciBuPXRoaXMuYSxpPTA7aTxlLmxlbmd0aDtpKyspSChvKGVbaV0pLHIoZVtpXSksKGZ1bmN0aW9uKHQsZSl7bi5sKHQ+Pj4wLGU+Pj4wKX0pKTtadCh0aGlzLHQpfX0sTnQucHJvdG90eXBlLndyaXRlUGFja2VkU3BsaXRaaWd6YWdWYXJpbnQ2ND1OdC5wcm90b3R5cGUub2QsTnQucHJvdG90eXBlLmRkPWZ1bmN0aW9uKHQsZSl7aWYobnVsbCE9ZSYmZS5sZW5ndGgpe3Q9SHQodGhpcyx0KTtmb3IodmFyIG89MDtvPGUubGVuZ3RoO28rKyl7dmFyIHI9RHQoZVtvXSk7dGhpcy5hLmwoci5sbyxyLmhpKX1adCh0aGlzLHQpfX0sTnQucHJvdG90eXBlLndyaXRlUGFja2VkSW50NjRTdHJpbmc9TnQucHJvdG90eXBlLmRkLE50LnByb3RvdHlwZS5wZD1mdW5jdGlvbih0LGUpe2lmKG51bGwhPWUmJmUubGVuZ3RoKXt0PUh0KHRoaXMsdCk7Zm9yKHZhciBvPTA7bzxlLmxlbmd0aDtvKyspdGhpcy5hLmooZVtvXSk7WnQodGhpcyx0KX19LE50LnByb3RvdHlwZS53cml0ZVBhY2tlZFVpbnQzMj1OdC5wcm90b3R5cGUucGQsTnQucHJvdG90eXBlLnFkPWZ1bmN0aW9uKHQsZSl7aWYobnVsbCE9ZSYmZS5sZW5ndGgpe3Q9SHQodGhpcyx0KTtmb3IodmFyIG89MDtvPGUubGVuZ3RoO28rKyl0aGlzLmEuaihwYXJzZUludChlW29dLDEwKSk7WnQodGhpcyx0KX19LE50LnByb3RvdHlwZS53cml0ZVBhY2tlZFVpbnQzMlN0cmluZz1OdC5wcm90b3R5cGUucWQsTnQucHJvdG90eXBlLnJkPWZ1bmN0aW9uKHQsZSl7aWYobnVsbCE9ZSYmZS5sZW5ndGgpe3Q9SHQodGhpcyx0KTtmb3IodmFyIG89MDtvPGUubGVuZ3RoO28rKyl0aGlzLmEudmEoZVtvXSk7WnQodGhpcyx0KX19LE50LnByb3RvdHlwZS53cml0ZVBhY2tlZFVpbnQ2ND1OdC5wcm90b3R5cGUucmQsTnQucHJvdG90eXBlLnNkPWZ1bmN0aW9uKHQsZSl7aWYobnVsbCE9ZSYmZS5sZW5ndGgpe3Q9SHQodGhpcyx0KTtmb3IodmFyIG89MDtvPGUubGVuZ3RoO28rKyl7dmFyIHI9THQoZVtvXSk7dGhpcy5hLmwoci5sbyxyLmhpKX1adCh0aGlzLHQpfX0sTnQucHJvdG90eXBlLndyaXRlUGFja2VkVWludDY0U3RyaW5nPU50LnByb3RvdHlwZS5zZCxOdC5wcm90b3R5cGUuaGQ9ZnVuY3Rpb24odCxlKXtpZihudWxsIT1lJiZlLmxlbmd0aCl7dD1IdCh0aGlzLHQpO2Zvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXRoaXMuYS53YShlW29dKTtadCh0aGlzLHQpfX0sTnQucHJvdG90eXBlLndyaXRlUGFja2VkU2ludDMyPU50LnByb3RvdHlwZS5oZCxOdC5wcm90b3R5cGUuamQ9ZnVuY3Rpb24odCxlKXtpZihudWxsIT1lJiZlLmxlbmd0aCl7dD1IdCh0aGlzLHQpO2Zvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXRoaXMuYS54YShlW29dKTtadCh0aGlzLHQpfX0sTnQucHJvdG90eXBlLndyaXRlUGFja2VkU2ludDY0PU50LnByb3RvdHlwZS5qZCxOdC5wcm90b3R5cGUua2Q9ZnVuY3Rpb24odCxlKXtpZihudWxsIT1lJiZlLmxlbmd0aCl7dD1IdCh0aGlzLHQpO2Zvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXRoaXMuYS5XKHR0KGVbb10pKTtadCh0aGlzLHQpfX0sTnQucHJvdG90eXBlLndyaXRlUGFja2VkU2ludDY0U3RyaW5nPU50LnByb3RvdHlwZS5rZCxOdC5wcm90b3R5cGUubGQ9ZnVuY3Rpb24odCxlKXtpZihudWxsIT1lJiZlLmxlbmd0aCl7dD1IdCh0aGlzLHQpO2Zvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXRoaXMuYS5XKGVbb10pO1p0KHRoaXMsdCl9fSxOdC5wcm90b3R5cGUud3JpdGVQYWNrZWRTaW50SGFzaDY0PU50LnByb3RvdHlwZS5sZCxOdC5wcm90b3R5cGUuV2M9ZnVuY3Rpb24odCxlKXtpZihudWxsIT1lJiZlLmxlbmd0aClmb3IoR3QodGhpcyx0LDIpLHRoaXMuYS5qKDQqZS5sZW5ndGgpLHQ9MDt0PGUubGVuZ3RoO3QrKyl0aGlzLmEucyhlW3RdKX0sTnQucHJvdG90eXBlLndyaXRlUGFja2VkRml4ZWQzMj1OdC5wcm90b3R5cGUuV2MsTnQucHJvdG90eXBlLlhjPWZ1bmN0aW9uKHQsZSl7aWYobnVsbCE9ZSYmZS5sZW5ndGgpZm9yKEd0KHRoaXMsdCwyKSx0aGlzLmEuaig4KmUubGVuZ3RoKSx0PTA7dDxlLmxlbmd0aDt0KyspdGhpcy5hLlYoZVt0XSl9LE50LnByb3RvdHlwZS53cml0ZVBhY2tlZEZpeGVkNjQ9TnQucHJvdG90eXBlLlhjLE50LnByb3RvdHlwZS5ZYz1mdW5jdGlvbih0LGUpe2lmKG51bGwhPWUmJmUubGVuZ3RoKWZvcihHdCh0aGlzLHQsMiksdGhpcy5hLmooOCplLmxlbmd0aCksdD0wO3Q8ZS5sZW5ndGg7dCsrKXt2YXIgbz1MdChlW3RdKTt0aGlzLmEuQShvLmxvLG8uaGkpfX0sTnQucHJvdG90eXBlLndyaXRlUGFja2VkRml4ZWQ2NFN0cmluZz1OdC5wcm90b3R5cGUuWWMsTnQucHJvdG90eXBlLmVkPWZ1bmN0aW9uKHQsZSl7aWYobnVsbCE9ZSYmZS5sZW5ndGgpZm9yKEd0KHRoaXMsdCwyKSx0aGlzLmEuaig0KmUubGVuZ3RoKSx0PTA7dDxlLmxlbmd0aDt0KyspdGhpcy5hLlMoZVt0XSl9LE50LnByb3RvdHlwZS53cml0ZVBhY2tlZFNmaXhlZDMyPU50LnByb3RvdHlwZS5lZCxOdC5wcm90b3R5cGUuZmQ9ZnVuY3Rpb24odCxlKXtpZihudWxsIT1lJiZlLmxlbmd0aClmb3IoR3QodGhpcyx0LDIpLHRoaXMuYS5qKDgqZS5sZW5ndGgpLHQ9MDt0PGUubGVuZ3RoO3QrKyl0aGlzLmEuVChlW3RdKX0sTnQucHJvdG90eXBlLndyaXRlUGFja2VkU2ZpeGVkNjQ9TnQucHJvdG90eXBlLmZkLE50LnByb3RvdHlwZS5nZD1mdW5jdGlvbih0LGUpe2lmKG51bGwhPWUmJmUubGVuZ3RoKWZvcihHdCh0aGlzLHQsMiksdGhpcy5hLmooOCplLmxlbmd0aCksdD0wO3Q8ZS5sZW5ndGg7dCsrKXRoaXMuYS5rYShlW3RdKX0sTnQucHJvdG90eXBlLndyaXRlUGFja2VkU2ZpeGVkNjRTdHJpbmc9TnQucHJvdG90eXBlLmdkLE50LnByb3RvdHlwZS4kYz1mdW5jdGlvbih0LGUpe2lmKG51bGwhPWUmJmUubGVuZ3RoKWZvcihHdCh0aGlzLHQsMiksdGhpcy5hLmooNCplLmxlbmd0aCksdD0wO3Q8ZS5sZW5ndGg7dCsrKXRoaXMuYS5MKGVbdF0pfSxOdC5wcm90b3R5cGUud3JpdGVQYWNrZWRGbG9hdD1OdC5wcm90b3R5cGUuJGMsTnQucHJvdG90eXBlLlVjPWZ1bmN0aW9uKHQsZSl7aWYobnVsbCE9ZSYmZS5sZW5ndGgpZm9yKEd0KHRoaXMsdCwyKSx0aGlzLmEuaig4KmUubGVuZ3RoKSx0PTA7dDxlLmxlbmd0aDt0KyspdGhpcy5hLkooZVt0XSl9LE50LnByb3RvdHlwZS53cml0ZVBhY2tlZERvdWJsZT1OdC5wcm90b3R5cGUuVWMsTnQucHJvdG90eXBlLlRjPWZ1bmN0aW9uKHQsZSl7aWYobnVsbCE9ZSYmZS5sZW5ndGgpZm9yKEd0KHRoaXMsdCwyKSx0aGlzLmEuaihlLmxlbmd0aCksdD0wO3Q8ZS5sZW5ndGg7dCsrKXRoaXMuYS5JKGVbdF0pfSxOdC5wcm90b3R5cGUud3JpdGVQYWNrZWRCb29sPU50LnByb3RvdHlwZS5UYyxOdC5wcm90b3R5cGUuVmM9ZnVuY3Rpb24odCxlKXtpZihudWxsIT1lJiZlLmxlbmd0aCl7dD1IdCh0aGlzLHQpO2Zvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXRoaXMuYS5SKGVbb10pO1p0KHRoaXMsdCl9fSxOdC5wcm90b3R5cGUud3JpdGVQYWNrZWRFbnVtPU50LnByb3RvdHlwZS5WYyxOdC5wcm90b3R5cGUuWmM9ZnVuY3Rpb24odCxlKXtpZihudWxsIT1lJiZlLmxlbmd0aClmb3IoR3QodGhpcyx0LDIpLHRoaXMuYS5qKDgqZS5sZW5ndGgpLHQ9MDt0PGUubGVuZ3RoO3QrKyl0aGlzLmEuSyhlW3RdKX0sTnQucHJvdG90eXBlLndyaXRlUGFja2VkRml4ZWRIYXNoNjQ9TnQucHJvdG90eXBlLlpjLE50LnByb3RvdHlwZS50ZD1mdW5jdGlvbih0LGUpe2lmKG51bGwhPWUmJmUubGVuZ3RoKXt0PUh0KHRoaXMsdCk7Zm9yKHZhciBvPTA7bzxlLmxlbmd0aDtvKyspdGhpcy5hLk4oZVtvXSk7WnQodGhpcyx0KX19LE50LnByb3RvdHlwZS53cml0ZVBhY2tlZFZhcmludEhhc2g2ND1OdC5wcm90b3R5cGUudGQsdC5kZWJ1Zz1UdCx0Lk1hcD1qLHQuTWVzc2FnZT15dCx0LkJpbmFyeVJlYWRlcj1zdCx0LkJpbmFyeVdyaXRlcj1OdCx0LkV4dGVuc2lvbkZpZWxkSW5mbz1jdCx0LkV4dGVuc2lvbkZpZWxkQmluYXJ5SW5mbz1mdCx0LmV4cG9ydFN5bWJvbD1mdW5jdGlvbih0LGUsbyl7aCh0LGUsbyl9LHQuaW5oZXJpdHM9ZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBvKCl7fW8ucHJvdG90eXBlPWUucHJvdG90eXBlLHQucHJvdG90eXBlPW5ldyBvLHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPXR9LHQub2JqZWN0PXtleHRlbmQ6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG8scixuPTE7bjxhcmd1bWVudHMubGVuZ3RoO24rKyl7Zm9yKG8gaW4gcj1hcmd1bWVudHNbbl0pdFtvXT1yW29dO2Zvcih2YXIgaT0wO2k8Zi5sZW5ndGg7aSsrKW89ZltpXSxPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocixvKSYmKHRbb109cltvXSl9fX0sdC50eXBlT2Y9bH0oaCksZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQpe3ZhciBlLHIsbixpPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIHIobyl7dmFyIHI9dC5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiBlLnNldChyLFtdKSxoLk1lc3NhZ2UuaW5pdGlhbGl6ZShyLEFycmF5LmlzQXJyYXkobyk/bzpbXSwwLC0xLFtdLGEocixlLFwiZlwiKSksQXJyYXkuaXNBcnJheShvKXx8XCJvYmplY3RcIiE9dHlwZW9mIG98fChcInBhdGhcImluIG8mJm51bGwhPW8ucGF0aCYmKHIucGF0aD1vLnBhdGgpLFwiZGlnZXN0XCJpbiBvJiZudWxsIT1vLmRpZ2VzdCYmKHIuZGlnZXN0PW8uZGlnZXN0KSkscn1yZXR1cm4gbyhyLHQpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLnByb3RvdHlwZSxcInBhdGhcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGguTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSxcIlwiKX0sc2V0OmZ1bmN0aW9uKHQpe2guTWVzc2FnZS5zZXRGaWVsZCh0aGlzLDEsdCl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHIucHJvdG90eXBlLFwiZGlnZXN0XCIse2dldDpmdW5jdGlvbigpe3JldHVybiBoLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsbmV3IFVpbnQ4QXJyYXkoMCkpfSxzZXQ6ZnVuY3Rpb24odCl7aC5NZXNzYWdlLnNldEZpZWxkKHRoaXMsMix0KX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxyLmZyb21PYmplY3Q9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IHIoe30pO3JldHVybiBudWxsIT10LnBhdGgmJihlLnBhdGg9dC5wYXRoKSxudWxsIT10LmRpZ2VzdCYmKGUuZGlnZXN0PXQuZGlnZXN0KSxlfSxyLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbigpe3ZhciB0PXt9O3JldHVybiBudWxsIT10aGlzLnBhdGgmJih0LnBhdGg9dGhpcy5wYXRoKSxudWxsIT10aGlzLmRpZ2VzdCYmKHQuZGlnZXN0PXRoaXMuZGlnZXN0KSx0fSxyLnByb3RvdHlwZS5zZXJpYWxpemU9ZnVuY3Rpb24odCl7dmFyIGU9dHx8bmV3IGguQmluYXJ5V3JpdGVyO2lmKHRoaXMucGF0aC5sZW5ndGgmJmUud3JpdGVTdHJpbmcoMSx0aGlzLnBhdGgpLHRoaXMuZGlnZXN0Lmxlbmd0aCYmZS53cml0ZUJ5dGVzKDIsdGhpcy5kaWdlc3QpLCF0KXJldHVybiBlLmdldFJlc3VsdEJ1ZmZlcigpfSxyLmRlc2VyaWFsaXplPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10IGluc3RhbmNlb2YgaC5CaW5hcnlSZWFkZXI/dDpuZXcgaC5CaW5hcnlSZWFkZXIodCksbz1uZXcgcjtlLm5leHRGaWVsZCgpJiYhZS5pc0VuZEdyb3VwKCk7KXN3aXRjaChlLmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTpvLnBhdGg9ZS5yZWFkU3RyaW5nKCk7YnJlYWs7Y2FzZSAyOm8uZGlnZXN0PWUucmVhZEJ5dGVzKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBGaWVsZCgpfXJldHVybiBvfSxyLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZXJpYWxpemUoKX0sci5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbih0KXtyZXR1cm4gci5kZXNlcmlhbGl6ZSh0KX0scn0oaC5NZXNzYWdlKTtlPW5ldyBXZWFrTWFwLHQuSW5wdXQ9aTt2YXIgcD1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKGUpe3ZhciBvPXQuY2FsbCh0aGlzKXx8dGhpcztyZXR1cm4gci5zZXQobyxbXSksaC5NZXNzYWdlLmluaXRpYWxpemUobyxBcnJheS5pc0FycmF5KGUpP2U6W10sMCwtMSxbMSwyXSxhKG8scixcImZcIikpLEFycmF5LmlzQXJyYXkoZSl8fFwib2JqZWN0XCIhPXR5cGVvZiBlfHwoXCJhcmd1bWVudHNcImluIGUmJm51bGwhPWUuYXJndW1lbnRzJiYoby5hcmd1bWVudHM9ZS5hcmd1bWVudHMpLFwiaW5wdXRzXCJpbiBlJiZudWxsIT1lLmlucHV0cyYmKG8uaW5wdXRzPWUuaW5wdXRzKSxcInJlcXVlc3RfaWRcImluIGUmJm51bGwhPWUucmVxdWVzdF9pZCYmKG8ucmVxdWVzdF9pZD1lLnJlcXVlc3RfaWQpLFwiY2FuY2VsXCJpbiBlJiZudWxsIT1lLmNhbmNlbCYmKG8uY2FuY2VsPWUuY2FuY2VsKSxcInZlcmJvc2l0eVwiaW4gZSYmbnVsbCE9ZS52ZXJib3NpdHkmJihvLnZlcmJvc2l0eT1lLnZlcmJvc2l0eSksXCJzYW5kYm94X2RpclwiaW4gZSYmbnVsbCE9ZS5zYW5kYm94X2RpciYmKG8uc2FuZGJveF9kaXI9ZS5zYW5kYm94X2RpcikpLG99cmV0dXJuIG8oZSx0KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJhcmd1bWVudHNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGguTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSxbXSl9LHNldDpmdW5jdGlvbih0KXtoLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywxLHQpfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImlucHV0c1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaC5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsaSwyKX0sc2V0OmZ1bmN0aW9uKHQpe2guTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDIsdCl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwicmVxdWVzdF9pZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaC5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywzLDApfSxzZXQ6ZnVuY3Rpb24odCl7aC5NZXNzYWdlLnNldEZpZWxkKHRoaXMsMyx0KX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJjYW5jZWxcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGguTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCwhMSl9LHNldDpmdW5jdGlvbih0KXtoLk1lc3NhZ2Uuc2V0RmllbGQodGhpcyw0LHQpfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInZlcmJvc2l0eVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaC5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw1LDApfSxzZXQ6ZnVuY3Rpb24odCl7aC5NZXNzYWdlLnNldEZpZWxkKHRoaXMsNSx0KX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJzYW5kYm94X2RpclwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaC5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw2LFwiXCIpfSxzZXQ6ZnVuY3Rpb24odCl7aC5NZXNzYWdlLnNldEZpZWxkKHRoaXMsNix0KX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxlLmZyb21PYmplY3Q9ZnVuY3Rpb24odCl7dmFyIG89bmV3IGUoe30pO3JldHVybiBudWxsIT10LmFyZ3VtZW50cyYmKG8uYXJndW1lbnRzPXQuYXJndW1lbnRzKSxudWxsIT10LmlucHV0cyYmKG8uaW5wdXRzPXQuaW5wdXRzLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIGkuZnJvbU9iamVjdCh0KX0pKSksbnVsbCE9dC5yZXF1ZXN0X2lkJiYoby5yZXF1ZXN0X2lkPXQucmVxdWVzdF9pZCksbnVsbCE9dC5jYW5jZWwmJihvLmNhbmNlbD10LmNhbmNlbCksbnVsbCE9dC52ZXJib3NpdHkmJihvLnZlcmJvc2l0eT10LnZlcmJvc2l0eSksbnVsbCE9dC5zYW5kYm94X2RpciYmKG8uc2FuZGJveF9kaXI9dC5zYW5kYm94X2Rpciksb30sZS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oKXt2YXIgdD17fTtyZXR1cm4gbnVsbCE9dGhpcy5hcmd1bWVudHMmJih0LmFyZ3VtZW50cz10aGlzLmFyZ3VtZW50cyksbnVsbCE9dGhpcy5pbnB1dHMmJih0LmlucHV0cz10aGlzLmlucHV0cy5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnRvT2JqZWN0KCl9KSkpLG51bGwhPXRoaXMucmVxdWVzdF9pZCYmKHQucmVxdWVzdF9pZD10aGlzLnJlcXVlc3RfaWQpLG51bGwhPXRoaXMuY2FuY2VsJiYodC5jYW5jZWw9dGhpcy5jYW5jZWwpLG51bGwhPXRoaXMudmVyYm9zaXR5JiYodC52ZXJib3NpdHk9dGhpcy52ZXJib3NpdHkpLG51bGwhPXRoaXMuc2FuZGJveF9kaXImJih0LnNhbmRib3hfZGlyPXRoaXMuc2FuZGJveF9kaXIpLHR9LGUucHJvdG90eXBlLnNlcmlhbGl6ZT1mdW5jdGlvbih0KXt2YXIgZT10fHxuZXcgaC5CaW5hcnlXcml0ZXI7aWYodGhpcy5hcmd1bWVudHMubGVuZ3RoJiZlLndyaXRlUmVwZWF0ZWRTdHJpbmcoMSx0aGlzLmFyZ3VtZW50cyksdGhpcy5pbnB1dHMubGVuZ3RoJiZlLndyaXRlUmVwZWF0ZWRNZXNzYWdlKDIsdGhpcy5pbnB1dHMsKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNlcmlhbGl6ZShlKX0pKSwwIT10aGlzLnJlcXVlc3RfaWQmJmUud3JpdGVJbnQzMigzLHRoaXMucmVxdWVzdF9pZCksMCE9dGhpcy5jYW5jZWwmJmUud3JpdGVCb29sKDQsdGhpcy5jYW5jZWwpLDAhPXRoaXMudmVyYm9zaXR5JiZlLndyaXRlSW50MzIoNSx0aGlzLnZlcmJvc2l0eSksdGhpcy5zYW5kYm94X2Rpci5sZW5ndGgmJmUud3JpdGVTdHJpbmcoNix0aGlzLnNhbmRib3hfZGlyKSwhdClyZXR1cm4gZS5nZXRSZXN1bHRCdWZmZXIoKX0sZS5kZXNlcmlhbGl6ZT1mdW5jdGlvbih0KXtmb3IodmFyIG89dCBpbnN0YW5jZW9mIGguQmluYXJ5UmVhZGVyP3Q6bmV3IGguQmluYXJ5UmVhZGVyKHQpLHI9bmV3IGU7by5uZXh0RmllbGQoKSYmIW8uaXNFbmRHcm91cCgpOylzd2l0Y2goby5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6aC5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRGaWVsZChyLDEsby5yZWFkU3RyaW5nKCkpO2JyZWFrO2Nhc2UgMjpvLnJlYWRNZXNzYWdlKHIuaW5wdXRzLChmdW5jdGlvbigpe3JldHVybiBoLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZChyLDIsaS5kZXNlcmlhbGl6ZShvKSxpKX0pKTticmVhaztjYXNlIDM6ci5yZXF1ZXN0X2lkPW8ucmVhZEludDMyKCk7YnJlYWs7Y2FzZSA0OnIuY2FuY2VsPW8ucmVhZEJvb2woKTticmVhaztjYXNlIDU6ci52ZXJib3NpdHk9by5yZWFkSW50MzIoKTticmVhaztjYXNlIDY6ci5zYW5kYm94X2Rpcj1vLnJlYWRTdHJpbmcoKTticmVhaztkZWZhdWx0Om8uc2tpcEZpZWxkKCl9cmV0dXJuIHJ9LGUucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnNlcmlhbGl6ZSgpfSxlLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKHQpe3JldHVybiBlLmRlc2VyaWFsaXplKHQpfSxlfShoLk1lc3NhZ2UpO3I9bmV3IFdlYWtNYXAsdC5Xb3JrUmVxdWVzdD1wO3ZhciBzPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoZSl7dmFyIG89dC5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiBuLnNldChvLFtdKSxoLk1lc3NhZ2UuaW5pdGlhbGl6ZShvLEFycmF5LmlzQXJyYXkoZSk/ZTpbXSwwLC0xLFtdLGEobyxuLFwiZlwiKSksQXJyYXkuaXNBcnJheShlKXx8XCJvYmplY3RcIiE9dHlwZW9mIGV8fChcImV4aXRfY29kZVwiaW4gZSYmbnVsbCE9ZS5leGl0X2NvZGUmJihvLmV4aXRfY29kZT1lLmV4aXRfY29kZSksXCJvdXRwdXRcImluIGUmJm51bGwhPWUub3V0cHV0JiYoby5vdXRwdXQ9ZS5vdXRwdXQpLFwicmVxdWVzdF9pZFwiaW4gZSYmbnVsbCE9ZS5yZXF1ZXN0X2lkJiYoby5yZXF1ZXN0X2lkPWUucmVxdWVzdF9pZCksXCJ3YXNfY2FuY2VsbGVkXCJpbiBlJiZudWxsIT1lLndhc19jYW5jZWxsZWQmJihvLndhc19jYW5jZWxsZWQ9ZS53YXNfY2FuY2VsbGVkKSksb31yZXR1cm4gbyhlLHQpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImV4aXRfY29kZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaC5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApfSxzZXQ6ZnVuY3Rpb24odCl7aC5NZXNzYWdlLnNldEZpZWxkKHRoaXMsMSx0KX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJvdXRwdXRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGguTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMixcIlwiKX0sc2V0OmZ1bmN0aW9uKHQpe2guTWVzc2FnZS5zZXRGaWVsZCh0aGlzLDIsdCl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwicmVxdWVzdF9pZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaC5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywzLDApfSxzZXQ6ZnVuY3Rpb24odCl7aC5NZXNzYWdlLnNldEZpZWxkKHRoaXMsMyx0KX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJ3YXNfY2FuY2VsbGVkXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBoLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsITEpfSxzZXQ6ZnVuY3Rpb24odCl7aC5NZXNzYWdlLnNldEZpZWxkKHRoaXMsNCx0KX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxlLmZyb21PYmplY3Q9ZnVuY3Rpb24odCl7dmFyIG89bmV3IGUoe30pO3JldHVybiBudWxsIT10LmV4aXRfY29kZSYmKG8uZXhpdF9jb2RlPXQuZXhpdF9jb2RlKSxudWxsIT10Lm91dHB1dCYmKG8ub3V0cHV0PXQub3V0cHV0KSxudWxsIT10LnJlcXVlc3RfaWQmJihvLnJlcXVlc3RfaWQ9dC5yZXF1ZXN0X2lkKSxudWxsIT10Lndhc19jYW5jZWxsZWQmJihvLndhc19jYW5jZWxsZWQ9dC53YXNfY2FuY2VsbGVkKSxvfSxlLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbigpe3ZhciB0PXt9O3JldHVybiBudWxsIT10aGlzLmV4aXRfY29kZSYmKHQuZXhpdF9jb2RlPXRoaXMuZXhpdF9jb2RlKSxudWxsIT10aGlzLm91dHB1dCYmKHQub3V0cHV0PXRoaXMub3V0cHV0KSxudWxsIT10aGlzLnJlcXVlc3RfaWQmJih0LnJlcXVlc3RfaWQ9dGhpcy5yZXF1ZXN0X2lkKSxudWxsIT10aGlzLndhc19jYW5jZWxsZWQmJih0Lndhc19jYW5jZWxsZWQ9dGhpcy53YXNfY2FuY2VsbGVkKSx0fSxlLnByb3RvdHlwZS5zZXJpYWxpemU9ZnVuY3Rpb24odCl7dmFyIGU9dHx8bmV3IGguQmluYXJ5V3JpdGVyO2lmKDAhPXRoaXMuZXhpdF9jb2RlJiZlLndyaXRlSW50MzIoMSx0aGlzLmV4aXRfY29kZSksdGhpcy5vdXRwdXQubGVuZ3RoJiZlLndyaXRlU3RyaW5nKDIsdGhpcy5vdXRwdXQpLDAhPXRoaXMucmVxdWVzdF9pZCYmZS53cml0ZUludDMyKDMsdGhpcy5yZXF1ZXN0X2lkKSwwIT10aGlzLndhc19jYW5jZWxsZWQmJmUud3JpdGVCb29sKDQsdGhpcy53YXNfY2FuY2VsbGVkKSwhdClyZXR1cm4gZS5nZXRSZXN1bHRCdWZmZXIoKX0sZS5kZXNlcmlhbGl6ZT1mdW5jdGlvbih0KXtmb3IodmFyIG89dCBpbnN0YW5jZW9mIGguQmluYXJ5UmVhZGVyP3Q6bmV3IGguQmluYXJ5UmVhZGVyKHQpLHI9bmV3IGU7by5uZXh0RmllbGQoKSYmIW8uaXNFbmRHcm91cCgpOylzd2l0Y2goby5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6ci5leGl0X2NvZGU9by5yZWFkSW50MzIoKTticmVhaztjYXNlIDI6ci5vdXRwdXQ9by5yZWFkU3RyaW5nKCk7YnJlYWs7Y2FzZSAzOnIucmVxdWVzdF9pZD1vLnJlYWRJbnQzMigpO2JyZWFrO2Nhc2UgNDpyLndhc19jYW5jZWxsZWQ9by5yZWFkQm9vbCgpO2JyZWFrO2RlZmF1bHQ6by5za2lwRmllbGQoKX1yZXR1cm4gcn0sZS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2VyaWFsaXplKCl9LGUuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24odCl7cmV0dXJuIGUuZGVzZXJpYWxpemUodCl9LGV9KGguTWVzc2FnZSk7bj1uZXcgV2Vha01hcCx0LldvcmtSZXNwb25zZT1zfSh0Lndvcmtlcnx8KHQud29ya2VyPXt9KSl9KHV8fCh1PXt9KSksZXhwb3J0cy5lbnRlcldvcmtlckxvb3A9ZnVuY3Rpb24oZSl7dmFyIG8saSxhLHMsaDtyZXR1cm4gcih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIHIsbCxjLGYseSxkLGI7cmV0dXJuIG4odGhpcywoZnVuY3Rpb24obil7c3dpdGNoKG4ubGFiZWwpe2Nhc2UgMDpyPW5ldyBNYXAsbD1CdWZmZXIuYWxsb2MoMCksbi5sYWJlbD0xO2Nhc2UgMTpuLnRyeXMucHVzaChbMSw2LDcsMTJdKSxjPWZ1bmN0aW9uKCl7cz1kLnZhbHVlLGY9ITE7dHJ5e3ZhciBvPXMsbj1CdWZmZXIuY29uY2F0KFtsLG9dKSxpPXZvaWQgMCxwPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZSxvPTAscj0wLG49MDtuPDUmJihvfD0oMTI3JihlPXRbcisrXSkpPDw3Km4sMTI4JmUpO24rKyk7cmV0dXJue3NpemU6byxoZWFkZXJTaXplOnJ9fShuKTtpZighKHAuc2l6ZTw9bi5sZW5ndGgrcC5oZWFkZXJTaXplKSlyZXR1cm4gbD1uLFwiY29udGludWVcIjtpPShuPW4uc2xpY2UocC5oZWFkZXJTaXplKSkuc2xpY2UoMCxwLnNpemUpLGw9bi5zbGljZShwLnNpemUpO3ZhciBhPXUud29ya2VyLldvcmtSZXF1ZXN0LmRlc2VyaWFsaXplKGkpO2lmKGEuY2FuY2VsKXJldHVybiBudWxsPT09KGg9ci5nZXQoYS5yZXF1ZXN0X2lkKSl8fHZvaWQgMD09PWh8fGguYWJvcnQoKSxcImNvbnRpbnVlXCI7dmFyIGM9bmV3IEFib3J0Q29udHJvbGxlcjtyLnNldChhLnJlcXVlc3RfaWQsYyk7dmFyIHk9bmV3IHUud29ya2VyLldvcmtSZXNwb25zZSh7cmVxdWVzdF9pZDphLnJlcXVlc3RfaWR9KSxiPW5ldyBBcnJheSxnPW5ldyB0LldyaXRhYmxlKHt3cml0ZTpmdW5jdGlvbih0LGUsbyl7Yi5wdXNoKEJ1ZmZlci5mcm9tKHQsZSkpLG51bGw9PW98fG8odm9pZCAwKX0sZGVmYXVsdEVuY29kaW5nOlwidXRmLThcIn0pO2Uoe2FyZ3VtZW50czphLmFyZ3VtZW50cyxpbnB1dHM6YS5pbnB1dHMscmVxdWVzdF9pZDphLnJlcXVlc3RfaWQsdmVyYm9zaXR5OmEudmVyYm9zaXR5LHNhbmRib3hfZGlyOmEuc2FuZGJveF9kaXIsc2lnbmFsOmMuc2lnbmFsLG91dHB1dDpnfSkudGhlbigoZnVuY3Rpb24odCl7eS5leGl0X2NvZGU9dH0pKS5jYXRjaCgoZnVuY3Rpb24odCl7dmFyIGU7eS5leGl0X2NvZGU9MSxlPVN0cmluZyhcIm9iamVjdFwiPT10eXBlb2YgdCYmXCJzdGFja1wiaW4gdD90LnN0YWNrOnQpLGcud3JpdGUoZSksYS52ZXJib3NpdHk+MCYmY29uc29sZS5lcnJvcihlKX0pKS5maW5hbGx5KChmdW5jdGlvbigpe3IuZGVsZXRlKGEucmVxdWVzdF9pZCksZy5lbmQoKSx5Lndhc19jYW5jZWxsZWQ9Yy5zaWduYWwuYWJvcnRlZCx5Lm91dHB1dD1CdWZmZXIuY29uY2F0KGIpLnRvU3RyaW5nKFwidXRmLThcIik7dmFyIHQ9eS5zZXJpYWxpemUoKSxlPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1CdWZmZXIuYWxsb2MoMTApLG89MDt0PjEyNzspZVtvXT0xMjcmdHwxMjgsdD4+Pj03LG8rKztyZXR1cm4gZVtvXT10LGUuc2xpY2UoMCxvKzEpfSh0LmJ5dGVMZW5ndGgpO3Byb2Nlc3Muc3Rkb3V0LndyaXRlKEJ1ZmZlci5jb25jYXQoW2UsdF0pKX0pKX1maW5hbGx5e2Y9ITB9fSxmPSEwLHk9cChwcm9jZXNzLnN0ZGluKSxuLmxhYmVsPTI7Y2FzZSAyOnJldHVybls0LHkubmV4dCgpXTtjYXNlIDM6aWYoZD1uLnNlbnQoKSxvPWQuZG9uZSlyZXR1cm5bMyw1XTtjKCksbi5sYWJlbD00O2Nhc2UgNDpyZXR1cm5bMywyXTtjYXNlIDU6cmV0dXJuWzMsMTJdO2Nhc2UgNjpyZXR1cm4gYj1uLnNlbnQoKSxpPXtlcnJvcjpifSxbMywxMl07Y2FzZSA3OnJldHVybiBuLnRyeXMucHVzaChbNywsMTAsMTFdKSxmfHxvfHwhKGE9eS5yZXR1cm4pP1szLDldOls0LGEuY2FsbCh5KV07Y2FzZSA4Om4uc2VudCgpLG4ubGFiZWw9OTtjYXNlIDk6cmV0dXJuWzMsMTFdO2Nhc2UgMTA6aWYoaSl0aHJvdyBpLmVycm9yO3JldHVybls3XTtjYXNlIDExOnJldHVybls3XTtjYXNlIDEyOnJldHVyblsyXX19KSl9KSl9LGV4cG9ydHMuaXNQZXJzaXN0ZW50V29ya2VyPWZ1bmN0aW9uKHQpe3JldHVybi0xIT09dC5pbmRleE9mKFwiLS1wZXJzaXN0ZW50X3dvcmtlclwiKX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVluVnVaR3hsTG1weklpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZMbUZ6Y0dWamRGOXlkV3hsYzE5cWN5OUFjbTlzYkhWd0szQnNkV2RwYmkxMGVYQmxjMk55YVhCMFFERXdMakF1TVY4MU56UXhPVFF4TnpNdmJtOWtaVjl0YjJSMWJHVnpMM1J6YkdsaUwzUnpiR2xpTG1Wek5pNXFjeUlzSWk0dUx5NHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTh1WVhOd1pXTjBYM0oxYkdWelgycHpMMkZpYjNKMFkyOXVkSEp2Ykd4bGNpMXdiMng1Wm1sc2JFQXhMamN1TlM5dWIyUmxYMjF2WkhWc1pYTXZZV0p2Y25SamIyNTBjbTlzYkdWeUxYQnZiSGxtYVd4c0wyUnBjM1F2WVdKdmNuUmpiMjUwY205c2JHVnlMWEJ2YkhsbWFXeHNMVzl1YkhrdWFuTWlMQ0ozYjNKclpYSmZjSEp2ZEc5amIyd3VkSE1pTENJdUxpOHVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12TG1GemNHVmpkRjl5ZFd4bGMxOXFjeTluYjI5bmJHVXRjSEp2ZEc5aWRXWkFNeTR5TVM0MEwyNXZaR1ZmYlc5a2RXeGxjeTluYjI5bmJHVXRjSEp2ZEc5aWRXWXZaMjl2WjJ4bExYQnliM1J2WW5WbUxtcHpJaXdpYVc1a1pYZ3VkSE1pTENKemFYcGxMblJ6SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2NseHVRMjl3ZVhKcFoyaDBJQ2hqS1NCTmFXTnliM052Wm5RZ1EyOXljRzl5WVhScGIyNHVYSEpjYmx4eVhHNVFaWEp0YVhOemFXOXVJSFJ2SUhWelpTd2dZMjl3ZVN3Z2JXOWthV1o1TENCaGJtUXZiM0lnWkdsemRISnBZblYwWlNCMGFHbHpJSE52Wm5SM1lYSmxJR1p2Y2lCaGJubGNjbHh1Y0hWeWNHOXpaU0IzYVhSb0lHOXlJSGRwZEdodmRYUWdabVZsSUdseklHaGxjbVZpZVNCbmNtRnVkR1ZrTGx4eVhHNWNjbHh1VkVoRklGTlBSbFJYUVZKRklFbFRJRkJTVDFaSlJFVkVJRndpUVZNZ1NWTmNJaUJCVGtRZ1ZFaEZJRUZWVkVoUFVpQkVTVk5EVEVGSlRWTWdRVXhNSUZkQlVsSkJUbFJKUlZNZ1YwbFVTRnh5WEc1U1JVZEJVa1FnVkU4Z1ZFaEpVeUJUVDBaVVYwRlNSU0JKVGtOTVZVUkpUa2NnUVV4TUlFbE5VRXhKUlVRZ1YwRlNVa0ZPVkVsRlV5QlBSaUJOUlZKRFNFRk9WRUZDU1V4SlZGbGNjbHh1UVU1RUlFWkpWRTVGVTFNdUlFbE9JRTVQSUVWV1JVNVVJRk5JUVV4TUlGUklSU0JCVlZSSVQxSWdRa1VnVEVsQlFreEZJRVpQVWlCQlRsa2dVMUJGUTBsQlRDd2dSRWxTUlVOVUxGeHlYRzVKVGtSSlVrVkRWQ3dnVDFJZ1EwOU9VMFZSVlVWT1ZFbEJUQ0JFUVUxQlIwVlRJRTlTSUVGT1dTQkVRVTFCUjBWVElGZElRVlJUVDBWV1JWSWdVa1ZUVlV4VVNVNUhJRVpTVDAxY2NseHVURTlUVXlCUFJpQlZVMFVzSUVSQlZFRWdUMUlnVUZKUFJrbFVVeXdnVjBoRlZFaEZVaUJKVGlCQlRpQkJRMVJKVDA0Z1QwWWdRMDlPVkZKQlExUXNJRTVGUjB4SlIwVk9RMFVnVDFKY2NseHVUMVJJUlZJZ1ZFOVNWRWxQVlZNZ1FVTlVTVTlPTENCQlVrbFRTVTVISUU5VlZDQlBSaUJQVWlCSlRpQkRUMDVPUlVOVVNVOU9JRmRKVkVnZ1ZFaEZJRlZUUlNCUFVseHlYRzVRUlZKR1QxSk5RVTVEUlNCUFJpQlVTRWxUSUZOUFJsUlhRVkpGTGx4eVhHNHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lBcUwxeHlYRzR2S2lCbmJHOWlZV3dnVW1WbWJHVmpkQ3dnVUhKdmJXbHpaU3dnVTNWd2NISmxjM05sWkVWeWNtOXlMQ0JUZVcxaWIyd3NJRWwwWlhKaGRHOXlJQ292WEhKY2JseHlYRzUyWVhJZ1pYaDBaVzVrVTNSaGRHbGpjeUE5SUdaMWJtTjBhVzl1S0dRc0lHSXBJSHRjY2x4dUlDQWdJR1Y0ZEdWdVpGTjBZWFJwWTNNZ1BTQlBZbXBsWTNRdWMyVjBVSEp2ZEc5MGVYQmxUMllnZkh4Y2NseHVJQ0FnSUNBZ0lDQW9leUJmWDNCeWIzUnZYMTg2SUZ0ZElIMGdhVzV6ZEdGdVkyVnZaaUJCY25KaGVTQW1KaUJtZFc1amRHbHZiaUFvWkN3Z1lpa2dleUJrTGw5ZmNISnZkRzlmWHlBOUlHSTdJSDBwSUh4OFhISmNiaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdLR1FzSUdJcElIc2dabTl5SUNoMllYSWdjQ0JwYmlCaUtTQnBaaUFvVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0dJc0lIQXBLU0JrVzNCZElEMGdZbHR3WFRzZ2ZUdGNjbHh1SUNBZ0lISmxkSFZ5YmlCbGVIUmxibVJUZEdGMGFXTnpLR1FzSUdJcE8xeHlYRzU5TzF4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmWlhoMFpXNWtjeWhrTENCaUtTQjdYSEpjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR0lnSVQwOUlGd2lablZ1WTNScGIyNWNJaUFtSmlCaUlDRTlQU0J1ZFd4c0tWeHlYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKRGJHRnpjeUJsZUhSbGJtUnpJSFpoYkhWbElGd2lJQ3NnVTNSeWFXNW5LR0lwSUNzZ1hDSWdhWE1nYm05MElHRWdZMjl1YzNSeWRXTjBiM0lnYjNJZ2JuVnNiRndpS1R0Y2NseHVJQ0FnSUdWNGRHVnVaRk4wWVhScFkzTW9aQ3dnWWlrN1hISmNiaUFnSUNCbWRXNWpkR2x2YmlCZlh5Z3BJSHNnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaUE5SUdRN0lIMWNjbHh1SUNBZ0lHUXVjSEp2ZEc5MGVYQmxJRDBnWWlBOVBUMGdiblZzYkNBL0lFOWlhbVZqZEM1amNtVmhkR1VvWWlrZ09pQW9YMTh1Y0hKdmRHOTBlWEJsSUQwZ1lpNXdjbTkwYjNSNWNHVXNJRzVsZHlCZlh5Z3BLVHRjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUhaaGNpQmZYMkZ6YzJsbmJpQTlJR1oxYm1OMGFXOXVLQ2tnZTF4eVhHNGdJQ0FnWDE5aGMzTnBaMjRnUFNCUFltcGxZM1F1WVhOemFXZHVJSHg4SUdaMWJtTjBhVzl1SUY5ZllYTnphV2R1S0hRcElIdGNjbHh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJ6TENCcElEMGdNU3dnYmlBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnN0lHa2dQQ0J1T3lCcEt5c3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjeUE5SUdGeVozVnRaVzUwYzF0cFhUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2NDQnBiaUJ6S1NCcFppQW9UMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVM1allXeHNLSE1zSUhBcEtTQjBXM0JkSUQwZ2MxdHdYVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUTdYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnlaWFIxY200Z1gxOWhjM05wWjI0dVlYQndiSGtvZEdocGN5d2dZWEpuZFcxbGJuUnpLVHRjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZmNtVnpkQ2h6TENCbEtTQjdYSEpjYmlBZ0lDQjJZWElnZENBOUlIdDlPMXh5WEc0Z0lDQWdabTl5SUNoMllYSWdjQ0JwYmlCektTQnBaaUFvVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0hNc0lIQXBJQ1ltSUdVdWFXNWtaWGhQWmlod0tTQThJREFwWEhKY2JpQWdJQ0FnSUNBZ2RGdHdYU0E5SUhOYmNGMDdYSEpjYmlBZ0lDQnBaaUFvY3lBaFBTQnVkV3hzSUNZbUlIUjVjR1Z2WmlCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbFRlVzFpYjJ4eklEMDlQU0JjSW1aMWJtTjBhVzl1WENJcFhISmNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBc0lIQWdQU0JQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsVGVXMWliMnh6S0hNcE95QnBJRHdnY0M1c1pXNW5kR2c3SUdrckt5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWlM1cGJtUmxlRTltS0hCYmFWMHBJRHdnTUNBbUppQlBZbXBsWTNRdWNISnZkRzkwZVhCbExuQnliM0JsY25SNVNYTkZiblZ0WlhKaFlteGxMbU5oYkd3b2N5d2djRnRwWFNrcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBXM0JiYVYxZElEMGdjMXR3VzJsZFhUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0J5WlhSMWNtNGdkRHRjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZlpHVmpiM0poZEdVb1pHVmpiM0poZEc5eWN5d2dkR0Z5WjJWMExDQnJaWGtzSUdSbGMyTXBJSHRjY2x4dUlDQWdJSFpoY2lCaklEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFDd2djaUE5SUdNZ1BDQXpJRDhnZEdGeVoyVjBJRG9nWkdWell5QTlQVDBnYm5Wc2JDQS9JR1JsYzJNZ1BTQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5S0hSaGNtZGxkQ3dnYTJWNUtTQTZJR1JsYzJNc0lHUTdYSEpjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JRkpsWm14bFkzUWdQVDA5SUZ3aWIySnFaV04wWENJZ0ppWWdkSGx3Wlc5bUlGSmxabXhsWTNRdVpHVmpiM0poZEdVZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlrZ2NpQTlJRkpsWm14bFkzUXVaR1ZqYjNKaGRHVW9aR1ZqYjNKaGRHOXljeXdnZEdGeVoyVjBMQ0JyWlhrc0lHUmxjMk1wTzF4eVhHNGdJQ0FnWld4elpTQm1iM0lnS0haaGNpQnBJRDBnWkdWamIzSmhkRzl5Y3k1c1pXNW5kR2dnTFNBeE95QnBJRDQ5SURBN0lHa3RMU2tnYVdZZ0tHUWdQU0JrWldOdmNtRjBiM0p6VzJsZEtTQnlJRDBnS0dNZ1BDQXpJRDhnWkNoeUtTQTZJR01nUGlBeklEOGdaQ2gwWVhKblpYUXNJR3RsZVN3Z2Npa2dPaUJrS0hSaGNtZGxkQ3dnYTJWNUtTa2dmSHdnY2p0Y2NseHVJQ0FnSUhKbGRIVnliaUJqSUQ0Z015QW1KaUJ5SUNZbUlFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2gwWVhKblpYUXNJR3RsZVN3Z2Npa3NJSEk3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgzQmhjbUZ0S0hCaGNtRnRTVzVrWlhnc0lHUmxZMjl5WVhSdmNpa2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlDaDBZWEpuWlhRc0lHdGxlU2tnZXlCa1pXTnZjbUYwYjNJb2RHRnlaMlYwTENCclpYa3NJSEJoY21GdFNXNWtaWGdwT3lCOVhISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYMlZ6UkdWamIzSmhkR1VvWTNSdmNpd2daR1Z6WTNKcGNIUnZja2x1TENCa1pXTnZjbUYwYjNKekxDQmpiMjUwWlhoMFNXNHNJR2x1YVhScFlXeHBlbVZ5Y3l3Z1pYaDBjbUZKYm1sMGFXRnNhWHBsY25NcElIdGNjbHh1SUNBZ0lHWjFibU4wYVc5dUlHRmpZMlZ3ZENobUtTQjdJR2xtSUNobUlDRTlQU0IyYjJsa0lEQWdKaVlnZEhsd1pXOW1JR1lnSVQwOUlGd2lablZ1WTNScGIyNWNJaWtnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lrWjFibU4wYVc5dUlHVjRjR1ZqZEdWa1hDSXBPeUJ5WlhSMWNtNGdaanNnZlZ4eVhHNGdJQ0FnZG1GeUlHdHBibVFnUFNCamIyNTBaWGgwU1c0dWEybHVaQ3dnYTJWNUlEMGdhMmx1WkNBOVBUMGdYQ0puWlhSMFpYSmNJaUEvSUZ3aVoyVjBYQ0lnT2lCcmFXNWtJRDA5UFNCY0luTmxkSFJsY2x3aUlEOGdYQ0p6WlhSY0lpQTZJRndpZG1Gc2RXVmNJanRjY2x4dUlDQWdJSFpoY2lCMFlYSm5aWFFnUFNBaFpHVnpZM0pwY0hSdmNrbHVJQ1ltSUdOMGIzSWdQeUJqYjI1MFpYaDBTVzViWENKemRHRjBhV05jSWwwZ1B5QmpkRzl5SURvZ1kzUnZjaTV3Y205MGIzUjVjR1VnT2lCdWRXeHNPMXh5WEc0Z0lDQWdkbUZ5SUdSbGMyTnlhWEIwYjNJZ1BTQmtaWE5qY21sd2RHOXlTVzRnZkh3Z0tIUmhjbWRsZENBL0lFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lvZEdGeVoyVjBMQ0JqYjI1MFpYaDBTVzR1Ym1GdFpTa2dPaUI3ZlNrN1hISmNiaUFnSUNCMllYSWdYeXdnWkc5dVpTQTlJR1poYkhObE8xeHlYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJR1JsWTI5eVlYUnZjbk11YkdWdVozUm9JQzBnTVRzZ2FTQStQU0F3T3lCcExTMHBJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdZMjl1ZEdWNGRDQTlJSHQ5TzF4eVhHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlIQWdhVzRnWTI5dWRHVjRkRWx1S1NCamIyNTBaWGgwVzNCZElEMGdjQ0E5UFQwZ1hDSmhZMk5sYzNOY0lpQS9JSHQ5SURvZ1kyOXVkR1Y0ZEVsdVczQmRPMXh5WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUhBZ2FXNGdZMjl1ZEdWNGRFbHVMbUZqWTJWemN5a2dZMjl1ZEdWNGRDNWhZMk5sYzNOYmNGMGdQU0JqYjI1MFpYaDBTVzR1WVdOalpYTnpXM0JkTzF4eVhHNGdJQ0FnSUNBZ0lHTnZiblJsZUhRdVlXUmtTVzVwZEdsaGJHbDZaWElnUFNCbWRXNWpkR2x2YmlBb1ppa2dleUJwWmlBb1pHOXVaU2tnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lrTmhibTV2ZENCaFpHUWdhVzVwZEdsaGJHbDZaWEp6SUdGbWRHVnlJR1JsWTI5eVlYUnBiMjRnYUdGeklHTnZiWEJzWlhSbFpGd2lLVHNnWlhoMGNtRkpibWwwYVdGc2FYcGxjbk11Y0hWemFDaGhZMk5sY0hRb1ppQjhmQ0J1ZFd4c0tTazdJSDA3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSEpsYzNWc2RDQTlJQ2d3TENCa1pXTnZjbUYwYjNKelcybGRLU2hyYVc1a0lEMDlQU0JjSW1GalkyVnpjMjl5WENJZ1B5QjdJR2RsZERvZ1pHVnpZM0pwY0hSdmNpNW5aWFFzSUhObGREb2daR1Z6WTNKcGNIUnZjaTV6WlhRZ2ZTQTZJR1JsYzJOeWFYQjBiM0piYTJWNVhTd2dZMjl1ZEdWNGRDazdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHdHBibVFnUFQwOUlGd2lZV05qWlhOemIzSmNJaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtVnpkV3gwSUQwOVBTQjJiMmxrSURBcElHTnZiblJwYm5WbE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbVZ6ZFd4MElEMDlQU0J1ZFd4c0lIeDhJSFI1Y0dWdlppQnlaWE4xYkhRZ0lUMDlJRndpYjJKcVpXTjBYQ0lwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSlBZbXBsWTNRZ1pYaHdaV04wWldSY0lpazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hmSUQwZ1lXTmpaWEIwS0hKbGMzVnNkQzVuWlhRcEtTQmtaWE5qY21sd2RHOXlMbWRsZENBOUlGODdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hmSUQwZ1lXTmpaWEIwS0hKbGMzVnNkQzV6WlhRcEtTQmtaWE5qY21sd2RHOXlMbk5sZENBOUlGODdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hmSUQwZ1lXTmpaWEIwS0hKbGMzVnNkQzVwYm1sMEtTa2dhVzVwZEdsaGJHbDZaWEp6TG5WdWMyaHBablFvWHlrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0Y4Z1BTQmhZMk5sY0hRb2NtVnpkV3gwS1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hMmx1WkNBOVBUMGdYQ0ptYVdWc1pGd2lLU0JwYm1sMGFXRnNhWHBsY25NdWRXNXphR2xtZENoZktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JrWlhOamNtbHdkRzl5VzJ0bGVWMGdQU0JmTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lHbG1JQ2gwWVhKblpYUXBJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoMFlYSm5aWFFzSUdOdmJuUmxlSFJKYmk1dVlXMWxMQ0JrWlhOamNtbHdkRzl5S1R0Y2NseHVJQ0FnSUdSdmJtVWdQU0IwY25WbE8xeHlYRzU5TzF4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmY25WdVNXNXBkR2xoYkdsNlpYSnpLSFJvYVhOQmNtY3NJR2x1YVhScFlXeHBlbVZ5Y3l3Z2RtRnNkV1VwSUh0Y2NseHVJQ0FnSUhaaGNpQjFjMlZXWVd4MVpTQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQaUF5TzF4eVhHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCcGJtbDBhV0ZzYVhwbGNuTXViR1Z1WjNSb095QnBLeXNwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZV3gxWlNBOUlIVnpaVlpoYkhWbElEOGdhVzVwZEdsaGJHbDZaWEp6VzJsZExtTmhiR3dvZEdocGMwRnlaeXdnZG1Gc2RXVXBJRG9nYVc1cGRHbGhiR2w2WlhKelcybGRMbU5oYkd3b2RHaHBjMEZ5WnlrN1hISmNiaUFnSUNCOVhISmNiaUFnSUNCeVpYUjFjbTRnZFhObFZtRnNkV1VnUHlCMllXeDFaU0E2SUhadmFXUWdNRHRjY2x4dWZUdGNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgzQnliM0JMWlhrb2VDa2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlIUjVjR1Z2WmlCNElEMDlQU0JjSW5ONWJXSnZiRndpSUQ4Z2VDQTZJRndpWENJdVkyOXVZMkYwS0hncE8xeHlYRzU5TzF4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmYzJWMFJuVnVZM1JwYjI1T1lXMWxLR1lzSUc1aGJXVXNJSEJ5WldacGVDa2dlMXh5WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJ1WVcxbElEMDlQU0JjSW5ONWJXSnZiRndpS1NCdVlXMWxJRDBnYm1GdFpTNWtaWE5qY21sd2RHbHZiaUEvSUZ3aVcxd2lMbU52Ym1OaGRDaHVZVzFsTG1SbGMyTnlhWEIwYVc5dUxDQmNJbDFjSWlrZ09pQmNJbHdpTzF4eVhHNGdJQ0FnY21WMGRYSnVJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobUxDQmNJbTVoYldWY0lpd2dleUJqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzSUhaaGJIVmxPaUJ3Y21WbWFYZ2dQeUJjSWx3aUxtTnZibU5oZENod2NtVm1hWGdzSUZ3aUlGd2lMQ0J1WVcxbEtTQTZJRzVoYldVZ2ZTazdYSEpjYm4wN1hISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5dFpYUmhaR0YwWVNodFpYUmhaR0YwWVV0bGVTd2diV1YwWVdSaGRHRldZV3gxWlNrZ2UxeHlYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQlNaV1pzWldOMElEMDlQU0JjSW05aWFtVmpkRndpSUNZbUlIUjVjR1Z2WmlCU1pXWnNaV04wTG0xbGRHRmtZWFJoSUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0lwSUhKbGRIVnliaUJTWldac1pXTjBMbTFsZEdGa1lYUmhLRzFsZEdGa1lYUmhTMlY1TENCdFpYUmhaR0YwWVZaaGJIVmxLVHRjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZllYZGhhWFJsY2loMGFHbHpRWEpuTENCZllYSm5kVzFsYm5SekxDQlFMQ0JuWlc1bGNtRjBiM0lwSUh0Y2NseHVJQ0FnSUdaMWJtTjBhVzl1SUdGa2IzQjBLSFpoYkhWbEtTQjdJSEpsZEhWeWJpQjJZV3gxWlNCcGJuTjBZVzVqWlc5bUlGQWdQeUIyWVd4MVpTQTZJRzVsZHlCUUtHWjFibU4wYVc5dUlDaHlaWE52YkhabEtTQjdJSEpsYzI5c2RtVW9kbUZzZFdVcE95QjlLVHNnZlZ4eVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlBb1VDQjhmQ0FvVUNBOUlGQnliMjFwYzJVcEtTaG1kVzVqZEdsdmJpQW9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYSEpjYmlBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnWm5Wc1ptbHNiR1ZrS0haaGJIVmxLU0I3SUhSeWVTQjdJSE4wWlhBb1oyVnVaWEpoZEc5eUxtNWxlSFFvZG1Gc2RXVXBLVHNnZlNCallYUmphQ0FvWlNrZ2V5QnlaV3BsWTNRb1pTazdJSDBnZlZ4eVhHNGdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlISmxhbVZqZEdWa0tIWmhiSFZsS1NCN0lIUnllU0I3SUhOMFpYQW9aMlZ1WlhKaGRHOXlXMXdpZEdoeWIzZGNJbDBvZG1Gc2RXVXBLVHNnZlNCallYUmphQ0FvWlNrZ2V5QnlaV3BsWTNRb1pTazdJSDBnZlZ4eVhHNGdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlITjBaWEFvY21WemRXeDBLU0I3SUhKbGMzVnNkQzVrYjI1bElEOGdjbVZ6YjJ4MlpTaHlaWE4xYkhRdWRtRnNkV1VwSURvZ1lXUnZjSFFvY21WemRXeDBMblpoYkhWbEtTNTBhR1Z1S0daMWJHWnBiR3hsWkN3Z2NtVnFaV04wWldRcE95QjlYSEpjYmlBZ0lDQWdJQ0FnYzNSbGNDZ29aMlZ1WlhKaGRHOXlJRDBnWjJWdVpYSmhkRzl5TG1Gd2NHeDVLSFJvYVhOQmNtY3NJRjloY21kMWJXVnVkSE1nZkh3Z1cxMHBLUzV1WlhoMEtDa3BPMXh5WEc0Z0lDQWdmU2s3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgyZGxibVZ5WVhSdmNpaDBhR2x6UVhKbkxDQmliMlI1S1NCN1hISmNiaUFnSUNCMllYSWdYeUE5SUhzZ2JHRmlaV3c2SURBc0lITmxiblE2SUdaMWJtTjBhVzl1S0NrZ2V5QnBaaUFvZEZzd1hTQW1JREVwSUhSb2NtOTNJSFJiTVYwN0lISmxkSFZ5YmlCMFd6RmRPeUI5TENCMGNubHpPaUJiWFN3Z2IzQnpPaUJiWFNCOUxDQm1MQ0I1TENCMExDQm5JRDBnVDJKcVpXTjBMbU55WldGMFpTZ29kSGx3Wlc5bUlFbDBaWEpoZEc5eUlEMDlQU0JjSW1aMWJtTjBhVzl1WENJZ1B5QkpkR1Z5WVhSdmNpQTZJRTlpYW1WamRDa3VjSEp2ZEc5MGVYQmxLVHRjY2x4dUlDQWdJSEpsZEhWeWJpQm5MbTVsZUhRZ1BTQjJaWEppS0RBcExDQm5XMXdpZEdoeWIzZGNJbDBnUFNCMlpYSmlLREVwTENCblcxd2ljbVYwZFhKdVhDSmRJRDBnZG1WeVlpZ3lLU3dnZEhsd1pXOW1JRk41YldKdmJDQTlQVDBnWENKbWRXNWpkR2x2Ymx3aUlDWW1JQ2huVzFONWJXSnZiQzVwZEdWeVlYUnZjbDBnUFNCbWRXNWpkR2x2YmlncElIc2djbVYwZFhKdUlIUm9hWE03SUgwcExDQm5PMXh5WEc0Z0lDQWdablZ1WTNScGIyNGdkbVZ5WWlodUtTQjdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9kaWtnZXlCeVpYUjFjbTRnYzNSbGNDaGJiaXdnZGwwcE95QjlPeUI5WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJ6ZEdWd0tHOXdLU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR1lwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSkhaVzVsY21GMGIzSWdhWE1nWVd4eVpXRmtlU0JsZUdWamRYUnBibWN1WENJcE8xeHlYRzRnSUNBZ0lDQWdJSGRvYVd4bElDaG5JQ1ltSUNobklEMGdNQ3dnYjNCYk1GMGdKaVlnS0Y4Z1BTQXdLU2tzSUY4cElIUnllU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobUlEMGdNU3dnZVNBbUppQW9kQ0E5SUc5d1d6QmRJQ1lnTWlBL0lIbGJYQ0p5WlhSMWNtNWNJbDBnT2lCdmNGc3dYU0EvSUhsYlhDSjBhSEp2ZDF3aVhTQjhmQ0FvS0hRZ1BTQjVXMXdpY21WMGRYSnVYQ0pkS1NBbUppQjBMbU5oYkd3b2VTa3NJREFwSURvZ2VTNXVaWGgwS1NBbUppQWhLSFFnUFNCMExtTmhiR3dvZVN3Z2IzQmJNVjBwS1M1a2IyNWxLU0J5WlhSMWNtNGdkRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hrZ1BTQXdMQ0IwS1NCdmNDQTlJRnR2Y0Zzd1hTQW1JRElzSUhRdWRtRnNkV1ZkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLRzl3V3pCZEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElEQTZJR05oYzJVZ01Ub2dkQ0E5SUc5d095QmljbVZoYXp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTkRvZ1h5NXNZV0psYkNzck95QnlaWFIxY200Z2V5QjJZV3gxWlRvZ2IzQmJNVjBzSUdSdmJtVTZJR1poYkhObElIMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElEVTZJRjh1YkdGaVpXd3JLenNnZVNBOUlHOXdXekZkT3lCdmNDQTlJRnN3WFRzZ1kyOXVkR2x1ZFdVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSURjNklHOXdJRDBnWHk1dmNITXVjRzl3S0NrN0lGOHVkSEo1Y3k1d2IzQW9LVHNnWTI5dWRHbHVkV1U3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2x4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaEtIUWdQU0JmTG5SeWVYTXNJSFFnUFNCMExteGxibWQwYUNBK0lEQWdKaVlnZEZ0MExteGxibWQwYUNBdElERmRLU0FtSmlBb2IzQmJNRjBnUFQwOUlEWWdmSHdnYjNCYk1GMGdQVDA5SURJcEtTQjdJRjhnUFNBd095QmpiMjUwYVc1MVpUc2dmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h2Y0Zzd1hTQTlQVDBnTXlBbUppQW9JWFFnZkh3Z0tHOXdXekZkSUQ0Z2RGc3dYU0FtSmlCdmNGc3hYU0E4SUhSYk0xMHBLU2tnZXlCZkxteGhZbVZzSUQwZ2IzQmJNVjA3SUdKeVpXRnJPeUI5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c5d1d6QmRJRDA5UFNBMklDWW1JRjh1YkdGaVpXd2dQQ0IwV3pGZEtTQjdJRjh1YkdGaVpXd2dQU0IwV3pGZE95QjBJRDBnYjNBN0lHSnlaV0ZyT3lCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUWdKaVlnWHk1c1lXSmxiQ0E4SUhSYk1sMHBJSHNnWHk1c1lXSmxiQ0E5SUhSYk1sMDdJRjh1YjNCekxuQjFjMmdvYjNBcE95QmljbVZoYXpzZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBXekpkS1NCZkxtOXdjeTV3YjNBb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZkxuUnllWE11Y0c5d0tDazdJR052Ym5ScGJuVmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXdJRDBnWW05a2VTNWpZV3hzS0hSb2FYTkJjbWNzSUY4cE8xeHlYRzRnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1VwSUhzZ2IzQWdQU0JiTml3Z1pWMDdJSGtnUFNBd095QjlJR1pwYm1Gc2JIa2dleUJtSUQwZ2RDQTlJREE3SUgxY2NseHVJQ0FnSUNBZ0lDQnBaaUFvYjNCYk1GMGdKaUExS1NCMGFISnZkeUJ2Y0ZzeFhUc2djbVYwZFhKdUlIc2dkbUZzZFdVNklHOXdXekJkSUQ4Z2IzQmJNVjBnT2lCMmIybGtJREFzSUdSdmJtVTZJSFJ5ZFdVZ2ZUdGNjbHh1SUNBZ0lIMWNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJSFpoY2lCZlgyTnlaV0YwWlVKcGJtUnBibWNnUFNCUFltcGxZM1F1WTNKbFlYUmxJRDhnS0daMWJtTjBhVzl1S0c4c0lHMHNJR3NzSUdzeUtTQjdYSEpjYmlBZ0lDQnBaaUFvYXpJZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnYXpJZ1BTQnJPMXh5WEc0Z0lDQWdkbUZ5SUdSbGMyTWdQU0JQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUtHMHNJR3NwTzF4eVhHNGdJQ0FnYVdZZ0tDRmtaWE5qSUh4OElDaGNJbWRsZEZ3aUlHbHVJR1JsYzJNZ1B5QWhiUzVmWDJWelRXOWtkV3hsSURvZ1pHVnpZeTUzY21sMFlXSnNaU0I4ZkNCa1pYTmpMbU52Ym1acFozVnlZV0pzWlNrcElIdGNjbHh1SUNBZ0lDQWdJQ0JrWlhOaklEMGdleUJsYm5WdFpYSmhZbXhsT2lCMGNuVmxMQ0JuWlhRNklHWjFibU4wYVc5dUtDa2dleUJ5WlhSMWNtNGdiVnRyWFRzZ2ZTQjlPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0c4c0lHc3lMQ0JrWlhOaktUdGNjbHh1ZlNrZ09pQW9ablZ1WTNScGIyNG9ieXdnYlN3Z2F5d2dheklwSUh0Y2NseHVJQ0FnSUdsbUlDaHJNaUE5UFQwZ2RXNWtaV1pwYm1Wa0tTQnJNaUE5SUdzN1hISmNiaUFnSUNCdlcyc3lYU0E5SUcxYmExMDdYSEpjYm4wcE8xeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZlpYaHdiM0owVTNSaGNpaHRMQ0J2S1NCN1hISmNiaUFnSUNCbWIzSWdLSFpoY2lCd0lHbHVJRzBwSUdsbUlDaHdJQ0U5UFNCY0ltUmxabUYxYkhSY0lpQW1KaUFoVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0c4c0lIQXBLU0JmWDJOeVpXRjBaVUpwYm1ScGJtY29ieXdnYlN3Z2NDazdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDNaaGJIVmxjeWh2S1NCN1hISmNiaUFnSUNCMllYSWdjeUE5SUhSNWNHVnZaaUJUZVcxaWIyd2dQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQW1KaUJUZVcxaWIyd3VhWFJsY21GMGIzSXNJRzBnUFNCeklDWW1JRzliYzEwc0lHa2dQU0F3TzF4eVhHNGdJQ0FnYVdZZ0tHMHBJSEpsZEhWeWJpQnRMbU5oYkd3b2J5azdYSEpjYmlBZ0lDQnBaaUFvYnlBbUppQjBlWEJsYjJZZ2J5NXNaVzVuZEdnZ1BUMDlJRndpYm5WdFltVnlYQ0lwSUhKbGRIVnliaUI3WEhKY2JpQWdJQ0FnSUNBZ2JtVjRkRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ieUFtSmlCcElENDlJRzh1YkdWdVozUm9LU0J2SUQwZ2RtOXBaQ0F3TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdleUIyWVd4MVpUb2dieUFtSmlCdlcya3JLMTBzSUdSdmJtVTZJQ0Z2SUgwN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVHRjY2x4dUlDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvY3lBL0lGd2lUMkpxWldOMElHbHpJRzV2ZENCcGRHVnlZV0pzWlM1Y0lpQTZJRndpVTNsdFltOXNMbWwwWlhKaGRHOXlJR2x6SUc1dmRDQmtaV1pwYm1Wa0xsd2lLVHRjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZmNtVmhaQ2h2TENCdUtTQjdYSEpjYmlBZ0lDQjJZWElnYlNBOUlIUjVjR1Z2WmlCVGVXMWliMndnUFQwOUlGd2lablZ1WTNScGIyNWNJaUFtSmlCdlcxTjViV0p2YkM1cGRHVnlZWFJ2Y2wwN1hISmNiaUFnSUNCcFppQW9JVzBwSUhKbGRIVnliaUJ2TzF4eVhHNGdJQ0FnZG1GeUlHa2dQU0J0TG1OaGJHd29ieWtzSUhJc0lHRnlJRDBnVzEwc0lHVTdYSEpjYmlBZ0lDQjBjbmtnZTF4eVhHNGdJQ0FnSUNBZ0lIZG9hV3hsSUNnb2JpQTlQVDBnZG05cFpDQXdJSHg4SUc0dExTQStJREFwSUNZbUlDRW9jaUE5SUdrdWJtVjRkQ2dwS1M1a2IyNWxLU0JoY2k1d2RYTm9LSEl1ZG1Gc2RXVXBPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdZMkYwWTJnZ0tHVnljbTl5S1NCN0lHVWdQU0I3SUdWeWNtOXlPaUJsY25KdmNpQjlPeUI5WEhKY2JpQWdJQ0JtYVc1aGJHeDVJSHRjY2x4dUlDQWdJQ0FnSUNCMGNua2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBbUppQWhjaTVrYjI1bElDWW1JQ2h0SUQwZ2FWdGNJbkpsZEhWeWJsd2lYU2twSUcwdVkyRnNiQ2hwS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnWm1sdVlXeHNlU0I3SUdsbUlDaGxLU0IwYUhKdmR5QmxMbVZ5Y205eU95QjlYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnlaWFIxY200Z1lYSTdYSEpjYm4xY2NseHVYSEpjYmk4cUtpQkFaR1Z3Y21WallYUmxaQ0FxTDF4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOXpjSEpsWVdRb0tTQjdYSEpjYmlBZ0lDQm1iM0lnS0haaGNpQmhjaUE5SUZ0ZExDQnBJRDBnTURzZ2FTQThJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZzdJR2tyS3lsY2NseHVJQ0FnSUNBZ0lDQmhjaUE5SUdGeUxtTnZibU5oZENoZlgzSmxZV1FvWVhKbmRXMWxiblJ6VzJsZEtTazdYSEpjYmlBZ0lDQnlaWFIxY200Z1lYSTdYSEpjYm4xY2NseHVYSEpjYmk4cUtpQkFaR1Z3Y21WallYUmxaQ0FxTDF4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOXpjSEpsWVdSQmNuSmhlWE1vS1NCN1hISmNiaUFnSUNCbWIzSWdLSFpoY2lCeklEMGdNQ3dnYVNBOUlEQXNJR2xzSUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYURzZ2FTQThJR2xzT3lCcEt5c3BJSE1nS3owZ1lYSm5kVzFsYm5SelcybGRMbXhsYm1kMGFEdGNjbHh1SUNBZ0lHWnZjaUFvZG1GeUlISWdQU0JCY25KaGVTaHpLU3dnYXlBOUlEQXNJR2tnUFNBd095QnBJRHdnYVd3N0lHa3JLeWxjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCaElEMGdZWEpuZFcxbGJuUnpXMmxkTENCcUlEMGdNQ3dnYW13Z1BTQmhMbXhsYm1kMGFEc2dhaUE4SUdwc095QnFLeXNzSUdzckt5bGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NsdHJYU0E5SUdGYmFsMDdYSEpjYmlBZ0lDQnlaWFIxY200Z2NqdGNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmYzNCeVpXRmtRWEp5WVhrb2RHOHNJR1p5YjIwc0lIQmhZMnNwSUh0Y2NseHVJQ0FnSUdsbUlDaHdZV05ySUh4OElHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BUMDlJRElwSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JzSUQwZ1puSnZiUzVzWlc1bmRHZ3NJR0Z5T3lCcElEd2diRHNnYVNzcktTQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHRnlJSHg4SUNFb2FTQnBiaUJtY205dEtTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdGeUtTQmhjaUE5SUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzV6YkdsalpTNWpZV3hzS0daeWIyMHNJREFzSUdrcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaGNsdHBYU0E5SUdaeWIyMWJhVjA3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2NtVjBkWEp1SUhSdkxtTnZibU5oZENoaGNpQjhmQ0JCY25KaGVTNXdjbTkwYjNSNWNHVXVjMnhwWTJVdVkyRnNiQ2htY205dEtTazdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDJGM1lXbDBLSFlwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdseklHbHVjM1JoYm1ObGIyWWdYMTloZDJGcGRDQS9JQ2gwYUdsekxuWWdQU0IyTENCMGFHbHpLU0E2SUc1bGR5QmZYMkYzWVdsMEtIWXBPMXh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5aGMzbHVZMGRsYm1WeVlYUnZjaWgwYUdselFYSm5MQ0JmWVhKbmRXMWxiblJ6TENCblpXNWxjbUYwYjNJcElIdGNjbHh1SUNBZ0lHbG1JQ2doVTNsdFltOXNMbUZ6ZVc1alNYUmxjbUYwYjNJcElIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pUZVcxaWIyd3VZWE41Ym1OSmRHVnlZWFJ2Y2lCcGN5QnViM1FnWkdWbWFXNWxaQzVjSWlrN1hISmNiaUFnSUNCMllYSWdaeUE5SUdkbGJtVnlZWFJ2Y2k1aGNIQnNlU2gwYUdselFYSm5MQ0JmWVhKbmRXMWxiblJ6SUh4OElGdGRLU3dnYVN3Z2NTQTlJRnRkTzF4eVhHNGdJQ0FnY21WMGRYSnVJR2tnUFNCUFltcGxZM1F1WTNKbFlYUmxLQ2gwZVhCbGIyWWdRWE41Ym1OSmRHVnlZWFJ2Y2lBOVBUMGdYQ0ptZFc1amRHbHZibHdpSUQ4Z1FYTjVibU5KZEdWeVlYUnZjaUE2SUU5aWFtVmpkQ2t1Y0hKdmRHOTBlWEJsS1N3Z2RtVnlZaWhjSW01bGVIUmNJaWtzSUhabGNtSW9YQ0owYUhKdmQxd2lLU3dnZG1WeVlpaGNJbkpsZEhWeWJsd2lMQ0JoZDJGcGRGSmxkSFZ5Ymlrc0lHbGJVM2x0WW05c0xtRnplVzVqU1hSbGNtRjBiM0pkSUQwZ1puVnVZM1JwYjI0Z0tDa2dleUJ5WlhSMWNtNGdkR2hwY3pzZ2ZTd2dhVHRjY2x4dUlDQWdJR1oxYm1OMGFXOXVJR0YzWVdsMFVtVjBkWEp1S0dZcElIc2djbVYwZFhKdUlHWjFibU4wYVc5dUlDaDJLU0I3SUhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9kaWt1ZEdobGJpaG1MQ0J5WldwbFkzUXBPeUI5T3lCOVhISmNiaUFnSUNCbWRXNWpkR2x2YmlCMlpYSmlLRzRzSUdZcElIc2dhV1lnS0dkYmJsMHBJSHNnYVZ0dVhTQTlJR1oxYm1OMGFXOXVJQ2gyS1NCN0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpQW9ZU3dnWWlrZ2V5QnhMbkIxYzJnb1cyNHNJSFlzSUdFc0lHSmRLU0ErSURFZ2ZId2djbVZ6ZFcxbEtHNHNJSFlwT3lCOUtUc2dmVHNnYVdZZ0tHWXBJR2xiYmwwZ1BTQm1LR2xiYmwwcE95QjlJSDFjY2x4dUlDQWdJR1oxYm1OMGFXOXVJSEpsYzNWdFpTaHVMQ0IyS1NCN0lIUnllU0I3SUhOMFpYQW9aMXR1WFNoMktTazdJSDBnWTJGMFkyZ2dLR1VwSUhzZ2MyVjBkR3hsS0hGYk1GMWJNMTBzSUdVcE95QjlJSDFjY2x4dUlDQWdJR1oxYm1OMGFXOXVJSE4wWlhBb2Npa2dleUJ5TG5aaGJIVmxJR2x1YzNSaGJtTmxiMllnWDE5aGQyRnBkQ0EvSUZCeWIyMXBjMlV1Y21WemIyeDJaU2h5TG5aaGJIVmxMbllwTG5Sb1pXNG9ablZzWm1sc2JDd2djbVZxWldOMEtTQTZJSE5sZEhSc1pTaHhXekJkV3pKZExDQnlLVHNnZlZ4eVhHNGdJQ0FnWm5WdVkzUnBiMjRnWm5Wc1ptbHNiQ2gyWVd4MVpTa2dleUJ5WlhOMWJXVW9YQ0p1WlhoMFhDSXNJSFpoYkhWbEtUc2dmVnh5WEc0Z0lDQWdablZ1WTNScGIyNGdjbVZxWldOMEtIWmhiSFZsS1NCN0lISmxjM1Z0WlNoY0luUm9jbTkzWENJc0lIWmhiSFZsS1RzZ2ZWeHlYRzRnSUNBZ1puVnVZM1JwYjI0Z2MyVjBkR3hsS0dZc0lIWXBJSHNnYVdZZ0tHWW9kaWtzSUhFdWMyaHBablFvS1N3Z2NTNXNaVzVuZEdncElISmxjM1Z0WlNoeFd6QmRXekJkTENCeFd6QmRXekZkS1RzZ2ZWeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdYMTloYzNsdVkwUmxiR1ZuWVhSdmNpaHZLU0I3WEhKY2JpQWdJQ0IyWVhJZ2FTd2djRHRjY2x4dUlDQWdJSEpsZEhWeWJpQnBJRDBnZTMwc0lIWmxjbUlvWENKdVpYaDBYQ0lwTENCMlpYSmlLRndpZEdoeWIzZGNJaXdnWm5WdVkzUnBiMjRnS0dVcElIc2dkR2h5YjNjZ1pUc2dmU2tzSUhabGNtSW9YQ0p5WlhSMWNtNWNJaWtzSUdsYlUzbHRZbTlzTG1sMFpYSmhkRzl5WFNBOUlHWjFibU4wYVc5dUlDZ3BJSHNnY21WMGRYSnVJSFJvYVhNN0lIMHNJR2s3WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUIyWlhKaUtHNHNJR1lwSUhzZ2FWdHVYU0E5SUc5YmJsMGdQeUJtZFc1amRHbHZiaUFvZGlrZ2V5QnlaWFIxY200Z0tIQWdQU0FoY0NrZ1B5QjdJSFpoYkhWbE9pQmZYMkYzWVdsMEtHOWJibDBvZGlrcExDQmtiMjVsT2lCbVlXeHpaU0I5SURvZ1ppQS9JR1lvZGlrZ09pQjJPeUI5SURvZ1pqc2dmVnh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5aGMzbHVZMVpoYkhWbGN5aHZLU0I3WEhKY2JpQWdJQ0JwWmlBb0lWTjViV0p2YkM1aGMzbHVZMGwwWlhKaGRHOXlLU0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0Z3aVUzbHRZbTlzTG1GemVXNWpTWFJsY21GMGIzSWdhWE1nYm05MElHUmxabWx1WldRdVhDSXBPMXh5WEc0Z0lDQWdkbUZ5SUcwZ1BTQnZXMU41YldKdmJDNWhjM2x1WTBsMFpYSmhkRzl5WFN3Z2FUdGNjbHh1SUNBZ0lISmxkSFZ5YmlCdElEOGdiUzVqWVd4c0tHOHBJRG9nS0c4Z1BTQjBlWEJsYjJZZ1gxOTJZV3gxWlhNZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlBL0lGOWZkbUZzZFdWektHOHBJRG9nYjF0VGVXMWliMnd1YVhSbGNtRjBiM0pkS0Nrc0lHa2dQU0I3ZlN3Z2RtVnlZaWhjSW01bGVIUmNJaWtzSUhabGNtSW9YQ0owYUhKdmQxd2lLU3dnZG1WeVlpaGNJbkpsZEhWeWJsd2lLU3dnYVZ0VGVXMWliMnd1WVhONWJtTkpkR1Z5WVhSdmNsMGdQU0JtZFc1amRHbHZiaUFvS1NCN0lISmxkSFZ5YmlCMGFHbHpPeUI5TENCcEtUdGNjbHh1SUNBZ0lHWjFibU4wYVc5dUlIWmxjbUlvYmlrZ2V5QnBXMjVkSUQwZ2IxdHVYU0FtSmlCbWRXNWpkR2x2YmlBb2Rpa2dleUJ5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRnS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZXlCMklEMGdiMXR1WFNoMktTd2djMlYwZEd4bEtISmxjMjlzZG1Vc0lISmxhbVZqZEN3Z2RpNWtiMjVsTENCMkxuWmhiSFZsS1RzZ2ZTazdJSDA3SUgxY2NseHVJQ0FnSUdaMWJtTjBhVzl1SUhObGRIUnNaU2h5WlhOdmJIWmxMQ0J5WldwbFkzUXNJR1FzSUhZcElIc2dVSEp2YldselpTNXlaWE52YkhabEtIWXBMblJvWlc0b1puVnVZM1JwYjI0b2Rpa2dleUJ5WlhOdmJIWmxLSHNnZG1Gc2RXVTZJSFlzSUdSdmJtVTZJR1FnZlNrN0lIMHNJSEpsYW1WamRDazdJSDFjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZmJXRnJaVlJsYlhCc1lYUmxUMkpxWldOMEtHTnZiMnRsWkN3Z2NtRjNLU0I3WEhKY2JpQWdJQ0JwWmlBb1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLU0I3SUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGpiMjlyWldRc0lGd2ljbUYzWENJc0lIc2dkbUZzZFdVNklISmhkeUI5S1RzZ2ZTQmxiSE5sSUhzZ1kyOXZhMlZrTG5KaGR5QTlJSEpoZHpzZ2ZWeHlYRzRnSUNBZ2NtVjBkWEp1SUdOdmIydGxaRHRjY2x4dWZUdGNjbHh1WEhKY2JuWmhjaUJmWDNObGRFMXZaSFZzWlVSbFptRjFiSFFnUFNCUFltcGxZM1F1WTNKbFlYUmxJRDhnS0daMWJtTjBhVzl1S0c4c0lIWXBJSHRjY2x4dUlDQWdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNodkxDQmNJbVJsWm1GMWJIUmNJaXdnZXlCbGJuVnRaWEpoWW14bE9pQjBjblZsTENCMllXeDFaVG9nZGlCOUtUdGNjbHh1ZlNrZ09pQm1kVzVqZEdsdmJpaHZMQ0IyS1NCN1hISmNiaUFnSUNCdlcxd2laR1ZtWVhWc2RGd2lYU0E5SUhZN1hISmNibjA3WEhKY2JseHlYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdYMTlwYlhCdmNuUlRkR0Z5S0cxdlpDa2dlMXh5WEc0Z0lDQWdhV1lnS0cxdlpDQW1KaUJ0YjJRdVgxOWxjMDF2WkhWc1pTa2djbVYwZFhKdUlHMXZaRHRjY2x4dUlDQWdJSFpoY2lCeVpYTjFiSFFnUFNCN2ZUdGNjbHh1SUNBZ0lHbG1JQ2h0YjJRZ0lUMGdiblZzYkNrZ1ptOXlJQ2gyWVhJZ2F5QnBiaUJ0YjJRcElHbG1JQ2hySUNFOVBTQmNJbVJsWm1GMWJIUmNJaUFtSmlCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG1oaGMwOTNibEJ5YjNCbGNuUjVMbU5oYkd3b2JXOWtMQ0JyS1NrZ1gxOWpjbVZoZEdWQ2FXNWthVzVuS0hKbGMzVnNkQ3dnYlc5a0xDQnJLVHRjY2x4dUlDQWdJRjlmYzJWMFRXOWtkV3hsUkdWbVlYVnNkQ2h5WlhOMWJIUXNJRzF2WkNrN1hISmNiaUFnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5cGJYQnZjblJFWldaaGRXeDBLRzF2WkNrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUNodGIyUWdKaVlnYlc5a0xsOWZaWE5OYjJSMWJHVXBJRDhnYlc5a0lEb2dleUJrWldaaGRXeDBPaUJ0YjJRZ2ZUdGNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmWTJ4aGMzTlFjbWwyWVhSbFJtbGxiR1JIWlhRb2NtVmpaV2wyWlhJc0lITjBZWFJsTENCcmFXNWtMQ0JtS1NCN1hISmNiaUFnSUNCcFppQW9hMmx1WkNBOVBUMGdYQ0poWENJZ0ppWWdJV1lwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSlFjbWwyWVhSbElHRmpZMlZ6YzI5eUlIZGhjeUJrWldacGJtVmtJSGRwZEdodmRYUWdZU0JuWlhSMFpYSmNJaWs3WEhKY2JpQWdJQ0JwWmlBb2RIbHdaVzltSUhOMFlYUmxJRDA5UFNCY0ltWjFibU4wYVc5dVhDSWdQeUJ5WldObGFYWmxjaUFoUFQwZ2MzUmhkR1VnZkh3Z0lXWWdPaUFoYzNSaGRHVXVhR0Z6S0hKbFkyVnBkbVZ5S1NrZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJa05oYm01dmRDQnlaV0ZrSUhCeWFYWmhkR1VnYldWdFltVnlJR1p5YjIwZ1lXNGdiMkpxWldOMElIZG9iM05sSUdOc1lYTnpJR1JwWkNCdWIzUWdaR1ZqYkdGeVpTQnBkRndpS1R0Y2NseHVJQ0FnSUhKbGRIVnliaUJyYVc1a0lEMDlQU0JjSW0xY0lpQS9JR1lnT2lCcmFXNWtJRDA5UFNCY0ltRmNJaUEvSUdZdVkyRnNiQ2h5WldObGFYWmxjaWtnT2lCbUlEOGdaaTUyWVd4MVpTQTZJSE4wWVhSbExtZGxkQ2h5WldObGFYWmxjaWs3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgyTnNZWE56VUhKcGRtRjBaVVpwWld4a1UyVjBLSEpsWTJWcGRtVnlMQ0J6ZEdGMFpTd2dkbUZzZFdVc0lHdHBibVFzSUdZcElIdGNjbHh1SUNBZ0lHbG1JQ2hyYVc1a0lEMDlQU0JjSW0xY0lpa2dkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhjSWxCeWFYWmhkR1VnYldWMGFHOWtJR2x6SUc1dmRDQjNjbWwwWVdKc1pWd2lLVHRjY2x4dUlDQWdJR2xtSUNocmFXNWtJRDA5UFNCY0ltRmNJaUFtSmlBaFppa2dkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhjSWxCeWFYWmhkR1VnWVdOalpYTnpiM0lnZDJGeklHUmxabWx1WldRZ2QybDBhRzkxZENCaElITmxkSFJsY2x3aUtUdGNjbHh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdjM1JoZEdVZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlBL0lISmxZMlZwZG1WeUlDRTlQU0J6ZEdGMFpTQjhmQ0FoWmlBNklDRnpkR0YwWlM1b1lYTW9jbVZqWldsMlpYSXBLU0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0Z3aVEyRnVibTkwSUhkeWFYUmxJSEJ5YVhaaGRHVWdiV1Z0WW1WeUlIUnZJR0Z1SUc5aWFtVmpkQ0IzYUc5elpTQmpiR0Z6Y3lCa2FXUWdibTkwSUdSbFkyeGhjbVVnYVhSY0lpazdYSEpjYmlBZ0lDQnlaWFIxY200Z0tHdHBibVFnUFQwOUlGd2lZVndpSUQ4Z1ppNWpZV3hzS0hKbFkyVnBkbVZ5TENCMllXeDFaU2tnT2lCbUlEOGdaaTUyWVd4MVpTQTlJSFpoYkhWbElEb2djM1JoZEdVdWMyVjBLSEpsWTJWcGRtVnlMQ0IyWVd4MVpTa3BMQ0IyWVd4MVpUdGNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmWTJ4aGMzTlFjbWwyWVhSbFJtbGxiR1JKYmloemRHRjBaU3dnY21WalpXbDJaWElwSUh0Y2NseHVJQ0FnSUdsbUlDaHlaV05sYVhabGNpQTlQVDBnYm5Wc2JDQjhmQ0FvZEhsd1pXOW1JSEpsWTJWcGRtVnlJQ0U5UFNCY0ltOWlhbVZqZEZ3aUlDWW1JSFI1Y0dWdlppQnlaV05sYVhabGNpQWhQVDBnWENKbWRXNWpkR2x2Ymx3aUtTa2dkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhjSWtOaGJtNXZkQ0IxYzJVZ0oybHVKeUJ2Y0dWeVlYUnZjaUJ2YmlCdWIyNHRiMkpxWldOMFhDSXBPMXh5WEc0Z0lDQWdjbVYwZFhKdUlIUjVjR1Z2WmlCemRHRjBaU0E5UFQwZ1hDSm1kVzVqZEdsdmJsd2lJRDhnY21WalpXbDJaWElnUFQwOUlITjBZWFJsSURvZ2MzUmhkR1V1YUdGektISmxZMlZwZG1WeUtUdGNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmWVdSa1JHbHpjRzl6WVdKc1pWSmxjMjkxY21ObEtHVnVkaXdnZG1Gc2RXVXNJR0Z6ZVc1aktTQjdYSEpjYmlBZ0lDQnBaaUFvZG1Gc2RXVWdJVDA5SUc1MWJHd2dKaVlnZG1Gc2RXVWdJVDA5SUhadmFXUWdNQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdkbUZzZFdVZ0lUMDlJRndpYjJKcVpXTjBYQ0lnSmlZZ2RIbHdaVzltSUhaaGJIVmxJQ0U5UFNCY0ltWjFibU4wYVc5dVhDSXBJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKUFltcGxZM1FnWlhod1pXTjBaV1F1WENJcE8xeHlYRzRnSUNBZ0lDQWdJSFpoY2lCa2FYTndiM05sTENCcGJtNWxjanRjY2x4dUlDQWdJQ0FnSUNCcFppQW9ZWE41Ym1NcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZUZVcxaWIyd3VZWE41Ym1ORWFYTndiM05sS1NCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtGd2lVM2x0WW05c0xtRnplVzVqUkdsemNHOXpaU0JwY3lCdWIzUWdaR1ZtYVc1bFpDNWNJaWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1JwYzNCdmMyVWdQU0IyWVd4MVpWdFRlVzFpYjJ3dVlYTjVibU5FYVhOd2IzTmxYVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdhV1lnS0dScGMzQnZjMlVnUFQwOUlIWnZhV1FnTUNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JVk41YldKdmJDNWthWE53YjNObEtTQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRndpVTNsdFltOXNMbVJwYzNCdmMyVWdhWE1nYm05MElHUmxabWx1WldRdVhDSXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmthWE53YjNObElEMGdkbUZzZFdWYlUzbHRZbTlzTG1ScGMzQnZjMlZkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1lYTjVibU1wSUdsdWJtVnlJRDBnWkdsemNHOXpaVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJrYVhOd2IzTmxJQ0U5UFNCY0ltWjFibU4wYVc5dVhDSXBJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKUFltcGxZM1FnYm05MElHUnBjM0J2YzJGaWJHVXVYQ0lwTzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hwYm01bGNpa2daR2x6Y0c5elpTQTlJR1oxYm1OMGFXOXVLQ2tnZXlCMGNua2dleUJwYm01bGNpNWpZV3hzS0hSb2FYTXBPeUI5SUdOaGRHTm9JQ2hsS1NCN0lISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGFtVmpkQ2hsS1RzZ2ZTQjlPMXh5WEc0Z0lDQWdJQ0FnSUdWdWRpNXpkR0ZqYXk1d2RYTm9LSHNnZG1Gc2RXVTZJSFpoYkhWbExDQmthWE53YjNObE9pQmthWE53YjNObExDQmhjM2x1WXpvZ1lYTjVibU1nZlNrN1hISmNiaUFnSUNCOVhISmNiaUFnSUNCbGJITmxJR2xtSUNoaGMzbHVZeWtnZTF4eVhHNGdJQ0FnSUNBZ0lHVnVkaTV6ZEdGamF5NXdkWE5vS0hzZ1lYTjVibU02SUhSeWRXVWdmU2s3WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0J5WlhSMWNtNGdkbUZzZFdVN1hISmNibHh5WEc1OVhISmNibHh5WEc1MllYSWdYMU4xY0hCeVpYTnpaV1JGY25KdmNpQTlJSFI1Y0dWdlppQlRkWEJ3Y21WemMyVmtSWEp5YjNJZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlBL0lGTjFjSEJ5WlhOelpXUkZjbkp2Y2lBNklHWjFibU4wYVc5dUlDaGxjbkp2Y2l3Z2MzVndjSEpsYzNObFpDd2diV1Z6YzJGblpTa2dlMXh5WEc0Z0lDQWdkbUZ5SUdVZ1BTQnVaWGNnUlhKeWIzSW9iV1Z6YzJGblpTazdYSEpjYmlBZ0lDQnlaWFIxY200Z1pTNXVZVzFsSUQwZ1hDSlRkWEJ3Y21WemMyVmtSWEp5YjNKY0lpd2daUzVsY25KdmNpQTlJR1Z5Y205eUxDQmxMbk4xY0hCeVpYTnpaV1FnUFNCemRYQndjbVZ6YzJWa0xDQmxPMXh5WEc1OU8xeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZlpHbHpjRzl6WlZKbGMyOTFjbU5sY3lobGJuWXBJSHRjY2x4dUlDQWdJR1oxYm1OMGFXOXVJR1poYVd3b1pTa2dlMXh5WEc0Z0lDQWdJQ0FnSUdWdWRpNWxjbkp2Y2lBOUlHVnVkaTVvWVhORmNuSnZjaUEvSUc1bGR5QmZVM1Z3Y0hKbGMzTmxaRVZ5Y205eUtHVXNJR1Z1ZGk1bGNuSnZjaXdnWENKQmJpQmxjbkp2Y2lCM1lYTWdjM1Z3Y0hKbGMzTmxaQ0JrZFhKcGJtY2daR2x6Y0c5ellXd3VYQ0lwSURvZ1pUdGNjbHh1SUNBZ0lDQWdJQ0JsYm5ZdWFHRnpSWEp5YjNJZ1BTQjBjblZsTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnZG1GeUlISXNJSE1nUFNBd08xeHlYRzRnSUNBZ1puVnVZM1JwYjI0Z2JtVjRkQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQjNhR2xzWlNBb2NpQTlJR1Z1ZGk1emRHRmpheTV3YjNBb0tTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0Z5TG1GemVXNWpJQ1ltSUhNZ1BUMDlJREVwSUhKbGRIVnliaUJ6SUQwZ01Dd2daVzUyTG5OMFlXTnJMbkIxYzJnb2Npa3NJRkJ5YjIxcGMyVXVjbVZ6YjJ4MlpTZ3BMblJvWlc0b2JtVjRkQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaTVrYVhOd2IzTmxLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhKbGMzVnNkQ0E5SUhJdVpHbHpjRzl6WlM1allXeHNLSEl1ZG1Gc2RXVXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5TG1GemVXNWpLU0J5WlhSMWNtNGdjeUI4UFNBeUxDQlFjbTl0YVhObExuSmxjMjlzZG1Vb2NtVnpkV3gwS1M1MGFHVnVLRzVsZUhRc0lHWjFibU4wYVc5dUtHVXBJSHNnWm1GcGJDaGxLVHNnY21WMGRYSnVJRzVsZUhRb0tUc2dmU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUhNZ2ZEMGdNVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWFJqYUNBb1pTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1GcGJDaGxLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQnBaaUFvY3lBOVBUMGdNU2tnY21WMGRYSnVJR1Z1ZGk1b1lYTkZjbkp2Y2lBL0lGQnliMjFwYzJVdWNtVnFaV04wS0dWdWRpNWxjbkp2Y2lrZ09pQlFjbTl0YVhObExuSmxjMjlzZG1Vb0tUdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb1pXNTJMbWhoYzBWeWNtOXlLU0IwYUhKdmR5Qmxibll1WlhKeWIzSTdYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnlaWFIxY200Z2JtVjRkQ2dwTzF4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCN1hISmNiaUFnSUNCZlgyVjRkR1Z1WkhNNklGOWZaWGgwWlc1a2N5eGNjbHh1SUNBZ0lGOWZZWE56YVdkdU9pQmZYMkZ6YzJsbmJpeGNjbHh1SUNBZ0lGOWZjbVZ6ZERvZ1gxOXlaWE4wTEZ4eVhHNGdJQ0FnWDE5a1pXTnZjbUYwWlRvZ1gxOWtaV052Y21GMFpTeGNjbHh1SUNBZ0lGOWZjR0Z5WVcwNklGOWZjR0Z5WVcwc1hISmNiaUFnSUNCZlgyMWxkR0ZrWVhSaE9pQmZYMjFsZEdGa1lYUmhMRnh5WEc0Z0lDQWdYMTloZDJGcGRHVnlPaUJmWDJGM1lXbDBaWElzWEhKY2JpQWdJQ0JmWDJkbGJtVnlZWFJ2Y2pvZ1gxOW5aVzVsY21GMGIzSXNYSEpjYmlBZ0lDQmZYMk55WldGMFpVSnBibVJwYm1jNklGOWZZM0psWVhSbFFtbHVaR2x1Wnl4Y2NseHVJQ0FnSUY5ZlpYaHdiM0owVTNSaGNqb2dYMTlsZUhCdmNuUlRkR0Z5TEZ4eVhHNGdJQ0FnWDE5MllXeDFaWE02SUY5ZmRtRnNkV1Z6TEZ4eVhHNGdJQ0FnWDE5eVpXRmtPaUJmWDNKbFlXUXNYSEpjYmlBZ0lDQmZYM053Y21WaFpEb2dYMTl6Y0hKbFlXUXNYSEpjYmlBZ0lDQmZYM053Y21WaFpFRnljbUY1Y3pvZ1gxOXpjSEpsWVdSQmNuSmhlWE1zWEhKY2JpQWdJQ0JmWDNOd2NtVmhaRUZ5Y21GNU9pQmZYM053Y21WaFpFRnljbUY1TEZ4eVhHNGdJQ0FnWDE5aGQyRnBkRG9nWDE5aGQyRnBkQ3hjY2x4dUlDQWdJRjlmWVhONWJtTkhaVzVsY21GMGIzSTZJRjlmWVhONWJtTkhaVzVsY21GMGIzSXNYSEpjYmlBZ0lDQmZYMkZ6ZVc1alJHVnNaV2RoZEc5eU9pQmZYMkZ6ZVc1alJHVnNaV2RoZEc5eUxGeHlYRzRnSUNBZ1gxOWhjM2x1WTFaaGJIVmxjem9nWDE5aGMzbHVZMVpoYkhWbGN5eGNjbHh1SUNBZ0lGOWZiV0ZyWlZSbGJYQnNZWFJsVDJKcVpXTjBPaUJmWDIxaGEyVlVaVzF3YkdGMFpVOWlhbVZqZEN4Y2NseHVJQ0FnSUY5ZmFXMXdiM0owVTNSaGNqb2dYMTlwYlhCdmNuUlRkR0Z5TEZ4eVhHNGdJQ0FnWDE5cGJYQnZjblJFWldaaGRXeDBPaUJmWDJsdGNHOXlkRVJsWm1GMWJIUXNYSEpjYmlBZ0lDQmZYMk5zWVhOelVISnBkbUYwWlVacFpXeGtSMlYwT2lCZlgyTnNZWE56VUhKcGRtRjBaVVpwWld4a1IyVjBMRnh5WEc0Z0lDQWdYMTlqYkdGemMxQnlhWFpoZEdWR2FXVnNaRk5sZERvZ1gxOWpiR0Z6YzFCeWFYWmhkR1ZHYVdWc1pGTmxkQ3hjY2x4dUlDQWdJRjlmWTJ4aGMzTlFjbWwyWVhSbFJtbGxiR1JKYmpvZ1gxOWpiR0Z6YzFCeWFYWmhkR1ZHYVdWc1pFbHVMRnh5WEc0Z0lDQWdYMTloWkdSRWFYTndiM05oWW14bFVtVnpiM1Z5WTJVNklGOWZZV1JrUkdsemNHOXpZV0pzWlZKbGMyOTFjbU5sTEZ4eVhHNGdJQ0FnWDE5a2FYTndiM05sVW1WemIzVnlZMlZ6T2lCZlgyUnBjM0J2YzJWU1pYTnZkWEpqWlhNc1hISmNibjA3WEhKY2JpSXNJaWhtZFc1amRHbHZiaUFvWm1GamRHOXllU2tnZTF4dUlDQjBlWEJsYjJZZ1pHVm1hVzVsSUQwOVBTQW5ablZ1WTNScGIyNG5JQ1ltSUdSbFptbHVaUzVoYldRZ1B5QmtaV1pwYm1Vb1ptRmpkRzl5ZVNrZ09seHVJQ0JtWVdOMGIzSjVLQ2s3WEc1OUtTZ29ablZ1WTNScGIyNGdLQ2tnZXlBbmRYTmxJSE4wY21samRDYzdYRzVjYmlBZ1puVnVZM1JwYjI0Z1gyTnNZWE56UTJGc2JFTm9aV05yS0dsdWMzUmhibU5sTENCRGIyNXpkSEoxWTNSdmNpa2dlMXh1SUNBZ0lHbG1JQ2doS0dsdWMzUmhibU5sSUdsdWMzUmhibU5sYjJZZ1EyOXVjM1J5ZFdOMGIzSXBLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0Z3aVEyRnVibTkwSUdOaGJHd2dZU0JqYkdGemN5QmhjeUJoSUdaMWJtTjBhVzl1WENJcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlGOWtaV1pwYm1WUWNtOXdaWEowYVdWektIUmhjbWRsZEN3Z2NISnZjSE1wSUh0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhCeWIzQnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCMllYSWdaR1Z6WTNKcGNIUnZjaUE5SUhCeWIzQnpXMmxkTzF4dUlDQWdJQ0FnWkdWelkzSnBjSFJ2Y2k1bGJuVnRaWEpoWW14bElEMGdaR1Z6WTNKcGNIUnZjaTVsYm5WdFpYSmhZbXhsSUh4OElHWmhiSE5sTzF4dUlDQWdJQ0FnWkdWelkzSnBjSFJ2Y2k1amIyNW1hV2QxY21GaWJHVWdQU0IwY25WbE8xeHVJQ0FnSUNBZ2FXWWdLRndpZG1Gc2RXVmNJaUJwYmlCa1pYTmpjbWx3ZEc5eUtTQmtaWE5qY21sd2RHOXlMbmR5YVhSaFlteGxJRDBnZEhKMVpUdGNiaUFnSUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2gwWVhKblpYUXNJR1JsYzJOeWFYQjBiM0l1YTJWNUxDQmtaWE5qY21sd2RHOXlLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JtZFc1amRHbHZiaUJmWTNKbFlYUmxRMnhoYzNNb1EyOXVjM1J5ZFdOMGIzSXNJSEJ5YjNSdlVISnZjSE1zSUhOMFlYUnBZMUJ5YjNCektTQjdYRzRnSUNBZ2FXWWdLSEJ5YjNSdlVISnZjSE1wSUY5a1pXWnBibVZRY205d1pYSjBhV1Z6S0VOdmJuTjBjblZqZEc5eUxuQnliM1J2ZEhsd1pTd2djSEp2ZEc5UWNtOXdjeWs3WEc0Z0lDQWdhV1lnS0hOMFlYUnBZMUJ5YjNCektTQmZaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aERiMjV6ZEhKMVkzUnZjaXdnYzNSaGRHbGpVSEp2Y0hNcE8xeHVJQ0FnSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaERiMjV6ZEhKMVkzUnZjaXdnWENKd2NtOTBiM1I1Y0dWY0lpd2dlMXh1SUNBZ0lDQWdkM0pwZEdGaWJHVTZJR1poYkhObFhHNGdJQ0FnZlNrN1hHNGdJQ0FnY21WMGRYSnVJRU52Ym5OMGNuVmpkRzl5TzF4dUlDQjlYRzVjYmlBZ1puVnVZM1JwYjI0Z1gybHVhR1Z5YVhSektITjFZa05zWVhOekxDQnpkWEJsY2tOc1lYTnpLU0I3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJ6ZFhCbGNrTnNZWE56SUNFOVBTQmNJbVoxYm1OMGFXOXVYQ0lnSmlZZ2MzVndaWEpEYkdGemN5QWhQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhjSWxOMWNHVnlJR1Y0Y0hKbGMzTnBiMjRnYlhWemRDQmxhWFJvWlhJZ1ltVWdiblZzYkNCdmNpQmhJR1oxYm1OMGFXOXVYQ0lwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSE4xWWtOc1lYTnpMbkJ5YjNSdmRIbHdaU0E5SUU5aWFtVmpkQzVqY21WaGRHVW9jM1Z3WlhKRGJHRnpjeUFtSmlCemRYQmxja05zWVhOekxuQnliM1J2ZEhsd1pTd2dlMXh1SUNBZ0lDQWdZMjl1YzNSeWRXTjBiM0k2SUh0Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUhOMVlrTnNZWE56TEZ4dUlDQWdJQ0FnSUNCM2NtbDBZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnWTI5dVptbG5kWEpoWW14bE9pQjBjblZsWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc0Z0lDQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hOMVlrTnNZWE56TENCY0luQnliM1J2ZEhsd1pWd2lMQ0I3WEc0Z0lDQWdJQ0IzY21sMFlXSnNaVG9nWm1Gc2MyVmNiaUFnSUNCOUtUdGNiaUFnSUNCcFppQW9jM1Z3WlhKRGJHRnpjeWtnWDNObGRGQnliM1J2ZEhsd1pVOW1LSE4xWWtOc1lYTnpMQ0J6ZFhCbGNrTnNZWE56S1R0Y2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlGOW5aWFJRY205MGIzUjVjR1ZQWmlodktTQjdYRzRnSUNBZ1gyZGxkRkJ5YjNSdmRIbHdaVTltSUQwZ1QySnFaV04wTG5ObGRGQnliM1J2ZEhsd1pVOW1JRDhnVDJKcVpXTjBMbWRsZEZCeWIzUnZkSGx3WlU5bUxtSnBibVFvS1NBNklHWjFibU4wYVc5dUlGOW5aWFJRY205MGIzUjVjR1ZQWmlodktTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2J5NWZYM0J5YjNSdlgxOGdmSHdnVDJKcVpXTjBMbWRsZEZCeWIzUnZkSGx3WlU5bUtHOHBPMXh1SUNBZ0lIMDdYRzRnSUNBZ2NtVjBkWEp1SUY5blpYUlFjbTkwYjNSNWNHVlBaaWh2S1R0Y2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlGOXpaWFJRY205MGIzUjVjR1ZQWmlodkxDQndLU0I3WEc0Z0lDQWdYM05sZEZCeWIzUnZkSGx3WlU5bUlEMGdUMkpxWldOMExuTmxkRkJ5YjNSdmRIbHdaVTltSUQ4Z1QySnFaV04wTG5ObGRGQnliM1J2ZEhsd1pVOW1MbUpwYm1Rb0tTQTZJR1oxYm1OMGFXOXVJRjl6WlhSUWNtOTBiM1I1Y0dWUFppaHZMQ0J3S1NCN1hHNGdJQ0FnSUNCdkxsOWZjSEp2ZEc5Zlh5QTlJSEE3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdienRjYmlBZ0lDQjlPMXh1SUNBZ0lISmxkSFZ5YmlCZmMyVjBVSEp2ZEc5MGVYQmxUMllvYnl3Z2NDazdYRzRnSUgxY2JseHVJQ0JtZFc1amRHbHZiaUJmYVhOT1lYUnBkbVZTWldac1pXTjBRMjl1YzNSeWRXTjBLQ2tnZTF4dUlDQWdJR2xtSUNoMGVYQmxiMllnVW1WbWJHVmpkQ0E5UFQwZ1hDSjFibVJsWm1sdVpXUmNJaUI4ZkNBaFVtVm1iR1ZqZEM1amIyNXpkSEoxWTNRcElISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQnBaaUFvVW1WbWJHVmpkQzVqYjI1emRISjFZM1F1YzJoaGJTa2djbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJR2xtSUNoMGVYQmxiMllnVUhKdmVIa2dQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpa2djbVYwZFhKdUlIUnlkV1U3WEc1Y2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ1FtOXZiR1ZoYmk1d2NtOTBiM1I1Y0dVdWRtRnNkV1ZQWmk1allXeHNLRkpsWm14bFkzUXVZMjl1YzNSeWRXTjBLRUp2YjJ4bFlXNHNJRnRkTENCbWRXNWpkR2x2YmlBb0tTQjdmU2twTzF4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJRjloYzNObGNuUlVhR2x6U1c1cGRHbGhiR2w2WldRb2MyVnNaaWtnZTF4dUlDQWdJR2xtSUNoelpXeG1JRDA5UFNCMmIybGtJREFwSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCU1pXWmxjbVZ1WTJWRmNuSnZjaWhjSW5Sb2FYTWdhR0Z6YmlkMElHSmxaVzRnYVc1cGRHbGhiR2x6WldRZ0xTQnpkWEJsY2lncElHaGhjMjRuZENCaVpXVnVJR05oYkd4bFpGd2lLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2MyVnNaanRjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUY5d2IzTnphV0pzWlVOdmJuTjBjblZqZEc5eVVtVjBkWEp1S0hObGJHWXNJR05oYkd3cElIdGNiaUFnSUNCcFppQW9ZMkZzYkNBbUppQW9kSGx3Wlc5bUlHTmhiR3dnUFQwOUlGd2liMkpxWldOMFhDSWdmSHdnZEhsd1pXOW1JR05oYkd3Z1BUMDlJRndpWm5WdVkzUnBiMjVjSWlrcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCallXeHNPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9ZMkZzYkNBaFBUMGdkbTlwWkNBd0tTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRndpUkdWeWFYWmxaQ0JqYjI1emRISjFZM1J2Y25NZ2JXRjVJRzl1YkhrZ2NtVjBkWEp1SUc5aWFtVmpkQ0J2Y2lCMWJtUmxabWx1WldSY0lpazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUY5aGMzTmxjblJVYUdselNXNXBkR2xoYkdsNlpXUW9jMlZzWmlrN1hHNGdJSDFjYmx4dUlDQm1kVzVqZEdsdmJpQmZZM0psWVhSbFUzVndaWElvUkdWeWFYWmxaQ2tnZTF4dUlDQWdJSFpoY2lCb1lYTk9ZWFJwZG1WU1pXWnNaV04wUTI5dWMzUnlkV04wSUQwZ1gybHpUbUYwYVhabFVtVm1iR1ZqZEVOdmJuTjBjblZqZENncE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUY5amNtVmhkR1ZUZFhCbGNrbHVkR1Z5Ym1Gc0tDa2dlMXh1SUNBZ0lDQWdkbUZ5SUZOMWNHVnlJRDBnWDJkbGRGQnliM1J2ZEhsd1pVOW1LRVJsY21sMlpXUXBMRnh1SUNBZ0lDQWdJQ0FnSUhKbGMzVnNkRHRjYmx4dUlDQWdJQ0FnYVdZZ0tHaGhjMDVoZEdsMlpWSmxabXhsWTNSRGIyNXpkSEoxWTNRcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUU1bGQxUmhjbWRsZENBOUlGOW5aWFJRY205MGIzUjVjR1ZQWmloMGFHbHpLUzVqYjI1emRISjFZM1J2Y2p0Y2JseHVJQ0FnSUNBZ0lDQnlaWE4xYkhRZ1BTQlNaV1pzWldOMExtTnZibk4wY25WamRDaFRkWEJsY2l3Z1lYSm5kVzFsYm5SekxDQk9aWGRVWVhKblpYUXBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdjbVZ6ZFd4MElEMGdVM1Z3WlhJdVlYQndiSGtvZEdocGN5d2dZWEpuZFcxbGJuUnpLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnY21WMGRYSnVJRjl3YjNOemFXSnNaVU52Ym5OMGNuVmpkRzl5VW1WMGRYSnVLSFJvYVhNc0lISmxjM1ZzZENrN1hHNGdJQ0FnZlR0Y2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlGOXpkWEJsY2xCeWIzQkNZWE5sS0c5aWFtVmpkQ3dnY0hKdmNHVnlkSGtwSUh0Y2JpQWdJQ0IzYUdsc1pTQW9JVTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2h2WW1wbFkzUXNJSEJ5YjNCbGNuUjVLU2tnZTF4dUlDQWdJQ0FnYjJKcVpXTjBJRDBnWDJkbGRGQnliM1J2ZEhsd1pVOW1LRzlpYW1WamRDazdYRzRnSUNBZ0lDQnBaaUFvYjJKcVpXTjBJRDA5UFNCdWRXeHNLU0JpY21WaGF6dGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnYjJKcVpXTjBPMXh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnWDJkbGRDZ3BJSHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JRkpsWm14bFkzUWdJVDA5SUZ3aWRXNWtaV1pwYm1Wa1hDSWdKaVlnVW1WbWJHVmpkQzVuWlhRcElIdGNiaUFnSUNBZ0lGOW5aWFFnUFNCU1pXWnNaV04wTG1kbGRDNWlhVzVrS0NrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJRjluWlhRZ1BTQm1kVzVqZEdsdmJpQmZaMlYwS0hSaGNtZGxkQ3dnY0hKdmNHVnlkSGtzSUhKbFkyVnBkbVZ5S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJpWVhObElEMGdYM04xY0dWeVVISnZjRUpoYzJVb2RHRnlaMlYwTENCd2NtOXdaWEowZVNrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0NGaVlYTmxLU0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSFpoY2lCa1pYTmpJRDBnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpaGlZWE5sTENCd2NtOXdaWEowZVNrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0dSbGMyTXVaMlYwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHUmxjMk11WjJWMExtTmhiR3dvWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0E4SURNZ1B5QjBZWEpuWlhRZ09pQnlaV05sYVhabGNpazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWkdWell5NTJZV3gxWlR0Y2JpQWdJQ0FnSUgwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJRjluWlhRdVlYQndiSGtvZEdocGN5d2dZWEpuZFcxbGJuUnpLVHRjYmlBZ2ZWeHVYRzRnSUhaaGNpQkZiV2wwZEdWeUlEMGdMeW9qWDE5UVZWSkZYMThxTDJaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCbWRXNWpkR2x2YmlCRmJXbDBkR1Z5S0NrZ2UxeHVJQ0FnSUNBZ1gyTnNZWE56UTJGc2JFTm9aV05yS0hSb2FYTXNJRVZ0YVhSMFpYSXBPMXh1WEc0Z0lDQWdJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2RHaHBjeXdnSjJ4cGMzUmxibVZ5Y3ljc0lIdGNiaUFnSUNBZ0lDQWdkbUZzZFdVNklIdDlMRnh1SUNBZ0lDQWdJQ0IzY21sMFlXSnNaVG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmZZM0psWVhSbFEyeGhjM01vUlcxcGRIUmxjaXdnVzN0Y2JpQWdJQ0FnSUd0bGVUb2dYQ0poWkdSRmRtVnVkRXhwYzNSbGJtVnlYQ0lzWEc0Z0lDQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdZV1JrUlhabGJuUk1hWE4wWlc1bGNpaDBlWEJsTENCallXeHNZbUZqYXl3Z2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVNoMGVYQmxJR2x1SUhSb2FYTXViR2x6ZEdWdVpYSnpLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11YkdsemRHVnVaWEp6VzNSNWNHVmRJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IwYUdsekxteHBjM1JsYm1WeWMxdDBlWEJsWFM1d2RYTm9LSHRjYmlBZ0lDQWdJQ0FnSUNCallXeHNZbUZqYXpvZ1kyRnNiR0poWTJzc1hHNGdJQ0FnSUNBZ0lDQWdiM0IwYVc5dWN6b2diM0IwYVc5dWMxeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlMQ0I3WEc0Z0lDQWdJQ0JyWlhrNklGd2ljbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjbHdpTEZ4dUlDQWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJSEpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvZEhsd1pTd2dZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRW9kSGx3WlNCcGJpQjBhR2x6TG14cGMzUmxibVZ5Y3lrcElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCMllYSWdjM1JoWTJzZ1BTQjBhR2x6TG14cGMzUmxibVZ5YzF0MGVYQmxYVHRjYmx4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNQ3dnYkNBOUlITjBZV05yTG14bGJtZDBhRHNnYVNBOElHdzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoemRHRmphMXRwWFM1allXeHNZbUZqYXlBOVBUMGdZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITjBZV05yTG5Od2JHbGpaU2hwTENBeEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOUxDQjdYRzRnSUNBZ0lDQnJaWGs2SUZ3aVpHbHpjR0YwWTJoRmRtVnVkRndpTEZ4dUlDQWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJR1JwYzNCaGRHTm9SWFpsYm5Rb1pYWmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0VvWlhabGJuUXVkSGx3WlNCcGJpQjBhR2x6TG14cGMzUmxibVZ5Y3lrcElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCMllYSWdjM1JoWTJzZ1BTQjBhR2x6TG14cGMzUmxibVZ5YzF0bGRtVnVkQzUwZVhCbFhUdGNiaUFnSUNBZ0lDQWdkbUZ5SUhOMFlXTnJWRzlEWVd4c0lEMGdjM1JoWTJzdWMyeHBZMlVvS1R0Y2JseHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JDQTlJSE4wWVdOclZHOURZV3hzTG14bGJtZDBhRHNnYVNBOElHdzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFpoY2lCc2FYTjBaVzVsY2lBOUlITjBZV05yVkc5RFlXeHNXMmxkTzF4dVhHNGdJQ0FnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hwYzNSbGJtVnlMbU5oYkd4aVlXTnJMbU5oYkd3b2RHaHBjeXdnWlhabGJuUXBPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUZCeWIyMXBjMlV1Y21WemIyeDJaU2dwTG5Sb1pXNG9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0d4cGMzUmxibVZ5TG05d2RHbHZibk1nSmlZZ2JHbHpkR1Z1WlhJdWIzQjBhVzl1Y3k1dmJtTmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb1pYWmxiblF1ZEhsd1pTd2diR2x6ZEdWdVpYSXVZMkZzYkdKaFkyc3BPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQWhaWFpsYm5RdVpHVm1ZWFZzZEZCeVpYWmxiblJsWkR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WFNrN1hHNWNiaUFnSUNCeVpYUjFjbTRnUlcxcGRIUmxjanRjYmlBZ2ZTZ3BPMXh1WEc0Z0lIWmhjaUJCWW05eWRGTnBaMjVoYkNBOUlDOHFJMTlmVUZWU1JWOWZLaTltZFc1amRHbHZiaUFvWDBWdGFYUjBaWElwSUh0Y2JpQWdJQ0JmYVc1b1pYSnBkSE1vUVdKdmNuUlRhV2R1WVd3c0lGOUZiV2wwZEdWeUtUdGNibHh1SUNBZ0lIWmhjaUJmYzNWd1pYSWdQU0JmWTNKbFlYUmxVM1Z3WlhJb1FXSnZjblJUYVdkdVlXd3BPMXh1WEc0Z0lDQWdablZ1WTNScGIyNGdRV0p2Y25SVGFXZHVZV3dvS1NCN1hHNGdJQ0FnSUNCMllYSWdYM1JvYVhNN1hHNWNiaUFnSUNBZ0lGOWpiR0Z6YzBOaGJHeERhR1ZqYXloMGFHbHpMQ0JCWW05eWRGTnBaMjVoYkNrN1hHNWNiaUFnSUNBZ0lGOTBhR2x6SUQwZ1gzTjFjR1Z5TG1OaGJHd29kR2hwY3lrN0lDOHZJRk52YldVZ2RtVnljMmx2Ym5NZ2IyWWdZbUZpWld3Z1pHOWxjeUJ1YjNRZ2RISmhibk53YVd4bElITjFjR1Z5S0NrZ1kyOXljbVZqZEd4NUlHWnZjaUJKUlNBOFBTQXhNQ3dnYVdZZ2RHaGxJSEJoY21WdWRGeHVJQ0FnSUNBZ0x5OGdZMjl1YzNSeWRXTjBiM0lnYUdGeklHWmhhV3hsWkNCMGJ5QnlkVzRzSUhSb1pXNGdYQ0owYUdsekxteHBjM1JsYm1WeWMxd2lJSGRwYkd3Z2MzUnBiR3dnWW1VZ2RXNWtaV1pwYm1Wa0lHRnVaQ0IwYUdWdUlIZGxJR05oYkd4Y2JpQWdJQ0FnSUM4dklIUm9aU0J3WVhKbGJuUWdZMjl1YzNSeWRXTjBiM0lnWkdseVpXTjBiSGtnYVc1emRHVmhaQ0JoY3lCaElIZHZjbXRoY205MWJtUXVJRVp2Y2lCblpXNWxjbUZzSUdSbGRHRnBiSE1zSUhObFpTQmlZV0psYkNCaWRXYzZYRzRnSUNBZ0lDQXZMeUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2WW1GaVpXd3ZZbUZpWld3dmFYTnpkV1Z6THpNd05ERmNiaUFnSUNBZ0lDOHZJRlJvYVhNZ2FHRmpheUIzWVhNZ1lXUmtaV1FnWVhNZ1lTQm1hWGdnWm05eUlIUm9aU0JwYzNOMVpTQmtaWE5qY21saVpXUWdhR1Z5WlRwY2JpQWdJQ0FnSUM4dklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOUdhVzVoYm1OcFlXd3RWR2x0WlhNdmNHOXNlV1pwYkd3dGJHbGljbUZ5ZVM5d2RXeHNMelU1STJsemMzVmxZMjl0YldWdWRDMDBOemMxTlRnd05ESmNibHh1SUNBZ0lDQWdhV1lnS0NGZmRHaHBjeTVzYVhOMFpXNWxjbk1wSUh0Y2JpQWdJQ0FnSUNBZ1JXMXBkSFJsY2k1allXeHNLRjloYzNObGNuUlVhR2x6U1c1cGRHbGhiR2w2WldRb1gzUm9hWE1wS1R0Y2JpQWdJQ0FnSUgwZ0x5OGdRMjl0Y0dGeVpXUWdkRzhnWVhOemFXZHViV1Z1ZEN3Z1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVJRzFoYTJWeklIQnliM0JsY25ScFpYTWdibTl1TFdWdWRXMWxjbUZpYkdVZ1lua2daR1ZtWVhWc2RDQmhibVJjYmlBZ0lDQWdJQzh2SUhkbElIZGhiblFnVDJKcVpXTjBMbXRsZVhNb2JtVjNJRUZpYjNKMFEyOXVkSEp2Ykd4bGNpZ3BMbk5wWjI1aGJDa2dkRzhnWW1VZ1cxMGdabTl5SUdOdmJYQmhkQ0IzYVhSb0lIUm9aU0J1WVhScGRtVWdhVzF3YkZ4dVhHNWNiaUFnSUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hmWVhOelpYSjBWR2hwYzBsdWFYUnBZV3hwZW1Wa0tGOTBhR2x6S1N3Z0oyRmliM0owWldRbkxDQjdYRzRnSUNBZ0lDQWdJSFpoYkhWbE9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ2QzSnBkR0ZpYkdVNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29YMkZ6YzJWeWRGUm9hWE5KYm1sMGFXRnNhWHBsWkNoZmRHaHBjeWtzSUNkdmJtRmliM0owSnl3Z2UxeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JuVnNiQ3hjYmlBZ0lDQWdJQ0FnZDNKcGRHRmliR1U2SUhSeWRXVXNYRzRnSUNBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ2RISjFaVnh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1gyRnpjMlZ5ZEZSb2FYTkpibWwwYVdGc2FYcGxaQ2hmZEdocGN5a3NJQ2R5WldGemIyNG5MQ0I3WEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUIxYm1SbFptbHVaV1FzWEc0Z0lDQWdJQ0FnSUhkeWFYUmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1ZjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnY21WMGRYSnVJRjkwYUdsek8xeHVJQ0FnSUgxY2JseHVJQ0FnSUY5amNtVmhkR1ZEYkdGemN5aEJZbTl5ZEZOcFoyNWhiQ3dnVzN0Y2JpQWdJQ0FnSUd0bGVUb2dYQ0owYjFOMGNtbHVaMXdpTEZ4dUlDQWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJSFJ2VTNSeWFXNW5LQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnSjF0dlltcGxZM1FnUVdKdmNuUlRhV2R1WVd4ZEp6dGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUxDQjdYRzRnSUNBZ0lDQnJaWGs2SUZ3aVpHbHpjR0YwWTJoRmRtVnVkRndpTEZ4dUlDQWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJR1JwYzNCaGRHTm9SWFpsYm5Rb1pYWmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1YyWlc1MExuUjVjR1VnUFQwOUlDZGhZbTl5ZENjcElIdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtRmliM0owWldRZ1BTQjBjblZsTzF4dVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUIwYUdsekxtOXVZV0p2Y25RZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIyNWhZbTl5ZEM1allXeHNLSFJvYVhNc0lHVjJaVzUwS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCZloyVjBLRjluWlhSUWNtOTBiM1I1Y0dWUFppaEJZbTl5ZEZOcFoyNWhiQzV3Y205MGIzUjVjR1VwTENCY0ltUnBjM0JoZEdOb1JYWmxiblJjSWl3Z2RHaHBjeWt1WTJGc2JDaDBhR2x6TENCbGRtVnVkQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVjBwTzF4dVhHNGdJQ0FnY21WMGRYSnVJRUZpYjNKMFUybG5ibUZzTzF4dUlDQjlLRVZ0YVhSMFpYSXBPMXh1SUNCMllYSWdRV0p2Y25SRGIyNTBjbTlzYkdWeUlEMGdMeW9qWDE5UVZWSkZYMThxTDJaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCbWRXNWpkR2x2YmlCQlltOXlkRU52Ym5SeWIyeHNaWElvS1NCN1hHNGdJQ0FnSUNCZlkyeGhjM05EWVd4c1EyaGxZMnNvZEdocGN5d2dRV0p2Y25SRGIyNTBjbTlzYkdWeUtUdGNibHh1SUNBZ0lDQWdMeThnUTI5dGNHRnlaV1FnZEc4Z1lYTnphV2R1YldWdWRDd2dUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1SUcxaGEyVnpJSEJ5YjNCbGNuUnBaWE1nYm05dUxXVnVkVzFsY21GaWJHVWdZbmtnWkdWbVlYVnNkQ0JoYm1SY2JpQWdJQ0FnSUM4dklIZGxJSGRoYm5RZ1QySnFaV04wTG10bGVYTW9ibVYzSUVGaWIzSjBRMjl1ZEhKdmJHeGxjaWdwS1NCMGJ5QmlaU0JiWFNCbWIzSWdZMjl0Y0dGMElIZHBkR2dnZEdobElHNWhkR2wyWlNCcGJYQnNYRzRnSUNBZ0lDQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvZEdocGN5d2dKM05wWjI1aGJDY3NJSHRjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzVsZHlCQlltOXlkRk5wWjI1aGJDZ3BMRnh1SUNBZ0lDQWdJQ0IzY21sMFlXSnNaVG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmZZM0psWVhSbFEyeGhjM01vUVdKdmNuUkRiMjUwY205c2JHVnlMQ0JiZTF4dUlDQWdJQ0FnYTJWNU9pQmNJbUZpYjNKMFhDSXNYRzRnSUNBZ0lDQjJZV3gxWlRvZ1puVnVZM1JwYjI0Z1lXSnZjblFvY21WaGMyOXVLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmxkbVZ1ZER0Y2JseHVJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lHVjJaVzUwSUQwZ2JtVjNJRVYyWlc1MEtDZGhZbTl5ZENjcE8xeHVJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQmtiMk4xYldWdWRDQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2haRzlqZFcxbGJuUXVZM0psWVhSbFJYWmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1JtOXlJRWx1ZEdWeWJtVjBJRVY0Y0d4dmNtVnlJRGc2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1YyWlc1MElEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJYWmxiblJQWW1wbFkzUW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdaWFpsYm5RdWRIbHdaU0E5SUNkaFltOXlkQ2M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkdiM0lnU1c1MFpYSnVaWFFnUlhod2JHOXlaWElnTVRFNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdWMlpXNTBJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSWFpsYm5Rb0owVjJaVzUwSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdWMlpXNTBMbWx1YVhSRmRtVnVkQ2duWVdKdmNuUW5MQ0JtWVd4elpTd2dabUZzYzJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCR1lXeHNZbUZqYXlCM2FHVnlaU0JrYjJOMWJXVnVkQ0JwYzI0bmRDQmhkbUZwYkdGaWJHVTZYRzRnSUNBZ0lDQWdJQ0FnSUNCbGRtVnVkQ0E5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKMkZpYjNKMEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1luVmlZbXhsY3pvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR05oYm1ObGJHRmliR1U2SUdaaGJITmxYRzRnSUNBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJ6YVdkdVlXeFNaV0Z6YjI0Z1BTQnlaV0Z6YjI0N1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hOcFoyNWhiRkpsWVhOdmJpQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJrYjJOMWJXVnVkQ0E5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITnBaMjVoYkZKbFlYTnZiaUE5SUc1bGR5QkZjbkp2Y2lnblZHaHBjeUJ2Y0dWeVlYUnBiMjRnZDJGeklHRmliM0owWldRbktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOcFoyNWhiRkpsWVhOdmJpNXVZVzFsSUQwZ0owRmliM0owUlhKeWIzSW5PMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J6YVdkdVlXeFNaV0Z6YjI0Z1BTQnVaWGNnUkU5TlJYaGpaWEIwYVc5dUtDZHphV2R1WVd3Z2FYTWdZV0p2Y25SbFpDQjNhWFJvYjNWMElISmxZWE52YmljcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCallYUmphQ0FvWlhKeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRWxGSURFeElHUnZaWE1nYm05MElITjFjSEJ2Y25RZ1kyRnNiR2x1WnlCMGFHVWdSRTlOUlhoalpYQjBhVzl1SUdOdmJuTjBjblZqZEc5eUxDQjFjMlVnWVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCeVpXZDFiR0Z5SUdWeWNtOXlJRzlpYW1WamRDQnZiaUJwZENCcGJuTjBaV0ZrTGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J6YVdkdVlXeFNaV0Z6YjI0Z1BTQnVaWGNnUlhKeWIzSW9KMVJvYVhNZ2IzQmxjbUYwYVc5dUlIZGhjeUJoWW05eWRHVmtKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSE5wWjI1aGJGSmxZWE52Ymk1dVlXMWxJRDBnSjBGaWIzSjBSWEp5YjNJbk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMmxuYm1Gc0xuSmxZWE52YmlBOUlITnBaMjVoYkZKbFlYTnZianRjYmlBZ0lDQWdJQ0FnZEdocGN5NXphV2R1WVd3dVpHbHpjR0YwWTJoRmRtVnVkQ2hsZG1WdWRDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTd2dlMXh1SUNBZ0lDQWdhMlY1T2lCY0luUnZVM1J5YVc1blhDSXNYRzRnSUNBZ0lDQjJZV3gxWlRvZ1puVnVZM1JwYjI0Z2RHOVRkSEpwYm1jb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQW5XMjlpYW1WamRDQkJZbTl5ZEVOdmJuUnliMnhzWlhKZEp6dGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhTazdYRzVjYmlBZ0lDQnlaWFIxY200Z1FXSnZjblJEYjI1MGNtOXNiR1Z5TzF4dUlDQjlLQ2s3WEc1Y2JpQWdhV1lnS0hSNWNHVnZaaUJUZVcxaWIyd2dJVDA5SUNkMWJtUmxabWx1WldRbklDWW1JRk41YldKdmJDNTBiMU4wY21sdVoxUmhaeWtnZTF4dUlDQWdJQzh2SUZSb1pYTmxJR0Z5WlNCdVpXTmxjM05oY25rZ2RHOGdiV0ZyWlNCemRYSmxJSFJvWVhRZ2QyVWdaMlYwSUdOdmNuSmxZM1FnYjNWMGNIVjBJR1p2Y2pwY2JpQWdJQ0F2THlCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG5SdlUzUnlhVzVuTG1OaGJHd29ibVYzSUVGaWIzSjBRMjl1ZEhKdmJHeGxjaWdwS1Z4dUlDQWdJRUZpYjNKMFEyOXVkSEp2Ykd4bGNpNXdjbTkwYjNSNWNHVmJVM2x0WW05c0xuUnZVM1J5YVc1blZHRm5YU0E5SUNkQlltOXlkRU52Ym5SeWIyeHNaWEluTzF4dUlDQWdJRUZpYjNKMFUybG5ibUZzTG5CeWIzUnZkSGx3WlZ0VGVXMWliMnd1ZEc5VGRISnBibWRVWVdkZElEMGdKMEZpYjNKMFUybG5ibUZzSnp0Y2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlIQnZiSGxtYVd4c1RtVmxaR1ZrS0hObGJHWXBJSHRjYmlBZ0lDQnBaaUFvYzJWc1ppNWZYMFpQVWtORlgwbE9VMVJCVEV4ZlFVSlBVbFJEVDA1VVVrOU1URVZTWDFCUFRGbEdTVXhNS1NCN1hHNGdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25YMTlHVDFKRFJWOUpUbE5VUVV4TVgwRkNUMUpVUTA5T1ZGSlBURXhGVWw5UVQweFpSa2xNVEQxMGNuVmxJR2x6SUhObGRDd2dkMmxzYkNCbWIzSmpaU0JwYm5OMFlXeHNJSEJ2YkhsbWFXeHNKeWs3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0I5SUM4dklFNXZkR1VnZEdoaGRDQjBhR1VnWENKMWJtWmxkR05vWENJZ2JXbHVhVzFoYkNCbVpYUmphQ0J3YjJ4NVptbHNiQ0JrWldacGJtVnpJR1psZEdOb0tDa2dkMmwwYUc5MWRGeHVJQ0FnSUM4dklHUmxabWx1YVc1bklIZHBibVJ2ZHk1U1pYRjFaWE4wTENCaGJtUWdkR2hwY3lCd2IyeDVabWxzYkNCdVpXVmtJSFJ2SUhkdmNtc2diMjRnZEc5d0lHOW1JSFZ1Wm1WMFkyaGNiaUFnSUNBdkx5QnpieUIwYUdVZ1ltVnNiM2NnWm1WaGRIVnlaU0JrWlhSbFkzUnBiMjRnYm1WbFpITWdkR2hsSUNGelpXeG1Ma0ZpYjNKMFEyOXVkSEp2Ykd4bGNpQndZWEowTGx4dUlDQWdJQzh2SUZSb1pTQlNaWEYxWlhOMExuQnliM1J2ZEhsd1pTQmphR1ZqYXlCcGN5QmhiSE52SUc1bFpXUmxaQ0JpWldOaGRYTmxJRk5oWm1GeWFTQjJaWEp6YVc5dWN5QXhNUzR4TGpKY2JpQWdJQ0F2THlCMWNDQjBieUJoYm1RZ2FXNWpiSFZrYVc1bklERXlMakV1ZUNCb1lYTWdZU0IzYVc1a2IzY3VRV0p2Y25SRGIyNTBjbTlzYkdWeUlIQnlaWE5sYm5RZ1luVjBJSE4wYVd4c1hHNGdJQ0FnTHk4Z1pHOWxjeUJPVDFRZ1kyOXljbVZqZEd4NUlHbHRjR3hsYldWdWRDQmhZbTl5ZEdGaWJHVWdabVYwWTJnNlhHNGdJQ0FnTHk4Z2FIUjBjSE02THk5aWRXZHpMbmRsWW10cGRDNXZjbWN2YzJodmQxOWlkV2N1WTJkcFAybGtQVEUzTkRrNE1DTmpNbHh1WEc1Y2JpQWdJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlITmxiR1l1VW1WeGRXVnpkQ0E5UFQwZ0oyWjFibU4wYVc5dUp5QW1KaUFoYzJWc1ppNVNaWEYxWlhOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVNnbmMybG5ibUZzSnlrZ2ZId2dJWE5sYkdZdVFXSnZjblJEYjI1MGNtOXNiR1Z5TzF4dUlDQjlYRzVjYmlBZ0tHWjFibU4wYVc5dUlDaHpaV3htS1NCN1hHNWNiaUFnSUNCcFppQW9JWEJ2YkhsbWFXeHNUbVZsWkdWa0tITmxiR1lwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjMlZzWmk1QlltOXlkRU52Ym5SeWIyeHNaWElnUFNCQlltOXlkRU52Ym5SeWIyeHNaWEk3WEc0Z0lDQWdjMlZzWmk1QlltOXlkRk5wWjI1aGJDQTlJRUZpYjNKMFUybG5ibUZzTzF4dUlDQjlLU2gwZVhCbGIyWWdjMlZzWmlBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCelpXeG1JRG9nWjJ4dlltRnNLVHRjYmx4dWZTa3BPMXh1SWl4dWRXeHNMQ0l2S2x4dVhHNGdRMjl3ZVhKcFoyaDBJRlJvWlNCRGJHOXpkWEpsSUV4cFluSmhjbmtnUVhWMGFHOXljeTVjYmlCVFVFUllMVXhwWTJWdWMyVXRTV1JsYm5ScFptbGxjam9nUVhCaFkyaGxMVEl1TUZ4dUtpOWNiblpoY2lCaFlUMWNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN6OVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGs2Wm5WdVkzUnBiMjRvWVN4aUxHTXBlMkVoUFVGeWNtRjVMbkJ5YjNSdmRIbHdaU1ltWVNFOVQySnFaV04wTG5CeWIzUnZkSGx3WlNZbUtHRmJZbDA5WXk1MllXeDFaU2w5TEdVOVhDSjFibVJsWm1sdVpXUmNJaUU5ZEhsd1pXOW1JSGRwYm1SdmR5WW1kMmx1Wkc5M1BUMDlkR2hwY3o5MGFHbHpPbHdpZFc1a1pXWnBibVZrWENJaFBYUjVjR1Z2WmlCbmJHOWlZV3dtSm01MWJHd2hQV2RzYjJKaGJEOW5iRzlpWVd3NmRHaHBjenRtZFc1amRHbHZiaUJpWVNoaExHSXBlMmxtS0dJcGUzWmhjaUJqUFdVN1lUMWhMbk53YkdsMEtGd2lMbHdpS1R0bWIzSW9kbUZ5SUdROU1EdGtQR0V1YkdWdVozUm9MVEU3WkNzcktYdDJZWElnWmoxaFcyUmRPMllnYVc0Z1kzeDhLR05iWmwwOWUzMHBPMk05WTF0bVhYMWhQV0ZiWVM1c1pXNW5kR2d0TVYwN1pEMWpXMkZkTzJJOVlpaGtLVHRpSVQxa0ppWnVkV3hzSVQxaUppWmhZU2hqTEdFc2UyTnZibVpwWjNWeVlXSnNaVG9oTUN4M2NtbDBZV0pzWlRvaE1DeDJZV3gxWlRwaWZTbDlmVnh1Wm5WdVkzUnBiMjRnWTJFb1lTbDdkbUZ5SUdJOU1EdHlaWFIxY200Z1puVnVZM1JwYjI0b0tYdHlaWFIxY200Z1lqeGhMbXhsYm1kMGFEOTdaRzl1WlRvaE1TeDJZV3gxWlRwaFcySXJLMTE5T250a2IyNWxPaUV3ZlgxOVpuVnVZM1JwYjI0Z1pHRW9LWHRrWVQxbWRXNWpkR2x2YmlncGUzMDdaUzVUZVcxaWIyeDhmQ2hsTGxONWJXSnZiRDFsWVNsOVpuVnVZM1JwYjI0Z1ptRW9ZU3hpS1h0MGFHbHpMbUU5WVR0aFlTaDBhR2x6TEZ3aVpHVnpZM0pwY0hScGIyNWNJaXg3WTI5dVptbG5kWEpoWW14bE9pRXdMSGR5YVhSaFlteGxPaUV3TEhaaGJIVmxPbUo5S1gxbVlTNXdjbTkwYjNSNWNHVXVkRzlUZEhKcGJtYzlablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdkR2hwY3k1aGZUdDJZWElnWldFOVpuVnVZM1JwYjI0b0tYdG1kVzVqZEdsdmJpQmhLR01wZTJsbUtIUm9hWE1nYVc1emRHRnVZMlZ2WmlCaEtYUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pUZVcxaWIyd2dhWE1nYm05MElHRWdZMjl1YzNSeWRXTjBiM0pjSWlrN2NtVjBkWEp1SUc1bGR5Qm1ZU2hjSW1welkyOXRjRjl6ZVcxaWIyeGZYQ0lyS0dOOGZGd2lYQ0lwSzF3aVgxd2lLMklyS3l4aktYMTJZWElnWWowd08zSmxkSFZ5YmlCaGZTZ3BPMXh1Wm5WdVkzUnBiMjRnYUdFb0tYdGtZU2dwTzNaaGNpQmhQV1V1VTNsdFltOXNMbWwwWlhKaGRHOXlPMkY4ZkNoaFBXVXVVM2x0WW05c0xtbDBaWEpoZEc5eVBXVXVVM2x0WW05c0tGd2lVM2x0WW05c0xtbDBaWEpoZEc5eVhDSXBLVHRjSW1aMWJtTjBhVzl1WENJaFBYUjVjR1Z2WmlCQmNuSmhlUzV3Y205MGIzUjVjR1ZiWVYwbUptRmhLRUZ5Y21GNUxuQnliM1J2ZEhsd1pTeGhMSHRqYjI1bWFXZDFjbUZpYkdVNklUQXNkM0pwZEdGaWJHVTZJVEFzZG1Gc2RXVTZablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdhV0VvWTJFb2RHaHBjeWtwZlgwcE8yaGhQV1oxYm1OMGFXOXVLQ2w3ZlgxbWRXNWpkR2x2YmlCcFlTaGhLWHRvWVNncE8yRTllMjVsZUhRNllYMDdZVnRsTGxONWJXSnZiQzVwZEdWeVlYUnZjbDA5Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnZEdocGMzMDdjbVYwZFhKdUlHRjlYRzVtZFc1amRHbHZiaUJxWVNoaExHSXBlMmhoS0NrN1lTQnBibk4wWVc1alpXOW1JRk4wY21sdVp5WW1LR0VyUFZ3aVhDSXBPM1poY2lCalBUQXNaRDE3Ym1WNGREcG1kVzVqZEdsdmJpZ3BlMmxtS0dNOFlTNXNaVzVuZEdncGUzWmhjaUJtUFdNckt6dHlaWFIxY201N2RtRnNkV1U2WWlobUxHRmJabDBwTEdSdmJtVTZJVEY5ZldRdWJtVjRkRDFtZFc1amRHbHZiaWdwZTNKbGRIVnlibnRrYjI1bE9pRXdMSFpoYkhWbE9uWnZhV1FnTUgxOU8zSmxkSFZ5YmlCa0xtNWxlSFFvS1gxOU8yUmJVM2x0WW05c0xtbDBaWEpoZEc5eVhUMW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQmtmVHR5WlhSMWNtNGdaSDFpWVNoY0lrRnljbUY1TG5CeWIzUnZkSGx3WlM1bGJuUnlhV1Z6WENJc1puVnVZM1JwYjI0b1lTbDdjbVYwZFhKdUlHRS9ZVHBtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJxWVNoMGFHbHpMR1oxYm1OMGFXOXVLR0lzWXlsN2NtVjBkWEp1VzJJc1kxMTlLWDE5S1R0MllYSWdhMkU5ZEdocGMzeDhjMlZzWmp0Y2JtWjFibU4wYVc5dUlHY29ZU3hpTEdNcGUyRTlZUzV6Y0d4cGRDaGNJaTVjSWlrN1l6MWpmSHhyWVR0aFd6QmRhVzRnWTN4OFhDSjFibVJsWm1sdVpXUmNJajA5ZEhsd1pXOW1JR011WlhobFkxTmpjbWx3ZEh4OFl5NWxlR1ZqVTJOeWFYQjBLRndpZG1GeUlGd2lLMkZiTUYwcE8yWnZjaWgyWVhJZ1pEdGhMbXhsYm1kMGFDWW1LR1E5WVM1emFHbG1kQ2dwS1RzcFlTNXNaVzVuZEdoOGZIWnZhV1FnTUQwOVBXSS9ZMXRrWFNZbVkxdGtYU0U5UFU5aWFtVmpkQzV3Y205MGIzUjVjR1ZiWkYwL1l6MWpXMlJkT21NOVkxdGtYVDE3ZlRwalcyUmRQV0o5WEc1bWRXNWpkR2x2YmlCcktHRXBlM1poY2lCaVBYUjVjR1Z2WmlCaE8ybG1LRndpYjJKcVpXTjBYQ0k5UFdJcGFXWW9ZU2w3YVdZb1lTQnBibk4wWVc1alpXOW1JRUZ5Y21GNUtYSmxkSFZ5Ymx3aVlYSnlZWGxjSWp0cFppaGhJR2x1YzNSaGJtTmxiMllnVDJKcVpXTjBLWEpsZEhWeWJpQmlPM1poY2lCalBVOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1jdVkyRnNiQ2hoS1R0cFppaGNJbHR2WW1wbFkzUWdWMmx1Wkc5M1hWd2lQVDFqS1hKbGRIVnlibHdpYjJKcVpXTjBYQ0k3YVdZb1hDSmJiMkpxWldOMElFRnljbUY1WFZ3aVBUMWpmSHhjSW01MWJXSmxjbHdpUFQxMGVYQmxiMllnWVM1c1pXNW5kR2dtSmx3aWRXNWtaV1pwYm1Wa1hDSWhQWFI1Y0dWdlppQmhMbk53YkdsalpTWW1YQ0oxYm1SbFptbHVaV1JjSWlFOWRIbHdaVzltSUdFdWNISnZjR1Z5ZEhsSmMwVnVkVzFsY21GaWJHVW1KaUZoTG5CeWIzQmxjblI1U1hORmJuVnRaWEpoWW14bEtGd2ljM0JzYVdObFhDSXBLWEpsZEhWeWJsd2lZWEp5WVhsY0lqdHBaaWhjSWx0dlltcGxZM1FnUm5WdVkzUnBiMjVkWENJOVBXTjhmRndpZFc1a1pXWnBibVZrWENJaFBYUjVjR1Z2WmlCaExtTmhiR3dtSmx3aWRXNWtaV1pwYm1Wa1hDSWhQWFI1Y0dWdlppQmhMbkJ5YjNCbGNuUjVTWE5GYm5WdFpYSmhZbXhsSmlZaFlTNXdjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaU2hjSW1OaGJHeGNJaWtwY21WMGRYSnVYQ0ptZFc1amRHbHZibHdpZldWc2MyVWdjbVYwZFhKdVhDSnVkV3hzWENJN1hHNWxiSE5sSUdsbUtGd2lablZ1WTNScGIyNWNJajA5WWlZbVhDSjFibVJsWm1sdVpXUmNJajA5ZEhsd1pXOW1JR0V1WTJGc2JDbHlaWFIxY201Y0ltOWlhbVZqZEZ3aU8zSmxkSFZ5YmlCaWZXWjFibU4wYVc5dUlHeGhLR0VwZTNaaGNpQmlQWFI1Y0dWdlppQmhPM0psZEhWeWJsd2liMkpxWldOMFhDSTlQV0ltSm01MWJHd2hQV0Y4ZkZ3aVpuVnVZM1JwYjI1Y0lqMDlZbjFtZFc1amRHbHZiaUJ0WVNoaExHSXNZeWw3WnloaExHSXNZeWw5Wm5WdVkzUnBiMjRnYm1Fb1lTeGlLWHRtZFc1amRHbHZiaUJqS0NsN2ZXTXVjSEp2ZEc5MGVYQmxQV0l1Y0hKdmRHOTBlWEJsTzJFdWNISnZkRzkwZVhCbFBXNWxkeUJqTzJFdWNISnZkRzkwZVhCbExtTnZibk4wY25WamRHOXlQV0Y5TzNaaGNpQnZZVDFjSW1OdmJuTjBjblZqZEc5eUlHaGhjMDkzYmxCeWIzQmxjblI1SUdselVISnZkRzkwZVhCbFQyWWdjSEp2Y0dWeWRIbEpjMFZ1ZFcxbGNtRmliR1VnZEc5TWIyTmhiR1ZUZEhKcGJtY2dkRzlUZEhKcGJtY2dkbUZzZFdWUFpsd2lMbk53YkdsMEtGd2lJRndpS1R0bWRXNWpkR2x2YmlCd1lTaGhMR0lwZTJadmNpaDJZWElnWXl4a0xHWTlNVHRtUEdGeVozVnRaVzUwY3k1c1pXNW5kR2c3WmlzcktYdGtQV0Z5WjNWdFpXNTBjMXRtWFR0bWIzSW9ZeUJwYmlCa0tXRmJZMTA5WkZ0alhUdG1iM0lvZG1GeUlHZzlNRHRvUEc5aExteGxibWQwYUR0b0t5c3BZejF2WVZ0b1hTeFBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHd29aQ3hqS1NZbUtHRmJZMTA5WkZ0alhTbDlmVHQyWVhJZ2NXRTlRWEp5WVhrdWNISnZkRzkwZVhCbExtWnZja1ZoWTJnL1puVnVZM1JwYjI0b1lTeGlLWHRCY25KaGVTNXdjbTkwYjNSNWNHVXVabTl5UldGamFDNWpZV3hzS0dFc1lpeDJiMmxrSURBcGZUcG1kVzVqZEdsdmJpaGhMR0lwZTJadmNpaDJZWElnWXoxaExteGxibWQwYUN4a1BWd2ljM1J5YVc1blhDSTlQVDEwZVhCbGIyWWdZVDloTG5Od2JHbDBLRndpWENJcE9tRXNaajB3TzJZOFl6dG1LeXNwWmlCcGJpQmtKaVppTG1OaGJHd29kbTlwWkNBd0xHUmJabDBzWml4aEtYMHNiRDFCY25KaGVTNXdjbTkwYjNSNWNHVXViV0Z3UDJaMWJtTjBhVzl1S0dFc1lpbDdjbVYwZFhKdUlFRnljbUY1TG5CeWIzUnZkSGx3WlM1dFlYQXVZMkZzYkNoaExHSXNkbTlwWkNBd0tYMDZablZ1WTNScGIyNG9ZU3hpS1h0bWIzSW9kbUZ5SUdNOVlTNXNaVzVuZEdnc1pEMUJjbkpoZVNoaktTeG1QVndpYzNSeWFXNW5YQ0k5UFQxMGVYQmxiMllnWVQ5aExuTndiR2wwS0Z3aVhDSXBPbUVzYUQwd08yZzhZenRvS3lzcGFDQnBiaUJtSmlZb1pGdG9YVDFpTG1OaGJHd29kbTlwWkNBd0xHWmJhRjBzYUN4aEtTazdjbVYwZFhKdUlHUjlPMXh1Wm5WdVkzUnBiMjRnY21Fb1lTeGlMR01wZTNKbGRIVnliaUF5UGoxaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvUDBGeWNtRjVMbkJ5YjNSdmRIbHdaUzV6YkdsalpTNWpZV3hzS0dFc1lpazZRWEp5WVhrdWNISnZkRzkwZVhCbExuTnNhV05sTG1OaGJHd29ZU3hpTEdNcGZUdG1kVzVqZEdsdmJpQnpZU2hoTEdJc1l5eGtLWHQyWVhJZ1pqMWNJa0Z6YzJWeWRHbHZiaUJtWVdsc1pXUmNJanRwWmloaktYdG1LejFjSWpvZ1hDSXJZenQyWVhJZ2FEMWtmV1ZzYzJVZ1lTWW1LR1lyUFZ3aU9pQmNJaXRoTEdnOVlpazdkR2h5YjNjZ1JYSnliM0lvWml4b2ZIeGJYU2s3ZldaMWJtTjBhVzl1SUc0b1lTeGlMR01wZTJadmNpaDJZWElnWkQxYlhTeG1QVEk3Wmp4aGNtZDFiV1Z1ZEhNdWJHVnVaM1JvT3lzclppbGtXMll0TWwwOVlYSm5kVzFsYm5SelcyWmRPMkY4ZkhOaEtGd2lYQ0lzYm5Wc2JDeGlMR1FwTzNKbGRIVnliaUJoZldaMWJtTjBhVzl1SUhSaEtHRXNZaXhqS1h0bWIzSW9kbUZ5SUdROVcxMHNaajB5TzJZOFlYSm5kVzFsYm5SekxteGxibWQwYURzcksyWXBaRnRtTFRKZFBXRnlaM1Z0Wlc1MGMxdG1YVHRjSW5OMGNtbHVaMXdpSVQwOWRIbHdaVzltSUdFbUpuTmhLRndpUlhod1pXTjBaV1FnYzNSeWFXNW5JR0oxZENCbmIzUWdKWE02SUNWekxsd2lMRnRyS0dFcExHRmRMR0lzWkNsOVhHNW1kVzVqZEdsdmJpQjFZU2hoTEdJc1l5bDdabTl5S0haaGNpQmtQVnRkTEdZOU1qdG1QR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZzdLeXRtS1dSYlppMHlYVDFoY21kMWJXVnVkSE5iWmwwN1FYSnlZWGt1YVhOQmNuSmhlU2hoS1h4OGMyRW9YQ0pGZUhCbFkzUmxaQ0JoY25KaGVTQmlkWFFnWjI5MElDVnpPaUFsY3k1Y0lpeGJheWhoS1N4aFhTeGlMR1FwZldaMWJtTjBhVzl1SUhBb1lTeGlLWHRtYjNJb2RtRnlJR005VzEwc1pEMHhPMlE4WVhKbmRXMWxiblJ6TG14bGJtZDBhRHNySzJRcFkxdGtMVEZkUFdGeVozVnRaVzUwYzF0a1hUdDBhSEp2ZHlCRmNuSnZjaWhjSWtaaGFXeDFjbVZjSWlzb1lUOWNJam9nWENJcllUcGNJbHdpS1N4aktUdDlablZ1WTNScGIyNGdjU2hoTEdJc1l5eGtLWHRtYjNJb2RtRnlJR1k5VzEwc2FEMHpPMmc4WVhKbmRXMWxiblJ6TG14bGJtZDBhRHNySzJncFpsdG9MVE5kUFdGeVozVnRaVzUwYzF0b1hUdGhJR2x1YzNSaGJtTmxiMllnWW54OGMyRW9YQ0pGZUhCbFkzUmxaQ0JwYm5OMFlXNWpaVzltSUNWeklHSjFkQ0JuYjNRZ0pYTXVYQ0lzVzNaaEtHSXBMSFpoS0dFcFhTeGpMR1lwZlZ4dVpuVnVZM1JwYjI0Z2RtRW9ZU2w3Y21WMGRYSnVJR0VnYVc1emRHRnVZMlZ2WmlCR2RXNWpkR2x2Ymo5aExtUnBjM0JzWVhsT1lXMWxmSHhoTG01aGJXVjhmRndpZFc1cmJtOTNiaUIwZVhCbElHNWhiV1ZjSWpwaElHbHVjM1JoYm1ObGIyWWdUMkpxWldOMFAyRXVZMjl1YzNSeWRXTjBiM0l1WkdsemNHeGhlVTVoYldWOGZHRXVZMjl1YzNSeWRXTjBiM0l1Ym1GdFpYeDhUMkpxWldOMExuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp5NWpZV3hzS0dFcE9tNTFiR3c5UFQxaFAxd2liblZzYkZ3aU9uUjVjR1Z2WmlCaGZUdG1kVzVqZEdsdmJpQnlLR0VzWWlsN2RHaHBjeTVqUFdFN2RHaHBjeTVpUFdJN2RHaHBjeTVoUFh0OU8zUm9hWE11WVhKeVEyeGxZVzQ5SVRBN2FXWW9NRHgwYUdsekxtTXViR1Z1WjNSb0tYdG1iM0lvWVQwd08yRThkR2hwY3k1akxteGxibWQwYUR0aEt5c3BlMkk5ZEdocGN5NWpXMkZkTzNaaGNpQmpQV0piTUYwN2RHaHBjeTVoVzJNdWRHOVRkSEpwYm1jb0tWMDlibVYzSUhkaEtHTXNZbHN4WFNsOWRHaHBjeTVoY25KRGJHVmhiajBoTUgxOVp5aGNJbXB6Y0dJdVRXRndYQ0lzY2l4MmIybGtJREFwTzF4dWNpNXdjbTkwYjNSNWNHVXVaejFtZFc1amRHbHZiaWdwZTJsbUtIUm9hWE11WVhKeVEyeGxZVzRwZTJsbUtIUm9hWE11WWlsN2RtRnlJR0U5ZEdocGN5NWhMR0k3Wm05eUtHSWdhVzRnWVNscFppaFBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHd29ZU3hpS1NsN2RtRnlJR005WVZ0aVhTNWhPMk1tSm1NdVp5Z3BmWDE5Wld4elpYdDBhR2x6TG1NdWJHVnVaM1JvUFRBN1lUMTFLSFJvYVhNcE8yRXVjMjl5ZENncE8yWnZjaWhpUFRBN1lqeGhMbXhsYm1kMGFEdGlLeXNwZTNaaGNpQmtQWFJvYVhNdVlWdGhXMkpkWFRzb1l6MWtMbUVwSmlaakxtY29LVHQwYUdsekxtTXVjSFZ6YUNoYlpDNXJaWGtzWkM1MllXeDFaVjBwZlhSb2FYTXVZWEp5UTJ4bFlXNDlJVEI5Y21WMGRYSnVJSFJvYVhNdVkzMDdjaTV3Y205MGIzUjVjR1V1ZEc5QmNuSmhlVDF5TG5CeWIzUnZkSGx3WlM1bk8xeHVjaTV3Y205MGIzUjVjR1V1VFdNOVpuVnVZM1JwYjI0b1lTeGlLWHRtYjNJb2RtRnlJR005ZEdocGN5NW5LQ2tzWkQxYlhTeG1QVEE3Wmp4akxteGxibWQwYUR0bUt5c3BlM1poY2lCb1BYUm9hWE11WVZ0alcyWmRXekJkTG5SdlUzUnlhVzVuS0NsZE8zWW9kR2hwY3l4b0tUdDJZWElnYlQxb0xtRTdiVDhvYmloaUtTeGtMbkIxYzJnb1cyZ3VhMlY1TEdJb1lTeHRLVjBwS1Rwa0xuQjFjMmdvVzJndWEyVjVMR2d1ZG1Gc2RXVmRLWDF5WlhSMWNtNGdaSDA3Y2k1d2NtOTBiM1I1Y0dVdWRHOVBZbXBsWTNROWNpNXdjbTkwYjNSNWNHVXVUV003Y2k1bWNtOXRUMkpxWldOMFBXWjFibU4wYVc5dUtHRXNZaXhqS1h0aVBXNWxkeUJ5S0Z0ZExHSXBPMlp2Y2loMllYSWdaRDB3TzJROFlTNXNaVzVuZEdnN1pDc3JLWHQyWVhJZ1pqMWhXMlJkV3pCZExHZzlZeWhoVzJSZFd6RmRLVHRpTG5ObGRDaG1MR2dwZlhKbGRIVnliaUJpZlR0bWRXNWpkR2x2YmlCM0tHRXBlM1JvYVhNdVlUMHdPM1JvYVhNdVlqMWhmWGN1Y0hKdmRHOTBlWEJsTG01bGVIUTlablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdkR2hwY3k1aFBIUm9hWE11WWk1c1pXNW5kR2cvZTJSdmJtVTZJVEVzZG1Gc2RXVTZkR2hwY3k1aVczUm9hWE11WVNzclhYMDZlMlJ2Ym1VNklUQXNkbUZzZFdVNmRtOXBaQ0F3ZlgwN1hHNWNJblZ1WkdWbWFXNWxaRndpSVQxMGVYQmxiMllnVTNsdFltOXNKaVlvZHk1d2NtOTBiM1I1Y0dWYlUzbHRZbTlzTG1sMFpYSmhkRzl5WFQxbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCMGFHbHpmU2s3Y2k1d2NtOTBiM1I1Y0dVdVNtSTlablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdkU2gwYUdsektTNXNaVzVuZEdoOU8zSXVjSEp2ZEc5MGVYQmxMbWRsZEV4bGJtZDBhRDF5TG5CeWIzUnZkSGx3WlM1S1lqdHlMbkJ5YjNSdmRIbHdaUzVqYkdWaGNqMW1kVzVqZEdsdmJpZ3BlM1JvYVhNdVlUMTdmVHQwYUdsekxtRnlja05zWldGdVBTRXhmVHR5TG5CeWIzUnZkSGx3WlM1amJHVmhjajF5TG5CeWIzUnZkSGx3WlM1amJHVmhjanR5TG5CeWIzUnZkSGx3WlM1RFlqMW1kVzVqZEdsdmJpaGhLWHRoUFdFdWRHOVRkSEpwYm1jb0tUdDJZWElnWWoxMGFHbHpMbUV1YUdGelQzZHVVSEp2Y0dWeWRIa29ZU2s3WkdWc1pYUmxJSFJvYVhNdVlWdGhYVHQwYUdsekxtRnlja05zWldGdVBTRXhPM0psZEhWeWJpQmlmVHR5TG5CeWIzUnZkSGx3WlM1a1pXdzljaTV3Y205MGIzUjVjR1V1UTJJN1hHNXlMbkJ5YjNSdmRIbHdaUzVGWWoxbWRXNWpkR2x2YmlncGUzWmhjaUJoUFZ0ZExHSTlkU2gwYUdsektUdGlMbk52Y25Rb0tUdG1iM0lvZG1GeUlHTTlNRHRqUEdJdWJHVnVaM1JvTzJNckt5bDdkbUZ5SUdROWRHaHBjeTVoVzJKYlkxMWRPMkV1Y0hWemFDaGJaQzVyWlhrc1pDNTJZV3gxWlYwcGZYSmxkSFZ5YmlCaGZUdHlMbkJ5YjNSdmRIbHdaUzVuWlhSRmJuUnllVXhwYzNROWNpNXdjbTkwYjNSNWNHVXVSV0k3Y2k1d2NtOTBiM1I1Y0dVdVpXNTBjbWxsY3oxbWRXNWpkR2x2YmlncGUzWmhjaUJoUFZ0ZExHSTlkU2gwYUdsektUdGlMbk52Y25Rb0tUdG1iM0lvZG1GeUlHTTlNRHRqUEdJdWJHVnVaM1JvTzJNckt5bDdkbUZ5SUdROWRHaHBjeTVoVzJKYlkxMWRPMkV1Y0hWemFDaGJaQzVyWlhrc2RpaDBhR2x6TEdRcFhTbDljbVYwZFhKdUlHNWxkeUIzS0dFcGZUdHlMbkJ5YjNSdmRIbHdaUzVsYm5SeWFXVnpQWEl1Y0hKdmRHOTBlWEJsTG1WdWRISnBaWE03Y2k1d2NtOTBiM1I1Y0dVdWEyVjVjejFtZFc1amRHbHZiaWdwZTNaaGNpQmhQVnRkTEdJOWRTaDBhR2x6S1R0aUxuTnZjblFvS1R0bWIzSW9kbUZ5SUdNOU1EdGpQR0l1YkdWdVozUm9PMk1yS3lsaExuQjFjMmdvZEdocGN5NWhXMkpiWTExZExtdGxlU2s3Y21WMGRYSnVJRzVsZHlCM0tHRXBmVHRjYm5JdWNISnZkRzkwZVhCbExtdGxlWE05Y2k1d2NtOTBiM1I1Y0dVdWEyVjVjenR5TG5CeWIzUnZkSGx3WlM1MllXeDFaWE05Wm5WdVkzUnBiMjRvS1h0MllYSWdZVDFiWFN4aVBYVW9kR2hwY3lrN1lpNXpiM0owS0NrN1ptOXlLSFpoY2lCalBUQTdZenhpTG14bGJtZDBhRHRqS3lzcFlTNXdkWE5vS0hZb2RHaHBjeXgwYUdsekxtRmJZbHRqWFYwcEtUdHlaWFIxY200Z2JtVjNJSGNvWVNsOU8zSXVjSEp2ZEc5MGVYQmxMblpoYkhWbGN6MXlMbkJ5YjNSdmRIbHdaUzUyWVd4MVpYTTdjaTV3Y205MGIzUjVjR1V1Wm05eVJXRmphRDFtZFc1amRHbHZiaWhoTEdJcGUzWmhjaUJqUFhVb2RHaHBjeWs3WXk1emIzSjBLQ2s3Wm05eUtIWmhjaUJrUFRBN1pEeGpMbXhsYm1kMGFEdGtLeXNwZTNaaGNpQm1QWFJvYVhNdVlWdGpXMlJkWFR0aExtTmhiR3dvWWl4MktIUm9hWE1zWmlrc1ppNXJaWGtzZEdocGN5bDlmVHR5TG5CeWIzUnZkSGx3WlM1bWIzSkZZV05vUFhJdWNISnZkRzkwZVhCbExtWnZja1ZoWTJnN1hHNXlMbkJ5YjNSdmRIbHdaUzV6WlhROVpuVnVZM1JwYjI0b1lTeGlLWHQyWVhJZ1l6MXVaWGNnZDJFb1lTazdkR2hwY3k1aVB5aGpMbUU5WWl4akxuWmhiSFZsUFdJdVp5Z3BLVHBqTG5aaGJIVmxQV0k3ZEdocGN5NWhXMkV1ZEc5VGRISnBibWNvS1YwOVl6dDBhR2x6TG1GeWNrTnNaV0Z1UFNFeE8zSmxkSFZ5YmlCMGFHbHpmVHR5TG5CeWIzUnZkSGx3WlM1elpYUTljaTV3Y205MGIzUjVjR1V1YzJWME8yWjFibU4wYVc5dUlIWW9ZU3hpS1h0eVpYUjFjbTRnWVM1aVB5aGlMbUY4ZkNoaUxtRTlibVYzSUdFdVlpaGlMblpoYkhWbEtTa3NZaTVoS1RwaUxuWmhiSFZsZlhJdWNISnZkRzkwZVhCbExtZGxkRDFtZFc1amRHbHZiaWhoS1h0cFppaGhQWFJvYVhNdVlWdGhMblJ2VTNSeWFXNW5LQ2xkS1hKbGRIVnliaUIyS0hSb2FYTXNZU2w5TzNJdWNISnZkRzkwZVhCbExtZGxkRDF5TG5CeWIzUnZkSGx3WlM1blpYUTdjaTV3Y205MGIzUjVjR1V1YUdGelBXWjFibU4wYVc5dUtHRXBlM0psZEhWeWJpQmhMblJ2VTNSeWFXNW5LQ2xwYmlCMGFHbHpMbUY5TzNJdWNISnZkRzkwZVhCbExtaGhjejF5TG5CeWIzUnZkSGx3WlM1b1lYTTdYRzV5TG5CeWIzUnZkSGx3WlM1S1l6MW1kVzVqZEdsdmJpaGhMR0lzWXl4a0xHWXBlM1poY2lCb1BYVW9kR2hwY3lrN2FDNXpiM0owS0NrN1ptOXlLSFpoY2lCdFBUQTdiVHhvTG14bGJtZDBhRHR0S3lzcGUzWmhjaUIwUFhSb2FYTXVZVnRvVzIxZFhUdGlMbFpoS0dFcE8yTXVZMkZzYkNoaUxERXNkQzVyWlhrcE8zUm9hWE11WWo5a0xtTmhiR3dvWWl3eUxIWW9kR2hwY3l4MEtTeG1LVHBrTG1OaGJHd29ZaXd5TEhRdWRtRnNkV1VwTzJJdVdXRW9LWDE5TzNJdWNISnZkRzkwZVhCbExuTmxjbWxoYkdsNlpVSnBibUZ5ZVQxeUxuQnliM1J2ZEhsd1pTNUtZenR5TG1SbGMyVnlhV0ZzYVhwbFFtbHVZWEo1UFdaMWJtTjBhVzl1S0dFc1lpeGpMR1FzWml4b0xHMHBlMlp2Y2lnN1lpNXZZU2dwSmlZaFlpNWlZaWdwT3lsN2RtRnlJSFE5WWk1ak96RTlQWFEvYUQxakxtTmhiR3dvWWlrNk1qMDlkQ1ltS0dFdVlqOG9iaWhtS1N4dGZId29iVDF1WlhjZ1lTNWlLU3hrTG1OaGJHd29ZaXh0TEdZcEtUcHRQV1F1WTJGc2JDaGlLU2w5YmloMmIybGtJREFoUFdncE8yNG9kbTlwWkNBd0lUMXRLVHRoTG5ObGRDaG9MRzBwZlR0Y2JtWjFibU4wYVc5dUlIVW9ZU2w3WVQxaExtRTdkbUZ5SUdJOVcxMHNZenRtYjNJb1l5QnBiaUJoS1U5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNoaExHTXBKaVppTG5CMWMyZ29ZeWs3Y21WMGRYSnVJR0o5Wm5WdVkzUnBiMjRnZDJFb1lTeGlLWHQwYUdsekxtdGxlVDFoTzNSb2FYTXVkbUZzZFdVOVlqdDBhR2x6TG1FOWRtOXBaQ0F3ZlR0bWRXNWpkR2x2YmlCNFlTaGhLWHRwWmlnNE1Ua3lQajFoTG14bGJtZDBhQ2x5WlhSMWNtNGdVM1J5YVc1bkxtWnliMjFEYUdGeVEyOWtaUzVoY0hCc2VTaHVkV3hzTEdFcE8yWnZjaWgyWVhJZ1lqMWNJbHdpTEdNOU1EdGpQR0V1YkdWdVozUm9PMk1yUFRneE9USXBZaXM5VTNSeWFXNW5MbVp5YjIxRGFHRnlRMjlrWlM1aGNIQnNlU2h1ZFd4c0xISmhLR0VzWXl4akt6Z3hPVElwS1R0eVpYUjFjbTRnWW4wN2RtRnlJSGxoUFh0Y0lseGNlREF3WENJNlhDSmNYRnhjTUZ3aUxGd2lYRnhpWENJNlhDSmNYRnhjWWx3aUxGd2lYRnhtWENJNlhDSmNYRnhjWmx3aUxGd2lYRnh1WENJNlhDSmNYRnhjYmx3aUxGd2lYRnh5WENJNlhDSmNYRnhjY2x3aUxGd2lYRngwWENJNlhDSmNYRnhjZEZ3aUxGd2lYRng0TUVKY0lqcGNJbHhjWEZ4NE1FSmNJaXduWENJbk9pZGNYRnhjWENJbkxGd2lYRnhjWEZ3aU9sd2lYRnhjWEZ4Y1hGeGNJaXhjSWp4Y0lqcGNJbHhjWEZ4MU1EQXpRMXdpZlN4NllUMTdYQ0luWENJNlhDSmNYRnhjSjF3aWZUdDJZWElnUVdFOWUzMHNlRDF1ZFd4c08yWjFibU4wYVc5dUlFSmhLR0VzWWlsN2RtOXBaQ0F3UFQwOVlpWW1LR0k5TUNrN1EyRW9LVHRpUFVGaFcySmRPMlp2Y2loMllYSWdZejFiWFN4a1BUQTdaRHhoTG14bGJtZDBhRHRrS3owektYdDJZWElnWmoxaFcyUmRMR2c5WkNzeFBHRXViR1Z1WjNSb0xHMDlhRDloVzJRck1WMDZNQ3gwUFdRck1qeGhMbXhsYm1kMGFDeENQWFEvWVZ0a0t6SmRPakFzVFQxbVBqNHlPMlk5S0dZbU15azhQRFI4YlQ0K05EdHRQU2h0SmpFMUtUdzhNbnhDUGo0Mk8wSW1QVFl6TzNSOGZDaENQVFkwTEdoOGZDaHRQVFkwS1NrN1l5NXdkWE5vS0dKYlRWMHNZbHRtWFN4aVcyMWRmSHhjSWx3aUxHSmJRbDE4ZkZ3aVhDSXBmWEpsZEhWeWJpQmpMbXB2YVc0b1hDSmNJaWw5Wm5WdVkzUnBiMjRnUkdFb1lTbDdkbUZ5SUdJOVlTNXNaVzVuZEdnc1l6MHpLbUl2TkR0akpUTS9ZejFOWVhSb0xtWnNiMjl5S0dNcE9pMHhJVDFjSWowdVhDSXVhVzVrWlhoUFppaGhXMkl0TVYwcEppWW9ZejB0TVNFOVhDSTlMbHdpTG1sdVpHVjRUMllvWVZ0aUxUSmRLVDlqTFRJNll5MHhLVHQyWVhJZ1pEMXVaWGNnVldsdWREaEJjbkpoZVNoaktTeG1QVEE3UldFb1lTeG1kVzVqZEdsdmJpaG9LWHRrVzJZcksxMDlhSDBwTzNKbGRIVnliaUJrTG5OMVltRnljbUY1S0RBc1ppbDlYRzVtZFc1amRHbHZiaUJGWVNoaExHSXBlMloxYm1OMGFXOXVJR01vUWlsN1ptOXlLRHRrUEdFdWJHVnVaM1JvT3lsN2RtRnlJRTA5WVM1amFHRnlRWFFvWkNzcktTeE1ZVDE0VzAxZE8ybG1LRzUxYkd3aFBVeGhLWEpsZEhWeWJpQk1ZVHRwWmlnaEwxNWJYRnh6WEZ4NFlUQmRLaVF2TG5SbGMzUW9UU2twZEdoeWIzY2dSWEp5YjNJb1hDSlZibXR1YjNkdUlHSmhjMlUyTkNCbGJtTnZaR2x1WnlCaGRDQmphR0Z5T2lCY0lpdE5LVHQ5Y21WMGRYSnVJRUo5UTJFb0tUdG1iM0lvZG1GeUlHUTlNRHM3S1h0MllYSWdaajFqS0MweEtTeG9QV01vTUNrc2JUMWpLRFkwS1N4MFBXTW9OalFwTzJsbUtEWTBQVDA5ZENZbUxURTlQVDFtS1dKeVpXRnJPMklvWmp3OE1ueG9QajQwS1RzMk5DRTliU1ltS0dJb2FEdzhOQ1l5TkRCOGJUNCtNaWtzTmpRaFBYUW1KbUlvYlR3OE5pWXhPVEo4ZENrcGZYMWNibVoxYm1OMGFXOXVJRU5oS0NsN2FXWW9JWGdwZTNnOWUzMDdabTl5S0haaGNpQmhQVndpUVVKRFJFVkdSMGhKU2t0TVRVNVBVRkZTVTFSVlZsZFlXVnBoWW1Oa1pXWm5hR2xxYTJ4dGJtOXdjWEp6ZEhWMmQzaDVlakF4TWpNME5UWTNPRGxjSWk1emNHeHBkQ2hjSWx3aUtTeGlQVnRjSWlzdlBWd2lMRndpS3k5Y0lpeGNJaTFmUFZ3aUxGd2lMVjh1WENJc1hDSXRYMXdpWFN4alBUQTdOVDVqTzJNckt5bDdkbUZ5SUdROVlTNWpiMjVqWVhRb1lsdGpYUzV6Y0d4cGRDaGNJbHdpS1NrN1FXRmJZMTA5WkR0bWIzSW9kbUZ5SUdZOU1EdG1QR1F1YkdWdVozUm9PMllyS3lsN2RtRnlJR2c5WkZ0bVhUdDJiMmxrSURBOVBUMTRXMmhkSmlZb2VGdG9YVDFtS1gxOWZYMDdaeWhjSW1wemNHSXVRMjl1YzNSQ2FXNWhjbmxOWlhOellXZGxYQ0lzWm5WdVkzUnBiMjRvS1h0OUxIWnZhV1FnTUNrN1p5aGNJbXB6Y0dJdVFtbHVZWEo1VFdWemMyRm5aVndpTEdaMWJtTjBhVzl1S0NsN2ZTeDJiMmxrSURBcE8yY29YQ0pxYzNCaUxrSnBibUZ5ZVVOdmJuTjBZVzUwY3k1R2FXVnNaRlI1Y0dWY0lpeDdlV0k2TFRFc1pXVTZNU3hHVEU5QlZEb3lMR3RsT2pNc2RHVTZOQ3hxWlRvMUxIaGlPallzZDJJNk55eENUMDlNT2pnc2NtVTZPU3hwWlRveE1DeHNaVG94TVN4alpUb3hNaXh6WlRveE15eG5aVG94TkN4dFpUb3hOU3h1WlRveE5peHZaVG94Tnl4d1pUb3hPQ3hvWlRvek1DeDJaVG96TVgwc2RtOXBaQ0F3S1R0bktGd2lhbk53WWk1Q2FXNWhjbmxEYjI1emRHRnVkSE11VjJseVpWUjVjR1ZjSWl4N2VXSTZMVEVzZFdVNk1DeDRZam94TEdSbE9qSXNjV1U2TXl4bVpUbzBMSGRpT2pWOUxIWnZhV1FnTUNrN1hHNW5LRndpYW5Od1lpNUNhVzVoY25sRGIyNXpkR0Z1ZEhNdVJtbGxiR1JVZVhCbFZHOVhhWEpsVkhsd1pWd2lMR1oxYm1OMGFXOXVLR0VwZTNOM2FYUmphQ2hoS1h0allYTmxJRFU2WTJGelpTQXpPbU5oYzJVZ01UTTZZMkZ6WlNBME9tTmhjMlVnTVRjNlkyRnpaU0F4T0RwallYTmxJRGc2WTJGelpTQXhORHBqWVhObElETXhPbkpsZEhWeWJpQXdPMk5oYzJVZ01UcGpZWE5sSURZNlkyRnpaU0F4TmpwallYTmxJRE13T25KbGRIVnliaUF4TzJOaGMyVWdPVHBqWVhObElERXhPbU5oYzJVZ01USTZjbVYwZFhKdUlESTdZMkZ6WlNBeU9tTmhjMlVnTnpwallYTmxJREUxT25KbGRIVnliaUExTzJSbFptRjFiSFE2Y21WMGRYSnVMVEY5ZlN4MmIybGtJREFwTzJjb1hDSnFjM0JpTGtKcGJtRnllVU52Ym5OMFlXNTBjeTVKVGxaQlRFbEVYMFpKUlV4RVgwNVZUVUpGVWx3aUxDMHhMSFp2YVdRZ01DazdaeWhjSW1wemNHSXVRbWx1WVhKNVEyOXVjM1JoYm5SekxrWk1UMEZVTXpKZlJWQlRYQ0lzTVM0ME1ERXlPVGcwTmpRek1qUTRNVGRGTFRRMUxIWnZhV1FnTUNrN1p5aGNJbXB6Y0dJdVFtbHVZWEo1UTI5dWMzUmhiblJ6TGtaTVQwRlVNekpmVFVsT1hDSXNNUzR4TnpVME9UUXpOVEE0TWpJeU9EYzFSUzB6T0N4MmIybGtJREFwTzF4dVp5aGNJbXB6Y0dJdVFtbHVZWEo1UTI5dWMzUmhiblJ6TGtaTVQwRlVNekpmVFVGWVhDSXNNeTQwTURJNE1qTTBOall6T0RVeU9EZzJSVE00TEhadmFXUWdNQ2s3WnloY0ltcHpjR0l1UW1sdVlYSjVRMjl1YzNSaGJuUnpMa1pNVDBGVU5qUmZSVkJUWENJc05DNDVSUzB6TWpRc2RtOXBaQ0F3S1R0bktGd2lhbk53WWk1Q2FXNWhjbmxEYjI1emRHRnVkSE11Umt4UFFWUTJORjlOU1U1Y0lpd3lMakl5TlRBM016ZzFPRFV3TnpJd01UUkZMVE13T0N4MmIybGtJREFwTzJjb1hDSnFjM0JpTGtKcGJtRnllVU52Ym5OMFlXNTBjeTVHVEU5QlZEWTBYMDFCV0Z3aUxERXVOemszTmprek1UTTBPRFl5TXpFMU4wVXpNRGdzZG05cFpDQXdLVHRuS0Z3aWFuTndZaTVDYVc1aGNubERiMjV6ZEdGdWRITXVWRmRQWDFSUFh6SXdYQ0lzTVRBME9EVTNOaXgyYjJsa0lEQXBPMmNvWENKcWMzQmlMa0pwYm1GeWVVTnZibk4wWVc1MGN5NVVWMDlmVkU5Zk1qTmNJaXc0TXpnNE5qQTRMSFp2YVdRZ01DazdaeWhjSW1wemNHSXVRbWx1WVhKNVEyOXVjM1JoYm5SekxsUlhUMTlVVDE4ek1Wd2lMREl4TkRjME9ETTJORGdzZG05cFpDQXdLVHRuS0Z3aWFuTndZaTVDYVc1aGNubERiMjV6ZEdGdWRITXVWRmRQWDFSUFh6TXlYQ0lzTkRJNU5EazJOekk1Tml4MmIybGtJREFwTzF4dVp5aGNJbXB6Y0dJdVFtbHVZWEo1UTI5dWMzUmhiblJ6TGxSWFQxOVVUMTgxTWx3aUxEUTFNRE0xT1RrMk1qY3pOekEwT1RZc2RtOXBaQ0F3S1R0bktGd2lhbk53WWk1Q2FXNWhjbmxEYjI1emRHRnVkSE11VkZkUFgxUlBYell6WENJc01IZzNabVptWm1abVptWm1abVptWm1abUxIWnZhV1FnTUNrN1p5aGNJbXB6Y0dJdVFtbHVZWEo1UTI5dWMzUmhiblJ6TGxSWFQxOVVUMTgyTkZ3aUxERXVPRFEwTmpjME5EQTNNemN3T1RVMU1rVXhPU3gyYjJsa0lEQXBPMmNvWENKcWMzQmlMa0pwYm1GeWVVTnZibk4wWVc1MGN5NWFSVkpQWDBoQlUwaGNJaXhjSWx4Y2VEQXdYRng0TURCY1hIZ3dNRnhjZURBd1hGeDRNREJjWEhnd01GeGNlREF3WEZ4NE1EQmNJaXgyYjJsa0lEQXBPM1poY2lCNVBUQXNlajB3TzJjb1hDSnFjM0JpTG5WMGFXeHpMbWRsZEZOd2JHbDBOalJNYjNkY0lpeG1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQjVmU3gyYjJsa0lEQXBPMmNvWENKcWMzQmlMblYwYVd4ekxtZGxkRk53YkdsME5qUklhV2RvWENJc1puVnVZM1JwYjI0b0tYdHlaWFIxY200Z2VuMHNkbTlwWkNBd0tUdG1kVzVqZEdsdmJpQkdZU2hoS1h0MllYSWdZajFoUGo0K01EdGhQVTFoZEdndVpteHZiM0lvS0dFdFlpa3ZOREk1TkRrMk56STVOaWsrUGo0d08zazlZanQ2UFdGOVp5aGNJbXB6Y0dJdWRYUnBiSE11YzNCc2FYUlZhVzUwTmpSY0lpeEdZU3gyYjJsa0lEQXBPMloxYm1OMGFXOXVJRUVvWVNsN2RtRnlJR0k5TUQ1aE8yRTlUV0YwYUM1aFluTW9ZU2s3ZG1GeUlHTTlZVDQrUGpBN1lUMU5ZWFJvTG1ac2IyOXlLQ2hoTFdNcEx6UXlPVFE1TmpjeU9UWXBPMkUrUGo0OU1EdGlKaVlvWVQxK1lUNCtQakFzWXowb2ZtTStQajR3S1NzeExEUXlPVFE1TmpjeU9UVThZeVltS0dNOU1DeGhLeXNzTkRJNU5EazJOekk1TlR4aEppWW9ZVDB3S1NrcE8zazlZenQ2UFdGOVp5aGNJbXB6Y0dJdWRYUnBiSE11YzNCc2FYUkpiblEyTkZ3aUxFRXNkbTlwWkNBd0tUdGNibVoxYm1OMGFXOXVJRWRoS0dFcGUzWmhjaUJpUFRBK1lUdGhQVElxVFdGMGFDNWhZbk1vWVNrN1JtRW9ZU2s3WVQxNU8zWmhjaUJqUFhvN1lpWW1LREE5UFdFL01EMDlZejlqUFdFOU5ESTVORGsyTnpJNU5Ub29ZeTB0TEdFOU5ESTVORGsyTnpJNU5TazZZUzB0S1R0NVBXRTdlajFqZldjb1hDSnFjM0JpTG5WMGFXeHpMbk53YkdsMFdtbG5lbUZuTmpSY0lpeEhZU3gyYjJsa0lEQXBPMXh1Wm5WdVkzUnBiMjRnU0dFb1lTbDdkbUZ5SUdJOU1ENWhQekU2TUR0aFBXSS9MV0U2WVR0cFppZ3dQVDA5WVNrd1BERXZZVDk1UFhvOU1Eb29lajB3TEhrOU1qRTBOelE0TXpZME9DazdaV3h6WlNCcFppaHBjMDVoVGloaEtTbDZQVEFzZVQweU1UUTNORGd6TmpRM08yVnNjMlVnYVdZb015NDBNREk0TWpNME5qWXpPRFV5T0RnMlJUTTRQR0VwZWowd0xIazlLR0k4UERNeGZESXhNemt3T1RVd05EQXBQajQrTUR0bGJITmxJR2xtS0RFdU1UYzFORGswTXpVd09ESXlNamczTlVVdE16ZytZU2xoUFUxaGRHZ3VjbTkxYm1Rb1lTOU5ZWFJvTG5CdmR5Z3lMQzB4TkRrcEtTeDZQVEFzZVQwb1lqdzhNekY4WVNrK1BqNHdPMlZzYzJWN2RtRnlJR005VFdGMGFDNW1iRzl2Y2loTllYUm9MbXh2WnloaEtTOU5ZWFJvTGt4T01pazdZU285VFdGMGFDNXdiM2NvTWl3dFl5azdZVDFOWVhSb0xuSnZkVzVrS0Rnek9EZzJNRGdxWVNrN01UWTNOemN5TVRZOFBXRW1KaXNyWXp0NlBUQTdlVDBvWWp3OE16RjhZeXN4TWpjOFBESXpmR0VtT0RNNE9EWXdOeWsrUGo0d2ZYMW5LRndpYW5Od1lpNTFkR2xzY3k1emNHeHBkRVpzYjJGME16SmNJaXhJWVN4MmIybGtJREFwTzF4dVpuVnVZM1JwYjI0Z1NXRW9ZU2w3ZG1GeUlHSTlNRDVoUHpFNk1EdGhQV0kvTFdFNllUdHBaaWd3UFQwOVlTbDZQVEE4TVM5aFB6QTZNakUwTnpRNE16WTBPQ3g1UFRBN1pXeHpaU0JwWmlocGMwNWhUaWhoS1NsNlBUSXhORGMwT0RNMk5EY3NlVDAwTWprME9UWTNNamsxTzJWc2MyVWdhV1lvTVM0M09UYzJPVE14TXpRNE5qSXpNVFUzUlRNd09EeGhLWG85S0dJOFBETXhmREl4TkRZME16VXdOeklwUGo0K01DeDVQVEE3Wld4elpTQnBaaWd5TGpJeU5UQTNNemcxT0RVd056SXdNVFJGTFRNd09ENWhLV0V2UFUxaGRHZ3VjRzkzS0RJc0xURXdOelFwTEhvOUtHSThQRE14ZkdFdk5ESTVORGsyTnpJNU5paytQajR3TEhrOVlUNCtQakE3Wld4elpYdDJZWElnWXoxaExHUTlNRHRwWmlneVBEMWpLV1p2Y2lnN01qdzlZeVltTVRBeU16NWtPeWxrS3lzc1l5ODlNanRsYkhObElHWnZjaWc3TVQ1akppWXRNVEF5TWp4a095bGpLajB5TEdRdExUdGhLajFOWVhSb0xuQnZkeWd5TEMxa0tUdDZQU2hpUER3ek1YeGtLekV3TWpNOFBESXdmREV3TkRnMU56WXFZU1l4TURRNE5UYzFLVDQrUGpBN2VUMDBOVEF6TlRrNU5qSTNNemN3TkRrMkttRStQajR3ZlgxbktGd2lhbk53WWk1MWRHbHNjeTV6Y0d4cGRFWnNiMkYwTmpSY0lpeEpZU3gyYjJsa0lEQXBPMXh1Wm5WdVkzUnBiMjRnUXloaEtYdDJZWElnWWoxaExtTm9ZWEpEYjJSbFFYUW9OQ2tzWXoxaExtTm9ZWEpEYjJSbFFYUW9OU2tzWkQxaExtTm9ZWEpEYjJSbFFYUW9OaWtzWmoxaExtTm9ZWEpEYjJSbFFYUW9OeWs3ZVQxaExtTm9ZWEpEYjJSbFFYUW9NQ2tyS0dFdVkyaGhja052WkdWQmRDZ3hLVHc4T0NrcktHRXVZMmhoY2tOdlpHVkJkQ2d5S1R3OE1UWXBLeWhoTG1Ob1lYSkRiMlJsUVhRb015azhQREkwS1Q0K1BqQTdlajFpS3loalBEdzRLU3NvWkR3OE1UWXBLeWhtUER3eU5DaytQajR3Zldjb1hDSnFjM0JpTG5WMGFXeHpMbk53YkdsMFNHRnphRFkwWENJc1F5eDJiMmxrSURBcE8yWjFibU4wYVc5dUlFUW9ZU3hpS1h0eVpYUjFjbTRnTkRJNU5EazJOekk1TmlwaUt5aGhQajQrTUNsOVp5aGNJbXB6Y0dJdWRYUnBiSE11YW05cGJsVnBiblEyTkZ3aUxFUXNkbTlwWkNBd0tUdG1kVzVqZEdsdmJpQkZLR0VzWWlsN2RtRnlJR005WWlZeU1UUTNORGd6TmpRNE8yTW1KaWhoUFg1aEt6RStQajR3TEdJOWZtSStQajR3TERBOVBXRW1KaWhpUFdJck1UNCtQakFwS1R0aFBVUW9ZU3hpS1R0eVpYUjFjbTRnWXo4dFlUcGhmV2NvWENKcWMzQmlMblYwYVd4ekxtcHZhVzVKYm5RMk5Gd2lMRVVzZG05cFpDQXdLVHRjYm1aMWJtTjBhVzl1SUVwaEtHRXNZaXhqS1h0MllYSWdaRDFpUGo0ek1UdHlaWFIxY200Z1l5aGhQRHd4WG1Rc0tHSThQREY4WVQ0K1BqTXhLVjVrS1gxbktGd2lhbk53WWk1MWRHbHNjeTUwYjFwcFozcGhaelkwWENJc1NtRXNkbTlwWkNBd0tUdG1kVzVqZEdsdmJpQkxZU2hoTEdJcGUzSmxkSFZ5YmlCTllTaGhMR0lzUlNsOVp5aGNJbXB6Y0dJdWRYUnBiSE11YW05cGJscHBaM3BoWnpZMFhDSXNTMkVzZG05cFpDQXdLVHRtZFc1amRHbHZiaUJOWVNoaExHSXNZeWw3ZG1GeUlHUTlMU2hoSmpFcE8zSmxkSFZ5YmlCaktDaGhQajQrTVh4aVBEd3pNU2xlWkN4aVBqNCtNVjVrS1gxbktGd2lhbk53WWk1MWRHbHNjeTVtY205dFdtbG5lbUZuTmpSY0lpeE5ZU3gyYjJsa0lEQXBPMloxYm1OMGFXOXVJRTVoS0dFcGUzWmhjaUJpUFRJcUtHRStQak14S1NzeExHTTlZVDQrUGpJekpqSTFOVHRoSmowNE16ZzROakEzTzNKbGRIVnliaUF5TlRVOVBXTS9ZVDlPWVU0NlNXNW1hVzVwZEhrcVlqb3dQVDFqUDJJcVRXRjBhQzV3YjNjb01pd3RNVFE1S1NwaE9tSXFUV0YwYUM1d2IzY29NaXhqTFRFMU1Da3FLR0VyVFdGMGFDNXdiM2NvTWl3eU15a3BmV2NvWENKcWMzQmlMblYwYVd4ekxtcHZhVzVHYkc5aGRETXlYQ0lzVG1Fc2RtOXBaQ0F3S1R0Y2JtWjFibU4wYVc5dUlFOWhLR0VzWWlsN2RtRnlJR005TWlvb1lqNCtNekVwS3pFc1pEMWlQajQrTWpBbU1qQTBOenRoUFRReU9UUTVOamN5T1RZcUtHSW1NVEEwT0RVM05Ta3JZVHR5WlhSMWNtNGdNakEwTnowOVpEOWhQMDVoVGpwSmJtWnBibWwwZVNwak9qQTlQV1EvWXlwTllYUm9MbkJ2ZHlneUxDMHhNRGMwS1NwaE9tTXFUV0YwYUM1d2IzY29NaXhrTFRFd056VXBLaWhoS3pRMU1ETTFPVGsyTWpjek56QTBPVFlwZldjb1hDSnFjM0JpTG5WMGFXeHpMbXB2YVc1R2JHOWhkRFkwWENJc1QyRXNkbTlwWkNBd0tUdG1kVzVqZEdsdmJpQlFZU2hoTEdJcGUzSmxkSFZ5YmlCVGRISnBibWN1Wm5KdmJVTm9ZWEpEYjJSbEtHRStQajR3SmpJMU5TeGhQajQrT0NZeU5UVXNZVDQrUGpFMkpqSTFOU3hoUGo0K01qUW1NalUxTEdJK1BqNHdKakkxTlN4aVBqNCtPQ1l5TlRVc1lqNCtQakUySmpJMU5TeGlQajQrTWpRbU1qVTFLWDFuS0Z3aWFuTndZaTUxZEdsc2N5NXFiMmx1U0dGemFEWTBYQ0lzVUdFc2RtOXBaQ0F3S1R0bktGd2lhbk53WWk1MWRHbHNjeTVFU1VkSlZGTmNJaXhjSWpBeE1qTTBOVFkzT0RsaFltTmtaV1pjSWk1emNHeHBkQ2hjSWx3aUtTeDJiMmxrSURBcE8xeHVablZ1WTNScGIyNGdSaWhoTEdJcGUyWjFibU4wYVc5dUlHTW9aaXhvS1h0bVBXWS9VM1J5YVc1bktHWXBPbHdpWENJN2NtVjBkWEp1SUdnL1hDSXdNREF3TURBd1hDSXVjMnhwWTJVb1ppNXNaVzVuZEdncEsyWTZabjFwWmlneU1EazNNVFV4UGoxaUtYSmxkSFZ5Ymx3aVhDSXJSQ2hoTEdJcE8zWmhjaUJrUFNoaFBqNCtNalI4WWp3OE9DaytQajR3SmpFMk56YzNNakUxTzJJOVlqNCtNVFltTmpVMU16VTdZVDBvWVNZeE5qYzNOekl4TlNrck5qYzNOekl4Tmlwa0t6WTNNVEEyTlRZcVlqdGtLejA0TVRRM05EazNLbUk3WWlvOU1qc3hSVGM4UFdFbUppaGtLejFOWVhSb0xtWnNiMjl5S0dFdk1VVTNLU3hoSlQweFJUY3BPekZGTnp3OVpDWW1LR0lyUFUxaGRHZ3VabXh2YjNJb1pDOHhSVGNwTEdRbFBURkZOeWs3Y21WMGRYSnVJR01vWWl3d0tTdGpLR1FzWWlrcll5aGhMREVwZldjb1hDSnFjM0JpTG5WMGFXeHpMbXB2YVc1VmJuTnBaMjVsWkVSbFkybHRZV3hUZEhKcGJtZGNJaXhHTEhadmFXUWdNQ2s3Wm5WdVkzUnBiMjRnUnloaExHSXBlM1poY2lCalBXSW1NakUwTnpRNE16WTBPRHRqSmlZb1lUMStZU3N4UGo0K01DeGlQWDVpS3lnd1BUMWhQekU2TUNrK1BqNHdLVHRoUFVZb1lTeGlLVHR5WlhSMWNtNGdZejljSWkxY0lpdGhPbUY5WEc1bktGd2lhbk53WWk1MWRHbHNjeTVxYjJsdVUybG5ibVZrUkdWamFXMWhiRk4wY21sdVoxd2lMRWNzZG05cFpDQXdLVHRtZFc1amRHbHZiaUJSWVNoaExHSXBlME1vWVNrN1lUMTVPM1poY2lCalBYbzdjbVYwZFhKdUlHSS9SeWhoTEdNcE9rWW9ZU3hqS1gxbktGd2lhbk53WWk1MWRHbHNjeTVvWVhOb05qUlViMFJsWTJsdFlXeFRkSEpwYm1kY0lpeFJZU3gyYjJsa0lEQXBPMmNvWENKcWMzQmlMblYwYVd4ekxtaGhjMmcyTkVGeWNtRjVWRzlFWldOcGJXRnNVM1J5YVc1bmMxd2lMR1oxYm1OMGFXOXVLR0VzWWlsN1ptOXlLSFpoY2lCalBVRnljbUY1S0dFdWJHVnVaM1JvS1N4a1BUQTdaRHhoTG14bGJtZDBhRHRrS3lzcFkxdGtYVDFSWVNoaFcyUmRMR0lwTzNKbGRIVnliaUJqZlN4MmIybGtJREFwTzF4dVpuVnVZM1JwYjI0Z1NDaGhLWHRtZFc1amRHbHZiaUJpS0cwc2RDbDdabTl5S0haaGNpQkNQVEE3T0Q1Q0ppWW9NU0U5UFcxOGZEQThkQ2s3UWlzcktYUTliU3BtVzBKZEszUXNabHRDWFQxMEpqSTFOU3gwUGo0K1BUaDlablZ1WTNScGIyNGdZeWdwZTJadmNpaDJZWElnYlQwd096ZytiVHR0S3lzcFpsdHRYVDErWmx0dFhTWXlOVFY5Ymlnd1BHRXViR1Z1WjNSb0tUdDJZWElnWkQwaE1UdGNJaTFjSWowOVBXRmJNRjBtSmloa1BTRXdMR0U5WVM1emJHbGpaU2d4S1NrN1ptOXlLSFpoY2lCbVBWc3dMREFzTUN3d0xEQXNNQ3d3TERCZExHZzlNRHRvUEdFdWJHVnVaM1JvTzJnckt5bGlLREV3TEdFdVkyaGhja052WkdWQmRDaG9LUzAwT0NrN1pDWW1LR01vS1N4aUtERXNNU2twTzNKbGRIVnliaUI0WVNobUtYMW5LRndpYW5Od1lpNTFkR2xzY3k1a1pXTnBiV0ZzVTNSeWFXNW5WRzlJWVhOb05qUmNJaXhJTEhadmFXUWdNQ2s3WnloY0ltcHpjR0l1ZFhScGJITXVjM0JzYVhSRVpXTnBiV0ZzVTNSeWFXNW5YQ0lzWm5WdVkzUnBiMjRvWVNsN1F5aElLR0VwS1gwc2RtOXBaQ0F3S1R0bWRXNWpkR2x2YmlCU1lTaGhLWHR5WlhSMWNtNGdVM1J5YVc1bkxtWnliMjFEYUdGeVEyOWtaU2d4TUQ1aFB6UTRLMkU2T0RjcllTbDlYRzVtZFc1amRHbHZiaUJUWVNoaEtYdHlaWFIxY200Z09UYzhQV0UvWVMwNU55c3hNRHBoTFRRNGZXY29YQ0pxYzNCaUxuVjBhV3h6TG1oaGMyZzJORlJ2U0dWNFUzUnlhVzVuWENJc1puVnVZM1JwYjI0b1lTbDdkbUZ5SUdJOVFYSnlZWGtvTVRncE8ySmJNRjA5WENJd1hDSTdZbHN4WFQxY0luaGNJanRtYjNJb2RtRnlJR005TURzNFBtTTdZeXNyS1h0MllYSWdaRDFoTG1Ob1lYSkRiMlJsUVhRb055MWpLVHRpV3pJcVl5c3lYVDFTWVNoa1BqNDBLVHRpV3pJcVl5c3pYVDFTWVNoa0pqRTFLWDF5WlhSMWNtNGdZaTVxYjJsdUtGd2lYQ0lwZlN4MmIybGtJREFwTzJjb1hDSnFjM0JpTG5WMGFXeHpMbWhsZUZOMGNtbHVaMVJ2U0dGemFEWTBYQ0lzWm5WdVkzUnBiMjRvWVNsN1lUMWhMblJ2VEc5M1pYSkRZWE5sS0NrN2JpZ3hPRDA5WVM1c1pXNW5kR2dwTzI0b1hDSXdYQ0k5UFdGYk1GMHBPMjRvWENKNFhDSTlQV0ZiTVYwcE8yWnZjaWgyWVhJZ1lqMWNJbHdpTEdNOU1EczRQbU03WXlzcktXSTlVM1J5YVc1bkxtWnliMjFEYUdGeVEyOWtaU2d4TmlwVFlTaGhMbU5vWVhKRGIyUmxRWFFvTWlwakt6SXBLU3RUWVNoaExtTm9ZWEpEYjJSbFFYUW9NaXBqS3pNcEtTa3JZanR5WlhSMWNtNGdZbjBzZG05cFpDQXdLVHRjYm1jb1hDSnFjM0JpTG5WMGFXeHpMbWhoYzJnMk5GUnZUblZ0WW1WeVhDSXNablZ1WTNScGIyNG9ZU3hpS1h0REtHRXBPMkU5ZVR0MllYSWdZejE2TzNKbGRIVnliaUJpUDBVb1lTeGpLVHBFS0dFc1l5bDlMSFp2YVdRZ01DazdaeWhjSW1wemNHSXVkWFJwYkhNdWJuVnRZbVZ5Vkc5SVlYTm9OalJjSWl4bWRXNWpkR2x2YmloaEtYdEJLR0VwTzNKbGRIVnliaUJRWVNoNUxIb3BmU3gyYjJsa0lEQXBPMmNvWENKcWMzQmlMblYwYVd4ekxtTnZkVzUwVm1GeWFXNTBjMXdpTEdaMWJtTjBhVzl1S0dFc1lpeGpLWHRtYjNJb2RtRnlJR1E5TUN4bVBXSTdaanhqTzJZckt5bGtLejFoVzJaZFBqNDNPM0psZEhWeWJpQmpMV0l0Wkgwc2RtOXBaQ0F3S1R0Y2JtY29YQ0pxYzNCaUxuVjBhV3h6TG1OdmRXNTBWbUZ5YVc1MFJtbGxiR1J6WENJc1puVnVZM1JwYjI0b1lTeGlMR01zWkNsN2RtRnlJR1k5TUR0a0tqMDRPMmxtS0RFeU9ENWtLV1p2Y2lnN1lqeGpKaVpoVzJJcksxMDlQV1E3S1dadmNpaG1LeXM3T3lsN2RtRnlJR2c5WVZ0aUt5dGRPMmxtS0RBOVBTaG9KakV5T0NrcFluSmxZV3Q5Wld4elpTQm1iM0lvTzJJOFl6c3BlMlp2Y2lob1BXUTdNVEk0UEdnN0tYdHBaaWhoVzJKZElUMG9hQ1l4TWpkOE1USTRLU2x5WlhSMWNtNGdaanRpS3lzN2FENCtQVGQ5YVdZb1lWdGlLeXRkSVQxb0tXSnlaV0ZyTzJadmNpaG1LeXM3YUQxaFcySXJLMTBzTUNFOUtHZ21NVEk0S1RzcE8zMXlaWFIxY200Z1puMHNkbTlwWkNBd0tUdG1kVzVqZEdsdmJpQlVZU2hoTEdJc1l5eGtMR1lwZTNaaGNpQm9QVEE3YVdZb01USTRQbVFwWm05eUtEdGlQR01tSm1GYllpc3JYVDA5WkRzcGFDc3JMR0lyUFdZN1pXeHpaU0JtYjNJb08ySThZenNwZTJadmNpaDJZWElnYlQxa096RXlPRHh0T3lsN2FXWW9ZVnRpS3l0ZElUMG9iU1l4TWpkOE1USTRLU2x5WlhSMWNtNGdhRHR0UGo0OU4zMXBaaWhoVzJJcksxMGhQVzBwWW5KbFlXczdhQ3NyTzJJclBXWjljbVYwZFhKdUlHaDlYRzVuS0Z3aWFuTndZaTUxZEdsc2N5NWpiM1Z1ZEVacGVHVmtNekpHYVdWc1pITmNJaXhtZFc1amRHbHZiaWhoTEdJc1l5eGtLWHR5WlhSMWNtNGdWR0VvWVN4aUxHTXNPQ3BrS3pVc05DbDlMSFp2YVdRZ01DazdaeWhjSW1wemNHSXVkWFJwYkhNdVkyOTFiblJHYVhobFpEWTBSbWxsYkdSelhDSXNablZ1WTNScGIyNG9ZU3hpTEdNc1pDbDdjbVYwZFhKdUlGUmhLR0VzWWl4akxEZ3FaQ3N4TERncGZTeDJiMmxrSURBcE8yY29YQ0pxYzNCaUxuVjBhV3h6TG1OdmRXNTBSR1ZzYVcxcGRHVmtSbWxsYkdSelhDSXNablZ1WTNScGIyNG9ZU3hpTEdNc1pDbDdkbUZ5SUdZOU1EdG1iM0lvWkQwNEttUXJNanRpUEdNN0tYdG1iM0lvZG1GeUlHZzlaRHN4TWpnOGFEc3BlMmxtS0dGYllpc3JYU0U5S0dnbU1USTNmREV5T0NrcGNtVjBkWEp1SUdZN2FENCtQVGQ5YVdZb1lWdGlLeXRkSVQxb0tXSnlaV0ZyTzJZckt6dG1iM0lvZG1GeUlHMDlNQ3gwUFRFN2FEMWhXMklySzEwc2JTczlLR2dtTVRJM0tTcDBMSFFxUFRFeU9Dd3dJVDBvYUNZeE1qZ3BPeWs3WWlzOWJYMXlaWFIxY200Z1puMHNkbTlwWkNBd0tUdGNibWNvWENKcWMzQmlMblYwYVd4ekxtUmxZblZuUW5sMFpYTlViMVJsZUhSR2IzSnRZWFJjSWl4bWRXNWpkR2x2YmloaEtYdDJZWElnWWowblhDSW5PMmxtS0dFcGUyRTlWV0VvWVNrN1ptOXlLSFpoY2lCalBUQTdZenhoTG14bGJtZDBhRHRqS3lzcFlpczlYQ0pjWEZ4Y2VGd2lMREUyUG1GYlkxMG1KaWhpS3oxY0lqQmNJaWtzWWlzOVlWdGpYUzUwYjFOMGNtbHVaeWd4TmlsOWNtVjBkWEp1SUdJckoxd2lKMzBzZG05cFpDQXdLVHRjYm1jb1hDSnFjM0JpTG5WMGFXeHpMbVJsWW5WblUyTmhiR0Z5Vkc5VVpYaDBSbTl5YldGMFhDSXNablZ1WTNScGIyNG9ZU2w3YVdZb1hDSnpkSEpwYm1kY0lqMDlQWFI1Y0dWdlppQmhLWHRoUFZOMGNtbHVaeWhoS1R0bWIzSW9kbUZ5SUdJOVd5ZGNJaWRkTEdNOU1EdGpQR0V1YkdWdVozUm9PMk1yS3lsN2RtRnlJR1E5WVM1amFHRnlRWFFvWXlrc1pqMWtMbU5vWVhKRGIyUmxRWFFvTUNrc2FEMWpLekVzYlR0cFppZ2hLRzA5ZVdGYlpGMHBLWHRwWmlnaEtETXhQR1ltSmpFeU56NW1LU2xwWmlobVBXUXNaaUJwYmlCNllTbGtQWHBoVzJaZE8yVnNjMlVnYVdZb1ppQnBiaUI1WVNsa1BYcGhXMlpkUFhsaFcyWmRPMlZzYzJWN2JUMW1MbU5vWVhKRGIyUmxRWFFvTUNrN2FXWW9NekU4YlNZbU1USTNQbTBwWkQxbU8yVnNjMlY3YVdZb01qVTJQbTBwZTJsbUtHUTlYQ0pjWEZ4Y2VGd2lMREUyUG0xOGZESTFOanh0S1dRclBWd2lNRndpZldWc2MyVWdaRDFjSWx4Y1hGeDFYQ0lzTkRBNU5qNXRKaVlvWkNzOVhDSXdYQ0lwTzJRclBXMHVkRzlUZEhKcGJtY29NVFlwTG5SdlZYQndaWEpEWVhObEtDbDlaRDE2WVZ0bVhUMWtmVzA5WkgxaVcyaGRQVzE5WWk1d2RYTm9LQ2RjSWljcE8yRTlZaTVxYjJsdUtGd2lYQ0lwZldWc2MyVWdZVDFoTG5SdlUzUnlhVzVuS0NrN2NtVjBkWEp1SUdGOUxIWnZhV1FnTUNrN1hHNW5LRndpYW5Od1lpNTFkR2xzY3k1emRISnBibWRVYjBKNWRHVkJjbkpoZVZ3aUxHWjFibU4wYVc5dUtHRXBlMlp2Y2loMllYSWdZajF1WlhjZ1ZXbHVkRGhCY25KaGVTaGhMbXhsYm1kMGFDa3NZejB3TzJNOFlTNXNaVzVuZEdnN1l5c3JLWHQyWVhJZ1pEMWhMbU5vWVhKRGIyUmxRWFFvWXlrN2FXWW9NalUxUEdRcGRHaHliM2NnUlhKeWIzSW9YQ0pEYjI1MlpYSnphVzl1SUdWeWNtOXlPaUJ6ZEhKcGJtY2dZMjl1ZEdGcGJuTWdZMjlrWlhCdmFXNTBJRzkxZEhOcFpHVWdiMllnWW5sMFpTQnlZVzVuWlZ3aUtUdGlXMk5kUFdSOWNtVjBkWEp1SUdKOUxIWnZhV1FnTUNrN1hHNW1kVzVqZEdsdmJpQlZZU2hoS1h0cFppaGhMbU52Ym5OMGNuVmpkRzl5UFQwOVZXbHVkRGhCY25KaGVTbHlaWFIxY200Z1lUdHBaaWhoTG1OdmJuTjBjblZqZEc5eVBUMDlRWEp5WVhsQ2RXWm1aWElwY21WMGRYSnVJRzVsZHlCVmFXNTBPRUZ5Y21GNUtHRXBPMmxtS0dFdVkyOXVjM1J5ZFdOMGIzSTlQVDFCY25KaGVTbHlaWFIxY200Z2JtVjNJRlZwYm5RNFFYSnlZWGtvWVNrN2FXWW9ZUzVqYjI1emRISjFZM1J2Y2owOVBWTjBjbWx1WnlseVpYUjFjbTRnUkdFb1lTazdhV1lvWVNCcGJuTjBZVzVqWlc5bUlGVnBiblE0UVhKeVlYa3BjbVYwZFhKdUlHNWxkeUJWYVc1ME9FRnljbUY1S0dFdVluVm1abVZ5TEdFdVlubDBaVTltWm5ObGRDeGhMbUo1ZEdWTVpXNW5kR2dwTzNBb1hDSlVlWEJsSUc1dmRDQmpiMjUyWlhKMGFXSnNaU0IwYnlCVmFXNTBPRUZ5Y21GNUxsd2lLVHR5WlhSMWNtNGdibVYzSUZWcGJuUTRRWEp5WVhrb01DbDlaeWhjSW1wemNHSXVkWFJwYkhNdVlubDBaVk52ZFhKalpWUnZWV2x1ZERoQmNuSmhlVndpTEZWaExIWnZhV1FnTUNrN1puVnVZM1JwYjI0Z1NTaGhMR0lzWXlsN2RHaHBjeTVpUFc1MWJHdzdkR2hwY3k1aFBYUm9hWE11WXoxMGFHbHpMbWc5TUR0MGFHbHpMblk5SVRFN1lTWW1kR2hwY3k1SUtHRXNZaXhqS1gxbktGd2lhbk53WWk1Q2FXNWhjbmxFWldOdlpHVnlYQ0lzU1N4MmIybGtJREFwTzNaaGNpQldZVDFiWFR0SkxtZGxkRWx1YzNSaGJtTmxRMkZqYUdWTVpXNW5kR2c5Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnVm1FdWJHVnVaM1JvZlR0bWRXNWpkR2x2YmlCWFlTaGhMR0lzWXlsN2FXWW9WbUV1YkdWdVozUm9LWHQyWVhJZ1pEMVdZUzV3YjNBb0tUdGhKaVprTGtnb1lTeGlMR01wTzNKbGRIVnliaUJrZlhKbGRIVnliaUJ1WlhjZ1NTaGhMR0lzWXlsOVNTNWhiR3h2WXoxWFlUdEpMbkJ5YjNSdmRIbHdaUzVEWVQxbWRXNWpkR2x2YmlncGUzUm9hWE11WTJ4bFlYSW9LVHN4TURBK1ZtRXViR1Z1WjNSb0ppWldZUzV3ZFhOb0tIUm9hWE1wZlR0SkxuQnliM1J2ZEhsd1pTNW1jbVZsUFVrdWNISnZkRzkwZVhCbExrTmhPMGt1Y0hKdmRHOTBlWEJsTG1Oc2IyNWxQV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJRmRoS0hSb2FYTXVZaXgwYUdsekxtZ3NkR2hwY3k1akxYUm9hWE11YUNsOU8wa3VjSEp2ZEc5MGVYQmxMbU5zYjI1bFBVa3VjSEp2ZEc5MGVYQmxMbU5zYjI1bE8xeHVTUzV3Y205MGIzUjVjR1V1WTJ4bFlYSTlablZ1WTNScGIyNG9LWHQwYUdsekxtSTliblZzYkR0MGFHbHpMbUU5ZEdocGN5NWpQWFJvYVhNdWFEMHdPM1JvYVhNdWRqMGhNWDA3U1M1d2NtOTBiM1I1Y0dVdVkyeGxZWEk5U1M1d2NtOTBiM1I1Y0dVdVkyeGxZWEk3U1M1d2NtOTBiM1I1Y0dVdVdUMW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQjBhR2x6TG1KOU8wa3VjSEp2ZEc5MGVYQmxMbWRsZEVKMVptWmxjajFKTG5CeWIzUnZkSGx3WlM1Wk8wa3VjSEp2ZEc5MGVYQmxMa2c5Wm5WdVkzUnBiMjRvWVN4aUxHTXBlM1JvYVhNdVlqMVZZU2hoS1R0MGFHbHpMbWc5ZG05cFpDQXdJVDA5WWo5aU9qQTdkR2hwY3k1alBYWnZhV1FnTUNFOVBXTS9kR2hwY3k1b0syTTZkR2hwY3k1aUxteGxibWQwYUR0MGFHbHpMbUU5ZEdocGN5NW9mVHRKTG5CeWIzUnZkSGx3WlM1elpYUkNiRzlqYXoxSkxuQnliM1J2ZEhsd1pTNUlPMGt1Y0hKdmRHOTBlWEJsTGtSaVBXWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlIUm9hWE11WTMwN1NTNXdjbTkwYjNSNWNHVXVaMlYwUlc1a1BVa3VjSEp2ZEc5MGVYQmxMa1JpTzBrdWNISnZkRzkwZVhCbExuTmxkRVZ1WkQxbWRXNWpkR2x2YmloaEtYdDBhR2x6TG1NOVlYMDdTUzV3Y205MGIzUjVjR1V1YzJWMFJXNWtQVWt1Y0hKdmRHOTBlWEJsTG5ObGRFVnVaRHRjYmtrdWNISnZkRzkwZVhCbExuSmxjMlYwUFdaMWJtTjBhVzl1S0NsN2RHaHBjeTVoUFhSb2FYTXVhSDA3U1M1d2NtOTBiM1I1Y0dVdWNtVnpaWFE5U1M1d2NtOTBiM1I1Y0dVdWNtVnpaWFE3U1M1d2NtOTBiM1I1Y0dVdVFqMW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQjBhR2x6TG1GOU8wa3VjSEp2ZEc5MGVYQmxMbWRsZEVOMWNuTnZjajFKTG5CeWIzUnZkSGx3WlM1Q08wa3VjSEp2ZEc5MGVYQmxMazFoUFdaMWJtTjBhVzl1S0dFcGUzUm9hWE11WVQxaGZUdEpMbkJ5YjNSdmRIbHdaUzV6WlhSRGRYSnpiM0k5U1M1d2NtOTBiM1I1Y0dVdVRXRTdTUzV3Y205MGIzUjVjR1V1WVdSMllXNWpaVDFtZFc1amRHbHZiaWhoS1h0MGFHbHpMbUVyUFdFN2JpaDBhR2x6TG1FOFBYUm9hWE11WXlsOU8wa3VjSEp2ZEc5MGVYQmxMbUZrZG1GdVkyVTlTUzV3Y205MGIzUjVjR1V1WVdSMllXNWpaVHRKTG5CeWIzUnZkSGx3WlM1NVlUMW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQjBhR2x6TG1FOVBYUm9hWE11WTMwN1NTNXdjbTkwYjNSNWNHVXVZWFJGYm1ROVNTNXdjbTkwYjNSNWNHVXVlV0U3U1M1d2NtOTBiM1I1Y0dVdVVXSTlablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdkR2hwY3k1aFBuUm9hWE11WTMwN1NTNXdjbTkwYjNSNWNHVXVjR0Z6ZEVWdVpEMUpMbkJ5YjNSdmRIbHdaUzVSWWp0Y2Jra3VjSEp2ZEc5MGVYQmxMbWRsZEVWeWNtOXlQV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJSFJvYVhNdWRueDhNRDUwYUdsekxtRjhmSFJvYVhNdVlUNTBhR2x6TG1OOU8wa3VjSEp2ZEc5MGVYQmxMbWRsZEVWeWNtOXlQVWt1Y0hKdmRHOTBlWEJsTG1kbGRFVnljbTl5TzBrdWNISnZkRzkwZVhCbExuYzlablZ1WTNScGIyNG9ZU2w3Wm05eUtIWmhjaUJpUFRFeU9DeGpQVEFzWkQwd0xHWTlNRHMwUG1ZbUpqRXlPRHc5WWp0bUt5c3BZajEwYUdsekxtSmJkR2hwY3k1aEt5dGRMR044UFNoaUpqRXlOeWs4UERjcVpqc3hNamc4UFdJbUppaGlQWFJvYVhNdVlsdDBhR2x6TG1FcksxMHNZM3c5S0dJbU1USTNLVHc4TWpnc1pIdzlLR0ltTVRJM0tUNCtOQ2s3YVdZb01USTRQRDFpS1dadmNpaG1QVEE3TlQ1bUppWXhNamc4UFdJN1ppc3JLV0k5ZEdocGN5NWlXM1JvYVhNdVlTc3JYU3hrZkQwb1lpWXhNamNwUER3M0ttWXJNenRwWmlneE1qZytZaWx5WlhSMWNtNGdZU2hqUGo0K01DeGtQajQrTUNrN2NDaGNJa1poYVd4bFpDQjBieUJ5WldGa0lIWmhjbWx1ZEN3Z1pXNWpiMlJwYm1jZ2FYTWdhVzUyWVd4cFpDNWNJaWs3ZEdocGN5NTJQU0V3ZlR0SkxuQnliM1J2ZEhsd1pTNXlaV0ZrVTNCc2FYUldZWEpwYm5RMk5EMUpMbkJ5YjNSdmRIbHdaUzUzTzF4dVNTNXdjbTkwYjNSNWNHVXVaV0U5Wm5WdVkzUnBiMjRvWVNsN2NtVjBkWEp1SUhSb2FYTXVkeWhtZFc1amRHbHZiaWhpTEdNcGUzSmxkSFZ5YmlCTllTaGlMR01zWVNsOUtYMDdTUzV3Y205MGIzUjVjR1V1Y21WaFpGTndiR2wwV21sbmVtRm5WbUZ5YVc1ME5qUTlTUzV3Y205MGIzUjVjR1V1WldFN1NTNXdjbTkwYjNSNWNHVXVkR0U5Wm5WdVkzUnBiMjRvWVNsN2RtRnlJR0k5ZEdocGN5NWlMR005ZEdocGN5NWhPM1JvYVhNdVlTczlPRHRtYjNJb2RtRnlJR1E5TUN4bVBUQXNhRDFqS3pjN2FENDlZenRvTFMwcFpEMWtQRHc0ZkdKYmFGMHNaajFtUER3NGZHSmJhQ3MwWFR0eVpYUjFjbTRnWVNoa0xHWXBmVHRKTG5CeWIzUnZkSGx3WlM1eVpXRmtVM0JzYVhSR2FYaGxaRFkwUFVrdWNISnZkRzkwZVhCbExuUmhPMGt1Y0hKdmRHOTBlWEJsTG10aVBXWjFibU4wYVc5dUtDbDdabTl5S0R0MGFHbHpMbUpiZEdocGN5NWhYU1l4TWpnN0tYUm9hWE11WVNzck8zUm9hWE11WVNzcmZUdEpMbkJ5YjNSdmRIbHdaUzV6YTJsd1ZtRnlhVzUwUFVrdWNISnZkRzkwZVhCbExtdGlPMGt1Y0hKdmRHOTBlWEJsTG0xaVBXWjFibU4wYVc5dUtHRXBlMlp2Y2lnN01USTRQR0U3S1hSb2FYTXVZUzB0TEdFK1BqNDlOenQwYUdsekxtRXRMWDA3U1M1d2NtOTBiM1I1Y0dVdWRXNXphMmx3Vm1GeWFXNTBQVWt1Y0hKdmRHOTBlWEJsTG0xaU8xeHVTUzV3Y205MGIzUjVjR1V1YnoxbWRXNWpkR2x2YmlncGUzWmhjaUJoUFhSb2FYTXVZanQyWVhJZ1lqMWhXM1JvYVhNdVlWMDdkbUZ5SUdNOVlpWXhNamM3YVdZb01USTRQbUlwY21WMGRYSnVJSFJvYVhNdVlTczlNU3h1S0hSb2FYTXVZVHc5ZEdocGN5NWpLU3hqTzJJOVlWdDBhR2x6TG1Fck1WMDdZM3c5S0dJbU1USTNLVHc4Tnp0cFppZ3hNamcrWWlseVpYUjFjbTRnZEdocGN5NWhLejB5TEc0b2RHaHBjeTVoUEQxMGFHbHpMbU1wTEdNN1lqMWhXM1JvYVhNdVlTc3lYVHRqZkQwb1lpWXhNamNwUER3eE5EdHBaaWd4TWpnK1lpbHlaWFIxY200Z2RHaHBjeTVoS3owekxHNG9kR2hwY3k1aFBEMTBhR2x6TG1NcExHTTdZajFoVzNSb2FYTXVZU3N6WFR0amZEMG9ZaVl4TWpjcFBEd3lNVHRwWmlneE1qZytZaWx5WlhSMWNtNGdkR2hwY3k1aEt6MDBMRzRvZEdocGN5NWhQRDEwYUdsekxtTXBMR003WWoxaFczUm9hWE11WVNzMFhUdGpmRDBvWWlZeE5TazhQREk0TzJsbUtERXlPRDVpS1hKbGRIVnliaUIwYUdsekxtRXJQVFVzYmloMGFHbHpMbUU4UFhSb2FYTXVZeWtzWXo0K1BqQTdkR2hwY3k1aEt6MDFPekV5T0R3OVlWdDBhR2x6TG1FcksxMG1KakV5T0R3OVlWdDBhR2x6TG1FcksxMG1KakV5T0R3OVlWdDBhR2x6TG1FcksxMG1KakV5T0R3OVlWdDBhR2x6TG1FcksxMG1KakV5T0R3OVhHNWhXM1JvYVhNdVlTc3JYU1ltYmlnaE1TazdiaWgwYUdsekxtRThQWFJvYVhNdVl5azdjbVYwZFhKdUlHTjlPMGt1Y0hKdmRHOTBlWEJsTG5KbFlXUlZibk5wWjI1bFpGWmhjbWx1ZERNeVBVa3VjSEp2ZEc5MGVYQmxMbTg3U1M1d2NtOTBiM1I1Y0dVdVpHRTlablZ1WTNScGIyNG9LWHR5WlhSMWNtNStmblJvYVhNdWJ5Z3BmVHRKTG5CeWIzUnZkSGx3WlM1eVpXRmtVMmxuYm1Wa1ZtRnlhVzUwTXpJOVNTNXdjbTkwYjNSNWNHVXVaR0U3U1M1d2NtOTBiM1I1Y0dVdVR6MW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQjBhR2x6TG04b0tTNTBiMU4wY21sdVp5Z3BmVHRKTG5CeWIzUnZkSGx3WlM1RllUMW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQjBhR2x6TG1SaEtDa3VkRzlUZEhKcGJtY29LWDA3U1M1d2NtOTBiM1I1Y0dVdWNtVmhaRk5wWjI1bFpGWmhjbWx1ZERNeVUzUnlhVzVuUFVrdWNISnZkRzkwZVhCbExrVmhPMGt1Y0hKdmRHOTBlWEJsTGtsaFBXWjFibU4wYVc5dUtDbDdkbUZ5SUdFOWRHaHBjeTV2S0NrN2NtVjBkWEp1SUdFK1BqNHhYaTBvWVNZeEtYMDdTUzV3Y205MGIzUjVjR1V1Y21WaFpGcHBaM3BoWjFaaGNtbHVkRE15UFVrdWNISnZkRzkwZVhCbExrbGhPMGt1Y0hKdmRHOTBlWEJsTGtkaFBXWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlIUm9hWE11ZHloRUtYMDdYRzVKTG5CeWIzUnZkSGx3WlM1eVpXRmtWVzV6YVdkdVpXUldZWEpwYm5RMk5EMUpMbkJ5YjNSdmRIbHdaUzVIWVR0SkxuQnliM1J2ZEhsd1pTNUlZVDFtZFc1amRHbHZiaWdwZTNKbGRIVnliaUIwYUdsekxuY29SaWw5TzBrdWNISnZkRzkwZVhCbExuSmxZV1JWYm5OcFoyNWxaRlpoY21sdWREWTBVM1J5YVc1blBVa3VjSEp2ZEc5MGVYQmxMa2hoTzBrdWNISnZkRzkwZVhCbExuTmhQV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJSFJvYVhNdWR5aEZLWDA3U1M1d2NtOTBiM1I1Y0dVdWNtVmhaRk5wWjI1bFpGWmhjbWx1ZERZMFBVa3VjSEp2ZEc5MGVYQmxMbk5oTzBrdWNISnZkRzkwZVhCbExrWmhQV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJSFJvYVhNdWR5aEhLWDA3U1M1d2NtOTBiM1I1Y0dVdWNtVmhaRk5wWjI1bFpGWmhjbWx1ZERZMFUzUnlhVzVuUFVrdWNISnZkRzkwZVhCbExrWmhPMGt1Y0hKdmRHOTBlWEJsTGtwaFBXWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlIUm9hWE11ZHloTFlTbDlPMGt1Y0hKdmRHOTBlWEJsTG5KbFlXUmFhV2Q2WVdkV1lYSnBiblEyTkQxSkxuQnliM1J2ZEhsd1pTNUtZVHRKTG5CeWIzUnZkSGx3WlM1bVlqMW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQjBhR2x6TG1WaEtGQmhLWDA3WEc1SkxuQnliM1J2ZEhsd1pTNXlaV0ZrV21sbmVtRm5WbUZ5YVc1MFNHRnphRFkwUFVrdWNISnZkRzkwZVhCbExtWmlPMGt1Y0hKdmRHOTBlWEJsTGt0aFBXWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlIUm9hWE11WldFb1J5bDlPMGt1Y0hKdmRHOTBlWEJsTG5KbFlXUmFhV2Q2WVdkV1lYSnBiblEyTkZOMGNtbHVaejFKTG5CeWIzUnZkSGx3WlM1TFlUdEpMbkJ5YjNSdmRIbHdaUzVIWXoxbWRXNWpkR2x2YmlncGUzWmhjaUJoUFhSb2FYTXVZbHQwYUdsekxtRmRPM1JvYVhNdVlTczlNVHR1S0hSb2FYTXVZVHc5ZEdocGN5NWpLVHR5WlhSMWNtNGdZWDA3U1M1d2NtOTBiM1I1Y0dVdWNtVmhaRlZwYm5RNFBVa3VjSEp2ZEc5MGVYQmxMa2RqTzBrdWNISnZkRzkwZVhCbExrVmpQV1oxYm1OMGFXOXVLQ2w3ZG1GeUlHRTlkR2hwY3k1aVczUm9hWE11WVYwc1lqMTBhR2x6TG1KYmRHaHBjeTVoS3pGZE8zUm9hWE11WVNzOU1qdHVLSFJvYVhNdVlUdzlkR2hwY3k1aktUdHlaWFIxY200Z1lUdzhNSHhpUER3NGZUdEpMbkJ5YjNSdmRIbHdaUzV5WldGa1ZXbHVkREUyUFVrdWNISnZkRzkwZVhCbExrVmpPMXh1U1M1d2NtOTBiM1I1Y0dVdWJUMW1kVzVqZEdsdmJpZ3BlM1poY2lCaFBYUm9hWE11WWx0MGFHbHpMbUZkTEdJOWRHaHBjeTVpVzNSb2FYTXVZU3N4WFN4alBYUm9hWE11WWx0MGFHbHpMbUVyTWwwc1pEMTBhR2x6TG1KYmRHaHBjeTVoS3pOZE8zUm9hWE11WVNzOU5EdHVLSFJvYVhNdVlUdzlkR2hwY3k1aktUdHlaWFIxY200b1lUdzhNSHhpUER3NGZHTThQREUyZkdROFBESTBLVDQrUGpCOU8wa3VjSEp2ZEc5MGVYQmxMbkpsWVdSVmFXNTBNekk5U1M1d2NtOTBiM1I1Y0dVdWJUdEpMbkJ5YjNSdmRIbHdaUzVuWVQxbWRXNWpkR2x2YmlncGUzWmhjaUJoUFhSb2FYTXViU2dwTEdJOWRHaHBjeTV0S0NrN2NtVjBkWEp1SUVRb1lTeGlLWDA3U1M1d2NtOTBiM1I1Y0dVdWNtVmhaRlZwYm5RMk5EMUpMbkJ5YjNSdmRIbHdaUzVuWVR0SkxuQnliM1J2ZEhsd1pTNW9ZVDFtZFc1amRHbHZiaWdwZTNaaGNpQmhQWFJvYVhNdWJTZ3BMR0k5ZEdocGN5NXRLQ2s3Y21WMGRYSnVJRVlvWVN4aUtYMDdTUzV3Y205MGIzUjVjR1V1Y21WaFpGVnBiblEyTkZOMGNtbHVaejFKTG5CeWIzUnZkSGx3WlM1b1lUdGNia2t1Y0hKdmRHOTBlWEJsTGxoaVBXWjFibU4wYVc5dUtDbDdkbUZ5SUdFOWRHaHBjeTVpVzNSb2FYTXVZVjA3ZEdocGN5NWhLejB4TzI0b2RHaHBjeTVoUEQxMGFHbHpMbU1wTzNKbGRIVnliaUJoUER3eU5ENCtNalI5TzBrdWNISnZkRzkwZVhCbExuSmxZV1JKYm5RNFBVa3VjSEp2ZEc5MGVYQmxMbGhpTzBrdWNISnZkRzkwZVhCbExsWmlQV1oxYm1OMGFXOXVLQ2w3ZG1GeUlHRTlkR2hwY3k1aVczUm9hWE11WVYwc1lqMTBhR2x6TG1KYmRHaHBjeTVoS3pGZE8zUm9hWE11WVNzOU1qdHVLSFJvYVhNdVlUdzlkR2hwY3k1aktUdHlaWFIxY200b1lUdzhNSHhpUER3NEtUdzhNVFkrUGpFMmZUdEpMbkJ5YjNSdmRIbHdaUzV5WldGa1NXNTBNVFk5U1M1d2NtOTBiM1I1Y0dVdVZtSTdTUzV3Y205MGIzUjVjR1V1VUQxbWRXNWpkR2x2YmlncGUzWmhjaUJoUFhSb2FYTXVZbHQwYUdsekxtRmRMR0k5ZEdocGN5NWlXM1JvYVhNdVlTc3hYU3hqUFhSb2FYTXVZbHQwYUdsekxtRXJNbDBzWkQxMGFHbHpMbUpiZEdocGN5NWhLek5kTzNSb2FYTXVZU3M5TkR0dUtIUm9hWE11WVR3OWRHaHBjeTVqS1R0eVpYUjFjbTRnWVR3OE1IeGlQRHc0ZkdNOFBERTJmR1E4UERJMGZUdEpMbkJ5YjNSdmRIbHdaUzV5WldGa1NXNTBNekk5U1M1d2NtOTBiM1I1Y0dVdVVEdGNia2t1Y0hKdmRHOTBlWEJsTG1KaFBXWjFibU4wYVc5dUtDbDdkbUZ5SUdFOWRHaHBjeTV0S0Nrc1lqMTBhR2x6TG0wb0tUdHlaWFIxY200Z1JTaGhMR0lwZlR0SkxuQnliM1J2ZEhsd1pTNXlaV0ZrU1c1ME5qUTlTUzV3Y205MGIzUjVjR1V1WW1FN1NTNXdjbTkwYjNSNWNHVXVZMkU5Wm5WdVkzUnBiMjRvS1h0MllYSWdZVDEwYUdsekxtMG9LU3hpUFhSb2FYTXViU2dwTzNKbGRIVnliaUJIS0dFc1lpbDlPMGt1Y0hKdmRHOTBlWEJsTG5KbFlXUkpiblEyTkZOMGNtbHVaejFKTG5CeWIzUnZkSGx3WlM1allUdEpMbkJ5YjNSdmRIbHdaUzVoWVQxbWRXNWpkR2x2YmlncGUzWmhjaUJoUFhSb2FYTXViU2dwTzNKbGRIVnliaUJPWVNoaExEQXBmVHRKTG5CeWIzUnZkSGx3WlM1eVpXRmtSbXh2WVhROVNTNXdjbTkwYjNSNWNHVXVZV0U3U1M1d2NtOTBiM1I1Y0dVdVdqMW1kVzVqZEdsdmJpZ3BlM1poY2lCaFBYUm9hWE11YlNncExHSTlkR2hwY3k1dEtDazdjbVYwZFhKdUlFOWhLR0VzWWlsOU8wa3VjSEp2ZEc5MGVYQmxMbkpsWVdSRWIzVmliR1U5U1M1d2NtOTBiM1I1Y0dVdVdqdEpMbkJ5YjNSdmRIbHdaUzV3WVQxbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlFaGRHaHBjeTVpVzNSb2FYTXVZU3NyWFgwN1NTNXdjbTkwYjNSNWNHVXVjbVZoWkVKdmIydzlTUzV3Y205MGIzUjVjR1V1Y0dFN1hHNUpMbkJ5YjNSdmRIbHdaUzV5WVQxbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCMGFHbHpMbVJoS0NsOU8wa3VjSEp2ZEc5MGVYQmxMbkpsWVdSRmJuVnRQVWt1Y0hKdmRHOTBlWEJsTG5KaE8xeHVTUzV3Y205MGIzUjVjR1V1Wm1FOVpuVnVZM1JwYjI0b1lTbDdkbUZ5SUdJOWRHaHBjeTVpTEdNOWRHaHBjeTVoTzJFOVl5dGhPMlp2Y2loMllYSWdaRDFiWFN4bVBWd2lYQ0k3WXp4aE95bDdkbUZ5SUdnOVlsdGpLeXRkTzJsbUtERXlPRDVvS1dRdWNIVnphQ2hvS1R0bGJITmxJR2xtS0RFNU1qNW9LV052Ym5ScGJuVmxPMlZzYzJVZ2FXWW9NakkwUG1ncGUzWmhjaUJ0UFdKYll5c3JYVHRrTG5CMWMyZ29LR2dtTXpFcFBEdzJmRzBtTmpNcGZXVnNjMlVnYVdZb01qUXdQbWdwZTIwOVlsdGpLeXRkTzNaaGNpQjBQV0piWXlzclhUdGtMbkIxYzJnb0tHZ21NVFVwUER3eE1ud29iU1kyTXlrOFBEWjhkQ1kyTXlsOVpXeHpaU0JwWmlneU5EZythQ2w3YlQxaVcyTXJLMTA3ZEQxaVcyTXJLMTA3ZG1GeUlFSTlZbHRqS3l0ZE8yZzlLR2dtTnlrOFBERTRmQ2h0SmpZektUdzhNVEo4S0hRbU5qTXBQRHcyZkVJbU5qTTdhQzA5TmpVMU16WTdaQzV3ZFhOb0tDaG9QajR4TUNZeE1ESXpLU3MxTlRJNU5pd29hQ1l4TURJektTczFOak15TUNsOU9ERTVNanc5WkM1c1pXNW5kR2dtSmlobUt6MVRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxMbUZ3Y0d4NUtHNTFiR3dzWkNrc1pDNXNaVzVuZEdnOU1DbDlaaXM5ZUdFb1pDazdkR2hwY3k1aFBXTTdjbVYwZFhKdUlHWjlPMXh1U1M1d2NtOTBiM1I1Y0dVdWNtVmhaRk4wY21sdVp6MUpMbkJ5YjNSdmRIbHdaUzVtWVR0SkxuQnliM1J2ZEhsd1pTNUVZejFtZFc1amRHbHZiaWdwZTNaaGNpQmhQWFJvYVhNdWJ5Z3BPM0psZEhWeWJpQjBhR2x6TG1aaEtHRXBmVHRKTG5CeWIzUnZkSGx3WlM1eVpXRmtVM1J5YVc1blYybDBhRXhsYm1kMGFEMUpMbkJ5YjNSdmRIbHdaUzVFWXp0SkxuQnliM1J2ZEhsd1pTNXhZVDFtZFc1amRHbHZiaWhoS1h0cFppZ3dQbUY4ZkhSb2FYTXVZU3RoUG5Sb2FYTXVZaTVzWlc1bmRHZ3BjbVYwZFhKdUlIUm9hWE11ZGowaE1DeHdLRndpU1c1MllXeHBaQ0JpZVhSbElHeGxibWQwYUNGY0lpa3NibVYzSUZWcGJuUTRRWEp5WVhrb01DazdkbUZ5SUdJOWRHaHBjeTVpTG5OMVltRnljbUY1S0hSb2FYTXVZU3gwYUdsekxtRXJZU2s3ZEdocGN5NWhLejFoTzI0b2RHaHBjeTVoUEQxMGFHbHpMbU1wTzNKbGRIVnliaUJpZlR0SkxuQnliM1J2ZEhsd1pTNXlaV0ZrUW5sMFpYTTlTUzV3Y205MGIzUjVjR1V1Y1dFN1NTNXdjbTkwYjNSNWNHVXVhV0U5Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnZEdocGN5NTNLRkJoS1gwN1NTNXdjbTkwYjNSNWNHVXVjbVZoWkZaaGNtbHVkRWhoYzJnMk5EMUpMbkJ5YjNSdmRIbHdaUzVwWVR0Y2Jra3VjSEp2ZEc5MGVYQmxMaVE5Wm5WdVkzUnBiMjRvS1h0MllYSWdZVDEwYUdsekxtSXNZajEwYUdsekxtRXNZejFoVzJKZExHUTlZVnRpS3pGZExHWTlZVnRpS3pKZExHZzlZVnRpS3pOZExHMDlZVnRpS3pSZExIUTlZVnRpS3pWZExFSTlZVnRpS3paZE8yRTlZVnRpS3pkZE8zUm9hWE11WVNzOU9EdHlaWFIxY200Z1UzUnlhVzVuTG1aeWIyMURhR0Z5UTI5a1pTaGpMR1FzWml4b0xHMHNkQ3hDTEdFcGZUdEpMbkJ5YjNSdmRIbHdaUzV5WldGa1JtbDRaV1JJWVhOb05qUTlTUzV3Y205MGIzUjVjR1V1SkR0bWRXNWpkR2x2YmlCS0tHRXNZaXhqS1h0MGFHbHpMbUU5VjJFb1lTeGlMR01wTzNSb2FYTXVUejEwYUdsekxtRXVRaWdwTzNSb2FYTXVZajEwYUdsekxtTTlMVEU3ZEdocGN5NW9QU0V4TzNSb2FYTXVkajF1ZFd4c2ZXY29YQ0pxYzNCaUxrSnBibUZ5ZVZKbFlXUmxjbHdpTEVvc2RtOXBaQ0F3S1R0MllYSWdTejFiWFR0S0xtTnNaV0Z5U1c1emRHRnVZMlZEWVdOb1pUMW1kVzVqZEdsdmJpZ3BlMHM5VzExOU8wb3VaMlYwU1c1emRHRnVZMlZEWVdOb1pVeGxibWQwYUQxbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCTExteGxibWQwYUgwN1puVnVZM1JwYjI0Z1dHRW9ZU3hpTEdNcGUybG1LRXN1YkdWdVozUm9LWHQyWVhJZ1pEMUxMbkJ2Y0NncE8yRW1KbVF1WVM1SUtHRXNZaXhqS1R0eVpYUjFjbTRnWkgxeVpYUjFjbTRnYm1WM0lFb29ZU3hpTEdNcGZVb3VZV3hzYjJNOVdHRTdTaTV3Y205MGIzUjVjR1V1ZW1JOVdHRTdTaTV3Y205MGIzUjVjR1V1WVd4c2IyTTlTaTV3Y205MGIzUjVjR1V1ZW1JN1NpNXdjbTkwYjNSNWNHVXVRMkU5Wm5WdVkzUnBiMjRvS1h0MGFHbHpMbUV1WTJ4bFlYSW9LVHQwYUdsekxtSTlkR2hwY3k1alBTMHhPM1JvYVhNdWFEMGhNVHQwYUdsekxuWTliblZzYkRzeE1EQStTeTVzWlc1bmRHZ21Ka3N1Y0hWemFDaDBhR2x6S1gwN1hHNUtMbkJ5YjNSdmRIbHdaUzVtY21WbFBVb3VjSEp2ZEc5MGVYQmxMa05oTzBvdWNISnZkRzkwZVhCbExrWmlQV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJSFJvYVhNdVQzMDdTaTV3Y205MGIzUjVjR1V1WjJWMFJtbGxiR1JEZFhKemIzSTlTaTV3Y205MGIzUjVjR1V1Um1JN1NpNXdjbTkwYjNSNWNHVXVRajFtZFc1amRHbHZiaWdwZTNKbGRIVnliaUIwYUdsekxtRXVRaWdwZlR0S0xuQnliM1J2ZEhsd1pTNW5aWFJEZFhKemIzSTlTaTV3Y205MGIzUjVjR1V1UWp0S0xuQnliM1J2ZEhsd1pTNVpQV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJSFJvYVhNdVlTNVpLQ2w5TzBvdWNISnZkRzkwZVhCbExtZGxkRUoxWm1abGNqMUtMbkJ5YjNSdmRIbHdaUzVaTzBvdWNISnZkRzkwZVhCbExraGlQV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJSFJvYVhNdVkzMDdTaTV3Y205MGIzUjVjR1V1WjJWMFJtbGxiR1JPZFcxaVpYSTlTaTV3Y205MGIzUjVjR1V1U0dJN1NpNXdjbTkwYjNSNWNHVXVUR0k5Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnZEdocGN5NWlmVHRLTG5CeWIzUnZkSGx3WlM1blpYUlhhWEpsVkhsd1pUMUtMbkJ5YjNSdmRIbHdaUzVNWWp0S0xuQnliM1J2ZEhsd1pTNU5ZajFtZFc1amRHbHZiaWdwZTNKbGRIVnliaUF5UFQxMGFHbHpMbUo5TzF4dVNpNXdjbTkwYjNSNWNHVXVhWE5FWld4cGJXbDBaV1E5U2k1d2NtOTBiM1I1Y0dVdVRXSTdTaTV3Y205MGIzUjVjR1V1WW1JOVpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z05EMDlkR2hwY3k1aWZUdEtMbkJ5YjNSdmRIbHdaUzVwYzBWdVpFZHliM1Z3UFVvdWNISnZkRzkwZVhCbExtSmlPMG91Y0hKdmRHOTBlWEJsTG1kbGRFVnljbTl5UFdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUhSb2FYTXVhSHg4ZEdocGN5NWhMbWRsZEVWeWNtOXlLQ2w5TzBvdWNISnZkRzkwZVhCbExtZGxkRVZ5Y205eVBVb3VjSEp2ZEc5MGVYQmxMbWRsZEVWeWNtOXlPMG91Y0hKdmRHOTBlWEJsTGtnOVpuVnVZM1JwYjI0b1lTeGlMR01wZTNSb2FYTXVZUzVJS0dFc1lpeGpLVHQwYUdsekxtSTlkR2hwY3k1alBTMHhmVHRLTG5CeWIzUnZkSGx3WlM1elpYUkNiRzlqYXoxS0xuQnliM1J2ZEhsd1pTNUlPMG91Y0hKdmRHOTBlWEJsTG5KbGMyVjBQV1oxYm1OMGFXOXVLQ2w3ZEdocGN5NWhMbkpsYzJWMEtDazdkR2hwY3k1aVBYUm9hWE11WXowdE1YMDdTaTV3Y205MGIzUjVjR1V1Y21WelpYUTlTaTV3Y205MGIzUjVjR1V1Y21WelpYUTdTaTV3Y205MGIzUjVjR1V1WVdSMllXNWpaVDFtZFc1amRHbHZiaWhoS1h0MGFHbHpMbUV1WVdSMllXNWpaU2hoS1gwN1NpNXdjbTkwYjNSNWNHVXVZV1IyWVc1alpUMUtMbkJ5YjNSdmRIbHdaUzVoWkhaaGJtTmxPMXh1U2k1d2NtOTBiM1I1Y0dVdWIyRTlablZ1WTNScGIyNG9LWHRwWmloMGFHbHpMbUV1ZVdFb0tTbHlaWFIxY200aE1UdHBaaWgwYUdsekxtZGxkRVZ5Y205eUtDa3BjbVYwZFhKdUlIQW9YQ0pFWldOdlpHVnlJR2hwZENCaGJpQmxjbkp2Y2x3aUtTd2hNVHQwYUdsekxrODlkR2hwY3k1aExrSW9LVHQyWVhJZ1lUMTBhR2x6TG1FdWJ5Z3BMR0k5WVQ0K1BqTTdZU1k5Tnp0cFppZ3dJVDFoSmlZMUlUMWhKaVl4SVQxaEppWXlJVDFoSmlZeklUMWhKaVkwSVQxaEtYSmxkSFZ5YmlCd0tGd2lTVzUyWVd4cFpDQjNhWEpsSUhSNWNHVTZJQ1Z6SUNoaGRDQndiM05wZEdsdmJpQWxjeWxjSWl4aExIUm9hWE11VHlrc2RHaHBjeTVvUFNFd0xDRXhPM1JvYVhNdVl6MWlPM1JvYVhNdVlqMWhPM0psZEhWeWJpRXdmVHRLTG5CeWIzUnZkSGx3WlM1dVpYaDBSbWxsYkdROVNpNXdjbTkwYjNSNWNHVXViMkU3U2k1d2NtOTBiM1I1Y0dVdVQyRTlablZ1WTNScGIyNG9LWHQwYUdsekxtRXViV0lvZEdocGN5NWpQRHd6ZkhSb2FYTXVZaWw5TzBvdWNISnZkRzkwZVhCbExuVnVjMnRwY0VobFlXUmxjajFLTG5CeWIzUnZkSGx3WlM1UFlUdGNia291Y0hKdmRHOTBlWEJsTGt4alBXWjFibU4wYVc5dUtDbDdkbUZ5SUdFOWRHaHBjeTVqTzJadmNpaDBhR2x6TGs5aEtDazdkR2hwY3k1dllTZ3BKaVowYUdsekxtTTlQV0U3S1hSb2FYTXVReWdwTzNSb2FYTXVZUzU1WVNncGZIeDBhR2x6TGs5aEtDbDlPMG91Y0hKdmRHOTBlWEJsTG5OcmFYQk5ZWFJqYUdsdVowWnBaV3hrY3oxS0xuQnliM1J2ZEhsd1pTNU1ZenRLTG5CeWIzUnZkSGx3WlM1c1lqMW1kVzVqZEdsdmJpZ3BlekFoUFhSb2FYTXVZajhvY0NoY0lrbHVkbUZzYVdRZ2QybHlaU0IwZVhCbElHWnZjaUJ6YTJsd1ZtRnlhVzUwUm1sbGJHUmNJaWtzZEdocGN5NURLQ2twT25Sb2FYTXVZUzVyWWlncGZUdEtMbkJ5YjNSdmRIbHdaUzV6YTJsd1ZtRnlhVzUwUm1sbGJHUTlTaTV3Y205MGIzUjVjR1V1YkdJN1NpNXdjbTkwYjNSNWNHVXVaMkk5Wm5WdVkzUnBiMjRvS1h0cFppZ3lJVDEwYUdsekxtSXBjQ2hjSWtsdWRtRnNhV1FnZDJseVpTQjBlWEJsSUdadmNpQnphMmx3UkdWc2FXMXBkR1ZrUm1sbGJHUmNJaWtzZEdocGN5NURLQ2s3Wld4elpYdDJZWElnWVQxMGFHbHpMbUV1YnlncE8zUm9hWE11WVM1aFpIWmhibU5sS0dFcGZYMDdTaTV3Y205MGIzUjVjR1V1YzJ0cGNFUmxiR2x0YVhSbFpFWnBaV3hrUFVvdWNISnZkRzkwZVhCbExtZGlPMXh1U2k1d2NtOTBiM1I1Y0dVdWFHSTlablZ1WTNScGIyNG9LWHMxSVQxMGFHbHpMbUkvS0hBb1hDSkpiblpoYkdsa0lIZHBjbVVnZEhsd1pTQm1iM0lnYzJ0cGNFWnBlR1ZrTXpKR2FXVnNaRndpS1N4MGFHbHpMa01vS1NrNmRHaHBjeTVoTG1Ga2RtRnVZMlVvTkNsOU8wb3VjSEp2ZEc5MGVYQmxMbk5yYVhCR2FYaGxaRE15Um1sbGJHUTlTaTV3Y205MGIzUjVjR1V1YUdJN1NpNXdjbTkwYjNSNWNHVXVhV0k5Wm5WdVkzUnBiMjRvS1hzeElUMTBhR2x6TG1JL0tIQW9YQ0pKYm5aaGJHbGtJSGRwY21VZ2RIbHdaU0JtYjNJZ2MydHBjRVpwZUdWa05qUkdhV1ZzWkZ3aUtTeDBhR2x6TGtNb0tTazZkR2hwY3k1aExtRmtkbUZ1WTJVb09DbDlPMG91Y0hKdmRHOTBlWEJsTG5OcmFYQkdhWGhsWkRZMFJtbGxiR1E5U2k1d2NtOTBiM1I1Y0dVdWFXSTdTaTV3Y205MGIzUjVjR1V1YW1JOVpuVnVZM1JwYjI0b0tYdDJZWElnWVQxMGFHbHpMbU03Wkc5N2FXWW9JWFJvYVhNdWIyRW9LU2w3Y0NoY0lsVnViV0YwWTJobFpDQnpkR0Z5ZEMxbmNtOTFjQ0IwWVdjNklITjBjbVZoYlNCRlQwWmNJaWs3ZEdocGN5NW9QU0V3TzJKeVpXRnJmV2xtS0RROVBYUm9hWE11WWlsN2RHaHBjeTVqSVQxaEppWW9jQ2hjSWxWdWJXRjBZMmhsWkNCbGJtUXRaM0p2ZFhBZ2RHRm5YQ0lwTEhSb2FYTXVhRDBoTUNrN1luSmxZV3Q5ZEdocGN5NURLQ2w5ZDJocGJHVW9NU2w5TzF4dVNpNXdjbTkwYjNSNWNHVXVjMnRwY0VkeWIzVndQVW91Y0hKdmRHOTBlWEJsTG1waU8wb3VjSEp2ZEc5MGVYQmxMa005Wm5WdVkzUnBiMjRvS1h0emQybDBZMmdvZEdocGN5NWlLWHRqWVhObElEQTZkR2hwY3k1c1lpZ3BPMkp5WldGck8yTmhjMlVnTVRwMGFHbHpMbWxpS0NrN1luSmxZV3M3WTJGelpTQXlPblJvYVhNdVoySW9LVHRpY21WaGF6dGpZWE5sSURVNmRHaHBjeTVvWWlncE8ySnlaV0ZyTzJOaGMyVWdNenAwYUdsekxtcGlLQ2s3WW5KbFlXczdaR1ZtWVhWc2REcHdLRndpU1c1MllXeHBaQ0IzYVhKbElHVnVZMjlrYVc1bklHWnZjaUJtYVdWc1pDNWNJaWw5ZlR0S0xuQnliM1J2ZEhsd1pTNXphMmx3Um1sbGJHUTlTaTV3Y205MGIzUjVjR1V1UXp0S0xuQnliM1J2ZEhsd1pTNUlZejFtZFc1amRHbHZiaWhoTEdJcGUyNTFiR3c5UFQxMGFHbHpMblltSmloMGFHbHpMblk5ZTMwcE8yNG9JWFJvYVhNdWRsdGhYU2s3ZEdocGN5NTJXMkZkUFdKOU8wb3VjSEp2ZEc5MGVYQmxMbkpsWjJsemRHVnlVbVZoWkVOaGJHeGlZV05yUFVvdWNISnZkRzkwZVhCbExraGpPMG91Y0hKdmRHOTBlWEJsTGtsalBXWjFibU4wYVc5dUtHRXBlMjRvYm5Wc2JDRTlQWFJvYVhNdWRpazdZVDEwYUdsekxuWmJZVjA3YmloaEtUdHlaWFIxY200Z1lTaDBhR2x6S1gwN1hHNUtMbkJ5YjNSdmRIbHdaUzV5ZFc1U1pXRmtRMkZzYkdKaFkyczlTaTV3Y205MGIzUjVjR1V1U1dNN1NpNXdjbTkwYjNSNWNHVXVXV0k5Wm5WdVkzUnBiMjRvWVN4aUtYdHVLREk5UFhSb2FYTXVZaWs3ZG1GeUlHTTlkR2hwY3k1aExtTXNaRDEwYUdsekxtRXVieWdwTzJROWRHaHBjeTVoTGtJb0tTdGtPM1JvYVhNdVlTNXpaWFJGYm1Rb1pDazdZaWhoTEhSb2FYTXBPM1JvYVhNdVlTNU5ZU2hrS1R0MGFHbHpMbUV1YzJWMFJXNWtLR01wZlR0S0xuQnliM1J2ZEhsd1pTNXlaV0ZrVFdWemMyRm5aVDFLTG5CeWIzUnZkSGx3WlM1WllqdEtMbkJ5YjNSdmRIbHdaUzVWWWoxbWRXNWpkR2x2YmloaExHSXNZeWw3YmlnelBUMTBhR2x6TG1JcE8yNG9kR2hwY3k1alBUMWhLVHRqS0dJc2RHaHBjeWs3ZEdocGN5NW9mSHcwUFQxMGFHbHpMbUo4ZkNod0tGd2lSM0p2ZFhBZ2MzVmliV1Z6YzJGblpTQmthV1FnYm05MElHVnVaQ0IzYVhSb0lHRnVJRVZPUkY5SFVrOVZVQ0IwWVdkY0lpa3NkR2hwY3k1b1BTRXdLWDA3U2k1d2NtOTBiM1I1Y0dVdWNtVmhaRWR5YjNWd1BVb3VjSEp2ZEc5MGVYQmxMbFZpTzF4dVNpNXdjbTkwYjNSNWNHVXVSMkk5Wm5WdVkzUnBiMjRvS1h0dUtESTlQWFJvYVhNdVlpazdkbUZ5SUdFOWRHaHBjeTVoTG04b0tTeGlQWFJvYVhNdVlTNUNLQ2tzWXoxaUsyRTdZVDFYWVNoMGFHbHpMbUV1V1NncExHSXNZU2s3ZEdocGN5NWhMazFoS0dNcE8zSmxkSFZ5YmlCaGZUdEtMbkJ5YjNSdmRIbHdaUzVuWlhSR2FXVnNaRVJsWTI5a1pYSTlTaTV3Y205MGIzUjVjR1V1UjJJN1NpNXdjbTkwYjNSNWNHVXVVRDFtZFc1amRHbHZiaWdwZTI0b01EMDlkR2hwY3k1aUtUdHlaWFIxY200Z2RHaHBjeTVoTG1SaEtDbDlPMG91Y0hKdmRHOTBlWEJsTG5KbFlXUkpiblF6TWoxS0xuQnliM1J2ZEhsd1pTNVFPMG91Y0hKdmRHOTBlWEJsTGxkaVBXWjFibU4wYVc5dUtDbDdiaWd3UFQxMGFHbHpMbUlwTzNKbGRIVnliaUIwYUdsekxtRXVSV0VvS1gwN1NpNXdjbTkwYjNSNWNHVXVjbVZoWkVsdWRETXlVM1J5YVc1blBVb3VjSEp2ZEc5MGVYQmxMbGRpTzBvdWNISnZkRzkwZVhCbExtSmhQV1oxYm1OMGFXOXVLQ2w3Ymlnd1BUMTBhR2x6TG1JcE8zSmxkSFZ5YmlCMGFHbHpMbUV1YzJFb0tYMDdTaTV3Y205MGIzUjVjR1V1Y21WaFpFbHVkRFkwUFVvdWNISnZkRzkwZVhCbExtSmhPMG91Y0hKdmRHOTBlWEJsTG1OaFBXWjFibU4wYVc5dUtDbDdiaWd3UFQxMGFHbHpMbUlwTzNKbGRIVnliaUIwYUdsekxtRXVSbUVvS1gwN1hHNUtMbkJ5YjNSdmRIbHdaUzV5WldGa1NXNTBOalJUZEhKcGJtYzlTaTV3Y205MGIzUjVjR1V1WTJFN1NpNXdjbTkwYjNSNWNHVXViVDFtZFc1amRHbHZiaWdwZTI0b01EMDlkR2hwY3k1aUtUdHlaWFIxY200Z2RHaHBjeTVoTG04b0tYMDdTaTV3Y205MGIzUjVjR1V1Y21WaFpGVnBiblF6TWoxS0xuQnliM1J2ZEhsd1pTNXRPMG91Y0hKdmRHOTBlWEJsTGtaalBXWjFibU4wYVc5dUtDbDdiaWd3UFQxMGFHbHpMbUlwTzNKbGRIVnliaUIwYUdsekxtRXVUeWdwZlR0S0xuQnliM1J2ZEhsd1pTNXlaV0ZrVldsdWRETXlVM1J5YVc1blBVb3VjSEp2ZEc5MGVYQmxMa1pqTzBvdWNISnZkRzkwZVhCbExtZGhQV1oxYm1OMGFXOXVLQ2w3Ymlnd1BUMTBhR2x6TG1JcE8zSmxkSFZ5YmlCMGFHbHpMbUV1UjJFb0tYMDdTaTV3Y205MGIzUjVjR1V1Y21WaFpGVnBiblEyTkQxS0xuQnliM1J2ZEhsd1pTNW5ZVHRLTG5CeWIzUnZkSGx3WlM1b1lUMW1kVzVqZEdsdmJpZ3BlMjRvTUQwOWRHaHBjeTVpS1R0eVpYUjFjbTRnZEdocGN5NWhMa2hoS0NsOU8wb3VjSEp2ZEc5MGVYQmxMbkpsWVdSVmFXNTBOalJUZEhKcGJtYzlTaTV3Y205MGIzUjVjR1V1YUdFN1NpNXdjbTkwYjNSNWNHVXVlbU05Wm5WdVkzUnBiMjRvS1h0dUtEQTlQWFJvYVhNdVlpazdjbVYwZFhKdUlIUm9hWE11WVM1SllTZ3BmVHRjYmtvdWNISnZkRzkwZVhCbExuSmxZV1JUYVc1ME16STlTaTV3Y205MGIzUjVjR1V1ZW1NN1NpNXdjbTkwYjNSNWNHVXVRV005Wm5WdVkzUnBiMjRvS1h0dUtEQTlQWFJvYVhNdVlpazdjbVYwZFhKdUlIUm9hWE11WVM1S1lTZ3BmVHRLTG5CeWIzUnZkSGx3WlM1eVpXRmtVMmx1ZERZMFBVb3VjSEp2ZEc5MGVYQmxMa0ZqTzBvdWNISnZkRzkwZVhCbExrSmpQV1oxYm1OMGFXOXVLQ2w3Ymlnd1BUMTBhR2x6TG1JcE8zSmxkSFZ5YmlCMGFHbHpMbUV1UzJFb0tYMDdTaTV3Y205MGIzUjVjR1V1Y21WaFpGTnBiblEyTkZOMGNtbHVaejFLTG5CeWIzUnZkSGx3WlM1Q1l6dEtMbkJ5YjNSdmRIbHdaUzVTWWoxbWRXNWpkR2x2YmlncGUyNG9OVDA5ZEdocGN5NWlLVHR5WlhSMWNtNGdkR2hwY3k1aExtMG9LWDA3U2k1d2NtOTBiM1I1Y0dVdWNtVmhaRVpwZUdWa016STlTaTV3Y205MGIzUjVjR1V1VW1JN1NpNXdjbTkwYjNSNWNHVXVVMkk5Wm5WdVkzUnBiMjRvS1h0dUtERTlQWFJvYVhNdVlpazdjbVYwZFhKdUlIUm9hWE11WVM1bllTZ3BmVHRLTG5CeWIzUnZkSGx3WlM1eVpXRmtSbWw0WldRMk5EMUtMbkJ5YjNSdmRIbHdaUzVUWWp0S0xuQnliM1J2ZEhsd1pTNVVZajFtZFc1amRHbHZiaWdwZTI0b01UMDlkR2hwY3k1aUtUdHlaWFIxY200Z2RHaHBjeTVoTG1oaEtDbDlPMXh1U2k1d2NtOTBiM1I1Y0dVdWNtVmhaRVpwZUdWa05qUlRkSEpwYm1jOVNpNXdjbTkwYjNSNWNHVXVWR0k3U2k1d2NtOTBiM1I1Y0dVdWRtTTlablZ1WTNScGIyNG9LWHR1S0RVOVBYUm9hWE11WWlrN2NtVjBkWEp1SUhSb2FYTXVZUzVRS0NsOU8wb3VjSEp2ZEc5MGVYQmxMbkpsWVdSVFptbDRaV1F6TWoxS0xuQnliM1J2ZEhsd1pTNTJZenRLTG5CeWIzUnZkSGx3WlM1M1l6MW1kVzVqZEdsdmJpZ3BlMjRvTlQwOWRHaHBjeTVpS1R0eVpYUjFjbTRnZEdocGN5NWhMbEFvS1M1MGIxTjBjbWx1WnlncGZUdEtMbkJ5YjNSdmRIbHdaUzV5WldGa1UyWnBlR1ZrTXpKVGRISnBibWM5U2k1d2NtOTBiM1I1Y0dVdWQyTTdTaTV3Y205MGIzUjVjR1V1ZUdNOVpuVnVZM1JwYjI0b0tYdHVLREU5UFhSb2FYTXVZaWs3Y21WMGRYSnVJSFJvYVhNdVlTNWlZU2dwZlR0S0xuQnliM1J2ZEhsd1pTNXlaV0ZrVTJacGVHVmtOalE5U2k1d2NtOTBiM1I1Y0dVdWVHTTdTaTV3Y205MGIzUjVjR1V1ZVdNOVpuVnVZM1JwYjI0b0tYdHVLREU5UFhSb2FYTXVZaWs3Y21WMGRYSnVJSFJvYVhNdVlTNWpZU2dwZlR0S0xuQnliM1J2ZEhsd1pTNXlaV0ZrVTJacGVHVmtOalJUZEhKcGJtYzlTaTV3Y205MGIzUjVjR1V1ZVdNN1hHNUtMbkJ5YjNSdmRIbHdaUzVoWVQxbWRXNWpkR2x2YmlncGUyNG9OVDA5ZEdocGN5NWlLVHR5WlhSMWNtNGdkR2hwY3k1aExtRmhLQ2w5TzBvdWNISnZkRzkwZVhCbExuSmxZV1JHYkc5aGREMUtMbkJ5YjNSdmRIbHdaUzVoWVR0S0xuQnliM1J2ZEhsd1pTNWFQV1oxYm1OMGFXOXVLQ2w3YmlneFBUMTBhR2x6TG1JcE8zSmxkSFZ5YmlCMGFHbHpMbUV1V2lncGZUdEtMbkJ5YjNSdmRIbHdaUzV5WldGa1JHOTFZbXhsUFVvdWNISnZkRzkwZVhCbExsbzdTaTV3Y205MGIzUjVjR1V1Y0dFOVpuVnVZM1JwYjI0b0tYdHVLREE5UFhSb2FYTXVZaWs3Y21WMGRYSnVJU0YwYUdsekxtRXVieWdwZlR0S0xuQnliM1J2ZEhsd1pTNXlaV0ZrUW05dmJEMUtMbkJ5YjNSdmRIbHdaUzV3WVR0S0xuQnliM1J2ZEhsd1pTNXlZVDFtZFc1amRHbHZiaWdwZTI0b01EMDlkR2hwY3k1aUtUdHlaWFIxY200Z2RHaHBjeTVoTG5OaEtDbDlPMG91Y0hKdmRHOTBlWEJsTG5KbFlXUkZiblZ0UFVvdWNISnZkRzkwZVhCbExuSmhPMG91Y0hKdmRHOTBlWEJsTG1aaFBXWjFibU4wYVc5dUtDbDdiaWd5UFQxMGFHbHpMbUlwTzNaaGNpQmhQWFJvYVhNdVlTNXZLQ2s3Y21WMGRYSnVJSFJvYVhNdVlTNW1ZU2hoS1gwN1NpNXdjbTkwYjNSNWNHVXVjbVZoWkZOMGNtbHVaejFLTG5CeWIzUnZkSGx3WlM1bVlUdGNia291Y0hKdmRHOTBlWEJsTG5GaFBXWjFibU4wYVc5dUtDbDdiaWd5UFQxMGFHbHpMbUlwTzNaaGNpQmhQWFJvYVhNdVlTNXZLQ2s3Y21WMGRYSnVJSFJvYVhNdVlTNXhZU2hoS1gwN1NpNXdjbTkwYjNSNWNHVXVjbVZoWkVKNWRHVnpQVW91Y0hKdmRHOTBlWEJsTG5GaE8wb3VjSEp2ZEc5MGVYQmxMbWxoUFdaMWJtTjBhVzl1S0NsN2JpZ3dQVDEwYUdsekxtSXBPM0psZEhWeWJpQjBhR2x6TG1FdWFXRW9LWDA3U2k1d2NtOTBiM1I1Y0dVdWNtVmhaRlpoY21sdWRFaGhjMmcyTkQxS0xuQnliM1J2ZEhsd1pTNXBZVHRLTG5CeWIzUnZkSGx3WlM1RFl6MW1kVzVqZEdsdmJpZ3BlMjRvTUQwOWRHaHBjeTVpS1R0eVpYUjFjbTRnZEdocGN5NWhMbVppS0NsOU8wb3VjSEp2ZEc5MGVYQmxMbkpsWVdSVGFXNTBTR0Z6YURZMFBVb3VjSEp2ZEc5MGVYQmxMa05qTzBvdWNISnZkRzkwZVhCbExuYzlablZ1WTNScGIyNG9ZU2w3Ymlnd1BUMTBhR2x6TG1JcE8zSmxkSFZ5YmlCMGFHbHpMbUV1ZHloaEtYMDdTaTV3Y205MGIzUjVjR1V1Y21WaFpGTndiR2wwVm1GeWFXNTBOalE5U2k1d2NtOTBiM1I1Y0dVdWR6dGNia291Y0hKdmRHOTBlWEJsTG1WaFBXWjFibU4wYVc5dUtHRXBlMjRvTUQwOWRHaHBjeTVpS1R0eVpYUjFjbTRnZEdocGN5NWhMbmNvWm5WdVkzUnBiMjRvWWl4aktYdHlaWFIxY200Z1RXRW9ZaXhqTEdFcGZTbDlPMG91Y0hKdmRHOTBlWEJsTG5KbFlXUlRjR3hwZEZwcFozcGhaMVpoY21sdWREWTBQVW91Y0hKdmRHOTBlWEJsTG1WaE8wb3VjSEp2ZEc5MGVYQmxMaVE5Wm5WdVkzUnBiMjRvS1h0dUtERTlQWFJvYVhNdVlpazdjbVYwZFhKdUlIUm9hWE11WVM0a0tDbDlPMG91Y0hKdmRHOTBlWEJsTG5KbFlXUkdhWGhsWkVoaGMyZzJORDFLTG5CeWIzUnZkSGx3WlM0a08wb3VjSEp2ZEc5MGVYQmxMblJoUFdaMWJtTjBhVzl1S0dFcGUyNG9NVDA5ZEdocGN5NWlLVHR5WlhSMWNtNGdkR2hwY3k1aExuUmhLR0VwZlR0S0xuQnliM1J2ZEhsd1pTNXlaV0ZrVTNCc2FYUkdhWGhsWkRZMFBVb3VjSEp2ZEc5MGVYQmxMblJoTzJaMWJtTjBhVzl1SUV3b1lTeGlLWHR1S0RJOVBXRXVZaWs3ZG1GeUlHTTlZUzVoTG04b0tUdGpQV0V1WVM1Q0tDa3JZenRtYjNJb2RtRnlJR1E5VzEwN1lTNWhMa0lvS1R4ak95bGtMbkIxYzJnb1lpNWpZV3hzS0dFdVlTa3BPM0psZEhWeWJpQmtmVW91Y0hKdmRHOTBlWEJsTG1kalBXWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlFd29kR2hwY3l4MGFHbHpMbUV1WkdFcGZUdGNia291Y0hKdmRHOTBlWEJsTG5KbFlXUlFZV05yWldSSmJuUXpNajFLTG5CeWIzUnZkSGx3WlM1bll6dEtMbkJ5YjNSdmRIbHdaUzVvWXoxbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCTUtIUm9hWE1zZEdocGN5NWhMa1ZoS1gwN1NpNXdjbTkwYjNSNWNHVXVjbVZoWkZCaFkydGxaRWx1ZERNeVUzUnlhVzVuUFVvdWNISnZkRzkwZVhCbExtaGpPMG91Y0hKdmRHOTBlWEJsTG1salBXWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlFd29kR2hwY3l4MGFHbHpMbUV1YzJFcGZUdEtMbkJ5YjNSdmRIbHdaUzV5WldGa1VHRmphMlZrU1c1ME5qUTlTaTV3Y205MGIzUjVjR1V1YVdNN1NpNXdjbTkwYjNSNWNHVXVhbU05Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnVENoMGFHbHpMSFJvYVhNdVlTNUdZU2w5TzBvdWNISnZkRzkwZVhCbExuSmxZV1JRWVdOclpXUkpiblEyTkZOMGNtbHVaejFLTG5CeWIzUnZkSGx3WlM1cVl6dEtMbkJ5YjNSdmRIbHdaUzV4WXoxbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCTUtIUm9hWE1zZEdocGN5NWhMbThwZlR0S0xuQnliM1J2ZEhsd1pTNXlaV0ZrVUdGamEyVmtWV2x1ZERNeVBVb3VjSEp2ZEc5MGVYQmxMbkZqTzBvdWNISnZkRzkwZVhCbExuSmpQV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJRXdvZEdocGN5eDBhR2x6TG1FdVR5bDlPMXh1U2k1d2NtOTBiM1I1Y0dVdWNtVmhaRkJoWTJ0bFpGVnBiblF6TWxOMGNtbHVaejFLTG5CeWIzUnZkSGx3WlM1eVl6dEtMbkJ5YjNSdmRIbHdaUzV6WXoxbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCTUtIUm9hWE1zZEdocGN5NWhMa2RoS1gwN1NpNXdjbTkwYjNSNWNHVXVjbVZoWkZCaFkydGxaRlZwYm5RMk5EMUtMbkJ5YjNSdmRIbHdaUzV6WXp0S0xuQnliM1J2ZEhsd1pTNTBZejFtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJNS0hSb2FYTXNkR2hwY3k1aExraGhLWDA3U2k1d2NtOTBiM1I1Y0dVdWNtVmhaRkJoWTJ0bFpGVnBiblEyTkZOMGNtbHVaejFLTG5CeWIzUnZkSGx3WlM1MFl6dEtMbkJ5YjNSdmRIbHdaUzV1WXoxbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCTUtIUm9hWE1zZEdocGN5NWhMa2xoS1gwN1NpNXdjbTkwYjNSNWNHVXVjbVZoWkZCaFkydGxaRk5wYm5Rek1qMUtMbkJ5YjNSdmRIbHdaUzV1WXp0S0xuQnliM1J2ZEhsd1pTNXZZejFtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJNS0hSb2FYTXNkR2hwY3k1aExrcGhLWDA3U2k1d2NtOTBiM1I1Y0dVdWNtVmhaRkJoWTJ0bFpGTnBiblEyTkQxS0xuQnliM1J2ZEhsd1pTNXZZenRLTG5CeWIzUnZkSGx3WlM1d1l6MW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQk1LSFJvYVhNc2RHaHBjeTVoTGt0aEtYMDdYRzVLTG5CeWIzUnZkSGx3WlM1eVpXRmtVR0ZqYTJWa1UybHVkRFkwVTNSeWFXNW5QVW91Y0hKdmRHOTBlWEJsTG5Cak8wb3VjSEp2ZEc5MGVYQmxMbUpqUFdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUV3b2RHaHBjeXgwYUdsekxtRXViU2w5TzBvdWNISnZkRzkwZVhCbExuSmxZV1JRWVdOclpXUkdhWGhsWkRNeVBVb3VjSEp2ZEc5MGVYQmxMbUpqTzBvdWNISnZkRzkwZVhCbExtTmpQV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJRXdvZEdocGN5eDBhR2x6TG1FdVoyRXBmVHRLTG5CeWIzUnZkSGx3WlM1eVpXRmtVR0ZqYTJWa1JtbDRaV1EyTkQxS0xuQnliM1J2ZEhsd1pTNWpZenRLTG5CeWIzUnZkSGx3WlM1a1l6MW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQk1LSFJvYVhNc2RHaHBjeTVoTG1oaEtYMDdTaTV3Y205MGIzUjVjR1V1Y21WaFpGQmhZMnRsWkVacGVHVmtOalJUZEhKcGJtYzlTaTV3Y205MGIzUjVjR1V1WkdNN1NpNXdjbTkwYjNSNWNHVXVhMk05Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnVENoMGFHbHpMSFJvYVhNdVlTNVFLWDA3U2k1d2NtOTBiM1I1Y0dVdWNtVmhaRkJoWTJ0bFpGTm1hWGhsWkRNeVBVb3VjSEp2ZEc5MGVYQmxMbXRqTzBvdWNISnZkRzkwZVhCbExteGpQV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJRXdvZEdocGN5eDBhR2x6TG1FdVltRXBmVHRjYmtvdWNISnZkRzkwZVhCbExuSmxZV1JRWVdOclpXUlRabWw0WldRMk5EMUtMbkJ5YjNSdmRIbHdaUzVzWXp0S0xuQnliM1J2ZEhsd1pTNXRZejFtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJNS0hSb2FYTXNkR2hwY3k1aExtTmhLWDA3U2k1d2NtOTBiM1I1Y0dVdWNtVmhaRkJoWTJ0bFpGTm1hWGhsWkRZMFUzUnlhVzVuUFVvdWNISnZkRzkwZVhCbExtMWpPMG91Y0hKdmRHOTBlWEJsTG1aalBXWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlFd29kR2hwY3l4MGFHbHpMbUV1WVdFcGZUdEtMbkJ5YjNSdmRIbHdaUzV5WldGa1VHRmphMlZrUm14dllYUTlTaTV3Y205MGIzUjVjR1V1Wm1NN1NpNXdjbTkwYjNSNWNHVXVKR0k5Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnVENoMGFHbHpMSFJvYVhNdVlTNWFLWDA3U2k1d2NtOTBiM1I1Y0dVdWNtVmhaRkJoWTJ0bFpFUnZkV0pzWlQxS0xuQnliM1J2ZEhsd1pTNGtZanRLTG5CeWIzUnZkSGx3WlM1YVlqMW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQk1LSFJvYVhNc2RHaHBjeTVoTG5CaEtYMDdTaTV3Y205MGIzUjVjR1V1Y21WaFpGQmhZMnRsWkVKdmIydzlTaTV3Y205MGIzUjVjR1V1V21JN1NpNXdjbTkwYjNSNWNHVXVZV005Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnVENoMGFHbHpMSFJvYVhNdVlTNXlZU2w5TzF4dVNpNXdjbTkwYjNSNWNHVXVjbVZoWkZCaFkydGxaRVZ1ZFcwOVNpNXdjbTkwYjNSNWNHVXVZV003U2k1d2NtOTBiM1I1Y0dVdWRXTTlablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdUQ2gwYUdsekxIUm9hWE11WVM1cFlTbDlPMG91Y0hKdmRHOTBlWEJsTG5KbFlXUlFZV05yWldSV1lYSnBiblJJWVhOb05qUTlTaTV3Y205MGIzUjVjR1V1ZFdNN1NpNXdjbTkwYjNSNWNHVXVaV005Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnVENoMGFHbHpMSFJvYVhNdVlTNGtLWDA3U2k1d2NtOTBiM1I1Y0dVdWNtVmhaRkJoWTJ0bFpFWnBlR1ZrU0dGemFEWTBQVW91Y0hKdmRHOTBlWEJsTG1Wak8yWjFibU4wYVc5dUlGbGhLR0VzWWl4akxHUXNaaWw3ZEdocGN5NXRZVDFoTzNSb2FYTXVRbUU5WWp0MGFHbHpMbXhoUFdNN2RHaHBjeTVPWVQxa08zUm9hWE11Ym1FOVpuMW5LRndpYW5Od1lpNUZlSFJsYm5OcGIyNUdhV1ZzWkVsdVptOWNJaXhaWVN4MmIybGtJREFwTzJaMWJtTjBhVzl1SUZwaEtHRXNZaXhqTEdRc1ppeG9LWHQwYUdsekxscGhQV0U3ZEdocGN5NTZZVDFpTzNSb2FYTXVRV0U5WXp0MGFHbHpMbGRoUFdRN2RHaHBjeTVCWWoxbU8zUm9hWE11VG1JOWFIMW5LRndpYW5Od1lpNUZlSFJsYm5OcGIyNUdhV1ZzWkVKcGJtRnllVWx1Wm05Y0lpeGFZU3gyYjJsa0lEQXBPMWxoTG5CeWIzUnZkSGx3WlM1R1BXWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlTRjBhR2x6TG14aGZUdFpZUzV3Y205MGIzUjVjR1V1YVhOTlpYTnpZV2RsVkhsd1pUMVpZUzV3Y205MGIzUjVjR1V1Ump0bWRXNWpkR2x2YmlCT0tDbDdmV2NvWENKcWMzQmlMazFsYzNOaFoyVmNJaXhPTEhadmFXUWdNQ2s3VGk1SFJVNUZVa0ZVUlY5VVQxOVBRa3BGUTFROUlUQTdUaTVIUlU1RlVrRlVSVjlHVWs5TlgwOUNTa1ZEVkQwaE1EdDJZWElnSkdFOVhDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdWV2x1ZERoQmNuSmhlVHRPTG5CeWIzUnZkSGx3WlM1SllqMW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQjBhR2x6TG1KOU8xeHVUaTV3Y205MGIzUjVjR1V1WjJWMFNuTlFZazFsYzNOaFoyVkpaRDFPTG5CeWIzUnZkSGx3WlM1SllqdGNiazR1YVc1cGRHbGhiR2w2WlQxbWRXNWpkR2x2YmloaExHSXNZeXhrTEdZc2FDbDdZUzVtUFc1MWJHdzdZbng4S0dJOVl6OWJZMTA2VzEwcE8yRXVZajFqUDFOMGNtbHVaeWhqS1RwMmIybGtJREE3WVM1RVBUQTlQVDFqUHkweE9qQTdZUzUxUFdJN1lUcDdZejFoTG5VdWJHVnVaM1JvTzJJOUxURTdhV1lvWXlZbUtHSTlZeTB4TEdNOVlTNTFXMkpkTENFb2JuVnNiRDA5UFdOOGZGd2liMkpxWldOMFhDSWhQWFI1Y0dWdlppQmpmSHhCY25KaGVTNXBjMEZ5Y21GNUtHTXBmSHdrWVNZbVl5QnBibk4wWVc1alpXOW1JRlZwYm5RNFFYSnlZWGtwS1NsN1lTNUhQV0l0WVM1RU8yRXVhVDFqTzJKeVpXRnJJR0Y5TFRFOFpEOG9ZUzVIUFUxaGRHZ3ViV0Y0S0dRc1lpc3hMV0V1UkNrc1lTNXBQVzUxYkd3cE9tRXVSejFPZFcxaVpYSXVUVUZZWDFaQlRGVkZmV0V1WVQxN2ZUdHBaaWhtS1dadmNpaGtQVEE3WkR4bUxteGxibWQwYUR0a0t5c3BZajFtVzJSZExHSThZUzVIUHloaUt6MWhMa1FzWVM1MVcySmRQV0V1ZFZ0aVhYeDhZV0lwT2loaVlpaGhLU3hoTG1sYllsMDlZUzVwVzJKZGZIeGhZaWs3YVdZb2FDWW1hQzVzWlc1bmRHZ3BabTl5S0dROU1EdGtQR2d1YkdWdVozUm9PMlFyS3lsallpaGhMR2hiWkYwcGZUdGNiblpoY2lCaFlqMVBZbXBsWTNRdVpuSmxaWHBsUDA5aWFtVmpkQzVtY21WbGVtVW9XMTBwT2x0ZE8yWjFibU4wYVc5dUlHSmlLR0VwZTNaaGNpQmlQV0V1Unl0aExrUTdZUzUxVzJKZGZId29ZUzVwUFdFdWRWdGlYVDE3ZlNsOVpuVnVZM1JwYjI0Z1pHSW9ZU3hpTEdNcGUyWnZjaWgyWVhJZ1pEMWJYU3htUFRBN1pqeGhMbXhsYm1kMGFEdG1LeXNwWkZ0bVhUMWlMbU5oYkd3b1lWdG1YU3hqTEdGYlpsMHBPM0psZEhWeWJpQmtmVTR1ZEc5UFltcGxZM1JNYVhOMFBXUmlPMDR1ZEc5UFltcGxZM1JGZUhSbGJuTnBiMjQ5Wm5WdVkzUnBiMjRvWVN4aUxHTXNaQ3htS1h0bWIzSW9kbUZ5SUdnZ2FXNGdZeWw3ZG1GeUlHMDlZMXRvWFN4MFBXUXVZMkZzYkNoaExHMHBPMmxtS0c1MWJHd2hQWFFwZTJadmNpaDJZWElnUWlCcGJpQnRMa0poS1dsbUtHMHVRbUV1YUdGelQzZHVVSEp2Y0dWeWRIa29RaWtwWW5KbFlXczdZbHRDWFQxdExrNWhQMjB1Ym1FL1pHSW9kQ3h0TGs1aExHWXBPbTB1VG1Fb1ppeDBLVHAwZlgxOU8xeHVUaTV6WlhKcFlXeHBlbVZDYVc1aGNubEZlSFJsYm5OcGIyNXpQV1oxYm1OMGFXOXVLR0VzWWl4akxHUXBlMlp2Y2loMllYSWdaaUJwYmlCaktYdDJZWElnYUQxalcyWmRMRzA5YUM1YVlUdHBaaWdoYUM1QllTbDBhSEp2ZHlCRmNuSnZjaWhjSWsxbGMzTmhaMlVnWlhoMFpXNXphVzl1SUhCeVpYTmxiblFnZEdoaGRDQjNZWE1nWjJWdVpYSmhkR1ZrSUhkcGRHaHZkWFFnWW1sdVlYSjVJSE5sY21saGJHbDZZWFJwYjI0Z2MzVndjRzl5ZEZ3aUtUdDJZWElnZEQxa0xtTmhiR3dvWVN4dEtUdHBaaWh1ZFd4c0lUMTBLV2xtS0cwdVJpZ3BLV2xtS0dndVYyRXBhQzVCWVM1allXeHNLR0lzYlM1dFlTeDBMR2d1VjJFcE8yVnNjMlVnZEdoeWIzY2dSWEp5YjNJb1hDSk5aWE56WVdkbElHVjRkR1Z1YzJsdmJpQndjbVZ6Wlc1MElHaHZiR1JwYm1jZ2MzVmliV1Z6YzJGblpTQjNhWFJvYjNWMElHSnBibUZ5ZVNCemRYQndiM0owSUdWdVlXSnNaV1FzSUdGdVpDQnRaWE56WVdkbElHbHpJR0psYVc1bklITmxjbWxoYkdsNlpXUWdkRzhnWW1sdVlYSjVJR1p2Y20xaGRGd2lLVHRsYkhObElHZ3VRV0V1WTJGc2JDaGlMRzB1YldFc2RDbDlmVHRjYms0dWNtVmhaRUpwYm1GeWVVVjRkR1Z1YzJsdmJqMW1kVzVqZEdsdmJpaGhMR0lzWXl4a0xHWXBlM1poY2lCb1BXTmJZaTVqWFR0cFppaG9LWHRqUFdndVdtRTdhV1lvSVdndWVtRXBkR2h5YjNjZ1JYSnliM0lvWENKRVpYTmxjbWxoYkdsNmFXNW5JR1Y0ZEdWdWMybHZiaUIzYUc5elpTQm5aVzVsY21GMFpXUWdZMjlrWlNCa2IyVnpJRzV2ZENCemRYQndiM0owSUdKcGJtRnllU0JtYjNKdFlYUmNJaWs3YVdZb1l5NUdLQ2twZTNaaGNpQnRQVzVsZHlCakxteGhPMmd1ZW1FdVkyRnNiQ2hpTEcwc2FDNUJZaWw5Wld4elpTQnRQV2d1ZW1FdVkyRnNiQ2hpS1R0akxtNWhKaVloYUM1T1lqOG9ZajFrTG1OaGJHd29ZU3hqS1NrL1lpNXdkWE5vS0cwcE9tWXVZMkZzYkNoaExHTXNXMjFkS1RwbUxtTmhiR3dvWVN4akxHMHBmV1ZzYzJVZ1lpNURLQ2w5TzJaMWJtTjBhVzl1SUU4b1lTeGlLWHRwWmloaVBHRXVSeWw3WWlzOVlTNUVPM1poY2lCalBXRXVkVnRpWFR0eVpYUjFjbTRnWXowOVBXRmlQMkV1ZFZ0aVhUMWJYVHBqZldsbUtHRXVhU2x5WlhSMWNtNGdZejFoTG1sYllsMHNZejA5UFdGaVAyRXVhVnRpWFQxYlhUcGpmVTR1WjJWMFJtbGxiR1E5VHp0T0xtZGxkRkpsY0dWaGRHVmtSbWxsYkdROVpuVnVZM1JwYjI0b1lTeGlLWHR5WlhSMWNtNGdUeWhoTEdJcGZUdGNibVoxYm1OMGFXOXVJR1ZpS0dFc1lpbDdZVDFQS0dFc1lpazdjbVYwZFhKdUlHNTFiR3c5UFdFL1lUb3JZWDFPTG1kbGRFOXdkR2x2Ym1Gc1JteHZZWFJwYm1kUWIybHVkRVpwWld4a1BXVmlPMloxYm1OMGFXOXVJR1ppS0dFc1lpbDdZVDFQS0dFc1lpazdjbVYwZFhKdUlHNTFiR3c5UFdFL1lUb2hJV0Y5VGk1blpYUkNiMjlzWldGdVJtbGxiR1E5Wm1JN1RpNW5aWFJTWlhCbFlYUmxaRVpzYjJGMGFXNW5VRzlwYm5SR2FXVnNaRDFtZFc1amRHbHZiaWhoTEdJcGUzWmhjaUJqUFU4b1lTeGlLVHRoTG1GOGZDaGhMbUU5ZTMwcE8ybG1LQ0ZoTG1GYllsMHBlMlp2Y2loMllYSWdaRDB3TzJROFl5NXNaVzVuZEdnN1pDc3JLV05iWkYwOUsyTmJaRjA3WVM1aFcySmRQU0V3ZlhKbGRIVnliaUJqZlR0T0xtZGxkRkpsY0dWaGRHVmtRbTl2YkdWaGJrWnBaV3hrUFdaMWJtTjBhVzl1S0dFc1lpbDdkbUZ5SUdNOVR5aGhMR0lwTzJFdVlYeDhLR0V1WVQxN2ZTazdhV1lvSVdFdVlWdGlYU2w3Wm05eUtIWmhjaUJrUFRBN1pEeGpMbXhsYm1kMGFEdGtLeXNwWTF0a1hUMGhJV05iWkYwN1lTNWhXMkpkUFNFd2ZYSmxkSFZ5YmlCamZUdGNibVoxYm1OMGFXOXVJR2RpS0dFcGUybG1LRzUxYkd3OVBXRjhmRndpYzNSeWFXNW5YQ0k5UFQxMGVYQmxiMllnWVNseVpYUjFjbTRnWVR0cFppZ2tZU1ltWVNCcGJuTjBZVzVqWlc5bUlGVnBiblE0UVhKeVlYa3BjbVYwZFhKdUlFSmhLR0VwTzNBb1hDSkRZVzV1YjNRZ1kyOWxjbU5sSUhSdklHSTJOQ0J6ZEhKcGJtYzZJRndpSzJzb1lTa3BPM0psZEhWeWJpQnVkV3hzZlU0dVlubDBaWE5CYzBJMk5EMW5ZanRtZFc1amRHbHZiaUJvWWloaEtYdHBaaWh1ZFd4c1BUMWhmSHhoSUdsdWMzUmhibU5sYjJZZ1ZXbHVkRGhCY25KaGVTbHlaWFIxY200Z1lUdHBaaWhjSW5OMGNtbHVaMXdpUFQwOWRIbHdaVzltSUdFcGNtVjBkWEp1SUVSaEtHRXBPM0FvWENKRFlXNXViM1FnWTI5bGNtTmxJSFJ2SUZWcGJuUTRRWEp5WVhrNklGd2lLMnNvWVNrcE8zSmxkSFZ5YmlCdWRXeHNmVTR1WW5sMFpYTkJjMVU0UFdoaU8wNHVZbmwwWlhOTWFYTjBRWE5DTmpROVpuVnVZM1JwYjI0b1lTbDdhV0lvWVNrN2NtVjBkWEp1SUdFdWJHVnVaM1JvSmlaY0luTjBjbWx1WjF3aUlUMDlkSGx3Wlc5bUlHRmJNRjAvYkNoaExHZGlLVHBoZlR0T0xtSjVkR1Z6VEdsemRFRnpWVGc5Wm5WdVkzUnBiMjRvWVNsN2FXSW9ZU2s3Y21WMGRYSnVJV0V1YkdWdVozUm9mSHhoV3pCZGFXNXpkR0Z1WTJWdlppQlZhVzUwT0VGeWNtRjVQMkU2YkNoaExHaGlLWDA3WEc1bWRXNWpkR2x2YmlCcFlpaGhLWHRwWmloaEppWXhQR0V1YkdWdVozUm9LWHQyWVhJZ1lqMXJLR0ZiTUYwcE8zRmhLR0VzWm5WdVkzUnBiMjRvWXlsN2F5aGpLU0U5WWlZbWNDaGNJa2x1WTI5dWMybHpkR1Z1ZENCMGVYQmxJR2x1SUVwVFVFSWdjbVZ3WldGMFpXUWdabWxsYkdRZ1lYSnlZWGt1SUVkdmRDQmNJaXRyS0dNcEsxd2lJR1Y0Y0dWamRHVmtJRndpSzJJcGZTbDlmV1oxYm1OMGFXOXVJR3BpS0dFc1lpeGpLWHRoUFU4b1lTeGlLVHR5WlhSMWNtNGdiblZzYkQwOVlUOWpPbUY5VGk1blpYUkdhV1ZzWkZkcGRHaEVaV1poZFd4MFBXcGlPMDR1WjJWMFFtOXZiR1ZoYmtacFpXeGtWMmwwYUVSbFptRjFiSFE5Wm5WdVkzUnBiMjRvWVN4aUxHTXBlMkU5Wm1Jb1lTeGlLVHR5WlhSMWNtNGdiblZzYkQwOVlUOWpPbUY5TzA0dVoyVjBSbXh2WVhScGJtZFFiMmx1ZEVacFpXeGtWMmwwYUVSbFptRjFiSFE5Wm5WdVkzUnBiMjRvWVN4aUxHTXBlMkU5WldJb1lTeGlLVHR5WlhSMWNtNGdiblZzYkQwOVlUOWpPbUY5TzA0dVoyVjBSbWxsYkdSUWNtOTBiek05YW1JN1hHNU9MbWRsZEUxaGNFWnBaV3hrUFdaMWJtTjBhVzl1S0dFc1lpeGpMR1FwZTJFdVpueDhLR0V1WmoxN2ZTazdhV1lvWWlCcGJpQmhMbVlwY21WMGRYSnVJR0V1Wmx0aVhUdDJZWElnWmoxUEtHRXNZaWs3YVdZb0lXWXBlMmxtS0dNcGNtVjBkWEp1TzJZOVcxMDdVQ2hoTEdJc1ppbDljbVYwZFhKdUlHRXVabHRpWFQxdVpYY2djaWhtTEdRcGZUdG1kVzVqZEdsdmJpQlFLR0VzWWl4aktYdHhLR0VzVGlrN1lqeGhMa2MvWVM1MVcySXJZUzVFWFQxak9paGlZaWhoS1N4aExtbGJZbDA5WXlrN2NtVjBkWEp1SUdGOVRpNXpaWFJHYVdWc1pEMVFPMDR1YzJWMFVISnZkRzh6U1c1MFJtbGxiR1E5Wm5WdVkzUnBiMjRvWVN4aUxHTXBlM0psZEhWeWJpQlJLR0VzWWl4akxEQXBmVHRPTG5ObGRGQnliM1J2TTBac2IyRjBSbWxsYkdROVpuVnVZM1JwYjI0b1lTeGlMR01wZTNKbGRIVnliaUJSS0dFc1lpeGpMREFwZlR0T0xuTmxkRkJ5YjNSdk0wSnZiMnhsWVc1R2FXVnNaRDFtZFc1amRHbHZiaWhoTEdJc1l5bDdjbVYwZFhKdUlGRW9ZU3hpTEdNc0lURXBmVHRPTG5ObGRGQnliM1J2TTFOMGNtbHVaMFpwWld4a1BXWjFibU4wYVc5dUtHRXNZaXhqS1h0eVpYUjFjbTRnVVNoaExHSXNZeXhjSWx3aUtYMDdYRzVPTG5ObGRGQnliM1J2TTBKNWRHVnpSbWxsYkdROVpuVnVZM1JwYjI0b1lTeGlMR01wZTNKbGRIVnliaUJSS0dFc1lpeGpMRndpWENJcGZUdE9Mbk5sZEZCeWIzUnZNMFZ1ZFcxR2FXVnNaRDFtZFc1amRHbHZiaWhoTEdJc1l5bDdjbVYwZFhKdUlGRW9ZU3hpTEdNc01DbDlPMDR1YzJWMFVISnZkRzh6VTNSeWFXNW5TVzUwUm1sbGJHUTlablZ1WTNScGIyNG9ZU3hpTEdNcGUzSmxkSFZ5YmlCUktHRXNZaXhqTEZ3aU1Gd2lLWDA3Wm5WdVkzUnBiMjRnVVNoaExHSXNZeXhrS1h0eEtHRXNUaWs3WXlFOVBXUS9VQ2hoTEdJc1l5azZZanhoTGtjL1lTNTFXMklyWVM1RVhUMXVkV3hzT2loaVlpaGhLU3hrWld4bGRHVWdZUzVwVzJKZEtUdHlaWFIxY200Z1lYMU9MbUZrWkZSdlVtVndaV0YwWldSR2FXVnNaRDFtZFc1amRHbHZiaWhoTEdJc1l5eGtLWHR4S0dFc1RpazdZajFQS0dFc1lpazdkbTlwWkNBd0lUMWtQMkl1YzNCc2FXTmxLR1FzTUN4aktUcGlMbkIxYzJnb1l5azdjbVYwZFhKdUlHRjlPMloxYm1OMGFXOXVJR3RpS0dFc1lpeGpMR1FwZTNFb1lTeE9LVHNvWXoxallpaGhMR01wS1NZbVl5RTlQV0ltSm5admFXUWdNQ0U5UFdRbUppaGhMbVltSm1NZ2FXNGdZUzVtSmlZb1lTNW1XMk5kUFhadmFXUWdNQ2tzVUNoaExHTXNkbTlwWkNBd0tTazdjbVYwZFhKdUlGQW9ZU3hpTEdRcGZWeHVUaTV6WlhSUGJtVnZaa1pwWld4a1BXdGlPMloxYm1OMGFXOXVJR05pS0dFc1lpbDdabTl5S0haaGNpQmpMR1FzWmowd08yWThZaTVzWlc1bmRHZzdaaXNyS1h0MllYSWdhRDFpVzJaZExHMDlUeWhoTEdncE8yNTFiR3doUFcwbUppaGpQV2dzWkQxdExGQW9ZU3hvTEhadmFXUWdNQ2twZlhKbGRIVnliaUJqUHloUUtHRXNZeXhrS1N4aktUb3dmVTR1WTI5dGNIVjBaVTl1Wlc5bVEyRnpaVDFqWWp0T0xtZGxkRmR5WVhCd1pYSkdhV1ZzWkQxbWRXNWpkR2x2YmloaExHSXNZeXhrS1h0aExtWjhmQ2hoTG1ZOWUzMHBPMmxtS0NGaExtWmJZMTBwZTNaaGNpQm1QVThvWVN4aktUdHBaaWhrZkh4bUtXRXVabHRqWFQxdVpYY2dZaWhtS1gxeVpYUjFjbTRnWVM1bVcyTmRmVHRPTG1kbGRGSmxjR1ZoZEdWa1YzSmhjSEJsY2tacFpXeGtQV1oxYm1OMGFXOXVLR0VzWWl4aktYdHNZaWhoTEdJc1l5azdZajFoTG1aYlkxMDdZajA5WVdJbUppaGlQV0V1Wmx0alhUMWJYU2s3Y21WMGRYSnVJR0o5TzJaMWJtTjBhVzl1SUd4aUtHRXNZaXhqS1h0aExtWjhmQ2hoTG1ZOWUzMHBPMmxtS0NGaExtWmJZMTBwZTJadmNpaDJZWElnWkQxUEtHRXNZeWtzWmoxYlhTeG9QVEE3YUR4a0xteGxibWQwYUR0b0t5c3BabHRvWFQxdVpYY2dZaWhrVzJoZEtUdGhMbVpiWTEwOVpuMTlYRzVPTG5ObGRGZHlZWEJ3WlhKR2FXVnNaRDFtZFc1amRHbHZiaWhoTEdJc1l5bDdjU2hoTEU0cE8yRXVabng4S0dFdVpqMTdmU2s3ZG1GeUlHUTlZejlqTG1jb0tUcGpPMkV1Wmx0aVhUMWpPM0psZEhWeWJpQlFLR0VzWWl4a0tYMDdUaTV6WlhSUGJtVnZabGR5WVhCd1pYSkdhV1ZzWkQxbWRXNWpkR2x2YmloaExHSXNZeXhrS1h0eEtHRXNUaWs3WVM1bWZId29ZUzVtUFh0OUtUdDJZWElnWmoxa1AyUXVaeWdwT21RN1lTNW1XMkpkUFdRN2NtVjBkWEp1SUd0aUtHRXNZaXhqTEdZcGZUdE9Mbk5sZEZKbGNHVmhkR1ZrVjNKaGNIQmxja1pwWld4a1BXWjFibU4wYVc5dUtHRXNZaXhqS1h0eEtHRXNUaWs3WVM1bWZId29ZUzVtUFh0OUtUdGpQV044ZkZ0ZE8yWnZjaWgyWVhJZ1pEMWJYU3htUFRBN1pqeGpMbXhsYm1kMGFEdG1LeXNwWkZ0bVhUMWpXMlpkTG1jb0tUdGhMbVpiWWwwOVl6dHlaWFIxY200Z1VDaGhMR0lzWkNsOU8xeHVUaTVoWkdSVWIxSmxjR1ZoZEdWa1YzSmhjSEJsY2tacFpXeGtQV1oxYm1OMGFXOXVLR0VzWWl4akxHUXNaaWw3YkdJb1lTeGtMR0lwTzNaaGNpQm9QV0V1Wmx0aVhUdG9mSHdvYUQxaExtWmJZbDA5VzEwcE8yTTlZejlqT201bGR5QmtPMkU5VHloaExHSXBPM1p2YVdRZ01DRTlaajhvYUM1emNHeHBZMlVvWml3d0xHTXBMR0V1YzNCc2FXTmxLR1lzTUN4akxtY29LU2twT2lob0xuQjFjMmdvWXlrc1lTNXdkWE5vS0dNdVp5Z3BLU2s3Y21WMGRYSnVJR045TzA0dWRHOU5ZWEE5Wm5WdVkzUnBiMjRvWVN4aUxHTXNaQ2w3Wm05eUtIWmhjaUJtUFh0OUxHZzlNRHRvUEdFdWJHVnVaM1JvTzJnckt5bG1XMkl1WTJGc2JDaGhXMmhkS1YwOVl6OWpMbU5oYkd3b1lWdG9YU3hrTEdGYmFGMHBPbUZiYUYwN2NtVjBkWEp1SUdaOU8yWjFibU4wYVc5dUlHMWlLR0VwZTJsbUtHRXVaaWxtYjNJb2RtRnlJR0lnYVc0Z1lTNW1LWHQyWVhJZ1l6MWhMbVpiWWwwN2FXWW9RWEp5WVhrdWFYTkJjbkpoZVNoaktTbG1iM0lvZG1GeUlHUTlNRHRrUEdNdWJHVnVaM1JvTzJRckt5bGpXMlJkSmlaalcyUmRMbWNvS1R0bGJITmxJR01tSm1NdVp5Z3BmWDFPTG5CeWIzUnZkSGx3WlM1blBXWjFibU4wYVc5dUtDbDdiV0lvZEdocGN5azdjbVYwZFhKdUlIUm9hWE11ZFgwN1hHNU9MbkJ5YjNSdmRIbHdaUzUwYjBGeWNtRjVQVTR1Y0hKdmRHOTBlWEJsTG1jN1RpNXdjbTkwYjNSNWNHVXVkRzlUZEhKcGJtYzlablZ1WTNScGIyNG9LWHR0WWloMGFHbHpLVHR5WlhSMWNtNGdkR2hwY3k1MUxuUnZVM1J5YVc1bktDbDlPMDR1Y0hKdmRHOTBlWEJsTG1kbGRFVjRkR1Z1YzJsdmJqMW1kVzVqZEdsdmJpaGhLWHRwWmloMGFHbHpMbWtwZTNSb2FYTXVabng4S0hSb2FYTXVaajE3ZlNrN2RtRnlJR0k5WVM1dFlUdHBaaWhoTG01aEtYdHBaaWhoTGtZb0tTbHlaWFIxY200Z2RHaHBjeTVtVzJKZGZId29kR2hwY3k1bVcySmRQV3dvZEdocGN5NXBXMkpkZkh4YlhTeG1kVzVqZEdsdmJpaGpLWHR5WlhSMWNtNGdibVYzSUdFdWJHRW9ZeWw5S1Nrc2RHaHBjeTVtVzJKZGZXVnNjMlVnYVdZb1lTNUdLQ2twY21WMGRYSnVJWFJvYVhNdVpsdGlYU1ltZEdocGN5NXBXMkpkSmlZb2RHaHBjeTVtVzJKZFBXNWxkeUJoTG14aEtIUm9hWE11YVZ0aVhTa3BMSFJvYVhNdVpsdGlYVHR5WlhSMWNtNGdkR2hwY3k1cFcySmRmWDA3VGk1d2NtOTBiM1I1Y0dVdVoyVjBSWGgwWlc1emFXOXVQVTR1Y0hKdmRHOTBlWEJsTG1kbGRFVjRkR1Z1YzJsdmJqdGNiazR1Y0hKdmRHOTBlWEJsTGt0alBXWjFibU4wYVc5dUtHRXNZaWw3ZEdocGN5NW1mSHdvZEdocGN5NW1QWHQ5S1R0aVlpaDBhR2x6S1R0MllYSWdZejFoTG0xaE8yRXVibUUvS0dJOVlueDhXMTBzWVM1R0tDay9LSFJvYVhNdVpsdGpYVDFpTEhSb2FYTXVhVnRqWFQxc0tHSXNablZ1WTNScGIyNG9aQ2w3Y21WMGRYSnVJR1F1WnlncGZTa3BPblJvYVhNdWFWdGpYVDFpS1RwaExrWW9LVDhvZEdocGN5NW1XMk5kUFdJc2RHaHBjeTVwVzJOZFBXSS9ZaTVuS0NrNllpazZkR2hwY3k1cFcyTmRQV0k3Y21WMGRYSnVJSFJvYVhOOU8wNHVjSEp2ZEc5MGVYQmxMbk5sZEVWNGRHVnVjMmx2YmoxT0xuQnliM1J2ZEhsd1pTNUxZenRPTG1ScFptWmxjbVZ1WTJVOVpuVnVZM1JwYjI0b1lTeGlLWHRwWmlnaEtHRWdhVzV6ZEdGdVkyVnZaaUJpTG1OdmJuTjBjblZqZEc5eUtTbDBhSEp2ZHlCRmNuSnZjaWhjSWsxbGMzTmhaMlZ6SUdoaGRtVWdaR2xtWm1WeVpXNTBJSFI1Y0dWekxsd2lLVHQyWVhJZ1l6MWhMbWNvS1R0aVBXSXVaeWdwTzNaaGNpQmtQVnRkTEdZOU1DeG9QV011YkdWdVozUm9QbUl1YkdWdVozUm9QMk11YkdWdVozUm9PbUl1YkdWdVozUm9PMkV1WWlZbUtHUmJNRjA5WVM1aUxHWTlNU2s3Wm05eUtEdG1QR2c3WmlzcktXNWlLR05iWmwwc1lsdG1YU2w4ZkNoa1cyWmRQV0piWmwwcE8zSmxkSFZ5YmlCdVpYY2dZUzVqYjI1emRISjFZM1J2Y2loa0tYMDdYRzVPTG1WeGRXRnNjejFtZFc1amRHbHZiaWhoTEdJcGUzSmxkSFZ5YmlCaFBUMWlmSHdoS0NGaGZId2hZaWttSm1FZ2FXNXpkR0Z1WTJWdlppQmlMbU52Ym5OMGNuVmpkRzl5SmladVlpaGhMbWNvS1N4aUxtY29LU2w5TzJaMWJtTjBhVzl1SUc5aUtHRXNZaWw3WVQxaGZIeDdmVHRpUFdKOGZIdDlPM1poY2lCalBYdDlMR1E3Wm05eUtHUWdhVzRnWVNsalcyUmRQVEE3Wm05eUtHUWdhVzRnWWlsalcyUmRQVEE3Wm05eUtHUWdhVzRnWXlscFppZ2hibUlvWVZ0a1hTeGlXMlJkS1NseVpYUjFjbTRoTVR0eVpYUjFjbTRoTUgxT0xtTnZiWEJoY21WRmVIUmxibk5wYjI1elBXOWlPMXh1Wm5WdVkzUnBiMjRnYm1Jb1lTeGlLWHRwWmloaFBUMWlLWEpsZEhWeWJpRXdPMmxtS0NGc1lTaGhLWHg4SVd4aEtHSXBLWEpsZEhWeWJsd2liblZ0WW1WeVhDSTlQVDEwZVhCbGIyWWdZU1ltYVhOT1lVNG9ZU2w4ZkZ3aWJuVnRZbVZ5WENJOVBUMTBlWEJsYjJZZ1lpWW1hWE5PWVU0b1lpay9VM1J5YVc1bktHRXBQVDFUZEhKcGJtY29ZaWs2SVRFN2FXWW9ZUzVqYjI1emRISjFZM1J2Y2lFOVlpNWpiMjV6ZEhKMVkzUnZjaWx5WlhSMWNtNGhNVHRwWmlna1lTWW1ZUzVqYjI1emRISjFZM1J2Y2owOVBWVnBiblE0UVhKeVlYa3BlMmxtS0dFdWJHVnVaM1JvSVQxaUxteGxibWQwYUNseVpYUjFjbTRoTVR0bWIzSW9kbUZ5SUdNOU1EdGpQR0V1YkdWdVozUm9PMk1yS3lscFppaGhXMk5kSVQxaVcyTmRLWEpsZEhWeWJpRXhPM0psZEhWeWJpRXdmV2xtS0dFdVkyOXVjM1J5ZFdOMGIzSTlQVDFCY25KaGVTbDdkbUZ5SUdROWRtOXBaQ0F3TEdZOWRtOXBaQ0F3TEdnOVRXRjBhQzV0WVhnb1lTNXNaVzVuZEdnc1lpNXNaVzVuZEdncE8yWnZjaWhqUFRBN1l6eG9PMk1yS3lsN2RtRnlJRzA5WVZ0alhTeDBQV0piWTEwN2JTWW1iUzVqYjI1emRISjFZM1J2Y2owOVQySnFaV04wSmlZb2JpaDJiMmxrSURBOVBUMWtLU3h1S0dNOVBUMWhMbXhsYm1kMGFDMHhLU3hrUFcwc2JUMTJiMmxrSURBcE8zUW1KblF1WTI5dWMzUnlkV04wYjNJOVBWeHVUMkpxWldOMEppWW9iaWgyYjJsa0lEQTlQVDFtS1N4dUtHTTlQVDFpTG14bGJtZDBhQzB4S1N4bVBYUXNkRDEyYjJsa0lEQXBPMmxtS0NGdVlpaHRMSFFwS1hKbGRIVnliaUV4ZlhKbGRIVnliaUJrZkh4bVB5aGtQV1I4Zkh0OUxHWTlabng4ZTMwc2IySW9aQ3htS1NrNklUQjlhV1lvWVM1amIyNXpkSEoxWTNSdmNqMDlQVTlpYW1WamRDbHlaWFIxY200Z2IySW9ZU3hpS1R0MGFISnZkeUJGY25KdmNpaGNJa2x1ZG1Gc2FXUWdkSGx3WlNCcGJpQktVMUJDSUdGeWNtRjVYQ0lwTzMxT0xtTnZiWEJoY21WR2FXVnNaSE05Ym1JN1RpNXdjbTkwYjNSNWNHVXVRbUk5Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnY0dJb2RHaHBjeWw5TzA0dWNISnZkRzkwZVhCbExtTnNiMjVsVFdWemMyRm5aVDFPTG5CeWIzUnZkSGx3WlM1Q1lqdE9MbkJ5YjNSdmRIbHdaUzVqYkc5dVpUMW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQndZaWgwYUdsektYMDdUaTV3Y205MGIzUjVjR1V1WTJ4dmJtVTlUaTV3Y205MGIzUjVjR1V1WTJ4dmJtVTdUaTVqYkc5dVpUMW1kVzVqZEdsdmJpaGhLWHR5WlhSMWNtNGdjR0lvWVNsOU8yWjFibU4wYVc5dUlIQmlLR0VwZTNKbGRIVnliaUJ1WlhjZ1lTNWpiMjV6ZEhKMVkzUnZjaWh4WWloaExtY29LU2twZlZ4dVRpNWpiM0I1U1c1MGJ6MW1kVzVqZEdsdmJpaGhMR0lwZTNFb1lTeE9LVHR4S0dJc1RpazdiaWhoTG1OdmJuTjBjblZqZEc5eVBUMWlMbU52Ym5OMGNuVmpkRzl5TEZ3aVEyOXdlU0J6YjNWeVkyVWdZVzVrSUhSaGNtZGxkQ0J0WlhOellXZGxJSE5vYjNWc1pDQm9ZWFpsSUhSb1pTQnpZVzFsSUhSNWNHVXVYQ0lwTzJFOWNHSW9ZU2s3Wm05eUtIWmhjaUJqUFdJdVp5Z3BMR1E5WVM1bktDa3NaajFqTG14bGJtZDBhRDB3TzJZOFpDNXNaVzVuZEdnN1ppc3JLV05iWmwwOVpGdG1YVHRpTG1ZOVlTNW1PMkl1YVQxaExtbDlPMloxYm1OMGFXOXVJSEZpS0dFcGUybG1LRUZ5Y21GNUxtbHpRWEp5WVhrb1lTa3BlMlp2Y2loMllYSWdZajFCY25KaGVTaGhMbXhsYm1kMGFDa3NZejB3TzJNOFlTNXNaVzVuZEdnN1l5c3JLWHQyWVhJZ1pEMWhXMk5kTzI1MWJHd2hQV1FtSmloaVcyTmRQVndpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUJrUDNGaUtHNG9aQ2twT21RcGZYSmxkSFZ5YmlCaWZXbG1LQ1JoSmlaaElHbHVjM1JoYm1ObGIyWWdWV2x1ZERoQmNuSmhlU2x5WlhSMWNtNGdibVYzSUZWcGJuUTRRWEp5WVhrb1lTazdZajE3ZlR0bWIzSW9ZeUJwYmlCaEtXUTlZVnRqWFN4dWRXeHNJVDFrSmlZb1lsdGpYVDFjSW05aWFtVmpkRndpUFQxMGVYQmxiMllnWkQ5eFlpaHVLR1FwS1Rwa0tUdHlaWFIxY200Z1luMWNiazR1Y21WbmFYTjBaWEpOWlhOellXZGxWSGx3WlQxbWRXNWpkR2x2YmloaExHSXBlMkl1ZDJVOVlYMDdkbUZ5SUZJOWUyUjFiWEE2Wm5WdVkzUnBiMjRvWVNsN2NTaGhMRTRzWENKcWMzQmlMazFsYzNOaFoyVWdhVzV6ZEdGdVkyVWdaWGh3WldOMFpXUmNJaWs3YmloaExtZGxkRVY0ZEdWdWMybHZiaXhjSWs5dWJIa2dkVzV2WW1aMWMyTmhkR1ZrSUdGdVpDQjFibTl3ZEdsdGFYcGxaQ0JqYjIxd2FXeGhkR2x2YmlCdGIyUmxjeUJ6ZFhCd2IzSjBaV1F1WENJcE8zSmxkSFZ5YmlCU0xsZ29ZU2w5ZlR0bktGd2lhbk53WWk1a1pXSjFaeTVrZFcxd1hDSXNVaTVrZFcxd0xIWnZhV1FnTUNrN1hHNVNMbGc5Wm5WdVkzUnBiMjRvWVNsN2RtRnlJR0k5YXloaEtUdHBaaWhjSW01MWJXSmxjbHdpUFQxaWZIeGNJbk4wY21sdVoxd2lQVDFpZkh4Y0ltSnZiMnhsWVc1Y0lqMDlZbng4WENKdWRXeHNYQ0k5UFdKOGZGd2lkVzVrWldacGJtVmtYQ0k5UFdKOGZGd2lkVzVrWldacGJtVmtYQ0loUFQxMGVYQmxiMllnVldsdWREaEJjbkpoZVNZbVlTQnBibk4wWVc1alpXOW1JRlZwYm5RNFFYSnlZWGtwY21WMGRYSnVJR0U3YVdZb1hDSmhjbkpoZVZ3aVBUMWlLWEpsZEhWeWJpQjFZU2hoS1N4c0tHRXNVaTVZS1R0cFppaGhJR2x1YzNSaGJtTmxiMllnY2lsN2RtRnlJR005ZTMwN1lUMWhMbVZ1ZEhKcFpYTW9LVHRtYjNJb2RtRnlJR1E5WVM1dVpYaDBLQ2s3SVdRdVpHOXVaVHRrUFdFdWJtVjRkQ2dwS1dOYlpDNTJZV3gxWlZzd1hWMDlVaTVZS0dRdWRtRnNkV1ZiTVYwcE8zSmxkSFZ5YmlCamZYRW9ZU3hPTEZ3aVQyNXNlU0J0WlhOellXZGxjeUJsZUhCbFkzUmxaRG9nWENJcllTazdZajFoTG1OdmJuTjBjblZqZEc5eU8zWmhjaUJtUFhza2JtRnRaVHBpTG01aGJXVjhmR0l1WkdsemNHeGhlVTVoYldWOU8yWnZjaWgwSUdsdUlHSXVjSEp2ZEc5MGVYQmxLWHQyWVhJZ2FEMHZYbWRsZENoYlFTMWFYVnhjZHlvcEx5NWxlR1ZqS0hRcE8ybG1LR2dtSmx3aVoyVjBSWGgwWlc1emFXOXVYQ0loUFhRbUpsd2laMlYwU25OUVlrMWxjM05oWjJWSlpGd2lJVDFjYm5RcGUzWmhjaUJ0UFZ3aWFHRnpYQ0lyYUZzeFhUdHBaaWdoWVZ0dFhYeDhZVnR0WFNncEtXMDlZVnQwWFNncExHWmJVaTRrWVNob1d6RmRLVjA5VWk1WUtHMHBmWDFwWmloaExtVjRkR1Z1YzJsdmJrOWlhbVZqZEY4cGNtVjBkWEp1SUdZdUpHVjRkR1Z1YzJsdmJuTTlYQ0pTWldOMWNuTnBkbVVnWkhWdGNHbHVaeUJ2WmlCbGVIUmxibk5wYjI1eklHNXZkQ0J6ZFhCd2IzSjBaV1FnYVc0Z1kyOXRjR2xzWldRZ1kyOWtaUzRnVTNkcGRHTm9JSFJ2SUhWdVkyOXRjR2xzWldRZ2IzSWdaSFZ0Y0NCbGVIUmxibk5wYjI0Z2IySnFaV04wSUdScGNtVmpkR3g1WENJc1pqdG1iM0lvWkNCcGJpQmlMbVY0ZEdWdWMybHZibk1wYVdZb0wxNWNYR1FySkM4dWRHVnpkQ2hrS1NsN2JUMWlMbVY0ZEdWdWMybHZibk5iWkYwN2RtRnlJSFE5WVM1blpYUkZlSFJsYm5OcGIyNG9iU2s3YUQxMmIybGtJREE3YlQxdExrSmhPM1poY2lCQ1BWdGRMRTA5TUR0bWIzSW9hQ0JwYmlCdEtVSmJUU3NyWFQxb08yZzlRbHN3WFR0dWRXeHNJVDEwSmlZb1kzeDhLR005Wmk0a1pYaDBaVzV6YVc5dWN6MTdmU2tzWTF0U0xpUmhLR2dwWFQxU0xsZ29kQ2twZlhKbGRIVnliaUJtZlR0U0xpUmhQV1oxYm1OMGFXOXVLR0VwZTNKbGRIVnliaUJoTG5KbGNHeGhZMlVvTDE1YlFTMWFYUzhzWm5WdVkzUnBiMjRvWWlsN2NtVjBkWEp1SUdJdWRHOU1iM2RsY2tOaGMyVW9LWDBwZlR0bWRXNWpkR2x2YmlCVEtDbDdkR2hwY3k1aFBWdGRmV2NvWENKcWMzQmlMa0pwYm1GeWVVVnVZMjlrWlhKY0lpeFRMSFp2YVdRZ01DazdVeTV3Y205MGIzUjVjR1V1YkdWdVozUm9QV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJSFJvYVhNdVlTNXNaVzVuZEdoOU8xTXVjSEp2ZEc5MGVYQmxMbXhsYm1kMGFEMVRMbkJ5YjNSdmRIbHdaUzVzWlc1bmRHZzdVeTV3Y205MGIzUjVjR1V1Wlc1a1BXWjFibU4wYVc5dUtDbDdkbUZ5SUdFOWRHaHBjeTVoTzNSb2FYTXVZVDFiWFR0eVpYUjFjbTRnWVgwN1V5NXdjbTkwYjNSNWNHVXVaVzVrUFZNdWNISnZkRzkwZVhCbExtVnVaRHRUTG5CeWIzUnZkSGx3WlM1c1BXWjFibU4wYVc5dUtHRXNZaWw3YmloaFBUMU5ZWFJvTG1ac2IyOXlLR0VwS1R0dUtHSTlQVTFoZEdndVpteHZiM0lvWWlrcE8yNG9NRHc5WVNZbU5ESTVORGsyTnpJNU5qNWhLVHRtYjNJb2JpZ3dQRDFpSmlZME1qazBPVFkzTWprMlBtSXBPekE4WW54OE1USTNQR0U3S1hSb2FYTXVZUzV3ZFhOb0tHRW1NVEkzZkRFeU9Da3NZVDBvWVQ0K1BqZDhZanc4TWpVcFBqNCtNQ3hpUGo0K1BUYzdkR2hwY3k1aExuQjFjMmdvWVNsOU8xTXVjSEp2ZEc5MGVYQmxMbmR5YVhSbFUzQnNhWFJXWVhKcGJuUTJORDFUTG5CeWIzUnZkSGx3WlM1c08xeHVVeTV3Y205MGIzUjVjR1V1UVQxbWRXNWpkR2x2YmloaExHSXBlMjRvWVQwOVRXRjBhQzVtYkc5dmNpaGhLU2s3YmloaVBUMU5ZWFJvTG1ac2IyOXlLR0lwS1R0dUtEQThQV0VtSmpReU9UUTVOamN5T1RZK1lTazdiaWd3UEQxaUppWTBNamswT1RZM01qazJQbUlwTzNSb2FYTXVjeWhoS1R0MGFHbHpMbk1vWWlsOU8xTXVjSEp2ZEc5MGVYQmxMbmR5YVhSbFUzQnNhWFJHYVhobFpEWTBQVk11Y0hKdmRHOTBlWEJsTGtFN1V5NXdjbTkwYjNSNWNHVXVhajFtZFc1amRHbHZiaWhoS1h0dUtHRTlQVTFoZEdndVpteHZiM0lvWVNrcE8yWnZjaWh1S0RBOFBXRW1KalF5T1RRNU5qY3lPVFkrWVNrN01USTNQR0U3S1hSb2FYTXVZUzV3ZFhOb0tHRW1NVEkzZkRFeU9Da3NZVDQrUGowM08zUm9hWE11WVM1d2RYTm9LR0VwZlR0VExuQnliM1J2ZEhsd1pTNTNjbWwwWlZWdWMybG5ibVZrVm1GeWFXNTBNekk5VXk1d2NtOTBiM1I1Y0dVdWFqdFRMbkJ5YjNSdmRIbHdaUzVOUFdaMWJtTjBhVzl1S0dFcGUyNG9ZVDA5VFdGMGFDNW1iRzl2Y2loaEtTazdiaWd0TWpFME56UTRNelkwT0R3OVlTWW1NakUwTnpRNE16WTBPRDVoS1R0cFppZ3dQRDFoS1hSb2FYTXVhaWhoS1R0bGJITmxlMlp2Y2loMllYSWdZajB3T3prK1lqdGlLeXNwZEdocGN5NWhMbkIxYzJnb1lTWXhNamQ4TVRJNEtTeGhQajQ5Tnp0MGFHbHpMbUV1Y0hWemFDZ3hLWDE5TzF4dVV5NXdjbTkwYjNSNWNHVXVkM0pwZEdWVGFXZHVaV1JXWVhKcGJuUXpNajFUTG5CeWIzUnZkSGx3WlM1Tk8xTXVjSEp2ZEc5MGVYQmxMblpoUFdaMWJtTjBhVzl1S0dFcGUyNG9ZVDA5VFdGMGFDNW1iRzl2Y2loaEtTazdiaWd3UEQxaEppWXhMamcwTkRZM05EUXdOek0zTURrMU5USkZNVGsrWVNrN1FTaGhLVHQwYUdsekxtd29lU3g2S1gwN1V5NXdjbTkwYjNSNWNHVXVkM0pwZEdWVmJuTnBaMjVsWkZaaGNtbHVkRFkwUFZNdWNISnZkRzkwZVhCbExuWmhPMU11Y0hKdmRHOTBlWEJsTG5WaFBXWjFibU4wYVc5dUtHRXBlMjRvWVQwOVRXRjBhQzVtYkc5dmNpaGhLU2s3YmlndE9USXlNek0zTWpBek5qZzFORGMzTlRnd09EdzlZU1ltTUhnM1ptWm1abVptWm1abVptWm1abVptUG1FcE8wRW9ZU2s3ZEdocGN5NXNLSGtzZWlsOU8xTXVjSEp2ZEc5MGVYQmxMbmR5YVhSbFUybG5ibVZrVm1GeWFXNTBOalE5VXk1d2NtOTBiM1I1Y0dVdWRXRTdVeTV3Y205MGIzUjVjR1V1ZDJFOVpuVnVZM1JwYjI0b1lTbDdiaWhoUFQxTllYUm9MbVpzYjI5eUtHRXBLVHR1S0MweU1UUTNORGd6TmpRNFBEMWhKaVl5TVRRM05EZ3pOalE0UG1FcE8zUm9hWE11YWlnb1lUdzhNVjVoUGo0ek1TaytQajR3S1gwN1V5NXdjbTkwYjNSNWNHVXVkM0pwZEdWYWFXZDZZV2RXWVhKcGJuUXpNajFUTG5CeWIzUnZkSGx3WlM1M1lUdGNibE11Y0hKdmRHOTBlWEJsTG5oaFBXWjFibU4wYVc5dUtHRXBlMjRvWVQwOVRXRjBhQzVtYkc5dmNpaGhLU2s3YmlndE9USXlNek0zTWpBek5qZzFORGMzTlRnd09EdzlZU1ltTUhnM1ptWm1abVptWm1abVptWm1abVptUG1FcE8wZGhLR0VwTzNSb2FYTXViQ2g1TEhvcGZUdFRMbkJ5YjNSdmRIbHdaUzUzY21sMFpWcHBaM3BoWjFaaGNtbHVkRFkwUFZNdWNISnZkRzkwZVhCbExuaGhPMU11Y0hKdmRHOTBlWEJsTGxSaFBXWjFibU4wYVc5dUtHRXBlM1JvYVhNdVZ5aElLR0VwS1gwN1V5NXdjbTkwYjNSNWNHVXVkM0pwZEdWYWFXZDZZV2RXWVhKcGJuUTJORk4wY21sdVp6MVRMbkJ5YjNSdmRIbHdaUzVVWVR0VExuQnliM1J2ZEhsd1pTNVhQV1oxYm1OMGFXOXVLR0VwZTNaaGNpQmlQWFJvYVhNN1F5aGhLVHRLWVNoNUxIb3NablZ1WTNScGIyNG9ZeXhrS1h0aUxtd29ZejQrUGpBc1pENCtQakFwZlNsOU8xTXVjSEp2ZEc5MGVYQmxMbmR5YVhSbFdtbG5lbUZuVm1GeWFXNTBTR0Z6YURZMFBWTXVjSEp2ZEc5MGVYQmxMbGM3VXk1d2NtOTBiM1I1Y0dVdVltVTlablZ1WTNScGIyNG9ZU2w3YmloaFBUMU5ZWFJvTG1ac2IyOXlLR0VwS1R0dUtEQThQV0VtSmpJMU5qNWhLVHQwYUdsekxtRXVjSFZ6YUNoaFBqNCtNQ1l5TlRVcGZUdFRMbkJ5YjNSdmRIbHdaUzUzY21sMFpWVnBiblE0UFZNdWNISnZkRzkwZVhCbExtSmxPMXh1VXk1d2NtOTBiM1I1Y0dVdVlXVTlablZ1WTNScGIyNG9ZU2w3YmloaFBUMU5ZWFJvTG1ac2IyOXlLR0VwS1R0dUtEQThQV0VtSmpZMU5UTTJQbUVwTzNSb2FYTXVZUzV3ZFhOb0tHRStQajR3SmpJMU5TazdkR2hwY3k1aExuQjFjMmdvWVQ0K1BqZ21NalUxS1gwN1V5NXdjbTkwYjNSNWNHVXVkM0pwZEdWVmFXNTBNVFk5VXk1d2NtOTBiM1I1Y0dVdVlXVTdVeTV3Y205MGIzUjVjR1V1Y3oxbWRXNWpkR2x2YmloaEtYdHVLR0U5UFUxaGRHZ3VabXh2YjNJb1lTa3BPMjRvTUR3OVlTWW1OREk1TkRrMk56STVOajVoS1R0MGFHbHpMbUV1Y0hWemFDaGhQajQrTUNZeU5UVXBPM1JvYVhNdVlTNXdkWE5vS0dFK1BqNDRKakkxTlNrN2RHaHBjeTVoTG5CMWMyZ29ZVDQrUGpFMkpqSTFOU2s3ZEdocGN5NWhMbkIxYzJnb1lUNCtQakkwSmpJMU5TbDlPMU11Y0hKdmRHOTBlWEJsTG5keWFYUmxWV2x1ZERNeVBWTXVjSEp2ZEc5MGVYQmxMbk03VXk1d2NtOTBiM1I1Y0dVdVZqMW1kVzVqZEdsdmJpaGhLWHR1S0dFOVBVMWhkR2d1Wm14dmIzSW9ZU2twTzI0b01EdzlZU1ltTVM0NE5EUTJOelEwTURjek56QTVOVFV5UlRFNVBtRXBPMFpoS0dFcE8zUm9hWE11Y3loNUtUdDBhR2x6TG5Nb2VpbDlPMU11Y0hKdmRHOTBlWEJsTG5keWFYUmxWV2x1ZERZMFBWTXVjSEp2ZEc5MGVYQmxMbFk3WEc1VExuQnliM1J2ZEhsd1pTNVJZejFtZFc1amRHbHZiaWhoS1h0dUtHRTlQVTFoZEdndVpteHZiM0lvWVNrcE8yNG9MVEV5T0R3OVlTWW1NVEk0UG1FcE8zUm9hWE11WVM1d2RYTm9LR0UrUGo0d0pqSTFOU2w5TzFNdWNISnZkRzkwZVhCbExuZHlhWFJsU1c1ME9EMVRMbkJ5YjNSdmRIbHdaUzVSWXp0VExuQnliM1J2ZEhsd1pTNVFZejFtZFc1amRHbHZiaWhoS1h0dUtHRTlQVTFoZEdndVpteHZiM0lvWVNrcE8yNG9MVE15TnpZNFBEMWhKaVl6TWpjMk9ENWhLVHQwYUdsekxtRXVjSFZ6YUNoaFBqNCtNQ1l5TlRVcE8zUm9hWE11WVM1d2RYTm9LR0UrUGo0NEpqSTFOU2w5TzFNdWNISnZkRzkwZVhCbExuZHlhWFJsU1c1ME1UWTlVeTV3Y205MGIzUjVjR1V1VUdNN1V5NXdjbTkwYjNSNWNHVXVVejFtZFc1amRHbHZiaWhoS1h0dUtHRTlQVTFoZEdndVpteHZiM0lvWVNrcE8yNG9MVEl4TkRjME9ETTJORGc4UFdFbUpqSXhORGMwT0RNMk5EZytZU2s3ZEdocGN5NWhMbkIxYzJnb1lUNCtQakFtTWpVMUtUdDBhR2x6TG1FdWNIVnphQ2hoUGo0K09DWXlOVFVwTzNSb2FYTXVZUzV3ZFhOb0tHRStQajR4TmlZeU5UVXBPM1JvYVhNdVlTNXdkWE5vS0dFK1BqNHlOQ1l5TlRVcGZUdFRMbkJ5YjNSdmRIbHdaUzUzY21sMFpVbHVkRE15UFZNdWNISnZkRzkwZVhCbExsTTdYRzVUTG5CeWIzUnZkSGx3WlM1VVBXWjFibU4wYVc5dUtHRXBlMjRvWVQwOVRXRjBhQzVtYkc5dmNpaGhLU2s3YmlndE9USXlNek0zTWpBek5qZzFORGMzTlRnd09EdzlZU1ltTUhnM1ptWm1abVptWm1abVptWm1abVptUG1FcE8wRW9ZU2s3ZEdocGN5NUJLSGtzZWlsOU8xTXVjSEp2ZEc5MGVYQmxMbmR5YVhSbFNXNTBOalE5VXk1d2NtOTBiM1I1Y0dVdVZEdFRMbkJ5YjNSdmRIbHdaUzVyWVQxbWRXNWpkR2x2YmloaEtYdHVLR0U5UFUxaGRHZ3VabXh2YjNJb1lTa3BPMjRvTFRreU1qTXpOekl3TXpZNE5UUTNOelU0TURnOFBTdGhKaVl3ZURkbVptWm1abVptWm1abVptWm1abVkrSzJFcE8wTW9TQ2hoS1NrN2RHaHBjeTVCS0hrc2VpbDlPMU11Y0hKdmRHOTBlWEJsTG5keWFYUmxTVzUwTmpSVGRISnBibWM5VXk1d2NtOTBiM1I1Y0dVdWEyRTdVeTV3Y205MGIzUjVjR1V1VEQxbWRXNWpkR2x2YmloaEtYdHVLRWx1Wm1sdWFYUjVQVDA5WVh4OExVbHVabWx1YVhSNVBUMDlZWHg4YVhOT1lVNG9ZU2w4ZkMwekxqUXdNamd5TXpRMk5qTTROVEk0T0RaRk16ZzhQV0VtSmpNdU5EQXlPREl6TkRZMk16ZzFNamc0TmtVek9ENDlZU2s3U0dFb1lTazdkR2hwY3k1ektIa3BmVHRUTG5CeWIzUnZkSGx3WlM1M2NtbDBaVVpzYjJGMFBWTXVjSEp2ZEc5MGVYQmxMa3c3WEc1VExuQnliM1J2ZEhsd1pTNUtQV1oxYm1OMGFXOXVLR0VwZTI0b1NXNW1hVzVwZEhrOVBUMWhmSHd0U1c1bWFXNXBkSGs5UFQxaGZIeHBjMDVoVGloaEtYeDhMVEV1TnprM05qa3pNVE0wT0RZeU16RTFOMFV6TURnOFBXRW1KakV1TnprM05qa3pNVE0wT0RZeU16RTFOMFV6TURnK1BXRXBPMGxoS0dFcE8zUm9hWE11Y3loNUtUdDBhR2x6TG5Nb2VpbDlPMU11Y0hKdmRHOTBlWEJsTG5keWFYUmxSRzkxWW14bFBWTXVjSEp2ZEc5MGVYQmxMa283VXk1d2NtOTBiM1I1Y0dVdVNUMW1kVzVqZEdsdmJpaGhLWHR1S0Z3aVltOXZiR1ZoYmx3aVBUMDlkSGx3Wlc5bUlHRjhmRndpYm5WdFltVnlYQ0k5UFQxMGVYQmxiMllnWVNrN2RHaHBjeTVoTG5CMWMyZ29ZVDh4T2pBcGZUdFRMbkJ5YjNSdmRIbHdaUzUzY21sMFpVSnZiMnc5VXk1d2NtOTBiM1I1Y0dVdVNUdFRMbkJ5YjNSdmRIbHdaUzVTUFdaMWJtTjBhVzl1S0dFcGUyNG9ZVDA5VFdGMGFDNW1iRzl2Y2loaEtTazdiaWd0TWpFME56UTRNelkwT0R3OVlTWW1NakUwTnpRNE16WTBPRDVoS1R0MGFHbHpMazBvWVNsOU8xTXVjSEp2ZEc5MGVYQmxMbmR5YVhSbFJXNTFiVDFUTG5CeWIzUnZkSGx3WlM1U08xTXVjSEp2ZEc5MGVYQmxMbXBoUFdaMWJtTjBhVzl1S0dFcGUzUm9hWE11WVM1d2RYTm9MbUZ3Y0d4NUtIUm9hWE11WVN4aEtYMDdYRzVUTG5CeWIzUnZkSGx3WlM1M2NtbDBaVUo1ZEdWelBWTXVjSEp2ZEc5MGVYQmxMbXBoTzFNdWNISnZkRzkwZVhCbExrNDlablZ1WTNScGIyNG9ZU2w3UXloaEtUdDBhR2x6TG13b2VTeDZLWDA3VXk1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZXWVhKcGJuUklZWE5vTmpROVV5NXdjbTkwYjNSNWNHVXVUanRUTG5CeWIzUnZkSGx3WlM1TFBXWjFibU4wYVc5dUtHRXBlME1vWVNrN2RHaHBjeTV6S0hrcE8zUm9hWE11Y3loNktYMDdVeTV3Y205MGIzUjVjR1V1ZDNKcGRHVkdhWGhsWkVoaGMyZzJORDFUTG5CeWIzUnZkSGx3WlM1TE8xeHVVeTV3Y205MGIzUjVjR1V1VlQxbWRXNWpkR2x2YmloaEtYdDJZWElnWWoxMGFHbHpMbUV1YkdWdVozUm9PM1JoS0dFcE8yWnZjaWgyWVhJZ1l6MHdPMk04WVM1c1pXNW5kR2c3WXlzcktYdDJZWElnWkQxaExtTm9ZWEpEYjJSbFFYUW9ZeWs3YVdZb01USTRQbVFwZEdocGN5NWhMbkIxYzJnb1pDazdaV3h6WlNCcFppZ3lNRFE0UG1RcGRHaHBjeTVoTG5CMWMyZ29aRDQrTm53eE9USXBMSFJvYVhNdVlTNXdkWE5vS0dRbU5qTjhNVEk0S1R0bGJITmxJR2xtS0RZMU5UTTJQbVFwYVdZb05UVXlPVFk4UFdRbUpqVTJNekU1UGoxa0ppWmpLekU4WVM1c1pXNW5kR2dwZTNaaGNpQm1QV0V1WTJoaGNrTnZaR1ZCZENoakt6RXBPelUyTXpJd1BEMW1KaVkxTnpNME16NDlaaVltS0dROU1UQXlOQ29vWkMwMU5USTVOaWtyWmkwMU5qTXlNQ3MyTlRVek5peDBhR2x6TG1FdWNIVnphQ2hrUGo0eE9Id3lOREFwTEhSb2FYTXVZUzV3ZFhOb0tHUStQakV5SmpZemZERXlPQ2tzZEdocGN5NWhMbkIxYzJnb1pENCtOaVkyTTN3eE1qZ3BMSFJvYVhNdVlTNXdkWE5vS0dRbU5qTjhNVEk0S1N4akt5c3BmV1ZzYzJVZ2RHaHBjeTVoTG5CMWMyZ29aRDQrTVRKOE1qSTBLU3gwYUdsekxtRXVjSFZ6YUNoa1BqNDJKall6ZkRFeU9Da3NkR2hwY3k1aExuQjFjMmdvWkNZMk0zd3hNamdwZlhKbGRIVnliaUIwYUdsekxtRXViR1Z1WjNSb0xWeHVZbjA3VXk1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZUZEhKcGJtYzlVeTV3Y205MGIzUjVjR1V1VlR0bWRXNWpkR2x2YmlCVUtHRXNZaWw3ZEdocGN5NXNiejFoTzNSb2FYTXVhR2s5WW4xbktGd2lhbk53WWk1aGNtbDBhQzVWU1c1ME5qUmNJaXhVTEhadmFXUWdNQ2s3VkM1d2NtOTBiM1I1Y0dVdVkyMXdQV1oxYm1OMGFXOXVLR0VwZTNKbGRIVnliaUIwYUdsekxtaHBQR0V1YUdsOGZIUm9hWE11YUdrOVBXRXVhR2ttSm5Sb2FYTXViRzg4WVM1c2J6OHRNVHAwYUdsekxtaHBQVDFoTG1ocEppWjBhR2x6TG14dlBUMWhMbXh2UHpBNk1YMDdWQzV3Y205MGIzUjVjR1V1WTIxd1BWUXVjSEp2ZEc5MGVYQmxMbU50Y0R0VUxuQnliM1J2ZEhsd1pTNU1ZVDFtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJ1WlhjZ1ZDZ29kR2hwY3k1c2J6NCtQakY4S0hSb2FYTXVhR2ttTVNrOFBETXhLVDQrUGpBc2RHaHBjeTVvYVQ0K1BqRStQajR3S1gwN1ZDNXdjbTkwYjNSNWNHVXVjbWxuYUhSVGFHbG1kRDFVTG5CeWIzUnZkSGx3WlM1TVlUdFVMbkJ5YjNSdmRIbHdaUzVFWVQxbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCdVpYY2dWQ2gwYUdsekxteHZQRHd4UGo0K01Dd29kR2hwY3k1b2FUdzhNWHgwYUdsekxteHZQajQrTXpFcFBqNCtNQ2w5TzFRdWNISnZkRzkwZVhCbExteGxablJUYUdsbWREMVVMbkJ5YjNSdmRIbHdaUzVFWVR0Y2JsUXVjSEp2ZEc5MGVYQmxMbU5pUFdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1SVNFb2RHaHBjeTVvYVNZeU1UUTNORGd6TmpRNEtYMDdWQzV3Y205MGIzUjVjR1V1YlhOaVBWUXVjSEp2ZEc5MGVYQmxMbU5pTzFRdWNISnZkRzkwZVhCbExrOWlQV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJU0VvZEdocGN5NXNieVl4S1gwN1ZDNXdjbTkwYjNSNWNHVXViSE5pUFZRdWNISnZkRzkwZVhCbExrOWlPMVF1Y0hKdmRHOTBlWEJsTGxWaFBXWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlEQTlQWFJvYVhNdWJHOG1KakE5UFhSb2FYTXVhR2w5TzFRdWNISnZkRzkwZVhCbExucGxjbTg5VkM1d2NtOTBiM1I1Y0dVdVZXRTdWQzV3Y205MGIzUjVjR1V1WVdSa1BXWjFibU4wYVc5dUtHRXBlM0psZEhWeWJpQnVaWGNnVkNnb2RHaHBjeTVzYnl0aExteHZKalF5T1RRNU5qY3lPVFVwUGo0K01ENCtQakFzS0NoMGFHbHpMbWhwSzJFdWFHa21OREk1TkRrMk56STVOU2srUGo0d0tTc29OREk1TkRrMk56STVOanc5ZEdocGN5NXNieXRoTG14dlB6RTZNQ2srUGo0d0tYMDdWQzV3Y205MGIzUjVjR1V1WVdSa1BWUXVjSEp2ZEc5MGVYQmxMbUZrWkR0Y2JsUXVjSEp2ZEc5MGVYQmxMbk4xWWoxbWRXNWpkR2x2YmloaEtYdHlaWFIxY200Z2JtVjNJRlFvS0hSb2FYTXViRzh0WVM1c2J5WTBNamswT1RZM01qazFLVDQrUGpBK1BqNHdMQ2dvZEdocGN5NW9hUzFoTG1ocEpqUXlPVFE1TmpjeU9UVXBQajQrTUNrdEtEQStkR2hwY3k1c2J5MWhMbXh2UHpFNk1DaytQajR3S1gwN1ZDNXdjbTkwYjNSNWNHVXVjM1ZpUFZRdWNISnZkRzkwZVhCbExuTjFZanRtZFc1amRHbHZiaUJ5WWloaExHSXBlM1poY2lCalBXRW1OalUxTXpVN1lUNCtQajB4Tmp0MllYSWdaRDFpSmpZMU5UTTFMR1k5WWo0K1BqRTJPMkk5WXlwa0t6WTFOVE0yS2loakttWW1OalUxTXpVcEt6WTFOVE0yS2loaEttUW1OalUxTXpVcE8yWnZjaWhqUFdFcVppc29ZeXBtUGo0K01UWXBLeWhoS21RK1BqNHhOaWs3TkRJNU5EazJOekk1Tmp3OVlqc3BZaTA5TkRJNU5EazJOekk1Tml4akt6MHhPM0psZEhWeWJpQnVaWGNnVkNoaVBqNCtNQ3hqUGo0K01DbDlWQzV0ZFd3ek1uZ3pNajF5WWp0VUxuQnliM1J2ZEhsd1pTNWxZajFtZFc1amRHbHZiaWhoS1h0MllYSWdZajF5WWloMGFHbHpMbXh2TEdFcE8yRTljbUlvZEdocGN5NW9hU3hoS1R0aExtaHBQV0V1Ykc4N1lTNXNiejB3TzNKbGRIVnliaUJpTG1Ga1pDaGhLWDA3VkM1d2NtOTBiM1I1Y0dVdWJYVnNQVlF1Y0hKdmRHOTBlWEJsTG1WaU8xeHVWQzV3Y205MGIzUjVjR1V1V0dFOVpuVnVZM1JwYjI0b1lTbDdhV1lvTUQwOVlTbHlaWFIxY201YlhUdDJZWElnWWoxdVpYY2dWQ2d3TERBcExHTTlibVYzSUZRb2RHaHBjeTVzYnl4MGFHbHpMbWhwS1R0aFBXNWxkeUJVS0dFc01DazdabTl5S0haaGNpQmtQVzVsZHlCVUtERXNNQ2s3SVdFdVkySW9LVHNwWVQxaExrUmhLQ2tzWkQxa0xrUmhLQ2s3Wm05eUtEc2haQzVWWVNncE95a3dQajFoTG1OdGNDaGpLU1ltS0dJOVlpNWhaR1FvWkNrc1l6MWpMbk4xWWloaEtTa3NZVDFoTGt4aEtDa3NaRDFrTGt4aEtDazdjbVYwZFhKdVcySXNZMTE5TzFRdWNISnZkRzkwZVhCbExtUnBkajFVTG5CeWIzUnZkSGx3WlM1WVlUdFVMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaejFtZFc1amRHbHZiaWdwZTJadmNpaDJZWElnWVQxY0lsd2lMR0k5ZEdocGN6c2hZaTVWWVNncE95bDdZajFpTGxoaEtERXdLVHQyWVhJZ1l6MWlXekJkTzJFOVlsc3hYUzVzYnl0aE8ySTlZMzFjSWx3aVBUMWhKaVlvWVQxY0lqQmNJaWs3Y21WMGRYSnVJR0Y5TzFRdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1blBWUXVjSEp2ZEc5MGVYQmxMblJ2VTNSeWFXNW5PMXh1Wm5WdVkzUnBiMjRnVlNoaEtYdG1iM0lvZG1GeUlHSTlibVYzSUZRb01Dd3dLU3hqUFc1bGR5QlVLREFzTUNrc1pEMHdPMlE4WVM1c1pXNW5kR2c3WkNzcktYdHBaaWhjSWpCY0lqNWhXMlJkZkh4Y0lqbGNJanhoVzJSZEtYSmxkSFZ5YmlCdWRXeHNPMk11Ykc4OWNHRnljMlZKYm5Rb1lWdGtYU3d4TUNrN1lqMWlMbVZpS0RFd0tTNWhaR1FvWXlsOWNtVjBkWEp1SUdKOVZDNW1jbTl0VTNSeWFXNW5QVlU3VkM1d2NtOTBiM1I1Y0dVdVkyeHZibVU5Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnYm1WM0lGUW9kR2hwY3k1c2J5eDBhR2x6TG1ocEtYMDdWQzV3Y205MGIzUjVjR1V1WTJ4dmJtVTlWQzV3Y205MGIzUjVjR1V1WTJ4dmJtVTdablZ1WTNScGIyNGdWaWhoTEdJcGUzUm9hWE11Ykc4OVlUdDBhR2x6TG1ocFBXSjlaeWhjSW1wemNHSXVZWEpwZEdndVNXNTBOalJjSWl4V0xIWnZhV1FnTUNrN1ZpNXdjbTkwYjNSNWNHVXVZV1JrUFdaMWJtTjBhVzl1S0dFcGUzSmxkSFZ5YmlCdVpYY2dWaWdvZEdocGN5NXNieXRoTG14dkpqUXlPVFE1TmpjeU9UVXBQajQrTUQ0K1BqQXNLQ2gwYUdsekxtaHBLMkV1YUdrbU5ESTVORGsyTnpJNU5TaytQajR3S1Nzb05ESTVORGsyTnpJNU5qdzlkR2hwY3k1c2J5dGhMbXh2UHpFNk1DaytQajR3S1gwN1ZpNXdjbTkwYjNSNWNHVXVZV1JrUFZZdWNISnZkRzkwZVhCbExtRmtaRHRjYmxZdWNISnZkRzkwZVhCbExuTjFZajFtZFc1amRHbHZiaWhoS1h0eVpYUjFjbTRnYm1WM0lGWW9LSFJvYVhNdWJHOHRZUzVzYnlZME1qazBPVFkzTWprMUtUNCtQakErUGo0d0xDZ29kR2hwY3k1b2FTMWhMbWhwSmpReU9UUTVOamN5T1RVcFBqNCtNQ2t0S0RBK2RHaHBjeTVzYnkxaExteHZQekU2TUNrK1BqNHdLWDA3Vmk1d2NtOTBiM1I1Y0dVdWMzVmlQVll1Y0hKdmRHOTBlWEJsTG5OMVlqdFdMbkJ5YjNSdmRIbHdaUzVqYkc5dVpUMW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQnVaWGNnVmloMGFHbHpMbXh2TEhSb2FYTXVhR2twZlR0V0xuQnliM1J2ZEhsd1pTNWpiRzl1WlQxV0xuQnliM1J2ZEhsd1pTNWpiRzl1WlR0V0xuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp6MW1kVzVqZEdsdmJpZ3BlM1poY2lCaFBUQWhQU2gwYUdsekxtaHBKakl4TkRjME9ETTJORGdwTEdJOWJtVjNJRlFvZEdocGN5NXNieXgwYUdsekxtaHBLVHRoSmlZb1lqMG9ibVYzSUZRb01Dd3dLU2t1YzNWaUtHSXBLVHR5WlhSMWNtNG9ZVDljSWkxY0lqcGNJbHdpS1N0aUxuUnZVM1J5YVc1bktDbDlPMVl1Y0hKdmRHOTBlWEJsTG5SdlUzUnlhVzVuUFZZdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bk8xeHVablZ1WTNScGIyNGdjMklvWVNsN2RtRnlJR0k5TUR4aExteGxibWQwYUNZbVhDSXRYQ0k5UFdGYk1GMDdZaVltS0dFOVlTNXpkV0p6ZEhKcGJtY29NU2twTzJFOVZTaGhLVHRwWmlodWRXeHNQVDA5WVNseVpYUjFjbTRnYm5Wc2JEdGlKaVlvWVQwb2JtVjNJRlFvTUN3d0tTa3VjM1ZpS0dFcEtUdHlaWFIxY200Z2JtVjNJRllvWVM1c2J5eGhMbWhwS1gxV0xtWnliMjFUZEhKcGJtYzljMkk3Wm5WdVkzUnBiMjRnVnlncGUzUm9hWE11WXoxYlhUdDBhR2x6TG1JOU1EdDBhR2x6TG1FOWJtVjNJRk03ZEdocGN5NW9QVnRkZldjb1hDSnFjM0JpTGtKcGJtRnllVmR5YVhSbGNsd2lMRmNzZG05cFpDQXdLVHRtZFc1amRHbHZiaUIwWWloaExHSXBlM1poY2lCalBXRXVZUzVsYm1Rb0tUdGhMbU11Y0hWemFDaGpLVHRoTG1NdWNIVnphQ2hpS1R0aExtSXJQV011YkdWdVozUm9LMkl1YkdWdVozUm9mV1oxYm1OMGFXOXVJRmdvWVN4aUtYdFpLR0VzWWl3eUtUdGlQV0V1WVM1bGJtUW9LVHRoTG1NdWNIVnphQ2hpS1R0aExtSXJQV0l1YkdWdVozUm9PMkl1Y0hWemFDaGhMbUlwTzNKbGRIVnliaUJpZldaMWJtTjBhVzl1SUZvb1lTeGlLWHQyWVhJZ1l6MWlMbkJ2Y0NncE8yTTlZUzVpSzJFdVlTNXNaVzVuZEdnb0tTMWpPMlp2Y2lodUtEQThQV01wT3pFeU56eGpPeWxpTG5CMWMyZ29ZeVl4TWpkOE1USTRLU3hqUGo0K1BUY3NZUzVpS3lzN1lpNXdkWE5vS0dNcE8yRXVZaXNyZlZjdWNISnZkRzkwZVhCbExuQmlQV1oxYm1OMGFXOXVLR0VzWWl4aktYdDBZaWgwYUdsekxHRXVjM1ZpWVhKeVlYa29ZaXhqS1NsOU8xY3VjSEp2ZEc5MGVYQmxMbmR5YVhSbFUyVnlhV0ZzYVhwbFpFMWxjM05oWjJVOVZ5NXdjbTkwYjNSNWNHVXVjR0k3WEc1WExuQnliM1J2ZEhsd1pTNVFZajFtZFc1amRHbHZiaWhoTEdJc1l5bDdiblZzYkNFOVlTWW1iblZzYkNFOVlpWW1iblZzYkNFOVl5WW1kR2hwY3k1d1lpaGhMR0lzWXlsOU8xY3VjSEp2ZEc5MGVYQmxMbTFoZVdKbFYzSnBkR1ZUWlhKcFlXeHBlbVZrVFdWemMyRm5aVDFYTG5CeWIzUnZkSGx3WlM1UVlqdFhMbkJ5YjNSdmRIbHdaUzV5WlhObGREMW1kVzVqZEdsdmJpZ3BlM1JvYVhNdVl6MWJYVHQwYUdsekxtRXVaVzVrS0NrN2RHaHBjeTVpUFRBN2RHaHBjeTVvUFZ0ZGZUdFhMbkJ5YjNSdmRIbHdaUzV5WlhObGREMVhMbkJ5YjNSdmRIbHdaUzV5WlhObGREdFhMbkJ5YjNSdmRIbHdaUzVoWWoxbWRXNWpkR2x2YmlncGUyNG9NRDA5ZEdocGN5NW9MbXhsYm1kMGFDazdabTl5S0haaGNpQmhQVzVsZHlCVmFXNTBPRUZ5Y21GNUtIUm9hWE11WWl0MGFHbHpMbUV1YkdWdVozUm9LQ2twTEdJOWRHaHBjeTVqTEdNOVlpNXNaVzVuZEdnc1pEMHdMR1k5TUR0bVBHTTdaaXNyS1h0MllYSWdhRDFpVzJaZE8yRXVjMlYwS0dnc1pDazdaQ3M5YUM1c1pXNW5kR2g5WWoxMGFHbHpMbUV1Wlc1a0tDazdZUzV6WlhRb1lpeGtLVHRrS3oxaUxteGxibWQwYUR0dUtHUTlQV0V1YkdWdVozUm9LVHQwYUdsekxtTTlXMkZkTzNKbGRIVnliaUJoZlR0Y2JsY3VjSEp2ZEc5MGVYQmxMbWRsZEZKbGMzVnNkRUoxWm1abGNqMVhMbkJ5YjNSdmRIbHdaUzVoWWp0WExuQnliM1J2ZEhsd1pTNUxZajFtZFc1amRHbHZiaWhoS1h0eVpYUjFjbTRnUW1Fb2RHaHBjeTVoWWlncExHRXBmVHRYTG5CeWIzUnZkSGx3WlM1blpYUlNaWE4xYkhSQ1lYTmxOalJUZEhKcGJtYzlWeTV3Y205MGIzUjVjR1V1UzJJN1Z5NXdjbTkwYjNSNWNHVXVWbUU5Wm5WdVkzUnBiMjRvWVNsN2RHaHBjeTVvTG5CMWMyZ29XQ2gwYUdsekxHRXBLWDA3Vnk1d2NtOTBiM1I1Y0dVdVltVm5hVzVUZFdKTlpYTnpZV2RsUFZjdWNISnZkRzkwZVhCbExsWmhPMWN1Y0hKdmRHOTBlWEJsTGxsaFBXWjFibU4wYVc5dUtDbDdiaWd3UEQxMGFHbHpMbWd1YkdWdVozUm9LVHRhS0hSb2FYTXNkR2hwY3k1b0xuQnZjQ2dwS1gwN1Z5NXdjbTkwYjNSNWNHVXVaVzVrVTNWaVRXVnpjMkZuWlQxWExuQnliM1J2ZEhsd1pTNVpZVHRtZFc1amRHbHZiaUJaS0dFc1lpeGpLWHR1S0RFOFBXSW1KbUk5UFUxaGRHZ3VabXh2YjNJb1lpa3BPMkV1WVM1cUtEZ3FZaXRqS1gxY2JsY3VjSEp2ZEc5MGVYQmxMazVqUFdaMWJtTjBhVzl1S0dFc1lpeGpLWHR6ZDJsMFkyZ29ZU2w3WTJGelpTQXhPblJvYVhNdVNpaGlMR01wTzJKeVpXRnJPMk5oYzJVZ01qcDBhR2x6TGt3b1lpeGpLVHRpY21WaGF6dGpZWE5sSURNNmRHaHBjeTVVS0dJc1l5azdZbkpsWVdzN1kyRnpaU0EwT25Sb2FYTXVWaWhpTEdNcE8ySnlaV0ZyTzJOaGMyVWdOVHAwYUdsekxsTW9ZaXhqS1R0aWNtVmhhenRqWVhObElEWTZkR2hwY3k1UllTaGlMR01wTzJKeVpXRnJPMk5oYzJVZ056cDBhR2x6TGxCaEtHSXNZeWs3WW5KbFlXczdZMkZ6WlNBNE9uUm9hWE11U1NoaUxHTXBPMkp5WldGck8yTmhjMlVnT1RwMGFHbHpMbFVvWWl4aktUdGljbVZoYXp0allYTmxJREV3T25Bb1hDSkhjbTkxY0NCbWFXVnNaQ0IwZVhCbElHNXZkQ0J6ZFhCd2IzSjBaV1FnYVc0Z2QzSnBkR1ZCYm5rb0tWd2lLVHRpY21WaGF6dGpZWE5sSURFeE9uQW9YQ0pOWlhOellXZGxJR1pwWld4a0lIUjVjR1VnYm05MElITjFjSEJ2Y25SbFpDQnBiaUIzY21sMFpVRnVlU2dwWENJcE8ySnlaV0ZyTzJOaGMyVWdNVEk2ZEdocGN5NXFZU2hpTEdNcE8ySnlaV0ZyTzJOaGMyVWdNVE02ZEdocGN5NXpLR0lzWXlrN1luSmxZV3M3WTJGelpTQXhORHAwYUdsekxsSW9ZaXhqS1R0aWNtVmhhenRqWVhObElERTFPblJvYVhNdVVtRW9ZaXhqS1R0aWNtVmhhenRjYm1OaGMyVWdNVFk2ZEdocGN5NVRZU2hpTEdNcE8ySnlaV0ZyTzJOaGMyVWdNVGM2ZEdocGN5NXlZaWhpTEdNcE8ySnlaV0ZyTzJOaGMyVWdNVGc2ZEdocGN5NXpZaWhpTEdNcE8ySnlaV0ZyTzJOaGMyVWdNekE2ZEdocGN5NUxLR0lzWXlrN1luSmxZV3M3WTJGelpTQXpNVHAwYUdsekxrNG9ZaXhqS1R0aWNtVmhhenRrWldaaGRXeDBPbkFvWENKSmJuWmhiR2xrSUdacFpXeGtJSFI1Y0dVZ2FXNGdkM0pwZEdWQmJua29LVndpS1gxOU8xY3VjSEp2ZEc5MGVYQmxMbmR5YVhSbFFXNTVQVmN1Y0hKdmRHOTBlWEJsTGs1ak8yWjFibU4wYVc5dUlIVmlLR0VzWWl4aktYdHVkV3hzSVQxakppWW9XU2hoTEdJc01Da3NZUzVoTG1vb1l5a3BmV1oxYm1OMGFXOXVJSFppS0dFc1lpeGpLWHR1ZFd4c0lUMWpKaVlvV1NoaExHSXNNQ2tzWVM1aExrMG9ZeWtwZlZjdWNISnZkRzkwZVhCbExsTTlablZ1WTNScGIyNG9ZU3hpS1h0dWRXeHNJVDFpSmlZb2JpZ3RNakUwTnpRNE16WTBPRHc5WWlZbU1qRTBOelE0TXpZME9ENWlLU3gyWWloMGFHbHpMR0VzWWlrcGZUdFhMbkJ5YjNSdmRIbHdaUzUzY21sMFpVbHVkRE15UFZjdWNISnZkRzkwZVhCbExsTTdYRzVYTG5CeWIzUnZkSGx3WlM1dllqMW1kVzVqZEdsdmJpaGhMR0lwZTI1MWJHd2hQV0ltSmloaVBYQmhjbk5sU1c1MEtHSXNNVEFwTEc0b0xUSXhORGMwT0RNMk5EZzhQV0ltSmpJeE5EYzBPRE0yTkRnK1lpa3NkbUlvZEdocGN5eGhMR0lwS1gwN1Z5NXdjbTkwYjNSNWNHVXVkM0pwZEdWSmJuUXpNbE4wY21sdVp6MVhMbkJ5YjNSdmRIbHdaUzV2WWp0WExuQnliM1J2ZEhsd1pTNVVQV1oxYm1OMGFXOXVLR0VzWWlsN2JuVnNiQ0U5WWlZbUtHNG9MVGt5TWpNek56SXdNelk0TlRRM056VTRNRGc4UFdJbUpqQjROMlptWm1abVptWm1abVptWm1abVpqNWlLU3h1ZFd4c0lUMWlKaVlvV1NoMGFHbHpMR0VzTUNrc2RHaHBjeTVoTG5WaEtHSXBLU2w5TzFjdWNISnZkRzkwZVhCbExuZHlhWFJsU1c1ME5qUTlWeTV3Y205MGIzUjVjR1V1VkR0WExuQnliM1J2ZEhsd1pTNXJZVDFtZFc1amRHbHZiaWhoTEdJcGUyNTFiR3doUFdJbUppaGlQWE5pS0dJcExGa29kR2hwY3l4aExEQXBMSFJvYVhNdVlTNXNLR0l1Ykc4c1lpNW9hU2twZlR0WExuQnliM1J2ZEhsd1pTNTNjbWwwWlVsdWREWTBVM1J5YVc1blBWY3VjSEp2ZEc5MGVYQmxMbXRoTzF4dVZ5NXdjbTkwYjNSNWNHVXVjejFtZFc1amRHbHZiaWhoTEdJcGUyNTFiR3doUFdJbUppaHVLREE4UFdJbUpqUXlPVFE1TmpjeU9UWStZaWtzZFdJb2RHaHBjeXhoTEdJcEtYMDdWeTV3Y205MGIzUjVjR1V1ZDNKcGRHVlZhVzUwTXpJOVZ5NXdjbTkwYjNSNWNHVXVjenRYTG5CeWIzUnZkSGx3WlM1MVlqMW1kVzVqZEdsdmJpaGhMR0lwZTI1MWJHd2hQV0ltSmloaVBYQmhjbk5sU1c1MEtHSXNNVEFwTEc0b01EdzlZaVltTkRJNU5EazJOekk1Tmo1aUtTeDFZaWgwYUdsekxHRXNZaWtwZlR0WExuQnliM1J2ZEhsd1pTNTNjbWwwWlZWcGJuUXpNbE4wY21sdVp6MVhMbkJ5YjNSdmRIbHdaUzUxWWp0WExuQnliM1J2ZEhsd1pTNVdQV1oxYm1OMGFXOXVLR0VzWWlsN2JuVnNiQ0U5WWlZbUtHNG9NRHc5WWlZbU1TNDRORFEyTnpRME1EY3pOekE1TlRVeVJURTVQbUlwTEc1MWJHd2hQV0ltSmloWktIUm9hWE1zWVN3d0tTeDBhR2x6TG1FdWRtRW9ZaWtwS1gwN1Z5NXdjbTkwYjNSNWNHVXVkM0pwZEdWVmFXNTBOalE5Vnk1d2NtOTBiM1I1Y0dVdVZqdFhMbkJ5YjNSdmRIbHdaUzUyWWoxbWRXNWpkR2x2YmloaExHSXBlMjUxYkd3aFBXSW1KaWhpUFZVb1lpa3NXU2gwYUdsekxHRXNNQ2tzZEdocGN5NWhMbXdvWWk1c2J5eGlMbWhwS1NsOU8xeHVWeTV3Y205MGIzUjVjR1V1ZDNKcGRHVlZhVzUwTmpSVGRISnBibWM5Vnk1d2NtOTBiM1I1Y0dVdWRtSTdWeTV3Y205MGIzUjVjR1V1Y21JOVpuVnVZM1JwYjI0b1lTeGlLWHR1ZFd4c0lUMWlKaVlvYmlndE1qRTBOelE0TXpZME9EdzlZaVltTWpFME56UTRNelkwT0Q1aUtTeHVkV3hzSVQxaUppWW9XU2gwYUdsekxHRXNNQ2tzZEdocGN5NWhMbmRoS0dJcEtTbDlPMWN1Y0hKdmRHOTBlWEJsTG5keWFYUmxVMmx1ZERNeVBWY3VjSEp2ZEc5MGVYQmxMbkppTzFjdWNISnZkRzkwZVhCbExuTmlQV1oxYm1OMGFXOXVLR0VzWWlsN2JuVnNiQ0U5WWlZbUtHNG9MVGt5TWpNek56SXdNelk0TlRRM056VTRNRGc4UFdJbUpqQjROMlptWm1abVptWm1abVptWm1abVpqNWlLU3h1ZFd4c0lUMWlKaVlvV1NoMGFHbHpMR0VzTUNrc2RHaHBjeTVoTG5oaEtHSXBLU2w5TzFjdWNISnZkRzkwZVhCbExuZHlhWFJsVTJsdWREWTBQVmN1Y0hKdmRHOTBlWEJsTG5OaU8xY3VjSEp2ZEc5MGVYQmxMaVJrUFdaMWJtTjBhVzl1S0dFc1lpbDdiblZzYkNFOVlpWW1iblZzYkNFOVlpWW1LRmtvZEdocGN5eGhMREFwTEhSb2FYTXVZUzVYS0dJcEtYMDdWeTV3Y205MGIzUjVjR1V1ZDNKcGRHVlRhVzUwU0dGemFEWTBQVmN1Y0hKdmRHOTBlWEJsTGlSa08xeHVWeTV3Y205MGIzUjVjR1V1V21ROVpuVnVZM1JwYjI0b1lTeGlLWHR1ZFd4c0lUMWlKaVp1ZFd4c0lUMWlKaVlvV1NoMGFHbHpMR0VzTUNrc2RHaHBjeTVoTGxSaEtHSXBLWDA3Vnk1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZUYVc1ME5qUlRkSEpwYm1jOVZ5NXdjbTkwYjNSNWNHVXVXbVE3Vnk1d2NtOTBiM1I1Y0dVdVVHRTlablZ1WTNScGIyNG9ZU3hpS1h0dWRXeHNJVDFpSmlZb2JpZ3dQRDFpSmlZME1qazBPVFkzTWprMlBtSXBMRmtvZEdocGN5eGhMRFVwTEhSb2FYTXVZUzV6S0dJcEtYMDdWeTV3Y205MGIzUjVjR1V1ZDNKcGRHVkdhWGhsWkRNeVBWY3VjSEp2ZEc5MGVYQmxMbEJoTzFjdWNISnZkRzkwZVhCbExsRmhQV1oxYm1OMGFXOXVLR0VzWWlsN2JuVnNiQ0U5WWlZbUtHNG9NRHc5WWlZbU1TNDRORFEyTnpRME1EY3pOekE1TlRVeVJURTVQbUlwTEZrb2RHaHBjeXhoTERFcExIUm9hWE11WVM1V0tHSXBLWDA3Vnk1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZHYVhobFpEWTBQVmN1Y0hKdmRHOTBlWEJsTGxGaE8xY3VjSEp2ZEc5MGVYQmxMbTVpUFdaMWJtTjBhVzl1S0dFc1lpbDdiblZzYkNFOVlpWW1LR0k5VlNoaUtTeFpLSFJvYVhNc1lTd3hLU3gwYUdsekxtRXVRU2hpTG14dkxHSXVhR2twS1gwN1Z5NXdjbTkwYjNSNWNHVXVkM0pwZEdWR2FYaGxaRFkwVTNSeWFXNW5QVmN1Y0hKdmRHOTBlWEJsTG01aU8xeHVWeTV3Y205MGIzUjVjR1V1VW1FOVpuVnVZM1JwYjI0b1lTeGlLWHR1ZFd4c0lUMWlKaVlvYmlndE1qRTBOelE0TXpZME9EdzlZaVltTWpFME56UTRNelkwT0Q1aUtTeFpLSFJvYVhNc1lTdzFLU3gwYUdsekxtRXVVeWhpS1NsOU8xY3VjSEp2ZEc5MGVYQmxMbmR5YVhSbFUyWnBlR1ZrTXpJOVZ5NXdjbTkwYjNSNWNHVXVVbUU3Vnk1d2NtOTBiM1I1Y0dVdVUyRTlablZ1WTNScGIyNG9ZU3hpS1h0dWRXeHNJVDFpSmlZb2JpZ3RPVEl5TXpNM01qQXpOamcxTkRjM05UZ3dPRHc5WWlZbU1IZzNabVptWm1abVptWm1abVptWm1abVBtSXBMRmtvZEdocGN5eGhMREVwTEhSb2FYTXVZUzVVS0dJcEtYMDdWeTV3Y205MGIzUjVjR1V1ZDNKcGRHVlRabWw0WldRMk5EMVhMbkJ5YjNSdmRIbHdaUzVUWVR0WExuQnliM1J2ZEhsd1pTNXhZajFtZFc1amRHbHZiaWhoTEdJcGUyNTFiR3doUFdJbUppaGlQWE5pS0dJcExGa29kR2hwY3l4aExERXBMSFJvYVhNdVlTNUJLR0l1Ykc4c1lpNW9hU2twZlR0WExuQnliM1J2ZEhsd1pTNTNjbWwwWlZObWFYaGxaRFkwVTNSeWFXNW5QVmN1Y0hKdmRHOTBlWEJsTG5GaU8xY3VjSEp2ZEc5MGVYQmxMa3c5Wm5WdVkzUnBiMjRvWVN4aUtYdHVkV3hzSVQxaUppWW9XU2gwYUdsekxHRXNOU2tzZEdocGN5NWhMa3dvWWlrcGZUdGNibGN1Y0hKdmRHOTBlWEJsTG5keWFYUmxSbXh2WVhROVZ5NXdjbTkwYjNSNWNHVXVURHRYTG5CeWIzUnZkSGx3WlM1S1BXWjFibU4wYVc5dUtHRXNZaWw3Ym5Wc2JDRTlZaVltS0Zrb2RHaHBjeXhoTERFcExIUm9hWE11WVM1S0tHSXBLWDA3Vnk1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZFYjNWaWJHVTlWeTV3Y205MGIzUjVjR1V1U2p0WExuQnliM1J2ZEhsd1pTNUpQV1oxYm1OMGFXOXVLR0VzWWlsN2JuVnNiQ0U5WWlZbUtHNG9YQ0ppYjI5c1pXRnVYQ0k5UFQxMGVYQmxiMllnWW54OFhDSnVkVzFpWlhKY0lqMDlQWFI1Y0dWdlppQmlLU3haS0hSb2FYTXNZU3d3S1N4MGFHbHpMbUV1U1NoaUtTbDlPMWN1Y0hKdmRHOTBlWEJsTG5keWFYUmxRbTl2YkQxWExuQnliM1J2ZEhsd1pTNUpPMWN1Y0hKdmRHOTBlWEJsTGxJOVpuVnVZM1JwYjI0b1lTeGlLWHR1ZFd4c0lUMWlKaVlvYmlndE1qRTBOelE0TXpZME9EdzlZaVltTWpFME56UTRNelkwT0Q1aUtTeFpLSFJvYVhNc1lTd3dLU3gwYUdsekxtRXVUU2hpS1NsOU8xY3VjSEp2ZEc5MGVYQmxMbmR5YVhSbFJXNTFiVDFYTG5CeWIzUnZkSGx3WlM1U08xY3VjSEp2ZEc5MGVYQmxMbFU5Wm5WdVkzUnBiMjRvWVN4aUtYdHVkV3hzSVQxaUppWW9ZVDFZS0hSb2FYTXNZU2tzZEdocGN5NWhMbFVvWWlrc1dpaDBhR2x6TEdFcEtYMDdYRzVYTG5CeWIzUnZkSGx3WlM1M2NtbDBaVk4wY21sdVp6MVhMbkJ5YjNSdmRIbHdaUzVWTzFjdWNISnZkRzkwZVhCbExtcGhQV1oxYm1OMGFXOXVLR0VzWWlsN2JuVnNiQ0U5WWlZbUtHSTlWV0VvWWlrc1dTaDBhR2x6TEdFc01pa3NkR2hwY3k1aExtb29ZaTVzWlc1bmRHZ3BMSFJpS0hSb2FYTXNZaWtwZlR0WExuQnliM1J2ZEhsd1pTNTNjbWwwWlVKNWRHVnpQVmN1Y0hKdmRHOTBlWEJsTG1waE8xY3VjSEp2ZEc5MGVYQmxMbEpqUFdaMWJtTjBhVzl1S0dFc1lpeGpLWHR1ZFd4c0lUMWlKaVlvWVQxWUtIUm9hWE1zWVNrc1l5aGlMSFJvYVhNcExGb29kR2hwY3l4aEtTbDlPMWN1Y0hKdmRHOTBlWEJsTG5keWFYUmxUV1Z6YzJGblpUMVhMbkJ5YjNSdmRIbHdaUzVTWXp0WExuQnliM1J2ZEhsd1pTNVRZejFtZFc1amRHbHZiaWhoTEdJc1l5bDdiblZzYkNFOVlpWW1LRmtvZEdocGN5d3hMRE1wTEZrb2RHaHBjeXd5TERBcExIUm9hWE11WVM1TktHRXBMR0U5V0NoMGFHbHpMRE1wTEdNb1lpeDBhR2x6S1N4YUtIUm9hWE1zWVNrc1dTaDBhR2x6TERFc05Da3BmVHRYTG5CeWIzUnZkSGx3WlM1M2NtbDBaVTFsYzNOaFoyVlRaWFE5Vnk1d2NtOTBiM1I1Y0dVdVUyTTdYRzVYTG5CeWIzUnZkSGx3WlM1UFl6MW1kVzVqZEdsdmJpaGhMR0lzWXlsN2JuVnNiQ0U5WWlZbUtGa29kR2hwY3l4aExETXBMR01vWWl4MGFHbHpLU3haS0hSb2FYTXNZU3cwS1NsOU8xY3VjSEp2ZEc5MGVYQmxMbmR5YVhSbFIzSnZkWEE5Vnk1d2NtOTBiM1I1Y0dVdVQyTTdWeTV3Y205MGIzUjVjR1V1U3oxbWRXNWpkR2x2YmloaExHSXBlMjUxYkd3aFBXSW1KaWh1S0RnOVBXSXViR1Z1WjNSb0tTeFpLSFJvYVhNc1lTd3hLU3gwYUdsekxtRXVTeWhpS1NsOU8xY3VjSEp2ZEc5MGVYQmxMbmR5YVhSbFJtbDRaV1JJWVhOb05qUTlWeTV3Y205MGIzUjVjR1V1U3p0WExuQnliM1J2ZEhsd1pTNU9QV1oxYm1OMGFXOXVLR0VzWWlsN2JuVnNiQ0U5WWlZbUtHNG9PRDA5WWk1c1pXNW5kR2dwTEZrb2RHaHBjeXhoTERBcExIUm9hWE11WVM1T0tHSXBLWDA3Vnk1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZXWVhKcGJuUklZWE5vTmpROVZ5NXdjbTkwYjNSNWNHVXVUanRYTG5CeWIzUnZkSGx3WlM1QlBXWjFibU4wYVc5dUtHRXNZaXhqS1h0WktIUm9hWE1zWVN3eEtUdDBhR2x6TG1FdVFTaGlMR01wZlR0WExuQnliM1J2ZEhsd1pTNTNjbWwwWlZOd2JHbDBSbWw0WldRMk5EMVhMbkJ5YjNSdmRIbHdaUzVCTzF4dVZ5NXdjbTkwYjNSNWNHVXViRDFtZFc1amRHbHZiaWhoTEdJc1l5bDdXU2gwYUdsekxHRXNNQ2s3ZEdocGN5NWhMbXdvWWl4aktYMDdWeTV3Y205MGIzUjVjR1V1ZDNKcGRHVlRjR3hwZEZaaGNtbHVkRFkwUFZjdWNISnZkRzkwZVhCbExtdzdWeTV3Y205MGIzUjVjR1V1ZEdJOVpuVnVZM1JwYjI0b1lTeGlMR01wZTFrb2RHaHBjeXhoTERBcE8zWmhjaUJrUFhSb2FYTXVZVHRLWVNoaUxHTXNablZ1WTNScGIyNG9aaXhvS1h0a0xtd29aajQrUGpBc2FENCtQakFwZlNsOU8xY3VjSEp2ZEc5MGVYQmxMbmR5YVhSbFUzQnNhWFJhYVdkNllXZFdZWEpwYm5RMk5EMVhMbkJ5YjNSdmRIbHdaUzUwWWp0WExuQnliM1J2ZEhsd1pTNUZaRDFtZFc1amRHbHZiaWhoTEdJcGUybG1LRzUxYkd3aFBXSXBabTl5S0haaGNpQmpQVEE3WXp4aUxteGxibWQwYUR0akt5c3BkbUlvZEdocGN5eGhMR0piWTEwcGZUdFhMbkJ5YjNSdmRIbHdaUzUzY21sMFpWSmxjR1ZoZEdWa1NXNTBNekk5Vnk1d2NtOTBiM1I1Y0dVdVJXUTdWeTV3Y205MGIzUjVjR1V1Um1ROVpuVnVZM1JwYjI0b1lTeGlLWHRwWmlodWRXeHNJVDFpS1dadmNpaDJZWElnWXowd08yTThZaTVzWlc1bmRHZzdZeXNyS1hSb2FYTXViMklvWVN4aVcyTmRLWDA3WEc1WExuQnliM1J2ZEhsd1pTNTNjbWwwWlZKbGNHVmhkR1ZrU1c1ME16SlRkSEpwYm1jOVZ5NXdjbTkwYjNSNWNHVXVSbVE3Vnk1d2NtOTBiM1I1Y0dVdVIyUTlablZ1WTNScGIyNG9ZU3hpS1h0cFppaHVkV3hzSVQxaUtXWnZjaWgyWVhJZ1l6MHdPMk04WWk1c1pXNW5kR2c3WXlzcktYdDJZWElnWkQxaVcyTmRPMjUxYkd3aFBXUW1KaWhaS0hSb2FYTXNZU3d3S1N4MGFHbHpMbUV1ZFdFb1pDa3BmWDA3Vnk1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZTWlhCbFlYUmxaRWx1ZERZMFBWY3VjSEp2ZEc5MGVYQmxMa2RrTzFjdWNISnZkRzkwZVhCbExsRmtQV1oxYm1OMGFXOXVLR0VzWWl4akxHUXBlMmxtS0c1MWJHd2hQV0lwWm05eUtIWmhjaUJtUFRBN1pqeGlMbXhsYm1kMGFEdG1LeXNwZEdocGN5NUJLR0VzWXloaVcyWmRLU3hrS0dKYlpsMHBLWDA3Vnk1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZTWlhCbFlYUmxaRk53YkdsMFJtbDRaV1EyTkQxWExuQnliM1J2ZEhsd1pTNVJaRHRYTG5CeWIzUnZkSGx3WlM1U1pEMW1kVzVqZEdsdmJpaGhMR0lzWXl4a0tYdHBaaWh1ZFd4c0lUMWlLV1p2Y2loMllYSWdaajB3TzJZOFlpNXNaVzVuZEdnN1ppc3JLWFJvYVhNdWJDaGhMR01vWWx0bVhTa3NaQ2hpVzJaZEtTbDlPMXh1Vnk1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZTWlhCbFlYUmxaRk53YkdsMFZtRnlhVzUwTmpROVZ5NXdjbTkwYjNSNWNHVXVVbVE3Vnk1d2NtOTBiM1I1Y0dVdVUyUTlablZ1WTNScGIyNG9ZU3hpTEdNc1pDbDdhV1lvYm5Wc2JDRTlZaWxtYjNJb2RtRnlJR1k5TUR0bVBHSXViR1Z1WjNSb08yWXJLeWwwYUdsekxuUmlLR0VzWXloaVcyWmRLU3hrS0dKYlpsMHBLWDA3Vnk1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZTWlhCbFlYUmxaRk53YkdsMFdtbG5lbUZuVm1GeWFXNTBOalE5Vnk1d2NtOTBiM1I1Y0dVdVUyUTdWeTV3Y205MGIzUjVjR1V1U0dROVpuVnVZM1JwYjI0b1lTeGlLWHRwWmlodWRXeHNJVDFpS1dadmNpaDJZWElnWXowd08yTThZaTVzWlc1bmRHZzdZeXNyS1hSb2FYTXVhMkVvWVN4aVcyTmRLWDA3Vnk1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZTWlhCbFlYUmxaRWx1ZERZMFUzUnlhVzVuUFZjdWNISnZkRzkwZVhCbExraGtPMWN1Y0hKdmRHOTBlWEJsTGxWa1BXWjFibU4wYVc5dUtHRXNZaWw3YVdZb2JuVnNiQ0U5WWlsbWIzSW9kbUZ5SUdNOU1EdGpQR0l1YkdWdVozUm9PMk1yS3lsMVlpaDBhR2x6TEdFc1lsdGpYU2w5TzFjdWNISnZkRzkwZVhCbExuZHlhWFJsVW1Wd1pXRjBaV1JWYVc1ME16STlWeTV3Y205MGIzUjVjR1V1VldRN1hHNVhMbkJ5YjNSdmRIbHdaUzVXWkQxbWRXNWpkR2x2YmloaExHSXBlMmxtS0c1MWJHd2hQV0lwWm05eUtIWmhjaUJqUFRBN1l6eGlMbXhsYm1kMGFEdGpLeXNwZEdocGN5NTFZaWhoTEdKYlkxMHBmVHRYTG5CeWIzUnZkSGx3WlM1M2NtbDBaVkpsY0dWaGRHVmtWV2x1ZERNeVUzUnlhVzVuUFZjdWNISnZkRzkwZVhCbExsWmtPMWN1Y0hKdmRHOTBlWEJsTGxka1BXWjFibU4wYVc5dUtHRXNZaWw3YVdZb2JuVnNiQ0U5WWlsbWIzSW9kbUZ5SUdNOU1EdGpQR0l1YkdWdVozUm9PMk1yS3lsN2RtRnlJR1E5WWx0alhUdHVkV3hzSVQxa0ppWW9XU2gwYUdsekxHRXNNQ2tzZEdocGN5NWhMblpoS0dRcEtYMTlPMWN1Y0hKdmRHOTBlWEJsTG5keWFYUmxVbVZ3WldGMFpXUlZhVzUwTmpROVZ5NXdjbTkwYjNSNWNHVXVWMlE3Vnk1d2NtOTBiM1I1Y0dVdVdHUTlablZ1WTNScGIyNG9ZU3hpS1h0cFppaHVkV3hzSVQxaUtXWnZjaWgyWVhJZ1l6MHdPMk04WWk1c1pXNW5kR2c3WXlzcktYUm9hWE11ZG1Jb1lTeGlXMk5kS1gwN1Z5NXdjbTkwYjNSNWNHVXVkM0pwZEdWU1pYQmxZWFJsWkZWcGJuUTJORk4wY21sdVp6MVhMbkJ5YjNSdmRIbHdaUzVZWkR0Y2JsY3VjSEp2ZEc5MGVYQmxMazFrUFdaMWJtTjBhVzl1S0dFc1lpbDdhV1lvYm5Wc2JDRTlZaWxtYjNJb2RtRnlJR005TUR0alBHSXViR1Z1WjNSb08yTXJLeWw3ZG1GeUlHUTlZbHRqWFR0dWRXeHNJVDFrSmlZb1dTaDBhR2x6TEdFc01Da3NkR2hwY3k1aExuZGhLR1FwS1gxOU8xY3VjSEp2ZEc5MGVYQmxMbmR5YVhSbFVtVndaV0YwWldSVGFXNTBNekk5Vnk1d2NtOTBiM1I1Y0dVdVRXUTdWeTV3Y205MGIzUjVjR1V1VG1ROVpuVnVZM1JwYjI0b1lTeGlLWHRwWmlodWRXeHNJVDFpS1dadmNpaDJZWElnWXowd08yTThZaTVzWlc1bmRHZzdZeXNyS1h0MllYSWdaRDFpVzJOZE8yNTFiR3doUFdRbUppaFpLSFJvYVhNc1lTd3dLU3gwYUdsekxtRXVlR0VvWkNrcGZYMDdWeTV3Y205MGIzUjVjR1V1ZDNKcGRHVlNaWEJsWVhSbFpGTnBiblEyTkQxWExuQnliM1J2ZEhsd1pTNU9aRHRYTG5CeWIzUnZkSGx3WlM1UFpEMW1kVzVqZEdsdmJpaGhMR0lwZTJsbUtHNTFiR3doUFdJcFptOXlLSFpoY2lCalBUQTdZenhpTG14bGJtZDBhRHRqS3lzcGUzWmhjaUJrUFdKYlkxMDdiblZzYkNFOVpDWW1LRmtvZEdocGN5eGhMREFwTEhSb2FYTXVZUzVVWVNoa0tTbDlmVHRYTG5CeWIzUnZkSGx3WlM1M2NtbDBaVkpsY0dWaGRHVmtVMmx1ZERZMFUzUnlhVzVuUFZjdWNISnZkRzkwZVhCbExrOWtPMXh1Vnk1d2NtOTBiM1I1Y0dVdVVHUTlablZ1WTNScGIyNG9ZU3hpS1h0cFppaHVkV3hzSVQxaUtXWnZjaWgyWVhJZ1l6MHdPMk04WWk1c1pXNW5kR2c3WXlzcktYdDJZWElnWkQxaVcyTmRPMjUxYkd3aFBXUW1KaWhaS0hSb2FYTXNZU3d3S1N4MGFHbHpMbUV1Vnloa0tTbDlmVHRYTG5CeWIzUnZkSGx3WlM1M2NtbDBaVkpsY0dWaGRHVmtVMmx1ZEVoaGMyZzJORDFYTG5CeWIzUnZkSGx3WlM1UVpEdFhMbkJ5YjNSdmRIbHdaUzU1WkQxbWRXNWpkR2x2YmloaExHSXBlMmxtS0c1MWJHd2hQV0lwWm05eUtIWmhjaUJqUFRBN1l6eGlMbXhsYm1kMGFEdGpLeXNwZEdocGN5NVFZU2hoTEdKYlkxMHBmVHRYTG5CeWIzUnZkSGx3WlM1M2NtbDBaVkpsY0dWaGRHVmtSbWw0WldRek1qMVhMbkJ5YjNSdmRIbHdaUzU1WkR0WExuQnliM1J2ZEhsd1pTNTZaRDFtZFc1amRHbHZiaWhoTEdJcGUybG1LRzUxYkd3aFBXSXBabTl5S0haaGNpQmpQVEE3WXp4aUxteGxibWQwYUR0akt5c3BkR2hwY3k1UllTaGhMR0piWTEwcGZUdFhMbkJ5YjNSdmRIbHdaUzUzY21sMFpWSmxjR1ZoZEdWa1JtbDRaV1EyTkQxWExuQnliM1J2ZEhsd1pTNTZaRHRjYmxjdWNISnZkRzkwZVhCbExrRmtQV1oxYm1OMGFXOXVLR0VzWWlsN2FXWW9iblZzYkNFOVlpbG1iM0lvZG1GeUlHTTlNRHRqUEdJdWJHVnVaM1JvTzJNckt5bDBhR2x6TG01aUtHRXNZbHRqWFNsOU8xY3VjSEp2ZEc5MGVYQmxMbmR5YVhSbFVtVndaV0YwWldSR2FYaGxaRFkwVTNSeWFXNW5QVmN1Y0hKdmRHOTBlWEJsTGtGa08xY3VjSEp2ZEc5MGVYQmxMa3BrUFdaMWJtTjBhVzl1S0dFc1lpbDdhV1lvYm5Wc2JDRTlZaWxtYjNJb2RtRnlJR005TUR0alBHSXViR1Z1WjNSb08yTXJLeWwwYUdsekxsSmhLR0VzWWx0alhTbDlPMWN1Y0hKdmRHOTBlWEJsTG5keWFYUmxVbVZ3WldGMFpXUlRabWw0WldRek1qMVhMbkJ5YjNSdmRIbHdaUzVLWkR0WExuQnliM1J2ZEhsd1pTNUxaRDFtZFc1amRHbHZiaWhoTEdJcGUybG1LRzUxYkd3aFBXSXBabTl5S0haaGNpQmpQVEE3WXp4aUxteGxibWQwYUR0akt5c3BkR2hwY3k1VFlTaGhMR0piWTEwcGZUdFhMbkJ5YjNSdmRIbHdaUzUzY21sMFpWSmxjR1ZoZEdWa1UyWnBlR1ZrTmpROVZ5NXdjbTkwYjNSNWNHVXVTMlE3Vnk1d2NtOTBiM1I1Y0dVdVRHUTlablZ1WTNScGIyNG9ZU3hpS1h0cFppaHVkV3hzSVQxaUtXWnZjaWgyWVhJZ1l6MHdPMk04WWk1c1pXNW5kR2c3WXlzcktYUm9hWE11Y1dJb1lTeGlXMk5kS1gwN1hHNVhMbkJ5YjNSdmRIbHdaUzUzY21sMFpWSmxjR1ZoZEdWa1UyWnBlR1ZrTmpSVGRISnBibWM5Vnk1d2NtOTBiM1I1Y0dVdVRHUTdWeTV3Y205MGIzUjVjR1V1UTJROVpuVnVZM1JwYjI0b1lTeGlLWHRwWmlodWRXeHNJVDFpS1dadmNpaDJZWElnWXowd08yTThZaTVzWlc1bmRHZzdZeXNyS1hSb2FYTXVUQ2hoTEdKYlkxMHBmVHRYTG5CeWIzUnZkSGx3WlM1M2NtbDBaVkpsY0dWaGRHVmtSbXh2WVhROVZ5NXdjbTkwYjNSNWNHVXVRMlE3Vnk1d2NtOTBiM1I1Y0dVdWQyUTlablZ1WTNScGIyNG9ZU3hpS1h0cFppaHVkV3hzSVQxaUtXWnZjaWgyWVhJZ1l6MHdPMk04WWk1c1pXNW5kR2c3WXlzcktYUm9hWE11U2loaExHSmJZMTBwZlR0WExuQnliM1J2ZEhsd1pTNTNjbWwwWlZKbGNHVmhkR1ZrUkc5MVlteGxQVmN1Y0hKdmRHOTBlWEJsTG5ka08xY3VjSEp2ZEc5MGVYQmxMblZrUFdaMWJtTjBhVzl1S0dFc1lpbDdhV1lvYm5Wc2JDRTlZaWxtYjNJb2RtRnlJR005TUR0alBHSXViR1Z1WjNSb08yTXJLeWwwYUdsekxra29ZU3hpVzJOZEtYMDdWeTV3Y205MGIzUjVjR1V1ZDNKcGRHVlNaWEJsWVhSbFpFSnZiMnc5Vnk1d2NtOTBiM1I1Y0dVdWRXUTdYRzVYTG5CeWIzUnZkSGx3WlM1NFpEMW1kVzVqZEdsdmJpaGhMR0lwZTJsbUtHNTFiR3doUFdJcFptOXlLSFpoY2lCalBUQTdZenhpTG14bGJtZDBhRHRqS3lzcGRHaHBjeTVTS0dFc1lsdGpYU2w5TzFjdWNISnZkRzkwZVhCbExuZHlhWFJsVW1Wd1pXRjBaV1JGYm5WdFBWY3VjSEp2ZEc5MGVYQmxMbmhrTzFjdWNISnZkRzkwZVhCbExsUmtQV1oxYm1OMGFXOXVLR0VzWWlsN2FXWW9iblZzYkNFOVlpbG1iM0lvZG1GeUlHTTlNRHRqUEdJdWJHVnVaM1JvTzJNckt5bDBhR2x6TGxVb1lTeGlXMk5kS1gwN1Z5NXdjbTkwYjNSNWNHVXVkM0pwZEdWU1pYQmxZWFJsWkZOMGNtbHVaejFYTG5CeWIzUnZkSGx3WlM1VVpEdFhMbkJ5YjNSdmRIbHdaUzUyWkQxbWRXNWpkR2x2YmloaExHSXBlMmxtS0c1MWJHd2hQV0lwWm05eUtIWmhjaUJqUFRBN1l6eGlMbXhsYm1kMGFEdGpLeXNwZEdocGN5NXFZU2hoTEdKYlkxMHBmVHRYTG5CeWIzUnZkSGx3WlM1M2NtbDBaVkpsY0dWaGRHVmtRbmwwWlhNOVZ5NXdjbTkwYjNSNWNHVXVkbVE3Vnk1d2NtOTBiM1I1Y0dVdVNXUTlablZ1WTNScGIyNG9ZU3hpTEdNcGUybG1LRzUxYkd3aFBXSXBabTl5S0haaGNpQmtQVEE3WkR4aUxteGxibWQwYUR0a0t5c3BlM1poY2lCbVBWZ29kR2hwY3l4aEtUdGpLR0piWkYwc2RHaHBjeWs3V2loMGFHbHpMR1lwZlgwN1hHNVhMbkJ5YjNSdmRIbHdaUzUzY21sMFpWSmxjR1ZoZEdWa1RXVnpjMkZuWlQxWExuQnliM1J2ZEhsd1pTNUpaRHRYTG5CeWIzUnZkSGx3WlM1RVpEMW1kVzVqZEdsdmJpaGhMR0lzWXlsN2FXWW9iblZzYkNFOVlpbG1iM0lvZG1GeUlHUTlNRHRrUEdJdWJHVnVaM1JvTzJRckt5bFpLSFJvYVhNc1lTd3pLU3hqS0dKYlpGMHNkR2hwY3lrc1dTaDBhR2x6TEdFc05DbDlPMWN1Y0hKdmRHOTBlWEJsTG5keWFYUmxVbVZ3WldGMFpXUkhjbTkxY0QxWExuQnliM1J2ZEhsd1pTNUVaRHRYTG5CeWIzUnZkSGx3WlM1Q1pEMW1kVzVqZEdsdmJpaGhMR0lwZTJsbUtHNTFiR3doUFdJcFptOXlLSFpoY2lCalBUQTdZenhpTG14bGJtZDBhRHRqS3lzcGRHaHBjeTVMS0dFc1lsdGpYU2w5TzFjdWNISnZkRzkwZVhCbExuZHlhWFJsVW1Wd1pXRjBaV1JHYVhobFpFaGhjMmcyTkQxWExuQnliM1J2ZEhsd1pTNUNaRHRYTG5CeWIzUnZkSGx3WlM1WlpEMW1kVzVqZEdsdmJpaGhMR0lwZTJsbUtHNTFiR3doUFdJcFptOXlLSFpoY2lCalBUQTdZenhpTG14bGJtZDBhRHRqS3lzcGRHaHBjeTVPS0dFc1lsdGpYU2w5TzFjdWNISnZkRzkwZVhCbExuZHlhWFJsVW1Wd1pXRjBaV1JXWVhKcGJuUklZWE5vTmpROVZ5NXdjbTkwYjNSNWNHVXVXV1E3WEc1WExuQnliM1J2ZEhsd1pTNWhaRDFtZFc1amRHbHZiaWhoTEdJcGUybG1LRzUxYkd3aFBXSW1KbUl1YkdWdVozUm9LWHRoUFZnb2RHaHBjeXhoS1R0bWIzSW9kbUZ5SUdNOU1EdGpQR0l1YkdWdVozUm9PMk1yS3lsMGFHbHpMbUV1VFNoaVcyTmRLVHRhS0hSb2FYTXNZU2w5ZlR0WExuQnliM1J2ZEhsd1pTNTNjbWwwWlZCaFkydGxaRWx1ZERNeVBWY3VjSEp2ZEc5MGVYQmxMbUZrTzFjdWNISnZkRzkwZVhCbExtSmtQV1oxYm1OMGFXOXVLR0VzWWlsN2FXWW9iblZzYkNFOVlpWW1ZaTVzWlc1bmRHZ3BlMkU5V0NoMGFHbHpMR0VwTzJadmNpaDJZWElnWXowd08yTThZaTVzWlc1bmRHZzdZeXNyS1hSb2FYTXVZUzVOS0hCaGNuTmxTVzUwS0dKYlkxMHNNVEFwS1R0YUtIUm9hWE1zWVNsOWZUdFhMbkJ5YjNSdmRIbHdaUzUzY21sMFpWQmhZMnRsWkVsdWRETXlVM1J5YVc1blBWY3VjSEp2ZEc5MGVYQmxMbUprTzFjdWNISnZkRzkwZVhCbExtTmtQV1oxYm1OMGFXOXVLR0VzWWlsN2FXWW9iblZzYkNFOVlpWW1ZaTVzWlc1bmRHZ3BlMkU5V0NoMGFHbHpMR0VwTzJadmNpaDJZWElnWXowd08yTThZaTVzWlc1bmRHZzdZeXNyS1hSb2FYTXVZUzUxWVNoaVcyTmRLVHRhS0hSb2FYTXNZU2w5ZlR0WExuQnliM1J2ZEhsd1pTNTNjbWwwWlZCaFkydGxaRWx1ZERZMFBWY3VjSEp2ZEc5MGVYQmxMbU5rTzF4dVZ5NXdjbTkwYjNSNWNHVXViV1E5Wm5WdVkzUnBiMjRvWVN4aUxHTXNaQ2w3YVdZb2JuVnNiQ0U5WWlsN1lUMVlLSFJvYVhNc1lTazdabTl5S0haaGNpQm1QVEE3Wmp4aUxteGxibWQwYUR0bUt5c3BkR2hwY3k1aExrRW9ZeWhpVzJaZEtTeGtLR0piWmwwcEtUdGFLSFJvYVhNc1lTbDlmVHRYTG5CeWIzUnZkSGx3WlM1M2NtbDBaVkJoWTJ0bFpGTndiR2wwUm1sNFpXUTJORDFYTG5CeWIzUnZkSGx3WlM1dFpEdFhMbkJ5YjNSdmRIbHdaUzV1WkQxbWRXNWpkR2x2YmloaExHSXNZeXhrS1h0cFppaHVkV3hzSVQxaUtYdGhQVmdvZEdocGN5eGhLVHRtYjNJb2RtRnlJR1k5TUR0bVBHSXViR1Z1WjNSb08yWXJLeWwwYUdsekxtRXViQ2hqS0dKYlpsMHBMR1FvWWx0bVhTa3BPMW9vZEdocGN5eGhLWDE5TzFjdWNISnZkRzkwZVhCbExuZHlhWFJsVUdGamEyVmtVM0JzYVhSV1lYSnBiblEyTkQxWExuQnliM1J2ZEhsd1pTNXVaRHRYTG5CeWIzUnZkSGx3WlM1dlpEMW1kVzVqZEdsdmJpaGhMR0lzWXl4a0tYdHBaaWh1ZFd4c0lUMWlLWHRoUFZnb2RHaHBjeXhoS1R0bWIzSW9kbUZ5SUdZOWRHaHBjeTVoTEdnOU1EdG9QR0l1YkdWdVozUm9PMmdyS3lsS1lTaGpLR0piYUYwcExHUW9ZbHRvWFNrc1puVnVZM1JwYjI0b2JTeDBLWHRtTG13b2JUNCtQakFzZEQ0K1BqQXBmU2s3V2loMGFHbHpMR0VwZlgwN1hHNVhMbkJ5YjNSdmRIbHdaUzUzY21sMFpWQmhZMnRsWkZOd2JHbDBXbWxuZW1GblZtRnlhVzUwTmpROVZ5NXdjbTkwYjNSNWNHVXViMlE3Vnk1d2NtOTBiM1I1Y0dVdVpHUTlablZ1WTNScGIyNG9ZU3hpS1h0cFppaHVkV3hzSVQxaUppWmlMbXhsYm1kMGFDbDdZVDFZS0hSb2FYTXNZU2s3Wm05eUtIWmhjaUJqUFRBN1l6eGlMbXhsYm1kMGFEdGpLeXNwZTNaaGNpQmtQWE5pS0dKYlkxMHBPM1JvYVhNdVlTNXNLR1F1Ykc4c1pDNW9hU2w5V2loMGFHbHpMR0VwZlgwN1Z5NXdjbTkwYjNSNWNHVXVkM0pwZEdWUVlXTnJaV1JKYm5RMk5GTjBjbWx1WnoxWExuQnliM1J2ZEhsd1pTNWtaRHRYTG5CeWIzUnZkSGx3WlM1d1pEMW1kVzVqZEdsdmJpaGhMR0lwZTJsbUtHNTFiR3doUFdJbUptSXViR1Z1WjNSb0tYdGhQVmdvZEdocGN5eGhLVHRtYjNJb2RtRnlJR005TUR0alBHSXViR1Z1WjNSb08yTXJLeWwwYUdsekxtRXVhaWhpVzJOZEtUdGFLSFJvYVhNc1lTbDlmVHRYTG5CeWIzUnZkSGx3WlM1M2NtbDBaVkJoWTJ0bFpGVnBiblF6TWoxWExuQnliM1J2ZEhsd1pTNXdaRHRjYmxjdWNISnZkRzkwZVhCbExuRmtQV1oxYm1OMGFXOXVLR0VzWWlsN2FXWW9iblZzYkNFOVlpWW1ZaTVzWlc1bmRHZ3BlMkU5V0NoMGFHbHpMR0VwTzJadmNpaDJZWElnWXowd08yTThZaTVzWlc1bmRHZzdZeXNyS1hSb2FYTXVZUzVxS0hCaGNuTmxTVzUwS0dKYlkxMHNNVEFwS1R0YUtIUm9hWE1zWVNsOWZUdFhMbkJ5YjNSdmRIbHdaUzUzY21sMFpWQmhZMnRsWkZWcGJuUXpNbE4wY21sdVp6MVhMbkJ5YjNSdmRIbHdaUzV4WkR0WExuQnliM1J2ZEhsd1pTNXlaRDFtZFc1amRHbHZiaWhoTEdJcGUybG1LRzUxYkd3aFBXSW1KbUl1YkdWdVozUm9LWHRoUFZnb2RHaHBjeXhoS1R0bWIzSW9kbUZ5SUdNOU1EdGpQR0l1YkdWdVozUm9PMk1yS3lsMGFHbHpMbUV1ZG1Fb1lsdGpYU2s3V2loMGFHbHpMR0VwZlgwN1Z5NXdjbTkwYjNSNWNHVXVkM0pwZEdWUVlXTnJaV1JWYVc1ME5qUTlWeTV3Y205MGIzUjVjR1V1Y21RN1Z5NXdjbTkwYjNSNWNHVXVjMlE5Wm5WdVkzUnBiMjRvWVN4aUtYdHBaaWh1ZFd4c0lUMWlKaVppTG14bGJtZDBhQ2w3WVQxWUtIUm9hWE1zWVNrN1ptOXlLSFpoY2lCalBUQTdZenhpTG14bGJtZDBhRHRqS3lzcGUzWmhjaUJrUFZVb1lsdGpYU2s3ZEdocGN5NWhMbXdvWkM1c2J5eGtMbWhwS1gxYUtIUm9hWE1zWVNsOWZUdGNibGN1Y0hKdmRHOTBlWEJsTG5keWFYUmxVR0ZqYTJWa1ZXbHVkRFkwVTNSeWFXNW5QVmN1Y0hKdmRHOTBlWEJsTG5Oa08xY3VjSEp2ZEc5MGVYQmxMbWhrUFdaMWJtTjBhVzl1S0dFc1lpbDdhV1lvYm5Wc2JDRTlZaVltWWk1c1pXNW5kR2dwZTJFOVdDaDBhR2x6TEdFcE8yWnZjaWgyWVhJZ1l6MHdPMk04WWk1c1pXNW5kR2c3WXlzcktYUm9hWE11WVM1M1lTaGlXMk5kS1R0YUtIUm9hWE1zWVNsOWZUdFhMbkJ5YjNSdmRIbHdaUzUzY21sMFpWQmhZMnRsWkZOcGJuUXpNajFYTG5CeWIzUnZkSGx3WlM1b1pEdFhMbkJ5YjNSdmRIbHdaUzVxWkQxbWRXNWpkR2x2YmloaExHSXBlMmxtS0c1MWJHd2hQV0ltSm1JdWJHVnVaM1JvS1h0aFBWZ29kR2hwY3l4aEtUdG1iM0lvZG1GeUlHTTlNRHRqUEdJdWJHVnVaM1JvTzJNckt5bDBhR2x6TG1FdWVHRW9ZbHRqWFNrN1dpaDBhR2x6TEdFcGZYMDdWeTV3Y205MGIzUjVjR1V1ZDNKcGRHVlFZV05yWldSVGFXNTBOalE5Vnk1d2NtOTBiM1I1Y0dVdWFtUTdWeTV3Y205MGIzUjVjR1V1YTJROVpuVnVZM1JwYjI0b1lTeGlLWHRwWmlodWRXeHNJVDFpSmlaaUxteGxibWQwYUNsN1lUMVlLSFJvYVhNc1lTazdabTl5S0haaGNpQmpQVEE3WXp4aUxteGxibWQwYUR0akt5c3BkR2hwY3k1aExsY29TQ2hpVzJOZEtTazdXaWgwYUdsekxHRXBmWDA3WEc1WExuQnliM1J2ZEhsd1pTNTNjbWwwWlZCaFkydGxaRk5wYm5RMk5GTjBjbWx1WnoxWExuQnliM1J2ZEhsd1pTNXJaRHRYTG5CeWIzUnZkSGx3WlM1c1pEMW1kVzVqZEdsdmJpaGhMR0lwZTJsbUtHNTFiR3doUFdJbUptSXViR1Z1WjNSb0tYdGhQVmdvZEdocGN5eGhLVHRtYjNJb2RtRnlJR005TUR0alBHSXViR1Z1WjNSb08yTXJLeWwwYUdsekxtRXVWeWhpVzJOZEtUdGFLSFJvYVhNc1lTbDlmVHRYTG5CeWIzUnZkSGx3WlM1M2NtbDBaVkJoWTJ0bFpGTnBiblJJWVhOb05qUTlWeTV3Y205MGIzUjVjR1V1YkdRN1Z5NXdjbTkwYjNSNWNHVXVWMk05Wm5WdVkzUnBiMjRvWVN4aUtYdHBaaWh1ZFd4c0lUMWlKaVppTG14bGJtZDBhQ2xtYjNJb1dTaDBhR2x6TEdFc01pa3NkR2hwY3k1aExtb29OQ3BpTG14bGJtZDBhQ2tzWVQwd08yRThZaTVzWlc1bmRHZzdZU3NyS1hSb2FYTXVZUzV6S0dKYllWMHBmVHRYTG5CeWIzUnZkSGx3WlM1M2NtbDBaVkJoWTJ0bFpFWnBlR1ZrTXpJOVZ5NXdjbTkwYjNSNWNHVXVWMk03Vnk1d2NtOTBiM1I1Y0dVdVdHTTlablZ1WTNScGIyNG9ZU3hpS1h0cFppaHVkV3hzSVQxaUppWmlMbXhsYm1kMGFDbG1iM0lvV1NoMGFHbHpMR0VzTWlrc2RHaHBjeTVoTG1vb09DcGlMbXhsYm1kMGFDa3NZVDB3TzJFOFlpNXNaVzVuZEdnN1lTc3JLWFJvYVhNdVlTNVdLR0piWVYwcGZUdGNibGN1Y0hKdmRHOTBlWEJsTG5keWFYUmxVR0ZqYTJWa1JtbDRaV1EyTkQxWExuQnliM1J2ZEhsd1pTNVlZenRYTG5CeWIzUnZkSGx3WlM1Wll6MW1kVzVqZEdsdmJpaGhMR0lwZTJsbUtHNTFiR3doUFdJbUptSXViR1Z1WjNSb0tXWnZjaWhaS0hSb2FYTXNZU3d5S1N4MGFHbHpMbUV1YWlnNEttSXViR1Z1WjNSb0tTeGhQVEE3WVR4aUxteGxibWQwYUR0aEt5c3BlM1poY2lCalBWVW9ZbHRoWFNrN2RHaHBjeTVoTGtFb1l5NXNieXhqTG1ocEtYMTlPMWN1Y0hKdmRHOTBlWEJsTG5keWFYUmxVR0ZqYTJWa1JtbDRaV1EyTkZOMGNtbHVaejFYTG5CeWIzUnZkSGx3WlM1Wll6dFhMbkJ5YjNSdmRIbHdaUzVsWkQxbWRXNWpkR2x2YmloaExHSXBlMmxtS0c1MWJHd2hQV0ltSm1JdWJHVnVaM1JvS1dadmNpaFpLSFJvYVhNc1lTd3lLU3gwYUdsekxtRXVhaWcwS21JdWJHVnVaM1JvS1N4aFBUQTdZVHhpTG14bGJtZDBhRHRoS3lzcGRHaHBjeTVoTGxNb1lsdGhYU2w5TzFjdWNISnZkRzkwZVhCbExuZHlhWFJsVUdGamEyVmtVMlpwZUdWa016STlWeTV3Y205MGIzUjVjR1V1WldRN1hHNVhMbkJ5YjNSdmRIbHdaUzVtWkQxbWRXNWpkR2x2YmloaExHSXBlMmxtS0c1MWJHd2hQV0ltSm1JdWJHVnVaM1JvS1dadmNpaFpLSFJvYVhNc1lTd3lLU3gwYUdsekxtRXVhaWc0S21JdWJHVnVaM1JvS1N4aFBUQTdZVHhpTG14bGJtZDBhRHRoS3lzcGRHaHBjeTVoTGxRb1lsdGhYU2w5TzFjdWNISnZkRzkwZVhCbExuZHlhWFJsVUdGamEyVmtVMlpwZUdWa05qUTlWeTV3Y205MGIzUjVjR1V1Wm1RN1Z5NXdjbTkwYjNSNWNHVXVaMlE5Wm5WdVkzUnBiMjRvWVN4aUtYdHBaaWh1ZFd4c0lUMWlKaVppTG14bGJtZDBhQ2xtYjNJb1dTaDBhR2x6TEdFc01pa3NkR2hwY3k1aExtb29PQ3BpTG14bGJtZDBhQ2tzWVQwd08yRThZaTVzWlc1bmRHZzdZU3NyS1hSb2FYTXVZUzVyWVNoaVcyRmRLWDA3Vnk1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZRWVdOclpXUlRabWw0WldRMk5GTjBjbWx1WnoxWExuQnliM1J2ZEhsd1pTNW5aRHRYTG5CeWIzUnZkSGx3WlM0a1l6MW1kVzVqZEdsdmJpaGhMR0lwZTJsbUtHNTFiR3doUFdJbUptSXViR1Z1WjNSb0tXWnZjaWhaS0hSb2FYTXNZU3d5S1N4MGFHbHpMbUV1YWlnMEttSXViR1Z1WjNSb0tTeGhQVEE3WVR4aUxteGxibWQwYUR0aEt5c3BkR2hwY3k1aExrd29ZbHRoWFNsOU8xY3VjSEp2ZEc5MGVYQmxMbmR5YVhSbFVHRmphMlZrUm14dllYUTlWeTV3Y205MGIzUjVjR1V1SkdNN1hHNVhMbkJ5YjNSdmRIbHdaUzVWWXoxbWRXNWpkR2x2YmloaExHSXBlMmxtS0c1MWJHd2hQV0ltSm1JdWJHVnVaM1JvS1dadmNpaFpLSFJvYVhNc1lTd3lLU3gwYUdsekxtRXVhaWc0S21JdWJHVnVaM1JvS1N4aFBUQTdZVHhpTG14bGJtZDBhRHRoS3lzcGRHaHBjeTVoTGtvb1lsdGhYU2w5TzFjdWNISnZkRzkwZVhCbExuZHlhWFJsVUdGamEyVmtSRzkxWW14bFBWY3VjSEp2ZEc5MGVYQmxMbFZqTzFjdWNISnZkRzkwZVhCbExsUmpQV1oxYm1OMGFXOXVLR0VzWWlsN2FXWW9iblZzYkNFOVlpWW1ZaTVzWlc1bmRHZ3BabTl5S0Zrb2RHaHBjeXhoTERJcExIUm9hWE11WVM1cUtHSXViR1Z1WjNSb0tTeGhQVEE3WVR4aUxteGxibWQwYUR0aEt5c3BkR2hwY3k1aExra29ZbHRoWFNsOU8xY3VjSEp2ZEc5MGVYQmxMbmR5YVhSbFVHRmphMlZrUW05dmJEMVhMbkJ5YjNSdmRIbHdaUzVVWXp0WExuQnliM1J2ZEhsd1pTNVdZejFtZFc1amRHbHZiaWhoTEdJcGUybG1LRzUxYkd3aFBXSW1KbUl1YkdWdVozUm9LWHRoUFZnb2RHaHBjeXhoS1R0bWIzSW9kbUZ5SUdNOU1EdGpQR0l1YkdWdVozUm9PMk1yS3lsMGFHbHpMbUV1VWloaVcyTmRLVHRhS0hSb2FYTXNZU2w5ZlR0WExuQnliM1J2ZEhsd1pTNTNjbWwwWlZCaFkydGxaRVZ1ZFcwOVZ5NXdjbTkwYjNSNWNHVXVWbU03WEc1WExuQnliM1J2ZEhsd1pTNWFZejFtZFc1amRHbHZiaWhoTEdJcGUybG1LRzUxYkd3aFBXSW1KbUl1YkdWdVozUm9LV1p2Y2loWktIUm9hWE1zWVN3eUtTeDBhR2x6TG1FdWFpZzRLbUl1YkdWdVozUm9LU3hoUFRBN1lUeGlMbXhsYm1kMGFEdGhLeXNwZEdocGN5NWhMa3NvWWx0aFhTbDlPMWN1Y0hKdmRHOTBlWEJsTG5keWFYUmxVR0ZqYTJWa1JtbDRaV1JJWVhOb05qUTlWeTV3Y205MGIzUjVjR1V1V21NN1Z5NXdjbTkwYjNSNWNHVXVkR1E5Wm5WdVkzUnBiMjRvWVN4aUtYdHBaaWh1ZFd4c0lUMWlKaVppTG14bGJtZDBhQ2w3WVQxWUtIUm9hWE1zWVNrN1ptOXlLSFpoY2lCalBUQTdZenhpTG14bGJtZDBhRHRqS3lzcGRHaHBjeTVoTGs0b1lsdGpYU2s3V2loMGFHbHpMR0VwZlgwN1Z5NXdjbTkwYjNSNWNHVXVkM0pwZEdWUVlXTnJaV1JXWVhKcGJuUklZWE5vTmpROVZ5NXdjbTkwYjNSNWNHVXVkR1E3WENKdlltcGxZM1JjSWowOVBYUjVjR1Z2WmlCbGVIQnZjblJ6SmlZb1pYaHdiM0owY3k1a1pXSjFaejFTTEdWNGNHOXlkSE11VFdGd1BYSXNaWGh3YjNKMGN5NU5aWE56WVdkbFBVNHNaWGh3YjNKMGN5NUNhVzVoY25sU1pXRmtaWEk5U2l4bGVIQnZjblJ6TGtKcGJtRnllVmR5YVhSbGNqMVhMR1Y0Y0c5eWRITXVSWGgwWlc1emFXOXVSbWxsYkdSSmJtWnZQVmxoTEdWNGNHOXlkSE11UlhoMFpXNXphVzl1Um1sbGJHUkNhVzVoY25sSmJtWnZQVnBoTEdWNGNHOXlkSE11Wlhod2IzSjBVM2x0WW05c1BXMWhMR1Y0Y0c5eWRITXVhVzVvWlhKcGRITTlibUVzWlhod2IzSjBjeTV2WW1wbFkzUTllMlY0ZEdWdVpEcHdZWDBzWlhod2IzSjBjeTUwZVhCbFQyWTlheWs3WEc0aUxHNTFiR3dzYm5Wc2JGMHNJbTVoYldWeklqcGJJbVY0ZEdWdVpGTjBZWFJwWTNNaUxDSmtJaXdpWWlJc0lrOWlhbVZqZENJc0luTmxkRkJ5YjNSdmRIbHdaVTltSWl3aVgxOXdjbTkwYjE5Zklpd2lRWEp5WVhraUxDSndJaXdpY0hKdmRHOTBlWEJsSWl3aWFHRnpUM2R1VUhKdmNHVnlkSGtpTENKallXeHNJaXdpWDE5bGVIUmxibVJ6SWl3aVZIbHdaVVZ5Y205eUlpd2lVM1J5YVc1bklpd2lYMThpTENKMGFHbHpJaXdpWTI5dWMzUnlkV04wYjNJaUxDSmpjbVZoZEdVaUxDSmZYMkYzWVdsMFpYSWlMQ0owYUdselFYSm5JaXdpWDJGeVozVnRaVzUwY3lJc0lsQWlMQ0puWlc1bGNtRjBiM0lpTENKUWNtOXRhWE5sSWl3aWNtVnpiMngyWlNJc0luSmxhbVZqZENJc0ltWjFiR1pwYkd4bFpDSXNJblpoYkhWbElpd2ljM1JsY0NJc0ltNWxlSFFpTENKbElpd2ljbVZxWldOMFpXUWlMQ0p5WlhOMWJIUWlMQ0prYjI1bElpd2lkR2hsYmlJc0ltRndjR3g1SWl3aVgxOW5aVzVsY21GMGIzSWlMQ0ppYjJSNUlpd2laaUlzSW5raUxDSjBJaXdpWHlJc0lteGhZbVZzSWl3aWMyVnVkQ0lzSW5SeWVYTWlMQ0p2Y0hNaUxDSm5JaXdpU1hSbGNtRjBiM0lpTENKMlpYSmlJaXdpVTNsdFltOXNJaXdpYVhSbGNtRjBiM0lpTENKdUlpd2lkaUlzSW05d0lpd2ljRzl3SWl3aWJHVnVaM1JvSWl3aWNIVnphQ0lzSWw5ZmRtRnNkV1Z6SWl3aWJ5SXNJbk1pTENKdElpd2lhU0lzSWw5ZllYTjVibU5XWVd4MVpYTWlMQ0poYzNsdVkwbDBaWEpoZEc5eUlpd2ljMlYwZEd4bElpd2lYMTlqYkdGemMxQnlhWFpoZEdWR2FXVnNaRWRsZENJc0luSmxZMlZwZG1WeUlpd2ljM1JoZEdVaUxDSnJhVzVrSWl3aWFHRnpJaXdpWjJWMElpd2lVM1Z3Y0hKbGMzTmxaRVZ5Y205eUlpd2lYMk5zWVhOelEyRnNiRU5vWldOcklpd2lhVzV6ZEdGdVkyVWlMQ0pEYjI1emRISjFZM1J2Y2lJc0lsOWtaV1pwYm1WUWNtOXdaWEowYVdWeklpd2lkR0Z5WjJWMElpd2ljSEp2Y0hNaUxDSmtaWE5qY21sd2RHOXlJaXdpWlc1MWJXVnlZV0pzWlNJc0ltTnZibVpwWjNWeVlXSnNaU0lzSW5keWFYUmhZbXhsSWl3aVpHVm1hVzVsVUhKdmNHVnlkSGtpTENKclpYa2lMQ0pmWTNKbFlYUmxRMnhoYzNNaUxDSndjbTkwYjFCeWIzQnpJaXdpYzNSaGRHbGpVSEp2Y0hNaUxDSmZhVzVvWlhKcGRITWlMQ0p6ZFdKRGJHRnpjeUlzSW5OMWNHVnlRMnhoYzNNaUxDSmZjMlYwVUhKdmRHOTBlWEJsVDJZaUxDSmZaMlYwVUhKdmRHOTBlWEJsVDJZaUxDSm5aWFJRY205MGIzUjVjR1ZQWmlJc0ltSnBibVFpTENKZmFYTk9ZWFJwZG1WU1pXWnNaV04wUTI5dWMzUnlkV04wSWl3aVVtVm1iR1ZqZENJc0ltTnZibk4wY25WamRDSXNJbk5vWVcwaUxDSlFjbTk0ZVNJc0lrSnZiMnhsWVc0aUxDSjJZV3gxWlU5bUlpd2lYMkZ6YzJWeWRGUm9hWE5KYm1sMGFXRnNhWHBsWkNJc0luTmxiR1lpTENKU1pXWmxjbVZ1WTJWRmNuSnZjaUlzSWw5d2IzTnphV0pzWlVOdmJuTjBjblZqZEc5eVVtVjBkWEp1SWl3aVgyTnlaV0YwWlZOMWNHVnlJaXdpUkdWeWFYWmxaQ0lzSW1oaGMwNWhkR2wyWlZKbFpteGxZM1JEYjI1emRISjFZM1FpTENKVGRYQmxjaUlzSWs1bGQxUmhjbWRsZENJc0ltRnlaM1Z0Wlc1MGN5SXNJbDl6ZFhCbGNsQnliM0JDWVhObElpd2liMkpxWldOMElpd2ljSEp2Y0dWeWRIa2lMQ0pmWjJWMElpd2lZbUZ6WlNJc0ltUmxjMk1pTENKblpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lpTENKRmJXbDBkR1Z5SWl3aWRIbHdaU0lzSW1OaGJHeGlZV05ySWl3aWIzQjBhVzl1Y3lJc0lteHBjM1JsYm1WeWN5SXNJbk4wWVdOcklpd2liQ0lzSW5Od2JHbGpaU0lzSW1WMlpXNTBJaXdpYzNSaFkydFViME5oYkd3aUxDSnpiR2xqWlNJc0lteHBjM1JsYm1WeUlpd2liMjVqWlNJc0luSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSWlMQ0prWldaaGRXeDBVSEpsZG1WdWRHVmtJaXdpUVdKdmNuUlRhV2R1WVd3aUxDSmZSVzFwZEhSbGNpSXNJbDl6ZFhCbGNpSXNJbDkwYUdseklpd2lkVzVrWldacGJtVmtJaXdpWVdKdmNuUmxaQ0lzSW05dVlXSnZjblFpTENKQlltOXlkRU52Ym5SeWIyeHNaWElpTENKeVpXRnpiMjRpTENKRmRtVnVkQ0lzSW1SdlkzVnRaVzUwSWl3aVkzSmxZWFJsUlhabGJuUWlMQ0pwYm1sMFJYWmxiblFpTENKamNtVmhkR1ZGZG1WdWRFOWlhbVZqZENJc0ltSjFZbUpzWlhNaUxDSmpZVzVqWld4aFlteGxJaXdpYzJsbmJtRnNVbVZoYzI5dUlpd2lSWEp5YjNJaUxDSnVZVzFsSWl3aVJFOU5SWGhqWlhCMGFXOXVJaXdpWlhKeUlpd2ljMmxuYm1Gc0lpd2laR2x6Y0dGMFkyaEZkbVZ1ZENJc0luQnZiSGxtYVd4c1RtVmxaR1ZrSWl3aVgxOUdUMUpEUlY5SlRsTlVRVXhNWDBGQ1QxSlVRMDlPVkZKUFRFeEZVbDlRVDB4WlJrbE1UQ0lzSW1OdmJuTnZiR1VpTENKc2IyY2lMQ0pTWlhGMVpYTjBJaXdpZEc5VGRISnBibWRVWVdjaUxDSm5iRzlpWVd3aUxDSm1ZV04wYjNKNUlpd2lZbXhoZW1VaUxDSmhZU0lzSW1SbFptbHVaVkJ5YjNCbGNuUnBaWE1pTENKaElpd2lZeUlzSW5kcGJtUnZkeUlzSW1SaElpd2laV0VpTENKbVlTSXNJblJ2VTNSeWFXNW5JaXdpYUdFaUxDSnBZU0lzSW1OaElpd2ljM0JzYVhRaUxDSmlZU0lzSW1waElpd2lhMkVpTENKbGVHVmpVMk55YVhCMElpd2ljMmhwWm5RaUxDSnJJaXdpY0hKdmNHVnlkSGxKYzBWdWRXMWxjbUZpYkdVaUxDSnNZU0lzSW05aElpd2ljV0VpTENKbWIzSkZZV05vSWl3aWJXRndJaXdpYUNJc0luSmhJaXdpYzJFaUxDSnhJaXdpZG1FaUxDSkdkVzVqZEdsdmJpSXNJbVJwYzNCc1lYbE9ZVzFsSWl3aWNpSXNJbUZ5Y2tOc1pXRnVJaXdpZDJFaUxDSjNJaXdpZFNJc0luaGhJaXdpWm5KdmJVTm9ZWEpEYjJSbElpd2ljMjl5ZENJc0luUnZRWEp5WVhraUxDSk5ZeUlzSW5SdlQySnFaV04wSWl3aVpuSnZiVTlpYW1WamRDSXNJbk5sZENJc0lrcGlJaXdpWjJWMFRHVnVaM1JvSWl3aVkyeGxZWElpTENKRFlpSXNJbVJsYkNJc0lrVmlJaXdpWjJWMFJXNTBjbmxNYVhOMElpd2laVzUwY21sbGN5SXNJbXRsZVhNaUxDSjJZV3gxWlhNaUxDSktZeUlzSWxaaElpd2lXV0VpTENKelpYSnBZV3hwZW1WQ2FXNWhjbmtpTENKa1pYTmxjbWxoYkdsNlpVSnBibUZ5ZVNJc0ltSmlJaXdpZVdFaUxDSjZZU0lzSWtGaElpd2llQ0lzSWtKaElpd2lRMkVpTENKQ0lpd2lUU0lzSW1wdmFXNGlMQ0pFWVNJc0lrMWhkR2dpTENKbWJHOXZjaUlzSW1sdVpHVjRUMllpTENKVmFXNTBPRUZ5Y21GNUlpd2lZMmhoY2tGMElpd2lUR0VpTENKMFpYTjBJaXdpUldFaUxDSnpkV0poY25KaGVTSXNJbU52Ym1OaGRDSXNJbmxpSWl3aVpXVWlMQ0pHVEU5QlZDSXNJbXRsSWl3aWRHVWlMQ0pxWlNJc0luaGlJaXdpZDJJaUxDSkNUMDlNSWl3aWNtVWlMQ0pwWlNJc0lteGxJaXdpWTJVaUxDSnpaU0lzSW1kbElpd2liV1VpTENKdVpTSXNJbTlsSWl3aWNHVWlMQ0pvWlNJc0luWmxJaXdpZFdVaUxDSmtaU0lzSW5GbElpd2labVVpTENKNklpd2lSbUVpTENKQklpd2lZV0p6SWl3aVIyRWlMQ0pJWVNJc0ltbHpUbUZPSWl3aWNtOTFibVFpTENKd2IzY2lMQ0pNVGpJaUxDSkpZU0lzSWtNaUxDSmphR0Z5UTI5a1pVRjBJaXdpUkNJc0lrVWlMQ0pLWVNJc0lrdGhJaXdpVFdFaUxDSk9ZU0lzSWs1aFRpSXNJa2x1Wm1sdWFYUjVJaXdpVDJFaUxDSlFZU0lzSWtZaUxDSkhJaXdpVVdFaUxDSklJaXdpVW1FaUxDSlRZU0lzSWxSaElpd2lWV0VpTENKQmNuSmhlVUoxWm1abGNpSXNJbUoxWm1abGNpSXNJbUo1ZEdWUFptWnpaWFFpTENKaWVYUmxUR1Z1WjNSb0lpd2lTU0lzSW5SdlRHOTNaWEpEWVhObElpd2lkRzlWY0hCbGNrTmhjMlVpTENKWFlTSXNJa29pTENKUElpd2laMlYwU1c1emRHRnVZMlZEWVdOb1pVeGxibWQwYUNJc0ltRnNiRzlqSWl3aVpuSmxaU0lzSW1Oc2IyNWxJaXdpV1NJc0ltZGxkRUoxWm1abGNpSXNJbk5sZEVKc2IyTnJJaXdpUkdJaUxDSm5aWFJGYm1RaUxDSnpaWFJGYm1RaUxDSnlaWE5sZENJc0ltZGxkRU4xY25OdmNpSXNJbk5sZEVOMWNuTnZjaUlzSW1Ga2RtRnVZMlVpTENKaGRFVnVaQ0lzSWxGaUlpd2ljR0Z6ZEVWdVpDSXNJbWRsZEVWeWNtOXlJaXdpY21WaFpGTndiR2wwVm1GeWFXNTBOalFpTENKeVpXRmtVM0JzYVhSYWFXZDZZV2RXWVhKcGJuUTJOQ0lzSW5SaElpd2ljbVZoWkZOd2JHbDBSbWw0WldRMk5DSXNJbXRpSWl3aWMydHBjRlpoY21sdWRDSXNJbTFpSWl3aWRXNXphMmx3Vm1GeWFXNTBJaXdpY21WaFpGVnVjMmxuYm1Wa1ZtRnlhVzUwTXpJaUxDSnlaV0ZrVTJsbmJtVmtWbUZ5YVc1ME16SWlMQ0p5WldGa1UybG5ibVZrVm1GeWFXNTBNekpUZEhKcGJtY2lMQ0p5WldGa1dtbG5lbUZuVm1GeWFXNTBNeklpTENKeVpXRmtWVzV6YVdkdVpXUldZWEpwYm5RMk5DSXNJbkpsWVdSVmJuTnBaMjVsWkZaaGNtbHVkRFkwVTNSeWFXNW5JaXdpY21WaFpGTnBaMjVsWkZaaGNtbHVkRFkwSWl3aWNtVmhaRk5wWjI1bFpGWmhjbWx1ZERZMFUzUnlhVzVuSWl3aWNtVmhaRnBwWjNwaFoxWmhjbWx1ZERZMElpd2labUlpTENKeVpXRmtXbWxuZW1GblZtRnlhVzUwU0dGemFEWTBJaXdpY21WaFpGcHBaM3BoWjFaaGNtbHVkRFkwVTNSeWFXNW5JaXdpUjJNaUxDSnlaV0ZrVldsdWREZ2lMQ0pGWXlJc0luSmxZV1JWYVc1ME1UWWlMQ0p5WldGa1ZXbHVkRE15SWl3aVoyRWlMQ0p5WldGa1ZXbHVkRFkwSWl3aWNtVmhaRlZwYm5RMk5GTjBjbWx1WnlJc0lsaGlJaXdpY21WaFpFbHVkRGdpTENKV1lpSXNJbkpsWVdSSmJuUXhOaUlzSW5KbFlXUkpiblF6TWlJc0luSmxZV1JKYm5RMk5DSXNJbkpsWVdSSmJuUTJORk4wY21sdVp5SXNJbkpsWVdSR2JHOWhkQ0lzSWxvaUxDSnlaV0ZrUkc5MVlteGxJaXdpY0dFaUxDSnlaV0ZrUW05dmJDSXNJbkpsWVdSRmJuVnRJaXdpY21WaFpGTjBjbWx1WnlJc0lrUmpJaXdpY21WaFpGTjBjbWx1WjFkcGRHaE1aVzVuZEdnaUxDSnlaV0ZrUW5sMFpYTWlMQ0p5WldGa1ZtRnlhVzUwU0dGemFEWTBJaXdpSkNJc0luSmxZV1JHYVhobFpFaGhjMmcyTkNJc0lrc2lMQ0pZWVNJc0lrd2lMQ0p0WVNJc0ltNWhJaXdpV21FaUxDSkJZaUlzSWs1aUlpd2lUaUlzSW1Oc1pXRnlTVzV6ZEdGdVkyVkRZV05vWlNJc0lucGlJaXdpUm1JaUxDSm5aWFJHYVdWc1pFTjFjbk52Y2lJc0lraGlJaXdpWjJWMFJtbGxiR1JPZFcxaVpYSWlMQ0pNWWlJc0ltZGxkRmRwY21WVWVYQmxJaXdpVFdJaUxDSnBjMFJsYkdsdGFYUmxaQ0lzSW1selJXNWtSM0p2ZFhBaUxDSnVaWGgwUm1sbGJHUWlMQ0oxYm5OcmFYQklaV0ZrWlhJaUxDSk1ZeUlzSW5OcmFYQk5ZWFJqYUdsdVowWnBaV3hrY3lJc0lteGlJaXdpYzJ0cGNGWmhjbWx1ZEVacFpXeGtJaXdpWjJJaUxDSnphMmx3UkdWc2FXMXBkR1ZrUm1sbGJHUWlMQ0pvWWlJc0luTnJhWEJHYVhobFpETXlSbWxsYkdRaUxDSnBZaUlzSW5OcmFYQkdhWGhsWkRZMFJtbGxiR1FpTENKcVlpSXNJbk5yYVhCSGNtOTFjQ0lzSW5OcmFYQkdhV1ZzWkNJc0lraGpJaXdpY21WbmFYTjBaWEpTWldGa1EyRnNiR0poWTJzaUxDSkpZeUlzSW5KMWJsSmxZV1JEWVd4c1ltRmpheUlzSWxsaUlpd2ljbVZoWkUxbGMzTmhaMlVpTENKVllpSXNJbkpsWVdSSGNtOTFjQ0lzSWtkaUlpd2laMlYwUm1sbGJHUkVaV052WkdWeUlpd2lWMklpTENKeVpXRmtTVzUwTXpKVGRISnBibWNpTENKR1l5SXNJbkpsWVdSVmFXNTBNekpUZEhKcGJtY2lMQ0o2WXlJc0luSmxZV1JUYVc1ME16SWlMQ0pCWXlJc0luSmxZV1JUYVc1ME5qUWlMQ0pDWXlJc0luSmxZV1JUYVc1ME5qUlRkSEpwYm1jaUxDSlNZaUlzSW5KbFlXUkdhWGhsWkRNeUlpd2lVMklpTENKeVpXRmtSbWw0WldRMk5DSXNJbFJpSWl3aWNtVmhaRVpwZUdWa05qUlRkSEpwYm1jaUxDSjJZeUlzSW5KbFlXUlRabWw0WldRek1pSXNJbmRqSWl3aWNtVmhaRk5tYVhobFpETXlVM1J5YVc1bklpd2llR01pTENKeVpXRmtVMlpwZUdWa05qUWlMQ0o1WXlJc0luSmxZV1JUWm1sNFpXUTJORk4wY21sdVp5SXNJa05qSWl3aWNtVmhaRk5wYm5SSVlYTm9OalFpTENKbll5SXNJbkpsWVdSUVlXTnJaV1JKYm5Rek1pSXNJbWhqSWl3aWNtVmhaRkJoWTJ0bFpFbHVkRE15VTNSeWFXNW5JaXdpYVdNaUxDSnlaV0ZrVUdGamEyVmtTVzUwTmpRaUxDSnFZeUlzSW5KbFlXUlFZV05yWldSSmJuUTJORk4wY21sdVp5SXNJbkZqSWl3aWNtVmhaRkJoWTJ0bFpGVnBiblF6TWlJc0luSmpJaXdpY21WaFpGQmhZMnRsWkZWcGJuUXpNbE4wY21sdVp5SXNJbk5qSWl3aWNtVmhaRkJoWTJ0bFpGVnBiblEyTkNJc0luUmpJaXdpY21WaFpGQmhZMnRsWkZWcGJuUTJORk4wY21sdVp5SXNJbTVqSWl3aWNtVmhaRkJoWTJ0bFpGTnBiblF6TWlJc0ltOWpJaXdpY21WaFpGQmhZMnRsWkZOcGJuUTJOQ0lzSW5Caklpd2ljbVZoWkZCaFkydGxaRk5wYm5RMk5GTjBjbWx1WnlJc0ltSmpJaXdpY21WaFpGQmhZMnRsWkVacGVHVmtNeklpTENKall5SXNJbkpsWVdSUVlXTnJaV1JHYVhobFpEWTBJaXdpWkdNaUxDSnlaV0ZrVUdGamEyVmtSbWw0WldRMk5GTjBjbWx1WnlJc0ltdGpJaXdpY21WaFpGQmhZMnRsWkZObWFYaGxaRE15SWl3aWJHTWlMQ0p5WldGa1VHRmphMlZrVTJacGVHVmtOalFpTENKdFl5SXNJbkpsWVdSUVlXTnJaV1JUWm1sNFpXUTJORk4wY21sdVp5SXNJbVpqSWl3aWNtVmhaRkJoWTJ0bFpFWnNiMkYwSWl3aUpHSWlMQ0p5WldGa1VHRmphMlZrUkc5MVlteGxJaXdpV21JaUxDSnlaV0ZrVUdGamEyVmtRbTl2YkNJc0ltRmpJaXdpY21WaFpGQmhZMnRsWkVWdWRXMGlMQ0oxWXlJc0luSmxZV1JRWVdOclpXUldZWEpwYm5SSVlYTm9OalFpTENKbFl5SXNJbkpsWVdSUVlXTnJaV1JHYVhobFpFaGhjMmcyTkNJc0ltbHpUV1Z6YzJGblpWUjVjR1VpTENKSFJVNUZVa0ZVUlY5VVQxOVBRa3BGUTFRaUxDSkhSVTVGVWtGVVJWOUdVazlOWDA5Q1NrVkRWQ0lzSWlSaElpd2lTV0lpTENKblpYUktjMUJpVFdWemMyRm5aVWxrSWl3aWFXNXBkR2xoYkdsNlpTSXNJbWx6UVhKeVlYa2lMQ0p0WVhnaUxDSk9kVzFpWlhJaUxDSk5RVmhmVmtGTVZVVWlMQ0poWWlJc0ltTmlJaXdpWm5KbFpYcGxJaXdpWkdJaUxDSmxZaUlzSWxFaUxDSnZZaUlzSW01aUlpd2ljR0lpTENKeFlpSXNJblJ2VDJKcVpXTjBUR2x6ZENJc0luUnZUMkpxWldOMFJYaDBaVzV6YVc5dUlpd2ljMlZ5YVdGc2FYcGxRbWx1WVhKNVJYaDBaVzV6YVc5dWN5SXNJbkpsWVdSQ2FXNWhjbmxGZUhSbGJuTnBiMjRpTENKblpYUkdhV1ZzWkNJc0ltZGxkRkpsY0dWaGRHVmtSbWxsYkdRaUxDSm5aWFJQY0hScGIyNWhiRVpzYjJGMGFXNW5VRzlwYm5SR2FXVnNaQ0lzSW1kbGRFSnZiMnhsWVc1R2FXVnNaQ0lzSW1kbGRGSmxjR1ZoZEdWa1JteHZZWFJwYm1kUWIybHVkRVpwWld4a0lpd2laMlYwVW1Wd1pXRjBaV1JDYjI5c1pXRnVSbWxsYkdRaUxDSmllWFJsYzBGelFqWTBJaXdpWW5sMFpYTkJjMVU0SWl3aVlubDBaWE5NYVhOMFFYTkNOalFpTENKaWVYUmxjMHhwYzNSQmMxVTRJaXdpWjJWMFJtbGxiR1JYYVhSb1JHVm1ZWFZzZENJc0ltZGxkRUp2YjJ4bFlXNUdhV1ZzWkZkcGRHaEVaV1poZFd4MElpd2laMlYwUm14dllYUnBibWRRYjJsdWRFWnBaV3hrVjJsMGFFUmxabUYxYkhRaUxDSm5aWFJHYVdWc1pGQnliM1J2TXlJc0ltZGxkRTFoY0VacFpXeGtJaXdpYzJWMFJtbGxiR1FpTENKelpYUlFjbTkwYnpOSmJuUkdhV1ZzWkNJc0luTmxkRkJ5YjNSdk0wWnNiMkYwUm1sbGJHUWlMQ0p6WlhSUWNtOTBiek5DYjI5c1pXRnVSbWxsYkdRaUxDSnpaWFJRY205MGJ6TlRkSEpwYm1kR2FXVnNaQ0lzSW5ObGRGQnliM1J2TTBKNWRHVnpSbWxsYkdRaUxDSnpaWFJRY205MGJ6TkZiblZ0Um1sbGJHUWlMQ0p6WlhSUWNtOTBiek5UZEhKcGJtZEpiblJHYVdWc1pDSXNJbUZrWkZSdlVtVndaV0YwWldSR2FXVnNaQ0lzSW5ObGRFOXVaVzltUm1sbGJHUWlMQ0pqYjIxd2RYUmxUMjVsYjJaRFlYTmxJaXdpWjJWMFYzSmhjSEJsY2tacFpXeGtJaXdpWjJWMFVtVndaV0YwWldSWGNtRndjR1Z5Um1sbGJHUWlMQ0p6WlhSWGNtRndjR1Z5Um1sbGJHUWlMQ0p6WlhSUGJtVnZabGR5WVhCd1pYSkdhV1ZzWkNJc0luTmxkRkpsY0dWaGRHVmtWM0poY0hCbGNrWnBaV3hrSWl3aVlXUmtWRzlTWlhCbFlYUmxaRmR5WVhCd1pYSkdhV1ZzWkNJc0luUnZUV0Z3SWl3aVoyVjBSWGgwWlc1emFXOXVJaXdpUzJNaUxDSnpaWFJGZUhSbGJuTnBiMjRpTENKa2FXWm1aWEpsYm1ObElpd2laWEYxWVd4eklpd2lZMjl0Y0dGeVpVVjRkR1Z1YzJsdmJuTWlMQ0pqYjIxd1lYSmxSbWxsYkdSeklpd2lRbUlpTENKamJHOXVaVTFsYzNOaFoyVWlMQ0pqYjNCNVNXNTBieUlzSW5KbFoybHpkR1Z5VFdWemMyRm5aVlI1Y0dVaUxDSjNaU0lzSWxJaUxDSmtkVzF3SWl3aVdDSXNJbE1pTENKVUlpd2liRzhpTENKb2FTSXNJbkppSWl3aVZTSXNJbkJoY25ObFNXNTBJaXdpWVdSa0lpd2lWaUlzSW5OaUlpd2ljM1ZpYzNSeWFXNW5JaXdpYzNWaUlpd2lWeUlzSW5SaUlpd2laVzVrSWl3aWFpSXNJblZpSWl3aWRtSWlMQ0oxWVNJc0lpUnVZVzFsSWl3aVpYaGxZeUlzSW1WNGRHVnVjMmx2Yms5aWFtVmpkRjhpTENJa1pYaDBaVzV6YVc5dWN5SXNJbVY0ZEdWdWMybHZibk1pTENKeVpYQnNZV05sSWl3aWQzSnBkR1ZUY0d4cGRGWmhjbWx1ZERZMElpd2lkM0pwZEdWVGNHeHBkRVpwZUdWa05qUWlMQ0ozY21sMFpWVnVjMmxuYm1Wa1ZtRnlhVzUwTXpJaUxDSjNjbWwwWlZOcFoyNWxaRlpoY21sdWRETXlJaXdpZDNKcGRHVlZibk5wWjI1bFpGWmhjbWx1ZERZMElpd2lkM0pwZEdWVGFXZHVaV1JXWVhKcGJuUTJOQ0lzSW5keWFYUmxXbWxuZW1GblZtRnlhVzUwTXpJaUxDSjNjbWwwWlZwcFozcGhaMVpoY21sdWREWTBJaXdpZDNKcGRHVmFhV2Q2WVdkV1lYSnBiblEyTkZOMGNtbHVaeUlzSW5keWFYUmxXbWxuZW1GblZtRnlhVzUwU0dGemFEWTBJaXdpWW1VaUxDSjNjbWwwWlZWcGJuUTRJaXdpWVdVaUxDSjNjbWwwWlZWcGJuUXhOaUlzSW5keWFYUmxWV2x1ZERNeUlpd2lkM0pwZEdWVmFXNTBOalFpTENKUll5SXNJbmR5YVhSbFNXNTBPQ0lzSWxCaklpd2lkM0pwZEdWSmJuUXhOaUlzSW5keWFYUmxTVzUwTXpJaUxDSjNjbWwwWlVsdWREWTBJaXdpZDNKcGRHVkpiblEyTkZOMGNtbHVaeUlzSW5keWFYUmxSbXh2WVhRaUxDSjNjbWwwWlVSdmRXSnNaU0lzSW5keWFYUmxRbTl2YkNJc0luZHlhWFJsUlc1MWJTSXNJbmR5YVhSbFFubDBaWE1pTENKM2NtbDBaVlpoY21sdWRFaGhjMmcyTkNJc0luZHlhWFJsUm1sNFpXUklZWE5vTmpRaUxDSjNjbWwwWlZOMGNtbHVaeUlzSW1OdGNDSXNJbkpwWjJoMFUyaHBablFpTENKc1pXWjBVMmhwWm5RaUxDSnRjMklpTENKUFlpSXNJbXh6WWlJc0lucGxjbThpTENKdGRXd3pNbmd6TWlJc0ltMTFiQ0lzSW1ScGRpSXNJbVp5YjIxVGRISnBibWNpTENKM2NtbDBaVk5sY21saGJHbDZaV1JOWlhOellXZGxJaXdpVUdJaUxDSnRZWGxpWlZkeWFYUmxVMlZ5YVdGc2FYcGxaRTFsYzNOaFoyVWlMQ0puWlhSU1pYTjFiSFJDZFdabVpYSWlMQ0pMWWlJc0ltZGxkRkpsYzNWc2RFSmhjMlUyTkZOMGNtbHVaeUlzSW1KbFoybHVVM1ZpVFdWemMyRm5aU0lzSW1WdVpGTjFZazFsYzNOaFoyVWlMQ0pPWXlJc0luZHlhWFJsUVc1NUlpd2lkM0pwZEdWSmJuUXpNbE4wY21sdVp5SXNJbmR5YVhSbFZXbHVkRE15VTNSeWFXNW5JaXdpZDNKcGRHVlZhVzUwTmpSVGRISnBibWNpTENKM2NtbDBaVk5wYm5Rek1pSXNJbmR5YVhSbFUybHVkRFkwSWl3aUpHUWlMQ0ozY21sMFpWTnBiblJJWVhOb05qUWlMQ0phWkNJc0luZHlhWFJsVTJsdWREWTBVM1J5YVc1bklpd2lkM0pwZEdWR2FYaGxaRE15SWl3aWQzSnBkR1ZHYVhobFpEWTBJaXdpZDNKcGRHVkdhWGhsWkRZMFUzUnlhVzVuSWl3aWQzSnBkR1ZUWm1sNFpXUXpNaUlzSW5keWFYUmxVMlpwZUdWa05qUWlMQ0ozY21sMFpWTm1hWGhsWkRZMFUzUnlhVzVuSWl3aVVtTWlMQ0ozY21sMFpVMWxjM05oWjJVaUxDSlRZeUlzSW5keWFYUmxUV1Z6YzJGblpWTmxkQ0lzSWs5aklpd2lkM0pwZEdWSGNtOTFjQ0lzSW5keWFYUmxVM0JzYVhSYWFXZDZZV2RXWVhKcGJuUTJOQ0lzSWtWa0lpd2lkM0pwZEdWU1pYQmxZWFJsWkVsdWRETXlJaXdpUm1RaUxDSjNjbWwwWlZKbGNHVmhkR1ZrU1c1ME16SlRkSEpwYm1jaUxDSkhaQ0lzSW5keWFYUmxVbVZ3WldGMFpXUkpiblEyTkNJc0lsRmtJaXdpZDNKcGRHVlNaWEJsWVhSbFpGTndiR2wwUm1sNFpXUTJOQ0lzSWxKa0lpd2lkM0pwZEdWU1pYQmxZWFJsWkZOd2JHbDBWbUZ5YVc1ME5qUWlMQ0pUWkNJc0luZHlhWFJsVW1Wd1pXRjBaV1JUY0d4cGRGcHBaM3BoWjFaaGNtbHVkRFkwSWl3aVNHUWlMQ0ozY21sMFpWSmxjR1ZoZEdWa1NXNTBOalJUZEhKcGJtY2lMQ0pWWkNJc0luZHlhWFJsVW1Wd1pXRjBaV1JWYVc1ME16SWlMQ0pXWkNJc0luZHlhWFJsVW1Wd1pXRjBaV1JWYVc1ME16SlRkSEpwYm1jaUxDSlhaQ0lzSW5keWFYUmxVbVZ3WldGMFpXUlZhVzUwTmpRaUxDSllaQ0lzSW5keWFYUmxVbVZ3WldGMFpXUlZhVzUwTmpSVGRISnBibWNpTENKTlpDSXNJbmR5YVhSbFVtVndaV0YwWldSVGFXNTBNeklpTENKT1pDSXNJbmR5YVhSbFVtVndaV0YwWldSVGFXNTBOalFpTENKUFpDSXNJbmR5YVhSbFVtVndaV0YwWldSVGFXNTBOalJUZEhKcGJtY2lMQ0pRWkNJc0luZHlhWFJsVW1Wd1pXRjBaV1JUYVc1MFNHRnphRFkwSWl3aWVXUWlMQ0ozY21sMFpWSmxjR1ZoZEdWa1JtbDRaV1F6TWlJc0lucGtJaXdpZDNKcGRHVlNaWEJsWVhSbFpFWnBlR1ZrTmpRaUxDSkJaQ0lzSW5keWFYUmxVbVZ3WldGMFpXUkdhWGhsWkRZMFUzUnlhVzVuSWl3aVNtUWlMQ0ozY21sMFpWSmxjR1ZoZEdWa1UyWnBlR1ZrTXpJaUxDSkxaQ0lzSW5keWFYUmxVbVZ3WldGMFpXUlRabWw0WldRMk5DSXNJa3hrSWl3aWQzSnBkR1ZTWlhCbFlYUmxaRk5tYVhobFpEWTBVM1J5YVc1bklpd2lRMlFpTENKM2NtbDBaVkpsY0dWaGRHVmtSbXh2WVhRaUxDSjNaQ0lzSW5keWFYUmxVbVZ3WldGMFpXUkViM1ZpYkdVaUxDSjFaQ0lzSW5keWFYUmxVbVZ3WldGMFpXUkNiMjlzSWl3aWVHUWlMQ0ozY21sMFpWSmxjR1ZoZEdWa1JXNTFiU0lzSWxSa0lpd2lkM0pwZEdWU1pYQmxZWFJsWkZOMGNtbHVaeUlzSW5aa0lpd2lkM0pwZEdWU1pYQmxZWFJsWkVKNWRHVnpJaXdpU1dRaUxDSjNjbWwwWlZKbGNHVmhkR1ZrVFdWemMyRm5aU0lzSWtSa0lpd2lkM0pwZEdWU1pYQmxZWFJsWkVkeWIzVndJaXdpUW1RaUxDSjNjbWwwWlZKbGNHVmhkR1ZrUm1sNFpXUklZWE5vTmpRaUxDSlpaQ0lzSW5keWFYUmxVbVZ3WldGMFpXUldZWEpwYm5SSVlYTm9OalFpTENKaFpDSXNJbmR5YVhSbFVHRmphMlZrU1c1ME16SWlMQ0ppWkNJc0luZHlhWFJsVUdGamEyVmtTVzUwTXpKVGRISnBibWNpTENKalpDSXNJbmR5YVhSbFVHRmphMlZrU1c1ME5qUWlMQ0p0WkNJc0luZHlhWFJsVUdGamEyVmtVM0JzYVhSR2FYaGxaRFkwSWl3aWJtUWlMQ0ozY21sMFpWQmhZMnRsWkZOd2JHbDBWbUZ5YVc1ME5qUWlMQ0p2WkNJc0luZHlhWFJsVUdGamEyVmtVM0JzYVhSYWFXZDZZV2RXWVhKcGJuUTJOQ0lzSW1Sa0lpd2lkM0pwZEdWUVlXTnJaV1JKYm5RMk5GTjBjbWx1WnlJc0luQmtJaXdpZDNKcGRHVlFZV05yWldSVmFXNTBNeklpTENKeFpDSXNJbmR5YVhSbFVHRmphMlZrVldsdWRETXlVM1J5YVc1bklpd2ljbVFpTENKM2NtbDBaVkJoWTJ0bFpGVnBiblEyTkNJc0luTmtJaXdpZDNKcGRHVlFZV05yWldSVmFXNTBOalJUZEhKcGJtY2lMQ0pvWkNJc0luZHlhWFJsVUdGamEyVmtVMmx1ZERNeUlpd2lhbVFpTENKM2NtbDBaVkJoWTJ0bFpGTnBiblEyTkNJc0ltdGtJaXdpZDNKcGRHVlFZV05yWldSVGFXNTBOalJUZEhKcGJtY2lMQ0pzWkNJc0luZHlhWFJsVUdGamEyVmtVMmx1ZEVoaGMyZzJOQ0lzSWxkaklpd2lkM0pwZEdWUVlXTnJaV1JHYVhobFpETXlJaXdpV0dNaUxDSjNjbWwwWlZCaFkydGxaRVpwZUdWa05qUWlMQ0paWXlJc0luZHlhWFJsVUdGamEyVmtSbWw0WldRMk5GTjBjbWx1WnlJc0ltVmtJaXdpZDNKcGRHVlFZV05yWldSVFptbDRaV1F6TWlJc0ltWmtJaXdpZDNKcGRHVlFZV05yWldSVFptbDRaV1EyTkNJc0ltZGtJaXdpZDNKcGRHVlFZV05yWldSVFptbDRaV1EyTkZOMGNtbHVaeUlzSWlSaklpd2lkM0pwZEdWUVlXTnJaV1JHYkc5aGRDSXNJbFZqSWl3aWQzSnBkR1ZRWVdOclpXUkViM1ZpYkdVaUxDSlVZeUlzSW5keWFYUmxVR0ZqYTJWa1FtOXZiQ0lzSWxaaklpd2lkM0pwZEdWUVlXTnJaV1JGYm5WdElpd2lXbU1pTENKM2NtbDBaVkJoWTJ0bFpFWnBlR1ZrU0dGemFEWTBJaXdpZEdRaUxDSjNjbWwwWlZCaFkydGxaRlpoY21sdWRFaGhjMmcyTkNJc0ltVjRjRzl5ZEhNaUxDSmtaV0oxWnlJc0lrMWhjQ0lzSWsxbGMzTmhaMlVpTENKQ2FXNWhjbmxTWldGa1pYSWlMQ0psZUhCdmNuUlRlVzFpYjJ3aUxDSnBibWhsY21sMGN5SXNJbVY0ZEdWdVpDSXNJblI1Y0dWUFppSXNJbmR2Y210bGNpSXNJa2x1Y0hWMElpd2laR0YwWVNJc0lsOUpibkIxZEY5dmJtVmZiMlpmWkdWamJITWlMQ0p3WWw4eExrMWxjM05oWjJVaUxDSndZWFJvSWl3aVpHbG5aWE4wSWl3aWJXVnpjMkZuWlNJc0luTmxjbWxoYkdsNlpTSXNJbmR5YVhSbGNpSXNJbkJpWHpFdVFtbHVZWEo1VjNKcGRHVnlJaXdpWkdWelpYSnBZV3hwZW1VaUxDSmllWFJsY3lJc0luSmxZV1JsY2lJc0luQmlYekV1UW1sdVlYSjVVbVZoWkdWeUlpd2lWMjl5YTFKbGNYVmxjM1FpTENKZlYyOXlhMUpsY1hWbGMzUmZiMjVsWDI5bVgyUmxZMnh6SWl3aWFXNXdkWFJ6SWl3aWNtVnhkV1Z6ZEY5cFpDSXNJbU5oYm1ObGJDSXNJblpsY21KdmMybDBlU0lzSW5OaGJtUmliM2hmWkdseUlpd2lhWFJsYlNJc0lsZHZjbXRTWlhOd2IyNXpaU0lzSWw5WGIzSnJVbVZ6Y0c5dWMyVmZiMjVsWDI5bVgyUmxZMnh6SWl3aVpYaHBkRjlqYjJSbElpd2liM1YwY0hWMElpd2lkMkZ6WDJOaGJtTmxiR3hsWkNJc0ltbHRjR3hsYldWdWRHRjBhVzl1SWl3aVlXSnZjblJwYjI1TllYQWlMQ0p3Y21WMklpd2lRblZtWm1WeUlpd2lYMk1pTENKZlp5SXNJbDlsSWl3aVkyaDFibXNpTENKamRYSnlaVzUwSWl3aWMybDZaU0lzSW1sdWRFOW1abk5sZENJc0ltaGxZV1JsY2xOcGVtVWlMQ0p5WldGa1YyOXlhMUpsY1hWbGMzUlRhWHBsSWl3aWNtVnhkV1Z6ZENJc0lsOWtJaXdpWVdKdmNuUWlMQ0poWW05eWRFTnZiblJ5YjJ4c1pYSWlMQ0p5WlhOd2IyNXpaU0lzSW05MWRIQjFkRU5vZFc1cmN5SXNJbTkxZEhCMWRGTjBjbVZoYlNJc0lsZHlhWFJoWW14bElpd2lkM0pwZEdVaUxDSmxibU52WkdsdVp5SXNJbVp5YjIwaUxDSmtaV1poZFd4MFJXNWpiMlJwYm1jaUxDSmxlR2wwUTI5a1pTSXNJbVZ5Y205eUlpd2ljbVZ6Y0c5dWMyVkNlWFJsY3lJc0luSmxjM0J2Ym5ObFUybDZaVUo1ZEdWeklpd2lhVzVrWlhnaUxDSjNjbWwwWlZkdmNtdFNaWE53YjI1elpWTnBlbVVpTENKd2NtOWpaWE56SWl3aWMzUmtiM1YwSWl3aVgyWWlMQ0p6ZEdScGJpSXNJbUZ5WjNNaVhTd2liV0Z3Y0dsdVozTWlPaUkwUmtGblFrbEJMRVZCUVdkQ0xGTkJRVk5ETEVWQlFVZERMRWRCU1RWQ0xFOUJTRUZHTEVWQlFXZENSeXhQUVVGUFF5eG5Ra0ZEYkVJc1EwRkJSVU1zVlVGQlZ5eGpRVUZuUWtNc1QwRkJVeXhUUVVGVlRDeEZRVUZIUXl4SFFVRkxSQ3hGUVVGRlNTeFZRVUZaU0N4RFFVRkZMRWRCUTNwRkxGTkJRVlZFTEVWQlFVZERMRWRCUVVzc1NVRkJTeXhKUVVGSlN5eExRVUZMVEN4RlFVRlBReXhQUVVGUFN5eFZRVUZWUXl4bFFVRmxReXhMUVVGTFVpeEZRVUZIU3l4TFFVRkpUaXhGUVVGRlRTeEhRVUZMVEN4RlFVRkZTeXhMUVVONlJsQXNSVUZCWTBNc1JVRkJSME1zUlVGRE5VSXNSVUZGVHl4VFFVRlRVeXhGUVVGVlZpeEZRVUZIUXl4SFFVTjZRaXhIUVVGcFFpeHRRa0ZCVGtFc1IwRkJNRUlzVDBGQlRrRXNSVUZETTBJc1RVRkJUU3hKUVVGSlZTeFZRVUZWTEhWQ1FVRjVRa01zVDBGQlQxZ3NSMEZCU3l4cFEwRkZOMFFzVTBGQlUxa3NTVUZCVDBNc1MwRkJTME1zV1VGQlkyWXNRMEZCU1N4RFFVUjJRMFFzUlVGQlkwTXNSVUZCUjBNc1IwRkZha0pFTEVWQlFVVlBMRlZCUVd0Q0xFOUJRVTVPTEVWQlFXRkRMRTlCUVU5akxFOUJRVTltTEVsQlFVMVpMRVZCUVVkT0xGVkJRVmxPTEVWQlFVVk5MRlZCUVZjc1NVRkJTVTBzUlVGRGJrWXNRMEZ4Ums4c1UwRkJVMGtzUlVGQlZVTXNSVUZCVTBNc1JVRkJXVU1zUlVGQlIwTXNSMEZGT1VNc1QwRkJUeXhKUVVGTFJDeEpRVUZOUVN4RlFVRkpSU3hYUVVGVkxGTkJRVlZETEVWQlFWTkRMRWRCUXk5RExGTkJRVk5ETEVWQlFWVkRMRWRCUVZNc1NVRkJUVU1zUlVGQlMwNHNSVUZCVlU4c1MwRkJTMFlzUjBGQlVTeERRVUZITEUxQlFVOUhMRWRCUVV0TUxFVkJRVTlMTEVkQlFVOHNRMEZETTBZc1UwRkJVME1zUlVGQlUwb3NSMEZCVXl4SlFVRk5ReXhGUVVGTFRpeEZRVUZwUWl4TlFVRkZTeXhIUVVGVkxFTkJRVU1zVFVGQlQwY3NSMEZCUzB3c1JVRkJUMHNzUjBGQlR5eERRVU01Uml4VFFVRlRSaXhGUVVGTFNTeEhRVXBzUWl4SlFVRmxUQ3hGUVVsaFN5eEZRVUZQUXl4TFFVRlBWQ3hGUVVGUlVTeEZRVUZQVEN4UlFVb3hRMEVzUlVGSmVVUkxMRVZCUVU5TUxFMUJTbWhFUVN4aFFVRnBRazRzUlVGQlNVMHNSVUZCVVN4SlFVRkpUaXhIUVVGRkxGTkJRVlZITEVkQlFWZEJMRVZCUVZGSExFVkJRVThzUzBGSmFFSlBMRXRCUVV0U0xFVkJRVmRMTEVWQlFWa3NRMEZET1VkSUxFZEJRVTFPTEVWQlFWbEJMRVZCUVZWaExFMUJRVTFvUWl4RlFVRlRReXhIUVVGakxFdEJRVXRUTEU5QlEzUkZMRWRCUTBFc1EwRkZUeXhUUVVGVFR5eEZRVUZaYWtJc1JVRkJVMnRDTEVkQlEycERMRWxCUVhOSFF5eEZRVUZIUXl4RlFVRkhReXhGUVVGNFIwTXNSVUZCU1N4RFFVRkZReXhOUVVGUExFVkJRVWRETEV0QlFVMHNWMEZCWVN4SFFVRlhMRVZCUVZCSUxFVkJRVVVzUjBGQlVTeE5RVUZOUVN4RlFVRkZMRWRCUVVrc1QwRkJUMEVzUlVGQlJTeEZRVUZITEVWQlFVbEpMRXRCUVUwc1IwRkJTVU1zU1VGQlN5eEpRVUZsUXl4RlFVRkpNME1zVDBGQlQyTXNVVUZCTkVJc2JVSkJRV0k0UWl4VFFVRXdRa0VzVTBGQlZ6VkRMRkZCUVZGTExGZEJRM1JNTEU5QlFVOXpReXhGUVVGRmFrSXNTMEZCVDIxQ0xFVkJRVXNzUjBGQlNVWXNSVUZCVXl4TlFVRkpSU3hGUVVGTExFZEJRVWxHTEVWQlFWVXNUMEZCU1VVc1JVRkJTeXhIUVVGelFpeHRRa0ZCV0VNc1UwRkJNRUpJTEVWQlFVVkhMRTlCUVU5RExGVkJRVmtzVjBGQllTeFBRVUZQYmtNc1NVRkJUeXhIUVVGSEswSXNSVUZETVVvc1UwRkJVMFVzUlVGQlMwY3NSMEZCU3l4UFFVRlBMRk5CUVZWRExFZEJRVXNzVDBGRGVrTXNVMEZCWTBNc1IwRkRWaXhIUVVGSlppeEZRVUZITEUxQlFVMHNTVUZCU1RGQ0xGVkJRVlVzYlVOQlF6TkNMRXRCUVU5clF5eEpRVUZOUVN4RlFVRkpMRVZCUVVkUExFVkJRVWNzUzBGQlQxb3NSVUZCU1N4SlFVRkxRU3hQUVVOdVF5eEhRVUZKU0N4RlFVRkpMRVZCUVVkRExFbEJRVTFETEVWQlFWa3NSVUZCVW1Fc1JVRkJSeXhIUVVGVFpDeEZRVUZWTEU5QlFVbGpMRVZCUVVjc1IwRkJTMlFzUlVGQlV5eFRRVUZQUXl4RlFVRkpSQ3hGUVVGVkxGTkJRVTFETEVWQlFVVTVRaXhMUVVGTE5rSXNSMEZCU1N4SFFVRkxRU3hGUVVGRlZpeFRRVUZYVnl4RlFVRkpRU3hGUVVGRk9VSXNTMEZCU3paQ0xFVkJRVWRqTEVWQlFVY3NTMEZCUzNCQ0xFdEJRVTBzVDBGQlQwOHNSVUZGTTBvc1QwRkVTVVFzUlVGQlNTeEZRVUZIUXl4SlFVRkhZU3hGUVVGTExFTkJRVk1zUlVGQlVrRXNSVUZCUnl4SFFVRlJZaXhGUVVGRllpeFJRVU42UWpCQ0xFVkJRVWNzU1VGRFVDeExRVUZMTEVWQlFVY3NTMEZCU3l4RlFVRkhZaXhGUVVGSllTeEZRVUZKTEUxQlEzaENMRXRCUVVzc1JVRkJZeXhQUVVGWVdpeEZRVUZGUXl4UlFVRm5RaXhEUVVGRlppeE5RVUZQTUVJc1JVRkJSeXhIUVVGSmNFSXNUVUZCVFN4SFFVTm9SQ3hMUVVGTExFVkJRVWRSTEVWQlFVVkRMRkZCUVZOSUxFVkJRVWxqTEVWQlFVY3NSMEZCU1VFc1JVRkJTeXhEUVVGRExFZEJRVWtzVTBGRGVFTXNTMEZCU3l4RlFVRkhRU3hGUVVGTFdpeEZRVUZGU1N4SlFVRkpVeXhOUVVGUFlpeEZRVUZGUnl4TFFVRkxWU3hOUVVGUExGTkJRM2hETEZGQlEwa3NTMEZCVFdRc1JVRkJTVU1zUlVGQlJVY3NUVUZCVFVvc1JVRkJTVUVzUlVGQlJXVXNUMEZCVXl4SFFVRkxaaXhGUVVGRlFTeEZRVUZGWlN4UFFVRlRMRXRCUVd0Q0xFbEJRVlpHTEVWQlFVY3NTVUZCYzBJc1NVRkJWa0VzUlVGQlJ5eEpRVUZYTEVOQlFVVmFMRVZCUVVrc1JVRkJSeXhSUVVGWExFTkJRelZITEVkQlFXTXNTVUZCVmxrc1JVRkJSeXhOUVVGallpeEhRVUZOWVN4RlFVRkhMRWRCUVV0aUxFVkJRVVVzU1VGQlRXRXNSVUZCUnl4SFFVRkxZaXhGUVVGRkxFbEJRVTBzUTBGQlJVTXNSVUZCUlVNc1RVRkJVVmNzUlVGQlJ5eEhRVUZKTEV0QlFWRXNRMEZEZEVZc1IwRkJZeXhKUVVGV1FTeEZRVUZITEVsQlFWbGFMRVZCUVVWRExFMUJRVkZHTEVWQlFVVXNSMEZCU1N4RFFVRkZReXhGUVVGRlF5eE5RVUZSUml4RlFVRkZMRWRCUVVsQkxFVkJRVWxoTEVWQlFVa3NTMEZCVVN4RFFVTnlSU3hIUVVGSllpeEhRVUZMUXl4RlFVRkZReXhOUVVGUlJpeEZRVUZGTEVkQlFVa3NRMEZCUlVNc1JVRkJSVU1zVFVGQlVVWXNSVUZCUlN4SFFVRkpReXhGUVVGRlNTeEpRVUZKVnl4TFFVRkxTQ3hIUVVGTExFdEJRVkVzUTBGREwwUmlMRVZCUVVVc1NVRkJTVU1zUlVGQlJVa3NTVUZCU1ZNc1RVRkRhRUppTEVWQlFVVkhMRXRCUVV0VkxFMUJRVThzVTBGRmRFSkVMRVZCUVV0b1FpeEZRVUZMTTBJc1MwRkJTMU1zUlVGQlUzTkNMRVZCUXpOQ0xFTkJRVU1zVFVGQlQxZ3NSMEZCUzNWQ0xFVkJRVXNzUTBGQlF5eEZRVUZIZGtJc1IwRkJTVk1zUlVGQlNTeERRVUZGTEVOQlFWY3NVVUZCUlVRc1JVRkJTVVVzUlVGQlNTeERRVUZKTEVOQlF6RkVMRWRCUVZrc1JVRkJVbUVzUlVGQlJ5eEhRVUZSTEUxQlFVMUJMRVZCUVVjc1IwRkJTU3hOUVVGUExFTkJRVVV4UWl4TlFVRlBNRUlzUlVGQlJ5eEhRVUZMUVN4RlFVRkhMRkZCUVVzc1JVRkJVWEJDTEUxQlFVMHNSVUZETjBVc1EwRjBRaXREVEN4RFFVRkxMRU5CUVVOMVFpeEZRVUZIUXl4SFFVRk5MRU5CUVVjc1EwRjFRblJGTEVOQmEwSlBMRk5CUVZOTExFVkJRVk5ETEVkQlEzSkNMRWxCUVVsRExFVkJRWE5DTEcxQ1FVRllWaXhSUVVGNVFrRXNUMEZCVDBNc1UwRkJWVlVzUlVGQlNVUXNSMEZCUzBRc1JVRkJSVU1zUjBGQlNVVXNSVUZCU1N4RlFVTTFSU3hIUVVGSlJDeEZRVUZITEU5QlFVOUJMRVZCUVVWc1JDeExRVUZMWjBRc1IwRkRja0lzUjBGQlNVRXNSMEZCZVVJc2FVSkJRV0pCTEVWQlFVVklMRTlCUVhGQ0xFMUJRVThzUTBGRE1VTXhRaXhMUVVGTkxGZEJSVVlzVDBGRVNUWkNMRWRCUVV0SExFZEJRVXRJTEVWQlFVVklMRk5CUVZGSExFOUJRVWtzUjBGRGNrSXNRMEZCUlM5Q0xFMUJRVThyUWl4SFFVRkxRU3hGUVVGRlJ5eExRVUZOTlVJc1RVRkJUM2xDTEVWQlEzWkRMRWRCUlV3c1RVRkJUU3hKUVVGSk9VTXNWVUZCVlN0RExFVkJRVWtzTUVKQlFUUkNMR3REUVVONFJDeERRVzlGVHl4VFFVRlRSeXhGUVVGalNpeEhRVU14UWl4SlFVRkxWQ3hQUVVGUFl5eGpRVUZsTEUxQlFVMHNTVUZCU1c1RUxGVkJRVlVzZDBOQlF5OURMRWxCUVdsRGFVUXNSVUZCTjBKRUxFVkJRVWxHTEVWQlFVVlVMRTlCUVU5akxHVkJRMnBDTEU5QlFVOUlMRVZCUVVsQkxFVkJRVVZzUkN4TFFVRkxaMFFzU1VGQlRVRXNSVUZCY1VORUxFVkJRVk5ETEVkQlFUSkNSeXhGUVVGSkxFTkJRVVVzUlVGQlJXSXNSVUZCU3l4UlFVRlRRU3hGUVVGTExGTkJRVlZCTEVWQlFVc3NWVUZCVjJFc1JVRkJSVm9zVDBGQlQyTXNaVUZCYVVJc1YwRkJZeXhQUVVGUGFFUXNTVUZCU3l4RlFVRkpPRU1zUjBGRE9VMHNVMEZCVTJJc1JVRkJTMGNzUjBGQlMxVXNSVUZCUlZZc1IwRkJTMDhzUlVGQlJWQXNTVUZCVFN4VFFVRlZReXhIUVVGTExFOUJRVThzU1VGQlNUZENMRk5CUVZFc1UwRkJWVU1zUlVGQlUwTXNTVUZEZGtZc1UwRkJaMEpFTEVWQlFWTkRMRVZCUVZGNFFpeEZRVUZIYlVRc1IwRkJTemRDTEZGQlFWRkRMRkZCUVZFMFFpeEhRVUZIYkVJc1RVRkJTeXhUUVVGVGEwSXNSMEZCU3pWQ0xFVkJRVkVzUTBGQlJVY3NUVUZCVDNsQ0xFVkJRVWR1UWl4TFFVRk5hRU1zUjBGQlN5eEhRVUZKZDBJc1JVRkJWU3hGUVVSa2RVTXNRMEZCVDNoRExFVkJRVk5ETEVkQlFUZENNa0lzUlVGQlNVMHNSVUZCUlZBc1IwRkJSME1zU1VGQk9FSnVRaXhMUVVGTmJVSXNSVUZCUlhwQ0xFMUJRVThzUjBGQlRTeERRVUZITEVOQlJYQkxMRU5CZVVKUExGTkJRVk56UXl4RlFVRjFRa01zUlVGQlZVTXNSVUZCVDBNc1JVRkJUVGxDTEVkQlF6RkVMRWRCUVdFc1RVRkJWRGhDTEVsQlFXbENPVUlzUlVGQlJ5eE5RVUZOTEVsQlFVa3hRaXhWUVVGVkxHbEVRVU0xUXl4SFFVRnhRaXh0UWtGQlZuVkVMRVZCUVhWQ1JDeEpRVUZoUXl4SlFVRlZOMElzUjBGQlN6WkNMRVZCUVUxRkxFbEJRVWxJTEVkQlFWY3NUVUZCVFN4SlFVRkpkRVFzVlVGQlZTdzBSVUZEZGtjc1RVRkJaMElzVFVGQlZIZEVMRVZCUVdVNVFpeEZRVUZoTEUxQlFWUTRRaXhGUVVGbE9VSXNSVUZCUlRWQ0xFdEJRVXQzUkN4SFFVRlpOVUlzUlVGQlNVRXNSVUZCUlZnc1RVRkJVWGRETEVWQlFVMUhMRWxCUVVsS0xFVkJRM2hHTEVOQmMwTnJSQ3h0UWtGQmNFSkxMR2xDUVVGcFEwRXNjMHRETlZRNVJDeFhRVVZETEZOQlFWTkRMRVZCUVdkQ1F5eEZRVUZWUXl4SFFVTnFReXhMUVVGTlJDeGhRVUZ2UWtNc1IwRkRlRUlzVFVGQlRTeEpRVUZKT1VRc1ZVRkJWU3h2UTBGRmRrSXNRMEZGUkN4VFFVRlRLMFFzUlVGQmEwSkRMRVZCUVZGRExFZEJRMnBETEVsQlFVc3NTVUZCU1doQ0xFVkJRVWtzUlVGQlIwRXNSVUZCU1dkQ0xFVkJRVTEwUWl4UFFVRlJUU3hKUVVGTExFTkJRM0pETEVsQlFVbHBRaXhGUVVGaFJDeEZRVUZOYUVJc1IwRkRka0pwUWl4RlFVRlhReXhYUVVGaFJDeEZRVUZYUXl4aFFVRmpMRVZCUTJwRVJDeEZRVUZYUlN4alFVRmxMRVZCUTNSQ0xGVkJRVmRHTEVsQlFWbEJMRVZCUVZkSExGVkJRVmNzUjBGRGFrUTVSU3hQUVVGUEswVXNaVUZCWlU0c1JVRkJVVVVzUlVGQlYwc3NTVUZCUzB3c1JVRkRMME1zUTBGRFJpeERRVVZFTEZOQlFWTk5MRVZCUVdGV0xFVkJRV0ZYTEVWQlFWbERMRWRCVFRkRExFOUJURWxFTEVkQlFWbFdMRVZCUVd0Q1JDeEZRVUZaYkVVc1ZVRkJWelpGTEVkQlEzSkVReXhIUVVGaFdDeEZRVUZyUWtRc1JVRkJZVmtzUjBGRGFFUnVSaXhQUVVGUEswVXNaVUZCWlZJc1JVRkJZU3haUVVGaExFTkJRemxEVHl4VlFVRlZMRWxCUlV4UUxFTkJRMUlzUTBGRlJDeFRRVUZUWVN4RlFVRlZReXhGUVVGVlF5eEhRVU16UWl4SFFVRXdRaXh0UWtGQlprRXNSMEZCTkVNc1QwRkJaa0VzUlVGRGRFTXNUVUZCVFN4SlFVRkpOMFVzVlVGQlZTeHpSRUZIZEVJMFJTeEZRVUZUYUVZc1ZVRkJXVXdzVDBGQlQyTXNUMEZCVDNkRkxFZEJRV05CTEVWQlFWZHFSaXhWUVVGWExFTkJRM0pGVVN4WlFVRmhMRU5CUTFoWExFMUJRVTgyUkN4RlFVTlFVQ3hWUVVGVkxFVkJRMVpFTEdOQlFXTXNTMEZIYkVJM1JTeFBRVUZQSzBVc1pVRkJaVTBzUlVGQlZTeFpRVUZoTEVOQlF6TkRVQ3hWUVVGVkxFbEJSVkpSTEVkQlFWbERMRVZCUVdkQ1JpeEZRVUZWUXl4RlFVTXpReXhEUVVWRUxGTkJRVk5GTEVWQlFXZENha01zUjBGSmRrSXNUMEZJUVdsRExFVkJRV3RDZUVZc1QwRkJUME1zWlVGQmFVSkVMRTlCUVU5NVJpeGxRVUZsUXl4UFFVRlRMRk5CUVhsQ2JrTXNSMEZEYUVjc1QwRkJUMEVzUlVGQlJYSkVMRmRCUVdGR0xFOUJRVTk1Uml4bFFVRmxiRU1zUlVGRGJFUXNSVUZEVjJsRExFVkJRV2RDYWtNc1JVRkRlRUlzUTBGRlJDeFRRVUZUWjBNc1JVRkJaMEpvUXl4RlFVRkhia1FzUjBGTE1VSXNUMEZLUVcxR0xFVkJRV3RDZGtZc1QwRkJUME1zWlVGQmFVSkVMRTlCUVU5RExHVkJRV1Y1Uml4UFFVRlRMRk5CUVhsQ2JrTXNSVUZCUjI1RUxFZEJSVzVITEU5QlJFRnRSQ3hGUVVGRmNrUXNWVUZCV1VVc1JVRkRVRzFFTEVOQlEySXNSVUZEVjJkRExFVkJRV2RDYUVNc1JVRkJSMjVFTEVWQlF6TkNMRU5CUlVRc1UwRkJVM1ZHTEVsQlExQXNSMEZCZFVJc2IwSkJRVnBETEZWQlFUUkNRU3hSUVVGUlF5eFZRVUZYTEU5QlFVOHNSVUZEYWtVc1IwRkJTVVFzVVVGQlVVTXNWVUZCVlVNc1MwRkJUU3hQUVVGUExFVkJRMjVETEVkQlFYRkNMRzFDUVVGV1F5eE5RVUZ6UWl4UFFVRlBMRVZCUlhoRExFbEJSVVVzVDBGRVFVTXNVVUZCVVROR0xGVkJRVlUwUml4UlFVRlJNVVlzUzBGQlMzRkdMRkZCUVZGRExGVkJRVlZITEZGQlFWTXNTVUZCU1N4WFFVRmpMRTFCUTNKRkxFTkJRMUlzUTBGQlF5eE5RVUZQY2tVc1IwRkRVQ3hQUVVGUExFTkJRMUlzUTBGRFJpeERRVVZFTEZOQlFWTjFSU3hGUVVGMVFrTXNSMEZET1VJc1VVRkJZU3hKUVVGVVFTeEZRVU5HTEUxQlFVMHNTVUZCU1VNc1pVRkJaU3cyUkVGSE0wSXNUMEZCVDBRc1EwRkRVaXhEUVVWRUxGTkJRVk5GTEVWQlFUSkNSaXhGUVVGTk5VWXNSMEZEZUVNc1IwRkJTVUVzU1VGQmVVSXNhVUpCUVZSQkxFZEJRWEZETEcxQ1FVRlVRU3hIUVVNNVF5eFBRVUZQUVN4RlFVTkdMRkZCUVdFc1NVRkJWRUVzUlVGRFZDeE5RVUZOTEVsQlFVbEZMRlZCUVZVc05FUkJSM1JDTEU5QlFVOTVSaXhGUVVGMVFrTXNSVUZETDBJc1EwRkZSQ3hUUVVGVFJ5eEZRVUZoUXl4SFFVTndRaXhKUVVGSlF5eEZRVUUwUW1Jc1NVRkZhRU1zVDBGQlR5eFhRVU5NTEVsQlEwazVSQ3hGUVVSQk5FVXNSVUZCVVdwQ0xFVkJRV2RDWlN4SFFVYzFRaXhIUVVGSlF5eEZRVUV5UWl4RFFVTTNRaXhKUVVGSlJTeEZRVUZaYkVJc1JVRkJaMEkxUlN4TlFVRk5ReXhaUVVWMFEyZENMRVZCUVZNclJDeFJRVUZSUXl4VlFVRlZXU3hGUVVGUFJTeFZRVUZYUkN4RlFVTnlSQ3hOUVVOUk4wVXNSVUZCVXpSRkxFVkJRVTE2UlN4TlFVRk5jRUlzUzBGQlRTdEdMRmRCUnpkQ0xFOUJRVTlPTEVWQlFUSkNla1lzUzBGQlRXbENMRVZCUXpsRExFTkJRMGNzUTBGRlJDeFRRVUZUSzBVc1JVRkJaVU1zUlVGQlVVTXNSMEZET1VJc1RVRkJVVGxITEU5QlFVOUxMRlZCUVZWRExHVkJRV1ZETEV0QlFVdHpSeXhGUVVGUlF5eEpRVVZ3UXl4UlFVUm1SQ3hGUVVGVGNrSXNSVUZCWjBKeFFpeE5RVWt6UWl4UFFVRlBRU3hEUVVOU0xFTkJSVVFzVTBGQlUwVXNTVUZyUWxBc1QwRm9Ra1ZCTEVWQlJIRkNMRzlDUVVGYWJrSXNVMEZCTWtKQkxGRkJRVkY2UWl4SlFVTnlRM2xDTEZGQlFWRjZRaXhKUVVGSmRVSXNUMEZGV2l4VFFVRmpha0lzUlVGQlVYRkRMRVZCUVZVdlF5eEhRVU55UXl4SlFVRkphVVFzUlVGQlQwb3NSVUZCWlc1RExFVkJRVkZ4UXl4SFFVVnNReXhIUVVGTFJTeEZRVUZNTEVOQlEwRXNTVUZCU1VNc1JVRkJUMnBJTEU5QlFVOXJTQ3g1UWtGQmVVSkdMRVZCUVUxR0xFZEJSV3BFTEU5QlFVbEhMRVZCUVVzNVF5eEpRVU5CT0VNc1JVRkJTemxETEVsQlFVazFSQ3hMUVVGTGIwY3NWVUZCVlhaRUxFOUJRVk1zUlVGQlNYRkNMRVZCUVZOV0xFZEJSMmhFYTBRc1JVRkJTM3BHTEV0QlVFMHNRMEZSTVVJc1JVRkhWM1ZHTEVWQlFVc3ZSU3hOUVVGTmNFSXNTMEZCVFN0R0xGVkJRM3BDTEVOQlJVUXNTVUZCU1ZFc1JVRkJkVUlzVjBGRGVrSXNVMEZCVTBFc1NVRkRVRGxETEVWQlFXZENla1FzUzBGQlRYVkhMRWRCUlhSQ2JrZ3NUMEZCVHl0RkxHVkJRV1Z1UlN4TFFVRk5MRmxCUVdFc1EwRkRka05aTEUxQlFVOHNRMEZCUlN4RlFVTlVjMFFzVlVGQlZTeEZRVU5XUkN4alFVRmpMRWRCUldwQ0xFTkJORVJFTEU5Qk1VUkJTU3hGUVVGaGEwTXNSVUZCVXl4RFFVRkRMRU5CUTNKQ2JrTXNTVUZCU3l4dFFrRkRUSGhFTEUxQlFVOHNVMEZCTUVJMFJpeEZRVUZOUXl4RlFVRlZReXhIUVVONlEwWXNTMEZCVVhoSExFdEJRVXN5Unl4WlFVTnFRak5ITEV0QlFVc3lSeXhWUVVGVlNDeEhRVUZSTEVsQlIzcENlRWNzUzBGQlN6SkhMRlZCUVZWSUxFZEJRVTB2UkN4TFFVRkxMRU5CUTNoQ1owVXNVMEZCVlVFc1JVRkRWa01zVVVGQlUwRXNSMEZGV2l4SFFVTkJMRU5CUTBSMFF5eEpRVUZMTEhOQ1FVTk1lRVFzVFVGQlR5eFRRVUUyUWpSR0xFVkJRVTFETEVkQlEzaERMRWRCUVUxRUxFdEJRVkY0Unl4TFFVRkxNa2NzVlVGTmJrSXNTVUZHUVN4SlFVRkpReXhGUVVGUk5VY3NTMEZCU3pKSExGVkJRVlZJTEVkQlJXeENNVVFzUlVGQlNTeEZRVUZISzBRc1JVRkJTVVFzUlVGQlRYQkZMRTlCUVZGTkxFVkJRVWtyUkN4RlFVRkhMMFFzU1VGRGRrTXNSMEZCU1RoRUxFVkJRVTA1UkN4SFFVRkhNa1FzVjBGQllVRXNSVUZGZUVJc1dVRkVRVWNzUlVGQlRVVXNUMEZCVDJoRkxFVkJRVWNzUlVGSmNrSXNSMEZEUVN4RFFVTkVjMElzU1VGQlN5eG5Ra0ZEVEhoRUxFMUJRVThzVTBGQmRVSnRSeXhIUVVNMVFpeEhRVUZOUVN4RlFVRk5VQ3hSUVVGUmVFY3NTMEZCU3pKSExGVkJRWHBDTEVOQlQwRXNTVUZJUVN4SlFVTkpTeXhGUVVSUmFFZ3NTMEZCU3pKSExGVkJRVlZKTEVWQlFVMVFMRTFCUTFSVExGRkJSV1p1UlN4RlFVRkpMRVZCUVVjclJDeEZRVUZKUnl4RlFVRlplRVVzVDBGQlVVMHNSVUZCU1N0RUxFVkJRVWN2UkN4SlFVRkxMRU5CUTJ4RUxFbEJRVWx2UlN4RlFVRlhSaXhGUVVGWmJFVXNSMEZGTTBJc1NVRkRSVzlGTEVWQlFWTlVMRk5CUVZNNVJ5eExRVUZMU3l4TFFVRk5LMGNzUlVGRE9VSXNRMEZCUXl4TlFVRlBhRWNzUjBGRFVGQXNVVUZCVVVNc1ZVRkJWVlVzVFVGQlN5eFhRVU55UWl4TlFVRk5TaXhEUVVOd1FpeEhRVU5YTEVOQlJVZHRSeXhGUVVGVFVpeFRRVUZYVVN4RlFVRlRVaXhSUVVGUlV5eE5RVU4yUTI1SUxFdEJRVXR2U0N4dlFrRkJiMEpNTEVWQlFVMVFMRXRCUVUxVkxFVkJRVk5VTEZOQlJXcEVMRU5CUlVRc1QwRkJVVTBzUlVGQlRVMHNaMEpCY2tKaUxFTkJjMEpHTEV0QlIwbGtMRU5CUTFnc1EwRjBSVFpDTEVkQmQwVjJRbVVzUlVGQk1rSXNVMEZCVlVNc1IwRkRka012UXl4RlFVRlZPRU1zUlVGQllVTXNSMEZGZGtJc1NVRkJTVU1zUlVGQlV6bENMRVZCUVdFMFFpeEhRVVV4UWl4VFFVRlRRU3hKUVVOUUxFbEJRVWxITEVWQlowTktMRTlCT1VKQmFFVXNSVUZCWjBKNlJDeExRVUZOYzBnc1NVRkZkRUpITEVWQlFWRkVMRVZCUVU4M1NDeExRVUZMU3l4UFFVOVVNa2NzVjBGRFZFb3NSVUZCVVRWSExFdEJRVXN5Uml4RlFVRjFRbTFETEVsQlMzUkRja2tzVDBGQlR5dEZMR1ZCUVdWdFFpeEZRVUYxUW0xRExFZEJRVkVzVlVGQlZ5eERRVU01UkRkSExFOUJRVThzUlVGRFVITkVMRlZCUVZVc1JVRkRWa1FzWTBGQll5eEpRVVZvUWpkRkxFOUJRVThyUlN4bFFVRmxiVUlzUlVGQmRVSnRReXhIUVVGUkxGVkJRVmNzUTBGRE9VUTNSeXhOUVVGUExFdEJRMUJ6UkN4VlFVRlZMRVZCUTFaRUxHTkJRV01zU1VGRmFFSTNSU3hQUVVGUEswVXNaVUZCWlcxQ0xFVkJRWFZDYlVNc1IwRkJVU3hUUVVGVkxFTkJRemRFTjBjc1YwRkJUemhITEVWQlExQjRSQ3hWUVVGVkxFVkJRMVpFTEdOQlFXTXNTVUZGVkhkRUxFTkJRMUlzUTBGelFrUXNUMEZ3UWtGd1JDeEZRVUZoYVVRc1JVRkJZU3hEUVVGRExFTkJRM3BDYkVRc1NVRkJTeXhYUVVOTWVFUXNUVUZCVHl4WFFVTk1MRTFCUVU4c2MwSkJRMUlzUjBGRFFTeERRVU5FZDBRc1NVRkJTeXhuUWtGRFRIaEVMRTFCUVU4c1UwRkJkVUp0Unl4SFFVTlVMRlZCUVdaQkxFVkJRVTFRTEU5QlExSjRSeXhMUVVGTE1rZ3NVMEZCVlN4RlFVVmhMRzFDUVVGcVFqTklMRXRCUVVzMFNDeFRRVU5rTlVnc1MwRkJTelJJTEZGQlFWRnFTU3hMUVVGTFN5eExRVUZOSzBjc1NVRkpOVUphTEVWQlFVdDJRaXhGUVVGblFqQkRMRVZCUVZrM1NDeFhRVUZaTEdkQ1FVRnBRazhzVFVGQlRVd3NTMEZCUzBzc1MwRkJUU3RITEVWQlEyaEdMRXRCUjBsUExFTkJRMUlzUTBFNVJEaENMRU5CT0VRM1FtWXNSMEZEUlhOQ0xFVkJRU3RDTEZkQlEycERMRk5CUVZOQkxFbEJRMUJ3UlN4RlFVRm5RbnBFTEV0QlFVMDJTQ3hIUVVsMFFucEpMRTlCUVU4clJTeGxRVUZsYmtVc1MwRkJUU3hUUVVGVkxFTkJRM0JEV1N4TlFVRlBMRWxCUVVrd1J5eEZRVU5ZY0VRc1ZVRkJWU3hGUVVOV1JDeGpRVUZqTEVkQlJXcENMRU5CTUVSRUxFOUJlRVJCU1N4RlFVRmhkMFFzUlVGQmFVSXNRMEZCUXl4RFFVTTNRbnBFTEVsQlFVc3NVVUZEVEhoRUxFMUJRVThzVTBGQlpXdElMRWRCUTNCQ0xFbEJRVWxtTEVWQlJVb3NTVUZEUlVFc1JVRkJVU3hKUVVGSlowSXNUVUZCVFN4UlFVTnVRaXhEUVVGRExFMUJRVTlvU0N4SFFVTnBRaXh2UWtGQlltbElMRk5CUTBwQkxGTkJRVk5ETEdGQlRWcHNRaXhGUVVGUmFVSXNVMEZCVTBNc1dVRkJXU3hWUVVOMlFrTXNWVUZCVlN4VFFVRlRMRWRCUVU4c1NVRk1hRU51UWl4RlFVRlJhVUlzVTBGQlUwY3NjVUpCUTFnelFpeExRVUZQTEZGQlVXWlBMRVZCUVZFc1EwRkRUbEFzUzBGQlRTeFJRVU5PTkVJc1UwRkJVeXhGUVVOVVF5eFpRVUZaTEVWQlIycENMRU5CUlVRc1NVRkJTVU1zUlVGQlpWSXNSVUZGYmtJc1VVRkJjVUpLTEVsQlFXcENXU3hGUVVOR0xFZEJRWGRDTEc5Q1FVRmlUaXhWUVVOVVRTeEZRVUZsTEVsQlFVbERMRTFCUVUwc0swSkJRMXBETEV0QlFVOHNhMEpCUlhCQ0xFbEJRMFZHTEVWQlFXVXNTVUZCU1Vjc1lVRkJZU3h0UTBGRGFrTXNRMEZCUXl4TlFVRlBReXhKUVVkUVNpeEZRVUZsTEVsQlFVbERMRTFCUVUwc0swSkJRMXBETEV0QlFVOHNXVUZEY2tJc1EwRkpUSGhKTEV0QlFVc3lTU3hQUVVGUFlpeFBRVUZUVVN4RlFVTnlRblJKTEV0QlFVc3lTU3hQUVVGUFF5eGpRVUZqTjBJc1JVRkRNMElzUjBGRFFTeERRVU5FTTBNc1NVRkJTeXhYUVVOTWVFUXNUVUZCVHl4WFFVTk1MRTFCUVU4c01FSkJRMUlzUzBGSFNXbElMRU5CUTFnc1EwRjBSWEZETEVkQkswVnVReXhUUVVGVFowSXNSVUZCWlhSRUxFZEJRM1JDTEU5QlFVbEJMRVZCUVV0MVJDd3dRMEZEVUVNc1VVRkJVVU1zU1VGQlNTeHpSa0ZEVEN4SFFWVnpRaXh0UWtGQmFrSjZSQ3hGUVVGTE1FUXNWVUZCTWtJeFJDeEZRVUZMTUVRc1VVRkJVWGhLTEZWQlFWVkRMR1ZCUVdVc1dVRkJZelpHTEVWQlFVdHpReXhsUVVONFJ5eERRWEpDY1VJc2IwSkJRVmd6Uml4UlFVRXdRa0VzVDBGQlQyZElMR05CUnpGRGNrSXNSVUZCWjBKd1NTeFZRVUZWZVVNc1QwRkJUMmRJTEdGQlFXVXNhMEpCUTJoRU5VSXNSVUZCV1RkSUxGVkJRVlY1UXl4UFFVRlBaMGdzWVVGQlpTeGxRVzFDT1VNc1UwRkJWek5FTEVkQlJVcHpSQ3hGUVVGbGRFUXNTMEZKY0VKQkxFVkJRVXR6UXl4blFrRkJhMEpCTEVWQlEzWkNkRU1zUlVGQlN5dENMRmxCUVdOQkxFVkJRM0JDTEVOQlVrUXNRMEZSYlVJc2IwSkJRVlF2UWl4TFFVRjFRa0VzUzBGQlR6UkVMRVZCUlhwRExFTkJOMWhEUXl4UFEwbG5Ra01zYjBKRFJHeENMRWxCUVVsRExFVkJRVWNzYlVKQlFXMUNiRXNzVDBGQlQyMUxMR2xDUVVGcFFtNUxMRTlCUVU4clJTeGxRVUZsTEZOQlFWTnhSaXhGUVVGRmNrc3NSVUZCUlhOTExFZEJRVWRFTEVkQlFVZHFTeXhOUVVGTlJTeFhRVUZYSzBvc1IwRkJSM0JMTEU5QlFVOUxMRmxCUVZrclNpeEZRVUZGY2tzc1IwRkJSM05MTEVWQlFVVTNTU3hOUVVGTkxFVkJRVVZITEVkQlFVVXNiMEpCUVc5Q01ra3NVVUZCVVVFc1QwRkJZekZLTEVkQlEyaEhMRk5CUVZNeVNpeEpRVUZMUVN4RlFVRkhMRmRCUVZVc1JVRkJSelZKTEVWQlFVVnRRaXhUUVVGVGJrSXNSVUZCUlcxQ0xFOUJRVTh3U0N4RlFVRkhMRU5CUVVNc1UwRkJVME1zUlVGQlIwd3NSVUZCUlhKTExFZEJRVWRoTEV0QlFVdDNTaXhGUVVGRlFTeEZRVUZGUml4RlFVRkhkRW9zUzBGQlN5eGpRVUZqTEVOQlFVTnBSU3hqUVVGaExFVkJRVWRETEZWQlFWTXNSVUZCUjNSRUxFMUJRVTE2UWl4SFFVRkhMRU5CUVVNd1N5eEZRVUZIY0Vzc1ZVRkJWWEZMTEZOQlFWTXNWMEZCVnl4UFFVRlBPVW9zUzBGQlMzZEtMRU5CUVVNc1JVRkJSU3hKUVVFNFNuSkxMRVZCUVRGS2VVc3NSMEZCTUVwNlN5eEZRVUZGTEVWQlFUbEpMRk5CUVZOeFN5eEZRVUZGUXl4SFFVRkhMRWRCUVVkNlNpeG5Ra0ZCWjBKM1NpeEZRVUZGTEUxQlFVMHNTVUZCU1ROS0xGVkJRVlVzSzBKQlFTdENMRTlCUVU4c1NVRkJTV2RMTEVWQlFVY3NhMEpCUVd0Q1NpeEhRVUZITEVsQlFVa3NTVUZCU1hSTExFbEJRVWx6U3l4RlFVRkZMRWRCUTI1aUxGTkJRVk5OTEVsQlFVdEtMRWxCUVVzc1NVRkJTVWdzUlVGQlJYcEpMRVZCUVVWdFFpeFBRVUZQUXl4VFFVRlRjVWdzU1VGQlNVRXNSVUZCUlhwSkxFVkJRVVZ0UWl4UFFVRlBReXhUUVVGVGNFSXNSVUZCUlcxQ0xFOUJRVThzYjBKQlFXOUNMRzFDUVVGdFFqTkRMRTFCUVUxRkxGVkJRVlVyU2l4SlFVRkpSaXhGUVVGSEwwb3NUVUZCVFVVc1ZVRkJWU3RLTEVWQlFVVXNRMEZCUTNaR0xHTkJRV0VzUlVGQlIwTXNWVUZCVXl4RlFVRkhkRVFzVFVGQlRTeFhRVUZYTEU5QlFYVkRMRk5CUVZrMFNTeEhRVUZuUlN4UFFVRTNSRThzU1VGQlMxQXNSVUZCUlN4RFFVRkRNVWtzUzBGQlN6QkpMRWRCUVVkQkxFVkJRVVY2U1N4RlFVRkZiVUlzVDBGQlQwTXNWVUZCVlN4WFFVRlhMRTlCUVU5dVF5eEpRVUZKTEVWQlFWTjNTaXhEUVVGRExFTkJRWEJJVVN4RFFVUnFUaXhUUVVGWlVpeEhRVUZITEVsQlFVbHlTeXhGUVVGRkxFVkJRVVVzVDBGQlR5eFhRVUZYTEU5QlFVOUJMRVZCUVVWeFN5eEZRVUZGYUVnc1QwRkJUeXhEUVVGRGRFSXNUVUZCU3l4RlFVRkhUaXhOUVVGTk5Fa3NSVUZCUlhKTExFMUJRVTBzUTBGQlF5dENMRTFCUVVzc1JVRkJSeXhEUVVGRExFTkJRM2RJSzBrc1EwRkJSMnBMTEUxQlFVMHNTVUZCU1N0S0xFVkJRVWNzVjBGQlZTeERRVUZGTEVWQlJrOHNVMEZCV1ZBc1JVRkJSWEpMTEVkQlFVY3NSMEZCUjBFc1JVRkJSU3hEUVVGRExFbEJRVWx6U3l4RlFVRkZNVWtzUlVGQlJYbEpMRVZCUVVWQkxFVkJRVVZWTEUxQlFVMHNTMEZCU3l4SlFVRkpMRWxCUVVsb1RDeEZRVUZGTEVWQlFVVkJMRVZCUVVWelN5eEZRVUZGYUVnc1QwRkJUeXhGUVVGRmRFUXNTVUZCU1N4RFFVRkRMRWxCUVVseFF5eEZRVUZGYVVrc1JVRkJSWFJMTEVkQlFVZHhReXhMUVVGTGEwa3NTVUZCU1VFc1JVRkJSV3hKTEVkQlFVY3NRMEZCUVN4SFFVRkphMGtzUlVGQlJVRXNSVUZCUld4SkxFVkJRVVVzUlVGQmQwSndReXhGUVVGRlFTeEZRVUZVUkN4RlFVRkZkVXNzUlVGQmJFSkVMRVZCUVVWQkxFVkJRVVZCTEVWQlFVVm9TQ3hQUVVGUExFOUJRVzlDZEVRc1IwRkJSeXhOUVVGTlF5eEhRVUZIYlVzc1JVRkJSMGNzUlVGQlJVUXNSVUZCUlN4RFFVRkRka1lzWTBGQllTeEZRVUZIUXl4VlFVRlRMRVZCUVVkMFJDeE5RVUZOZWtJc1IwRkJSeXhEUVVGRExFTkJSM2hOWjB3c1EwRkJSeXd5UWtGQk1FSXNVMEZCVTFnc1IwRkJSeXhQUVVGUFFTeEhRVUZKTEZkQlFWY3NUMEZCZWxRc1UwRkJXVUVzUlVGQlJYSkxMRWRCUVVjMFN5eEpRVUZMVUN4aFFVRmhNVW9zVTBGQlV6QktMRWRCUVVjc1NVRkJTU3hKUVVGSlF5eEZRVUZGTEVWQlFVVjJTeXhGUVVGRkxFTkJRVU0wUWl4TFFVRkxMRmRCUVZjc1IwRkJSekpKTEVWQlFVVkVMRVZCUVVWb1NDeFBRVUZQTEVOQlFVTXNTVUZCU1dwQ0xFVkJRVVZyU1N4SlFVRkpMRTFCUVUwc1EwRkJRemRKTEUxQlFVMTZRaXhGUVVGRmIwTXNSVUZCUldsSkxFVkJRVVZxU1N4SlFVRkpUQ3hOUVVGTExFVkJRVWNzUTBGQmFVUXNUMEZCYUVSb1F5eEZRVUZGTkVJc1MwRkJTeXhYUVVGWExFMUJRVTBzUTBGQlEwa3NUVUZCU3l4RlFVRkhUaXhYUVVGTkxFVkJRVThzUlVGQlV6RkNMRVZCUVVVMFFpeE5RVUZOTEVkQlFUSkRMRTlCUVhoRE5VSXNSVUZCUldkRUxFOUJRVTlETEZWQlFWVXNWMEZCVnl4UFFVRlBha1FzUTBGQlF5eEZRVUZUUVN4RFFVRkRMRU5CUVhWRmEwd3NRMEZCUjNCTExFMUJRVXNzVTBGQlUySXNSVUZCUlhOTExFZEJRVWNzVFVGQlRTeERRVUZEZEVzc1JVRkJSWE5MTEVWQlFVVXNSMEZCUlN4RFFVRkRMRWxCUVVjc1NVRkJTVmtzUlVGQlIzSkxMRWRCUVUxMVJpeExRVU53V0N4VFFVRlRlRVFzUlVGQlJYbElMRVZCUVVWeVN5eEZRVUZGYzBzc1IwRkJSMFFzUlVGQlJVRXNSVUZCUlZVc1RVRkJUU3hMUVVGTFZDeEZRVUZGUVN4SFFVRkhXU3hGUVVGSFlpeEZRVUZGTEV0QlFVdERMRkZCUVVjc1NVRkJiMEpCTEVWQlFVVmhMRmxCUVZsaUxFVkJRVVZoTEZkQlFWY3NUMEZCVDJRc1JVRkJSU3hKUVVGSkxFbEJRVWtzU1VGQlNYUkxMRVZCUVVWelN5eEZRVUZGYUVnc1UwRkJVM1JFTEVWQlFVVnpTeXhGUVVGRlpTeFZRVUZWWml4RlFVRkZhRWdzWVVGQlVTeEpRVUZUY2tRc1JVRkJiVU56U3l4RlFVRnFRMEVzUlVGQlJYWkxMRWxCUVVsMVN5eEZRVUZGZGtzc1MwRkJTMFVzVDBGQlQwc3NWVUZCVlZBc1IwRkJTM1ZMTEVWQlFVVjJTeXhIUVVGTGRVc3NSVUZCUlhaTExFZEJRVWNzUTBGQlJTeEZRVUZEZFVzc1JVRkJSWFpMTEVkQlFVZERMRU5CUVVNc1EwRkRMMDRzVTBGQlUzRk1MRVZCUVVWb1FpeEhRVUZITEVsQlFVbHlTeXhUUVVGVGNVc3NSVUZCUlN4SFFVRkhMRlZCUVZWeVN5eEZRVUZGTEV0QlFVZHhTeXhGUVVFMFpDeE5RVUZOTEU5QlFTOWtMRWRCUVVkQkxHRkJRV0ZxU3l4TlFVRk5MRTFCUVUwc1VVRkJVU3hIUVVGSGFVc3NZVUZCWVhCTExFOUJRVThzVDBGQlQwUXNSVUZCUlN4SlFVRkpjMHNzUlVGQlJYSkxMRTlCUVU5TExGVkJRVlZ4U3l4VFFVRlRia3NzUzBGQlN6WktMRWRCUVVjc1IwRkJSeXh0UWtGQmJVSkRMRVZCUVVVc1RVRkJUU3hUUVVGVExFZEJRVWNzYTBKQlFXdENRU3hIUVVGSExHbENRVUZwUWtRc1JVRkJSV2hJTEdGQlFWRXNTVUZCYjBKblNDeEZRVUZGTVVNc1lVRkJVU3hKUVVGdlFqQkRMRVZCUVVWcFFpeDFRa0ZCZFVKcVFpeEZRVUZGYVVJc2NVSkJRWEZDTEZWQlFWVXNUVUZCVFN4UlFVRlJMRWRCUVVjc2NVSkJRWEZDYUVJc1VVRkJSeXhKUVVGdlFrUXNSVUZCUlRkS0xGZEJRVTBzU1VGQmIwSTJTaXhGUVVGRmFVSXNkVUpCUVhWQ2FrSXNSVUZCUldsQ0xIRkNRVUZ4UWl4UlFVRlJMRTFCUVUwc1ZVRkJORUlzVFVGRGJHaENMRWRCUVVjc1dVRkJXWFJNTEZGQlFVY3NTVUZCYjBKeFN5eEZRVUZGTjBvc1MwRkJTeXhOUVVGTkxGTkJRVk1zVDBGQlQxSXNRMEZCUXl4RFFVRkRMRk5CUVZOMVRDeEZRVUZIYkVJc1IwRkJSeXhKUVVGSmNrc3NVMEZCVTNGTExFVkJRVVVzVFVGQlRTeFZRVUZWY2tzc1IwRkJSeXhOUVVGTmNVc3NSMEZCUnl4WlFVRlpja3NzUTBGQlF5eERRVUZwU1N4SlFVRkpkMHdzUlVGQlJ5eG5SMEZCWjBkVUxFMUJRVTBzUzBGQkswd3NTVUZCU1ZVc1JVRkJSM0pNTEUxQlFVMUZMRlZCUVZWdlRDeFJRVUZSTEZOQlFWTnlRaXhGUVVGRmNrc3NSMEZCUjBrc1RVRkJUVVVzVlVGQlZXOU1MRkZCUVZGc1RDeExRVUZMTmtvc1JVRkJSWEpMTEU5QlFVVXNSVUZCVHl4RlFVRkZMRk5CUVZOeFN5eEZRVUZGY2tzc1IwRkJSeXhKUVVGSkxFbEJRVWx6U3l4RlFVRkZSQ3hGUVVGRmFFZ3NUMEZCVDNSRUxFVkJRVVVzYVVKQlFXdENjMHNzUlVGQlJVRXNSVUZCUlZVc1RVRkJUU3hKUVVGSlZpeEZRVUZGYWtrc1JVRkJSU3hGUVVGRlFTeEZRVUZGYTBrc1JVRkJSV3hKTEVsQlFVbEJMRXRCUVV0eVF5eEhRVUZIUXl4RlFVRkZVU3hWUVVGTExFVkJRVTlVTEVWQlFVVnhReXhIUVVGSFFTeEZRVUZGYVVrc1JVRkJSU3hGUVVGRk0wTXNSVUZCUlhSSUxFMUJRVTFGTEZWQlFWVnhUQ3hKUVVGSkxGTkJRVk4wUWl4RlFVRkZja3NzUjBGQlJ5eFBRVUZQU1N4TlFVRk5SU3hWUVVGVmNVd3NTVUZCU1c1TUxFdEJRVXMyU2l4RlFVRkZja3NzVDBGQlJTeEZRVUZQTEVWQlFVVXNVMEZCVTNGTExFVkJRVVZ5U3l4SFFVRkhMRWxCUVVrc1NVRkJTWE5MTEVWQlFVVkVMRVZCUVVWb1NDeFBRVUZQZEVRc1JVRkJSVXNzVFVGQlRXdExMRWRCUVVkc1NTeEZRVUZGTEdsQ1FVRnJRbWxKTEVWQlFVVkJMRVZCUVVWVkxFMUJRVTBzU1VGQlNWWXNSVUZCUlhWQ0xFVkJRVVVzUlVGQlJVRXNSVUZCUlhSQ0xFVkJRVVZ6UWl4SlFVRkpRU3hMUVVGTGVFb3NTVUZCU1hKRExFVkJRVVUyVEN4SFFVRkhOVXdzUlVGQlJWRXNWVUZCU3l4RlFVRlBORUlzUlVGQlJYZEtMRWRCUVVkQkxFVkJRVVYyUWl4SlFVRkpMRTlCUVU5MFN5eERRVUZETEVWQlEyNHJRaXhUUVVGVE9Fd3NSVUZCUjNoQ0xFVkJRVVZ5U3l4RlFVRkZjMHNzUjBGQlJ5eFBRVUZQTEVkQlFVY3hSQ3hWUVVGVmRrUXNUMEZCVDJwRUxFMUJRVTFGTEZWQlFWVjNTQ3hOUVVGTmRFZ3NTMEZCU3paS0xFVkJRVVZ5U3l4SFFVRkhTU3hOUVVGTlJTeFZRVUZWZDBnc1RVRkJUWFJJTEV0QlFVczJTaXhGUVVGRmNrc3NSVUZCUlhOTExFVkJRVVVzUTBGQlJTeFRRVUZUZDBJc1JVRkJSM3BDTEVWQlFVVnlTeXhGUVVGRmMwc3NSVUZCUlhaTExFZEJRVWNzU1VGQlNYRkRMRVZCUVVVc2JVSkJRVzFDTEVkQlFVZHJTU3hGUVVGRkxFTkJRVU5zU1N4SFFVRkhMRXRCUVV0clNTeEZRVUZGTEVsQlFVbHpRaXhGUVVGRk4wd3NRMEZCUXl4TlFVRk5jMHNzU1VGQlNXcEpMRWRCUVVjc1MwRkJTMmxKTEVWQlFVVjFRaXhGUVVGRk5Vd3NSMEZCUnl4TlFVRk5iMG9zVFVGQlRXaElMRVZCUVVWM1NpeEhRVUZITEVkQlFVa3NRMEZCUXl4VFFVRlRNMGtzUlVGQlJXOUlMRVZCUVVWeVN5eEZRVUZGYzBzc1IwRkJSeXhKUVVGSkxFbEJRVWwyU3l4RlFVRkZMRWRCUVVkeFF5eEZRVUZGTEVWQlFVVkJMRVZCUVVWM1JTeFZRVUZWZGtRc1UwRkJVMnBDTEVWQlFVVnlReXhGUVVGRmNVTXNSVUZCUlN4SFFVRkhkMFVzVlVGQlZYaEZMRWRCUVhOQ0xFOUJRVzVDYVVrc1IwRkJSM2xDTEVWQlFVY3NSMEZCUnl4TFFVRkxPVXdzUlVGQlJVUXNSMEZCVlhOTExFTkJRVU1zUTBGRE0wd3NVMEZCVTJoTExFVkJRVVZuU3l4RlFVRkZja3NzUjBGQlJ5eEpRVUZKTEVsQlFVbHpTeXhGUVVGRkxFZEJRVWQyU3l4RlFVRkZMRVZCUVVWQkxFVkJRVVUyUnl4VlFVRlZka1FzVTBGQlUzUkVMRVZCUVVWMVN5eEZRVUZGZGtzc1JVRkJSU3hIUVVGSE5rY3NWVUZCVlRkSExFZEJRVWNzVFVGQlRYRktMRTFCUVUwc1YwRkJWMmxDTEVWQlFVVXNTMEZCUzBFc1JVRkJSU3hKUVVGSlF5eEZRVUZITEVOQlFVTXNVMEZCVTNsQ0xFVkJRVVV4UWl4RlFVRkZja3NzUlVGQlJYTkxMRVZCUVVWMlN5eEhRVUZITEVsQlFVa3NTVUZCU1hGRExFVkJRVVVzUjBGQlIzZEtMRVZCUVVVc1JVRkJSVUVzUlVGQlJXaEdMRlZCUVZWMlJDeFRRVUZUZFVrc1JVRkJSWGhLTEVWQlFVVjNTaXhGUVVGRkxFZEJRVWRvUml4VlFVRlZaMFlzUjBGQlIzWkNMR0ZCUVdGeVN5eEhRVUZIT0V3c1JVRkJSeXh4UTBGQmNVTXNRMEZCUTBVc1JVRkJSMmhOTEVkQlFVZG5UU3hGUVVGSE0wSXNTVUZCU1VNc1JVRkJSV3hKTEVWQlFVVXNRMEZEYW1Fc1UwRkJVelJLTEVWQlFVY3pRaXhIUVVGSExFOUJRVTlCTEdGQlFXRTBRaXhUUVVGVE5VSXNSVUZCUlRaQ0xHRkJRV0UzUWl4RlFVRkZhRUlzVFVGQlRTeHZRa0ZCYjBKblFpeGhRVUZoY0Vzc1QwRkJUMjlMTEVWQlFVVjJTaXhaUVVGWmIwd3NZVUZCWVRkQ0xFVkJRVVYyU2l4WlFVRlpkVWtzVFVGQlRYQktMRTlCUVU5TExGVkJRVlZ4U3l4VFFVRlRia3NzUzBGQlN6WktMRWRCUVVjc1QwRkJUMEVzUlVGQlJTeGpRVUZqUVN4RFFVRkRMRU5CUVVVc1UwRkJVemhDTEVWQlFVVTVRaXhGUVVGRmNrc3NSMEZCWjBRc1IwRkJOME5oTEV0QlFVdDVTaXhGUVVGRlJDeEZRVUZGZUVvc1MwRkJTMklzUlVGQlJVRXNSVUZCUldFc1MwRkJTM2RLTEVWQlFVVXNRMEZCUlN4RlFVRkRlRW9zUzBGQlMzVk1MRlZCUVZNc1JVRkJUU3hGUVVGRmRrd3NTMEZCUzNsS0xFVkJRVVZxU0N4UFFVRlBMRU5CUVVNc1NVRkJTV2RJTEVWQlFVVXNSVUZCUlVFc1JVRkJSWGhLTEV0QlFVdDVTaXhGUVVGRmFrZ3NUMEZCVDJkSUxFbEJRVWtzUTBGQllTeEpRVUZKUXl4SFFVRm9RblJMTEVWQlFVVmhMRXRCUVV0NVNpeEZRVUZGUkN4SlFVRlhMRWRCUVVkNFNpeExRVUZMZDBvc1JVRkJSVU1zUlVGQlJVc3NXVUZCV1N4SlFVRkpNRUlzUlVGQlJ5OUNMRVZCUVVWMFN5eEZRVUZGTEVkQlFVY3NRMEZCUTJFc1MwRkJTM1ZNTEZWQlFWTXNRMEZCUlN4RFFVRkRMRU5CUlhKRUxGTkJRVk5GTEVWQlFVVnFReXhIUVVGSGVFb3NTMEZCUzNkS0xFVkJRVVVzUlVGQlJYaEtMRXRCUVV0aUxFVkJRVVZ4U3l4RFFVRkRMRU5CU1doT0xGTkJRVk51U0N4RlFVRkZiVWdzUlVGQlJYSkxMRWRCUVVjc1QwRkJUM0ZMTEVWQlFVVnlTeXhIUVVGSFFTeEZRVUZGY1Vzc1NVRkJTWEpMTEVWQlFVVnhTeXhGUVVGRkxFbEJRVWxCTEVWQlFVVnlTeXhGUVVGRlFTeEZRVUZGZVVJc1VVRkJVWHBDTEVWQlFVVnhTeXhIUVVGSGNrc3NSVUZCUlhsQ0xFdEJRVXNzUTBGRk9VOHNVMEZCVXpoTExFVkJRVVZzUXl4SFFVRkhRU3hGUVVGRlFTeEZRVUZGUVN4RlFVRkZMRWxCUVZORExFVkJRVXgwU3l4RlFVRkZMRWRCUVVzc1NVRkJTWE5MTEV0QlFVdEVMRVZCUVVWd1N5eFBRVUZQU3l4VlFVRlZReXhsUVVGbFF5eExRVUZMTmtvc1JVRkJSVU1zU1VGQlNYUkxMRVZCUVVWelJDeExRVUZMWjBnc1IwRkJSeXhQUVVGUGRFc3NRMEZCUXl4RFFVRkRMRk5CUVZOeFRTeEZRVUZIYUVNc1JVRkJSWEpMTEVkQlFVZGhMRXRCUVV0dlJTeEpRVUZKYjBZc1JVRkJSWGhLTEV0QlFVdFpMRTFCUVUxNlFpeEZRVUZGWVN4TFFVRkxkMG9zVDBGQlJTeERRVUZOTEVOQlFVVXNVMEZCVTIxRExFVkJRVWR1UXl4SFFVRkhMRWRCUVVjc1RVRkJUVUVzUlVGQlJXaElMRTlCUVU4c1QwRkJUekZETEU5QlFVODRUQ3hoUVVGaGVFc3NUVUZCVFN4TFFVRkxiMGtzUjBGQlJ5eEpRVUZKTEVsQlFVbHlTeXhGUVVGRkxFZEJRVWR6U3l4RlFVRkZMRVZCUVVWQkxFVkJRVVZFTEVWQlFVVm9TQ3hQUVVGUGFVZ3NSMEZCUnl4TFFVRkxkRXNzUjBGQlIxY3NUMEZCVHpoTUxHRkJRV0Y0U3l4TlFVRk5MRXRCUVVzMFNpeEZRVUZIZUVJc1JVRkJSVU1zUlVGQlJVRXNSVUZCUlN4UFFVRlBMRTlCUVU5MFN5eERRVUZETEVOQlVubEZORU1zUlVGQlJTeFhRVUZYZFVvc1QwRkJSU3hIUVVOb1lVRXNSVUZCUlRkTUxGVkJRVlZ6UXl4RlFVRkZMRmRCUVZjc1IwRkJSeTlDTEV0QlFVdDFUQ3hWUVVGVkxFZEJRVWQyVEN4TFFVRkxZaXhGUVVGRkxFTkJRVU1zU1VGQllVRXNSVUZCVkhGTExFVkJRVVY0U2l4TFFVRkxkMG9zUlVGQlNTeEpRVUZKY2tzc1MwRkJTM0ZMTEVWQlFVVXNSMEZCUjNCTExFOUJRVTlMTEZWQlFWVkRMR1ZCUVdWRExFdEJRVXMyU2l4RlFVRkZja3NzUjBGQlJ5eERRVUZETEVsQlFVbHpTeXhGUVVGRlJDeEZRVUZGY2tzc1IwRkJSM0ZMTEVWQlFVVkRMRWRCUVVkQkxFVkJRVVV4U0N4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGdlF5eEpRVUZ1UXk5Q0xFdEJRVXQ1U2l4RlFVRkZha2dzVDBGQlR5eEhRVUZGWjBnc1JVRkJSV3RETEVWQlFVVXhUQ3hQUVVGUk5rd3NUMEZCVnpGTkxFVkJRVVVzUlVGQlJVRXNSVUZCUlhGTExFVkJRVVZvU0N4UFFVRlBja1FzU1VGQlNTeERRVUZETEVsQlFVbEVMRVZCUVVWakxFdEJRVXQzU2l4RlFVRkZRU3hGUVVGRmNrc3NTMEZCUzNOTExFVkJRVVYyU3l4RlFVRkZjMHNzU1VGQlNVTXNSVUZCUlRGSUxFbEJRVWt2UWl4TFFVRkxlVW9zUlVGQlJXaElMRXRCUVVzc1EwRkJRM1pFTEVWQlFVVnJSaXhKUVVGSmJFWXNSVUZCUlRCQ0xFOUJRVThzUTBGQlExb3NTMEZCUzNWTUxGVkJRVk1zUTBGQlJTeERRVUZETEU5QlFVOTJUQ3hMUVVGTGVVb3NRMEZCUXl4RlFVRkZOa0lzUlVGQlJUZE1MRlZCUVZWeFRTeFJRVUZSVWl4RlFVRkZOMHdzVlVGQlZYTkRMRVZCUTNKV2RVb3NSVUZCUlRkTUxGVkJRVlZ6VFN4SFFVRkhMRk5CUVZOMlF5eEZRVUZGY2tzc1IwRkJSeXhKUVVGSkxFbEJRVWx6U3l4RlFVRkZla29zUzBGQlN5dENMRWxCUVVrM1F5eEZRVUZGTEVkQlFVZHhReXhGUVVGRkxFVkJRVVZCTEVWQlFVVnJTU3hGUVVGRmFrZ3NUMEZCVDJwQ0xFbEJRVWtzUTBGQlF5eEpRVUZKZDBvc1JVRkJSUzlMTEV0QlFVdDNTaXhGUVVGRlF5eEZRVUZGYkVrc1IwRkJSeXhIUVVGSGRVa3NXVUZCV1hwSUxFVkJRVVZ5UXl4TFFVRkxLMHNzUjBGQlJ5eEpRVUZKYkVrc1JVRkJSV3RKTEVWQlFVVjJRaXhGUVVGRk0wY3NSMEZCUjFRc1JVRkJSV3BFTEVkQlFVZEVMRVZCUVVWMVJDeExRVUZMTEVOQlFVTnpTU3hGUVVGRk0wY3NTVUZCU1dwR0xFVkJRVVZ4U3l4RlFVRkZNMGNzVFVGQlRUTkVMRVZCUVVWMVJDeExRVUZMTEVOQlFVTnpTU3hGUVVGRk0wY3NTVUZCU1RKSExFVkJRVVZ1U3l4UFFVRlBMRU5CUVVNc1QwRkJUekZDTEVOQlFVTXNSVUZCUlc5TkxFVkJRVVUzVEN4VlFVRlZkVTBzVTBGQlUxWXNSVUZCUlRkTUxGVkJRVlZ6VFN4SFFVRkhWQ3hGUVVGRlZ5eFhRVUZYTEZOQlFWTjZReXhGUVVGRmNrc3NSVUZCUlhOTExFZEJRVWQwU3l4RlFVRkZMRWxCUVVsdFRTeEZRVUZGTEVkQlFVZHVUU3hIUVVGSExFbEJRVWtzU1VGQlNVUXNSVUZCUlN4RlFVRkZRU3hGUVVGRmMwc3NSVUZCUldoSUxFOUJRVTkwUkN4SlFVRkpMRU5CUVVNc1NVRkJTWEZETEVWQlFVVnBTU3hGUVVGRmRFc3NSMEZCUnl4SFFVRkhOa3dzUlVGQlJYUkNMRVZCUVVWRUxFVkJRVVYwU3l4SFFVRkhMRWxCUVVsRExFVkJRVVVyVFN4SlFVRkpNMHNzUlVGQlJYZEtMRVZCUVVVc1EwRkJReXhQUVVGUE5Vd3NRMEZCUXl4RlFVRnJRM05OTEVWQlFVVm9UU3hWUVVGVmNVSXNTMEZCU3l4WFFVRlhMRTlCUVU5a0xFdEJRVXQzU2l4RlFVRkZlRW9zUzBGQlMySXNSVUZCUlhGRUxFOUJRVThzUTBGQlEzUkNMRTFCUVVzc1JVRkJSMDRzVFVGQlRWb3NTMEZCUzJJc1JVRkJSV0VzUzBGQlMzZEtMRTFCUVUwc1EwRkJRM1JKTEUxQlFVc3NSVUZCUjA0c1YwRkJUU3hGUVVGUExFVkJRekZsTEc5Q1FVRnZRbk5DTEZOQlFWTjFTaXhGUVVGRmFFMHNWVUZCVlhsRExFOUJRVTlETEZWQlFWVXNWMEZCVnl4UFFVRlBia01zU1VGQlNTeEhRVUZIYzB3c1JVRkJSVGRNTEZWQlFWVXdUU3hIUVVGSExGZEJRVmNzVDBGQlQxUXNSVUZCUlRGTUxFMUJRVTEzUXl4TlFVRk5MRVZCUVVVNFNTeEZRVUZGTjB3c1ZVRkJWVEpOTEZWQlFWVmtMRVZCUVVVM1RDeFZRVUZWTUUwc1IwRkJSMklzUlVGQlJUZE1MRlZCUVZVMFRTeE5RVUZOTEZkQlFWZHlUU3hMUVVGTGQwb3NSVUZCUlN4RFFVRkJMRVZCUVVkNFNpeExRVUZMZFV3c1ZVRkJVeXhEUVVGRkxFVkJRVVZFTEVWQlFVVTNUQ3hWUVVGVk5FMHNUVUZCVFdZc1JVRkJSVGRNTEZWQlFWVTBUU3hOUVVGTlppeEZRVUZGTjB3c1ZVRkJWVFpOTEVkQlFVY3NVMEZCVXpsRExFZEJRVWRCTEVWQlFVVkJMRVZCUVVWTkxGZEJRVmNzU1VGQlNUTkxMRVZCUVVWaExFdEJRVXQzU2l4RlFVRkZPVW9zWlVGQlpUaEtMRWRCUVhGRExHTkJRVE5DZUVvc1MwRkJTM2RLTEVWQlFVVkJMRWRCUVVkNFNpeExRVUZMZFV3c1ZVRkJVeXhGUVVGVmNFMHNRMEZCUXl4RlFVRkZiVTBzUlVGQlJUZE1MRlZCUVZVNFRTeEpRVUZKYWtJc1JVRkJSVGRNTEZWQlFWVTJUU3hIUVVOMldtaENMRVZCUVVVM1RDeFZRVUZWSzAwc1IwRkJSeXhYUVVGWExFbEJRVWxvUkN4RlFVRkZMRWRCUVVkeVN5eEZRVUZGZFUwc1JVRkJSVEZNTEUxQlFVMWlMRVZCUVVVd1RTeFBRVUZQTEVsQlFVa3NTVUZCU1hCRExFVkJRVVVzUlVGQlJVRXNSVUZCUlhSTExFVkJRVVZ4UkN4UFFVRlBhVWdzU1VGQlNTeERRVUZETEVsQlFVbDJTeXhGUVVGRll5eExRVUZMZDBvc1JVRkJSWEpMTEVWQlFVVnpTeXhKUVVGSlJDeEZRVUZGTDBjc1MwRkJTeXhEUVVGRGRrUXNSVUZCUld0R0xFbEJRVWxzUml4RlFVRkZNRUlzVDBGQlR5eERRVUZETEU5QlFVODBTU3hEUVVGRExFVkJRVVU0UWl4RlFVRkZOMHdzVlVGQlZXZE9MR0ZCUVdGdVFpeEZRVUZGTjB3c1ZVRkJWU3ROTEVkQlFVZHNRaXhGUVVGRk4wd3NWVUZCVldsT0xGRkJRVkVzVjBGQlZ5eEpRVUZKYkVRc1JVRkJSU3hIUVVGSGNrc3NSVUZCUlhWTkxFVkJRVVV4VEN4TlFVRk5ZaXhGUVVGRk1FMHNUMEZCVHl4SlFVRkpMRWxCUVVsd1F5eEZRVUZGTEVWQlFVVkJMRVZCUVVWMFN5eEZRVUZGY1VRc1QwRkJUMmxJTEVsQlFVa3NRMEZCUXl4SlFVRkpka3NzUlVGQlJXTXNTMEZCUzNkS0xFVkJRVVZ5U3l4RlFVRkZjMHNzU1VGQlNVUXNSVUZCUlM5SExFdEJRVXNzUTBGQlEzWkVMRVZCUVVWclJpeEpRVUZKTDBJc1JVRkJSWEpETEV0QlFVdGtMRWxCUVVrc1EwRkJReXhQUVVGUExFbEJRVWwxVFN4RlFVRkZha01zUlVGQlJTeEZRVUZGT0VJc1JVRkJSVGRNTEZWQlFWVnBUaXhSUVVGUmNFSXNSVUZCUlRkTUxGVkJRVlZwVGl4UlFVRlJjRUlzUlVGQlJUZE1MRlZCUVZWclRpeExRVUZMTEZkQlFWY3NTVUZCU1c1RUxFVkJRVVVzUjBGQlIzSkxMRVZCUVVWMVRTeEZRVUZGTVV3c1RVRkJUV0lzUlVGQlJUQk5MRTlCUVU4c1NVRkJTU3hKUVVGSmNFTXNSVUZCUlN4RlFVRkZRU3hGUVVGRmRFc3NSVUZCUlhGRUxFOUJRVTlwU0N4SlFVRkpSQ3hGUVVGRkwwY3NTMEZCUzNwRExFdEJRVXQzU2l4RlFVRkZja3NzUlVGQlJYTkxMRWxCUVVseVJpeExRVUZMTEU5QlFVOHNTVUZCU1hGSUxFVkJRVVZxUXl4RlFVRkZMRVZCUTNabE9FSXNSVUZCUlRkTUxGVkJRVlZyVGl4TFFVRkxja0lzUlVGQlJUZE1MRlZCUVZWclRpeExRVUZMY2tJc1JVRkJSVGRNTEZWQlFWVnRUaXhQUVVGUExGZEJRVmNzU1VGQlNYQkVMRVZCUVVVc1IwRkJSM0pMTEVWQlFVVjFUU3hGUVVGRk1Vd3NUVUZCVFdJc1JVRkJSVEJOTEU5QlFVOHNTVUZCU1N4SlFVRkpjRU1zUlVGQlJTeEZRVUZGUVN4RlFVRkZkRXNzUlVGQlJYRkVMRTlCUVU5cFNDeEpRVUZKUkN4RlFVRkZMMGNzUzBGQlMwb3NSVUZCUlhKRExFdEJRVXRCTEV0QlFVdDNTaXhGUVVGRmNrc3NSVUZCUlhOTExFMUJRVTBzVDBGQlR5eEpRVUZKWjBNc1JVRkJSV3BETEVWQlFVVXNSVUZCUlRoQ0xFVkJRVVUzVEN4VlFVRlZiVTRzVDBGQlQzUkNMRVZCUVVVM1RDeFZRVUZWYlU0c1QwRkJUM1JDTEVWQlFVVTNUQ3hWUVVGVmIwd3NVVUZCVVN4VFFVRlRja0lzUlVGQlJYSkxMRWRCUVVjc1NVRkJTWE5MTEVWQlFVVnBReXhGUVVGRk1Vd3NUVUZCVFhsS0xFVkJRVVZ2UXl4UFFVRlBMRWxCUVVrc1NVRkJTVE5OTEVWQlFVVXNSVUZCUlVFc1JVRkJSWFZMTEVWQlFVVnFTQ3hQUVVGUGRFUXNTVUZCU1N4RFFVRkRMRWxCUVVseFF5eEZRVUZGZGtJc1MwRkJTM2RLTEVWQlFVVkRMRVZCUVVWMlN5eEpRVUZKYzBzc1JVRkJSVGRLTEV0QlFVdFNMRVZCUVVWclJDeEZRVUZGY2tNc1MwRkJTM1ZDTEVkQlFVZEJMRVZCUVVVMlF5eEpRVUZKY0VVc1MwRkJTeXhEUVVGRExFVkJRVVZ6VEN4RlFVRkZOMHdzVlVGQlZXOU1MRkZCUVZGVExFVkJRVVUzVEN4VlFVRlZiMHdzVVVGRGNGaFRMRVZCUVVVM1RDeFZRVUZWZVUwc1NVRkJTU3hUUVVGVE1VTXNSVUZCUlhKTExFZEJRVWNzU1VGQlNYTkxMRVZCUVVVc1NVRkJTU3RDTEVWQlFVZG9ReXhIUVVGclJpeFBRVUV2UlhoS0xFdEJRVXRpTEVkQlFVZHpTeXhGUVVGRlJDeEZRVUZGY2tzc1JVRkJSWE5MTEVWQlFVVTNTU3hOUVVGTmVrSXNSVUZCUlRSRExFdEJRVXN3U0N4RlFVRkZOMGtzVFVGQlRYcENMRVZCUVVWaExFdEJRVXQzU2l4RlFVRkZRU3hGUVVGRlRTeFpRVUZaVEN4RlFVRkZla29zUzBGQlMzVk1MRlZCUVZNc1JVRkJWWFpNTEVsQlFVa3NSVUZCUlhOTUxFVkJRVVUzVEN4VlFVRlZlVTBzU1VGQlNWb3NSVUZCUlRkTUxGVkJRVlY1VFN4SlFVRjVSVm9zUlVGQlJUZE1MRlZCUVZVNFJDeEpRVUZKTEZOQlFWTnBSeXhIUVVGSExFZEJRVWRCTEVWQlFVVjRTaXhMUVVGTGQwb3NSVUZCUlVFc1JVRkJSVTBzV1VGQldTeFBRVUZQZWtnc1JVRkJSWEpETEV0QlFVdDNTaXhGUVVGRkxFVkJRVVU0UWl4RlFVRkZOMHdzVlVGQlZUaEVMRWxCUVVrclNDeEZRVUZGTjB3c1ZVRkJWVGhFTEVsQlFVa3JTQ3hGUVVGRk4wd3NWVUZCVlRaRUxFbEJRVWtzVTBGQlUydEhMRWRCUVVjc1QwRkJUMEVzUlVGQlJVMHNZVUZCWVRsS0xFdEJRVXQzU2l4RFFVRkRMRVZCUVVVNFFpeEZRVUZGTjB3c1ZVRkJWVFpFTEVsQlFVbG5TU3hGUVVGRk4wd3NWVUZCVlRaRUxFbEJRemRoWjBrc1JVRkJSVGRNTEZWQlFWVnZUaXhIUVVGSExGTkJRVk55UkN4RlFVRkZja3NzUlVGQlJYTkxMRVZCUVVWMlN5eEZRVUZGY1VNc1IwRkJSeXhKUVVGSmQwb3NSVUZCUlZjc1JVRkJSVEZNTEUxQlFVMHJTeXhGUVVGRll5eFBRVUZQTEVsQlFVa3NTVUZCU1doS0xFVkJRVVVzUlVGQlJVRXNSVUZCUld0SkxFVkJRVVYyU1N4UFFVRlBTeXhKUVVGSkxFTkJRVU1zU1VGQlNYQkNMRVZCUVVWNlFpeExRVUZMZDBvc1JVRkJSWFZDTEVWQlFVVnNTU3hKUVVGSk1VUXNSVUZCUlRKT0xFZEJRVWQwUkN4SFFVRkhReXhGUVVGRk9Vb3NTMEZCUzFJc1JVRkJSU3hGUVVGRmMwTXNSVUZCUlRKRExFdEJRVXR3UlN4TFFVRkxZaXhGUVVGRlJDeEZRVUZGVXl4TFFVRkxVaXhGUVVGRkxFVkJRVVZyUkN4RlFVRkZja01zUzBGQlMzbENMRWRCUVVkR0xFZEJRVWR5UXl4RlFVRkZVeXhMUVVGTFVpeEZRVUZGTEVWQlFVVnpReXhGUVVGRllpeFBRVUZQZWtJc1JVRkJSVFJPTEVsQlFVa3NRMEZCUXl4RlFVRkZla0lzUlVGQlJUZE1MRlZCUVZWMVRpeG5Ra0ZCWjBJeFFpeEZRVUZGTjB3c1ZVRkJWVzlPTEVkQlFVZDJRaXhGUVVGRk1rSXNhMEpCUVd0Q0xGTkJRVk42UkN4RlFVRkZja3NzUlVGQlJYTkxMRVZCUVVWMlN5eEZRVUZGY1VNc1JVRkJSWGRLTEVWQlFVVnNTU3hIUVVGSExFdEJRVXN4UkN4RlFVRkZkMHdzVDBGQlQzaE1MRVZCUVVVclRpeE5RVUZOTEVOQlFVTXNTVUZCU1hwTUxFVkJRVVYwUXl4RlFVRkZjMHNzUlVGQlJTeEhRVUZIYUVrc1JVRkJSWE5LTEVWQlFVVjBRaXhGUVVGRk9Vb3NTMEZCUzFJc1IwRkJSeXhIUVVGSGMwTXNTVUZCU1N0SUxFVkJRVVZ5U3l4SFFVRkhhVVFzUlVGQlJXSXNSMEZCUjNOQ0xFbEJRVWxCTEVWQlFVVXNTVUZCU1RKSExFVkJRVVZ5U3l4SFFVRkhSQ3hGUVVGRlV5eExRVUZMVWl4RlFVRkZNRVFzUlVGQlJYUkNMRWxCUVVselFpeEZRVUZGTTBRc1JVRkJSVk1zUzBGQlMxSXNSMEZCUnl4RFFVRkRhVVFzUlVGQlJTeE5RVUZSTWtrc1IwRkJSek5KTEVWQlFVVXNUVUZCVVZNc1IwRkJSekpITEVWQlFVVXdReXhKUVVGSmJrSXNSVUZCUld4SkxFVkJRVVVzUlVGRE9VWXNTVUZCU1hOTExFVkJRVWNzUTBGQlF5eExRVUZQTEUxQlFVMHNTMEZCU3l4TlFVRk5MRXRCUVVzc1RVRkJUU3hMUVVGTExFMUJRVTBzUzBGQlN5eE5RVUZOTEV0QlFVc3NUVUZCVFN4TFFVRlBMRkZCUVZFc1NVRkJTU3hOUVVGTkxFdEJRVXNzVDBGQlR5eEpRVUZKTEZkQlFWZERMRVZCUVVjc1EwRkJReXhKUVVGSkxFOUJRVmRETEVWQlFVY3NRMEZCUlN4RlFVRkRReXhGUVVGRkxFdEJRVXNzVTBGQlUwTXNSVUZCUnk5RUxFVkJRVVZ5U3l4UlFVRkhMRWxCUVZOQkxFbEJRVWxCTEVWQlFVVXNSMEZCUjNGUExFbEJRVXR5VHl4RlFVRkZhMDhzUlVGQlIyeFBMRWRCUVVjc1NVRkJTU3hKUVVGSmMwc3NSVUZCUlN4SFFVRkhka3NzUlVGQlJTeEZRVUZGUVN4RlFVRkZjMHNzUlVGQlJXaElMRTlCUVU5MFJDeEhRVUZITEVWQlFVVXNRMEZCUXl4SlFVRkpjVU1zUlVGQlJXbEpMRVZCUVVWMFN5eEhRVUZITmt3c1JVRkJSVGRNTEVWQlFVVXNSVUZCUlhOTExFVkJRVVZvU0N4UFFVRlBTeXhGUVVGRmEwa3NSVUZCUlhaQ0xFVkJRVVYwU3l4RlFVRkZMRWRCUVVjc1JVRkJSWFZETEVWQlFVVjJReXhGUVVGRkxFVkJRVVZ6U3l4RlFVRkZhRWdzVDBGQlQybE1MRVZCUVVWb1RTeEZRVUZGSzBnc1JVRkJSWFJMTEVWQlFVVXNSMEZCUnl4RlFVRkZkMDhzUlVGQlJXNU5MRWRCUVVjc1JVRkJSVUVzUjBGQlN5eEZRVUZHUVN4SlFVRk5MRVZCUVVWelFpeEhRVUZITEVWQlFVVkJMRWRCUVVzc1IwRkJSa0VzU1VGQlR5eEZRVUZGTkVzc1IwRkJSeXhGUVVGRlFTeEhRVUZITEVkQlFVZG9UU3hKUVVGSlowMHNSVUZCUlN4SFFVRkhNVU1zU1VGQlNXeEpMRVZCUVVVc1MwRkJTelJITEVWQlFVVm9TQ3hMUVVGTGRFUXNSVUZCUlhWUExFZEJRVWQyVHl4RlFVRkZiME1zUjBGQlIzQkRMRVZCUVVVd1JDeEpRVUZKTEVkQlFVY3hSQ3hGUVVGRmMwOHNTVUZCU1N4SFFVRkhMRU5CUVVNc1QwRkJUMmhGTEVWQlFVVnJSU3hMUVVGTExFZEJRVWNzUTBGQlF5eFRRVUZUUXl4RlFVRkhjRVVzUjBGQlJ5eEpRVUZKY2tzc1JVRkJSWEZMTEVWQlFVVm9TQ3hQUVVGUGFVZ3NSVUZCUlN4RlFVRkZkRXNzUlVGQlJTeEZRVUZGYzBzc1JVRkJSU3hGUVVGRlFTeEZRVUZGYjBVc1MwRkJTME1zVFVGQlRYSkZMRWxCUVVrc1IwRkJSeXhMUVVGTGMwVXNVVUZCVVhaRkxFVkJRVVZ5U3l4RlFVRkZMRTFCUVUxelN5eEhRVUZITEVkQlFVY3NTMEZCUzNORkxGRkJRVkYyUlN4RlFVRkZja3NzUlVGQlJTeEpRVUZKYzBzc1JVRkJSU3hGUVVGRlFTeEZRVUZGTEVkQlFVY3NTVUZCU1haTExFVkJRVVVzU1VGQlNUaFBMRmRCUVZkMlJTeEhRVUZIYkVrc1JVRkJSU3hGUVVFNFFpeFBRVU40TmtJc1UwRkJXV2xKTEVWQlFVVnlTeXhIUVVGSExGTkJRVk56U3l4RlFVRkZaMFVzUjBGQlJ5eExRVUZMZGs4c1JVRkJSWE5MTEVWQlFVVm9TQ3hSUVVGUkxFTkJRVU1zU1VGQlNXdE1MRVZCUVVWc1JTeEZRVUZGZVVVc1QwRkJUeTlQTEV0QlFVdG5VQ3hGUVVGSFdpeEZRVUZGU1N4SFFVRkhMRWRCUVVjc1RVRkJUVkVzUlVGQlJ5eFBRVUZQUVN4RlFVRkhMRWxCUVVrc1kwRkJZME1zUzBGQlMxUXNSMEZCUnl4TlFVRk5ia1lzVFVGQlRTeHZRMEZCYjBOdFJpeEZRVUZITEVOQlFVTXNUMEZCVDBRc1EwRkJReXhEUVVGRFJDeEpRVUZMTEVsQlFVa3NTVUZCU1hSUExFVkJRVVVzU1VGQlNTeERRVUZETEVsQlFVbHhReXhGUVVGRmEwa3NSMEZCUnl4SFFVRkhjMElzUlVGQlJYUkNMRVZCUVVVc1IwRkJSelZITEVWQlFVVTBSeXhGUVVGRkxFbEJRVWxvU1N4RlFVRkZaMGtzUlVGQlJTeEpRVUZKTEVkQlFVY3NTMEZCUzJoSkxFbEJRVWtzU1VGQlNVWXNSVUZCUlN4TlFVRk5jRU1zUlVGQlJXOURMRWRCUVVjc1JVRkJSWGRLTEVkQlFVY3NSMEZCUnl4SlFVRkpiRWtzU1VGQlNURkVMRVZCUVVVMFRDeEhRVUZITEVWQlFVVXNTVUZCU1d4SkxFZEJRVWNzUjBGQlJ5eEpRVUZKY0VJc1IwRkJSM1JETEVWQlFVVXdSQ3hIUVVGSExFVkJRVVVzU1VGQlNYQkNMRWRCUVVjc1EwRkJReXhEUVVSMWEwSXlUU3hEUVVGSE5VVXNSMEZCUlN4VFFVRlRkVUlzUjBGQlJ6ZE1MRVZCUVVWeFF5eExRVUZMZDBvc1EwRkJReXhKUVVGVk4wd3NSVUZCUlcxUUxGTkJRVk1zUlVGQlJUbE5MRVZCUVVVc1EwRkZPVGRDTEZOQlFWTnBUU3hKUVVGTExFbEJRVWxHTEVWQlFVVXNRMEZCUTBFc1JVRkJSU3hEUVVGQkxFVkJRVWNzU1VGQlNTeEpRVUZKT1VRc1JVRkJSU3hwUlVGQmFVVlZMRTFCUVUwc1NVRkJTUzlMTEVWQlFVVXNRMEZCUXl4TlFVRk5MRXRCUVVzc1RVRkJUU3hOUVVGTkxFMUJRVTF6U3l4RlFVRkZMRVZCUVVVc1JVRkJSVUVzUlVGQlJVRXNTVUZCU1N4RFFVRkRMRWxCUVVsMlN5eEZRVUZGYzBzc1JVRkJSVGhGTEU5QlFVOXVVQ3hGUVVGRmMwc3NSMEZCUjFNc1RVRkJUU3hMUVVGTGJVUXNSVUZCUnpWRUxFZEJRVWQyU3l4RlFVRkZMRWxCUVVrc1NVRkJTWEZETEVWQlFVVXNSVUZCUlVFc1JVRkJSWEpETEVWQlFVVnpSQ3hQUVVGUGFrSXNTVUZCU1N4RFFVRkRMRWxCUVVsM1NpeEZRVUZGTjB3c1JVRkJSWEZETEZGQlFVY3NTVUZCVXl0TUxFVkJRVVYyUXl4TFFVRkxkVU1zUlVGQlJYWkRMRWRCUVVkNFNpeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVWUkxFVkJRVVVzTWtKQlFUQkNMRmRCUVZVc1VVRkJSeXhIUVVGUlFTeEZRVUZGTEhOQ1FVRnhRaXhYUVVGWkxGRkJRVU1zUjBGQlVVRXNSVUZCUlN4cFEwRkJhVU1zUTBGQlEzZE5MRWxCUVVrc1JVRkJSVU1zUjBGQlJ5eEZRVUZGUXl4TlFVRk5MRVZCUVVWRExFZEJRVWNzUlVGQlJVTXNSMEZCUnl4RlFVRkZReXhIUVVGSExFVkJRVVZETEVkQlFVY3NSVUZCUlVNc1IwRkJSeXhGUVVGRlF5eExRVUZMTEVWQlFVVkRMRWRCUVVjc1JVRkJSVU1zUjBGQlJ5eEhRVUZIUXl4SFFVRkhMRWRCUVVkRExFZEJRVWNzUjBGQlIwTXNSMEZCUnl4SFFVRkhReXhIUVVGSExFZEJRVWRETEVkQlFVY3NSMEZCUjBNc1IwRkJSeXhIUVVGSFF5eEhRVUZITEVkQlFVZERMRWRCUVVjc1IwRkJSME1zUjBGQlJ5eEhRVUZIUXl4SFFVRkhMRk5CUVVrc1IwRkJVVFZPTEVWQlFVVXNaME5CUVdkRExFTkJRVU4zVFN4SlFVRkpMRVZCUVVWeFFpeEhRVUZITEVWQlFVVm1MRWRCUVVjc1JVRkJSV2RDTEVkQlFVY3NSVUZCUlVNc1IwRkJSeXhGUVVGRlF5eEhRVUZITEVWQlFVVnFRaXhIUVVGSExGRkJRVWNzUjBGRGJHeENMMDBzUlVGQlJTdzBRMEZCTWtNc1UwRkJVM2xJTEVkQlFVY3NUMEZCVDBFc1IwRkJSeXhMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSMEZCUnl4TFFVRkxMRVZCUVVVc1MwRkJTeXhIUVVGSExFdEJRVXNzUjBGQlJ5eExRVUZMTEVWQlFVVXNTMEZCU3l4SFFVRkhMRXRCUVVzc1IwRkJSeXhQUVVGUExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRWRCUVVjc1MwRkJTeXhIUVVGSExFOUJRVThzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4SFFVRkhMRXRCUVVzc1IwRkJSeXhQUVVGUExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRWRCUVVjc1QwRkJUeXhGUVVGRkxGRkJRVkVzVDBGQlR5eEZRVUZGTEZGQlFVVXNSMEZCVVhwSUxFVkJRVVVzTmtOQlFUWkRMRTlCUVVVc1IwRkJVVUVzUlVGQlJTeHRRMEZCYlVNc01FSkJRWE5DTEVkQlFWRkJMRVZCUVVVc2JVTkJRVzFETERKQ1FVRjFRaXhIUVVONlkwRXNSVUZCUlN4dFEwRkJiVU1zTUVKQlFYTkNMRWRCUVZGQkxFVkJRVVVzYlVOQlFXMURMRmxCUVZNc1IwRkJVVUVzUlVGQlJTeHRRMEZCYlVNc05FSkJRWGRDTEVkQlFWRkJMRVZCUVVVc2JVTkJRVzFETERKQ1FVRjFRaXhIUVVGUlFTeEZRVUZGTEdsRFFVRnBReXhoUVVGUkxFZEJRVkZCTEVWQlFVVXNhVU5CUVdsRExHRkJRVkVzUjBGQlVVRXNSVUZCUlN4cFEwRkJhVU1zWjBKQlFWY3NSMEZCVVVFc1JVRkJSU3hwUTBGQmFVTXNaMEpCUVZjc1IwRkROV05CTEVWQlFVVXNhVU5CUVdsRExITkNRVUZwUWl4SFFVRlJRU3hGUVVGRkxHbERRVUZwUXl4M1FrRkJiVUlzUjBGQlVVRXNSVUZCUlN4cFEwRkJhVU1zZVVKQlFYTkNMRWRCUVZGQkxFVkJRVVVzYVVOQlFXbERMSGRDUVVGdFF5eEhRVUZSTEVsQlFVbFFMRVZCUVVVc1JVRkJSWGRQTEVWQlFVVXNSVUZCZFVnc1UwRkJVME1zUlVGQlIzcEhMRWRCUVVjc1NVRkJTWEpMTEVWQlFVVnhTeXhKUVVGSkxFVkJRVVZCTEVWQlFVVnhSU3hMUVVGTFF5eFBRVUZQZEVVc1JVRkJSWEpMTEVkQlFVY3NZMEZCWXl4RlFVRkZjVU1zUlVGQlJYSkRMRVZCUVVVMlVTeEZRVUZGZUVjc1EwRkJReXhEUVVGMVF5eFRRVUZUTUVjc1JVRkJSVEZITEVkQlFVY3NTVUZCU1hKTExFVkJRVVVzUlVGQlJYRkxMRVZCUVc5Q1F5eEhRVUZzUWtRc1JVRkJSWEZGTEV0QlFVdHpReXhKUVVGSk0wY3NUVUZCWVN4RlFVRkZRU3hGUVVGRmNVVXNTMEZCUzBNc1QwRkJUM1JGTEVWQlFVVkRMRWRCUVVjc1dVRkJXVVFzUzBGQlN5eEZRVUZGY2tzc1NVRkJTWEZMTEVkQlFVZEJMRWxCUVVrc1JVRkJaU3haUVVGaVF5eEZRVUZYTEVsQlFWQkJMRWxCUVVrc1RVRkJiMEpCTEVWQlFVVXNSVUZCVFN4aFFVRktSQ3hKUVVGdFFrRXNSVUZCUlN4TFFVRkxhRWtzUlVGQlJXbEpMRVZCUVVWMVJ5eEZRVUZGZUVjc1EwRkJReXhEUVVNMWNFSXNVMEZCVXpSSExFVkJRVWMxUnl4SFFVRkhMRWxCUVVseVN5eEZRVUZGTEVWQlFVVnhTeXhGUVVGclFubEhMRVZCUVdoQ2VrY3NSVUZCUlN4RlFVRkZjVVVzUzBGQlMzTkRMRWxCUVVrelJ5eEpRVUZUUVN4RlFVRkZhRWtzUlVGQlJTeEpRVUZKYVVrc1JVRkJSWFZITEVWQlFVVTNVU3hKUVVGSkxFZEJRVWR4U3l4RlFVRkZMRWRCUVVkRExFVkJRVVZCTEVWQlFVVkVMRVZCUVVVc1dVRkJXVU1zU1VGQlNVUXNSVUZCUlN4WlFVRlpRU3hMUVVGTGFFa3NSVUZCUldkSkxFVkJRVVYzUnl4RlFVRkZka2NzUTBGQlF5eERRVU4yU0N4VFFVRlRORWNzUlVGQlJ6ZEhMRWRCUVVjc1NVRkJTWEpMTEVWQlFVVXNSVUZCUlhGTExFVkJRVVVzUlVGQlJTeEZRVUZYTEVkQlFVY3NTMEZCV2tFc1JVRkJSWEpMTEVkQlFVZHhTeXhGUVVGRlFTeEhRVUZYTEVWQlFVVXNSVUZCUlVFc1JVRkJSV2hKTEVWQlFVVjNUeXhGUVVGRkxFZEJRVWRCTEVWQlFVVXNSVUZCUlhoUExFVkJRVVVzYVVKQlFXbENMRWRCUVVjNFR5eE5RVUZOT1Vjc1IwRkJSM2RITEVWQlFVVXNSVUZCUlhoUExFVkJRVVVzWjBKQlFXZENMRWRCUVVjc2NVSkJRWE5DWjBrc1JVRkJSWGRITEVWQlFVVXNSVUZCUlhoUExFZEJRVWR5UXl4SFFVRkhMRWRCUVVjc1kwRkJZeXhQUVVGUExFZEJRVWNzYzBKQlFYVkNjVXNzUlVGQlJVRXNSVUZCUlhGRkxFdEJRVXN3UXl4TlFVRk5MMGNzUlVGQlJYRkZMRXRCUVVzeVF5eEpRVUZKTEVkQlFVY3NUVUZCVFZJc1JVRkJSU3hGUVVGRmVFOHNSMEZCUjNKRExFZEJRVWNzUjBGQlIzRkxMRXRCUVVzc1RVRkJUU3hEUVVGRExFbEJRVWxETEVWQlFVVnZSU3hMUVVGTFF5eE5RVUZOUkN4TFFVRkxOMFVzU1VGQlNWRXNSMEZCUjNGRkxFdEJRVXMwUXl4TFFVRkxha2dzUjBGQlIzRkZMRXRCUVVzeVF5eEpRVUZKTEVkQlFVY3ZSeXhIUVVFeVFpeFhRVUY0UWtRc1JVRkJSWEZGTEV0QlFVc3dReXhOUVVGTkxGRkJRVkV2Unl4UFFVRnJRa01zUlVGQlJYVkhMRVZCUVVVc1JVRkJSWGhQTEVkQlFVZHlReXhIUVVGSExFZEJRVWR6U3l4RlFVRkZMRXRCUVVzc1IwRkJTeXhSUVVGR1JDeExRVUZoTEVOQlFVTXNRMEZCUXl4RFFVTm9XaXhUUVVGVGEwZ3NSVUZCUjJ4SUxFZEJRVWNzU1VGQlNYSkxMRVZCUVVVc1JVRkJSWEZMTEVWQlFVVXNSVUZCUlN4RlFVRlhMRWRCUVVjc1MwRkJXa0VzUlVGQlJYSkxMRWRCUVVkeFN5eEZRVUZGUVN4SFFVRlhkMGNzUlVGQlJTeEZRVUZGTEVWQlFVVjRSeXhGUVVGRkxFVkJRVVVzVjBGQlYyaEpMRVZCUVVVc1QwRkJUeXhIUVVGSE9FOHNUVUZCVFRsSExFZEJRVWQzUnl4RlFVRkZMRmRCUVZkNFR5eEZRVUZGTEdkQ1FVRm5RaXhIUVVGSExITkNRVUYxUW1kSkxFVkJRVVYzUnl4SFFVRkhOMUVzUjBGQlJ5eEhRVUZITEdOQlFXTXNSVUZCUlhGRExFVkJRVVVzVDBGQlR5eEhRVUZITEhWQ1FVRjNRbWRKTEVWQlFVVkJMRWRCUVVkeFJTeExRVUZMTWtNc1NVRkJTU3hIUVVGSExFMUJRVTFTTEVkQlFVYzNVU3hIUVVGSExFZEJRVWR4U3l4RlFVRkZMR05CUVdNc1JVRkJSV2hKTEVWQlFVVm5TU3hKUVVGSkxFMUJRVTBzUTBGQlF5eEpRVUZKUXl4RlFVRkZSQ3hGUVVGRmRFc3NSVUZCUlN4RlFVRkZMRWRCUVVjc1IwRkJSM1ZMTEVWQlFVVXNTMEZCU3l4SFFVRkhRU3hIUVVGSExFdEJRVXQyU3l4SFFVRkhRU3hKUVVGSmRVc3NSMEZCUnl4UFFVRlBMRXRCUVVzc1JVRkJSVUVzU1VGQlNTeExRVUZMZGtzc1IwRkJSM1ZMTEVkQlFVY3NSVUZCUlhaTExFbEJRVWx6U3l4SFFVRkhjVVVzUzBGQlN6SkRMRWxCUVVrc1IwRkJSM1JTTEVkQlFVYzRVU3hIUVVGSE4xRXNSMEZCUnl4SFFVRkhSQ3hGUVVGRkxFMUJRVTBzUjBGQlJ5eFJRVUZSYzBzc1JVRkJSU3hYUVVGWExFVkJRVVZvU1N4RlFVRkZMR2xDUVVGcFFtZEpMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRM1ppTEZOQlFWTnRTQ3hGUVVGRmJrZ3NSMEZCUnl4SlFVRkpja3NzUlVGQlJYRkxMRVZCUVVWdlNDeFhRVUZYTEVkQlFVZHVTQ3hGUVVGRlJDeEZRVUZGYjBnc1YwRkJWeXhIUVVGSE1WSXNSVUZCUlhOTExFVkJRVVZ2U0N4WFFVRlhMRWRCUVVkeVVDeEZRVUZGYVVrc1JVRkJSVzlJTEZkQlFWY3NSMEZCUjNCUUxFVkJRVVZuU1N4RlFVRkZiMGdzVjBGQlZ5eEpRVUZKY0Vnc1JVRkJSVzlJTEZkQlFWY3NTVUZCU1N4SlFVRkpjRWdzUlVGQlJXOUlMRmRCUVZjc1NVRkJTU3hMUVVGTGNFZ3NSVUZCUlc5SUxGZEJRVmNzU1VGQlNTeE5RVUZOTEVWQlFVVmFMRVZCUVVVM1VTeEhRVUZIYzBzc1IwRkJSeXhKUVVGSmRrc3NSMEZCUnl4TFFVRkxjVU1zUjBGQlJ5eE5RVUZOTEVOQlFVTXNRMEZCYzBNc1UwRkJVM05RTEVWQlFVVnlTQ3hGUVVGRmNrc3NSMEZCUnl4UFFVRlBMRmRCUVZkQkxFZEJRVWR4U3l4SlFVRkpMRVZCUVVVc1EwRkJjVU1zVTBGQlUzTklMRVZCUVVWMFNDeEZRVUZGY2tzc1IwRkJSeXhKUVVGSmMwc3NSVUZCU1N4WFFVRkdkRXNzUlVGQmFVVXNUMEZCY0VSelN5eEpRVUZsZEVzc1IwRkJSMEVzU1VGQlNTeEZRVUZGTEVsQlFYQkNjVXNzUlVGQlN5eEhRVUZHUVN4SlFVRk5MRXRCUVd0Q2Nrc3NSVUZCUlVFc1JVRkJSU3hKUVVGSkxFbEJRVWx4U3l4RlFVRkZjVWdzUlVGQlJYSklMRVZCUVVWeVN5eEhRVUZWYzBzc1IwRkJSMFFzUlVGQlJVRXNRMEZCUXl4RFFVTjZZU3hUUVVGVGRVZ3NSVUZCUjNaSUxFVkJRVVZ5U3l4RlFVRkZjMHNzUjBGQlJ5eEpRVUZKZGtzc1JVRkJSVU1zUjBGQlJ5eEhRVUZITEU5QlFVOXpTeXhGUVVGRlJDeEhRVUZITEVWQlFVVjBTeXhIUVVGSFF5eEhRVUZITEVWQlFVVnhTeXhKUVVGSkxFbEJRVWwwU3l4RlFVRkZMRU5CUVhORExGTkJRVk00VWl4RlFVRkhlRWdzUlVGQlJYSkxMRWRCUVVjc1QwRkJUemhTTEVWQlFVZDZTQ3hGUVVGRmNrc3NSVUZCUlRKU0xFVkJRVVVzUTBGQmQwTXNVMEZCVTBjc1JVRkJSM3BJTEVWQlFVVnlTeXhGUVVGRmMwc3NSMEZCUnl4SlFVRkpka3NzU1VGQlRTeEZRVUZHYzBzc1IwRkJTeXhQUVVGUFF5eEhRVUZIUkN4SlFVRkpMRVZCUVVWeVN5eEhRVUZITEVsQlFVbEVMRVZCUVVWRExFbEJRVWtzUlVGQlJVUXNSVUZCUlN4RFFVRjNReXhUUVVGVFoxTXNSVUZCUnpGSUxFZEJRVWNzU1VGQlNYSkxMRVZCUVVVc1IwRkJSM0ZMTEVkQlFVY3NTVUZCU1N4RlFVRkZReXhGUVVGRlJDeEpRVUZKTEVkQlFVY3NTVUZCWlN4UFFVRllRU3hIUVVGSExGRkJRV1VzUzBGQlMwTXNSVUZCUlVRc1JVRkJSVEpJTEVsQlFVbERMRWxCUVZOcVV5eEZRVUZGTEVkQlFVZHpTeXhGUVVGRmRFc3NSVUZCUlRCUExFdEJRVXN5UXl4SlFVRkpMRWRCUVVjc1MwRkJTMmhJTEVWQlFVVnlTeXhGUVVGRk1FOHNTMEZCU3pKRExFbEJRVWtzUlVGQlJTOUhMRVZCUVVVc1RVRkJUVVFzUlVGQlJYRkZMRXRCUVVzeVF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVTXZZU3hUUVVGVFlTeEZRVUZITjBnc1JVRkJSWEpMTEVkQlFVY3NTVUZCU1hOTExFVkJRVVVzUjBGQlIzUkxMRWRCUVVjc1NVRkJTU3hGUVVGRlJDeEZRVUZGUXl4SlFVRkpMRWRCUVVjc1MwRkJaME1zVDBGQk0wSnhTeXhGUVVGRkxGbEJRV01zVVVGQlJuSkxMRWRCUVZkeFN5eEZRVUZUTEUxQlFVMTBTeXhGUVVGRmMwc3NSVUZCUlRKSUxFbEJRVWxETEVsQlFWTXpTQ3hGUVVGRkxFZEJRVWQyU3l4RlFVRkZkVXNzUlVGQlJXOUZMRXRCUVVzeVF5eEpRVUZKTEVkQlFVY3NUVUZCVFdoSUxFVkJRVVZETEVWQlFVVnZSU3hMUVVGTE1rTXNTVUZCU1N4RlFVRkZkRklzUlVGQlJTeFBRVUZQYzBzc1JVRkJSU3hwUWtGQmFVSXNRMEZCZFVNc1UwRkJVemhJTEVWQlFVYzVTQ3hGUVVGRmNrc3NSMEZCUnl4UFFVRlBWeXhQUVVGUE9Fd3NZVUZCWVhCRExFbEJRVWtzUlVGQlJTeEpRVUZKUVN4SlFVRkpMRVZCUVVVc1NVRkJTVUVzU1VGQlNTeEhRVUZITEVsQlFVbEJMRWxCUVVrc1IwRkJSeXhKUVVGSmNrc3NTVUZCU1N4RlFVRkZMRWxCUVVsQkxFbEJRVWtzUlVGQlJTeEpRVUZKUVN4SlFVRkpMRWRCUVVjc1NVRkJTVUVzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZEZGxZc1UwRkJVMjlUTEVWQlFVVXZTQ3hGUVVGRmNrc3NSMEZCUnl4VFFVRlRjMHNzUlVGQlJXeEpMRVZCUVVWM1NpeEhRVUZ2UWl4UFFVRnFRbmhLTEVWQlFVVkJMRVZCUVVWNlFpeFBRVUZQZVVJc1IwRkJSeXhIUVVGVmQwb3NSVUZCUlN4VlFVRlZPVVFzVFVGQlRURkdMRVZCUVVWcFFpeFJRVUZSYWtJc1JVRkJSVUVzUTBGQlF5eERRVUZETEVkQlFVY3NVMEZCVTNCRExFVkJRVVVzVFVGQlRTeEhRVUZITUZJc1JVRkJSWEpJTEVWQlFVVnlTeXhIUVVGSExFbEJRVWxFTEVkQlFVZHpTeXhKUVVGSkxFZEJRVWR5U3l4SFFVRkhMRXRCUVVzc1JVRkJSU3hUUVVGM1NpeFBRVUZxU1hGTExFZEJRVXNzVTBGQlJrRXNSMEZCV1N4UlFVRlJkRXNzUlVGQlJTeFRRVUYyUTBNc1JVRkJSVUVzUjBGQlJ5eEhRVUZITEU5QlFYbERSQ3hIUVVGSExGRkJRVkZETEVWQlFVVkJMRWRCUVVjc1JVRkJSU3hMUVVGTGNVc3NTVUZCU1hSTExFZEJRVWN5VHl4TFFVRkxReXhOUVVGTmRFVXNSVUZCUlN4TFFVRkxRU3hIUVVGSExFdEJRVXNzUzBGQlMzUkxMRWxCUVVsRExFZEJRVWN3VHl4TFFVRkxReXhOUVVGTk5VOHNSVUZCUlN4TFFVRkxRU3hIUVVGSExFdEJRVmwxU3l4RlFVRkZkRXNzUlVGQlJTeEhRVUZIYzBzc1JVRkJSWFpMTEVWQlFVVkRMRWRCUVVkelN5eEZRVUZGUkN4RlFVRkZMRVZCUVVVc1EwRkJiMFFzVTBGQlUyZEpMRVZCUVVWb1NTeEZRVUZGY2tzc1IwRkJSeXhKUVVGSmMwc3NSVUZCU1N4WFFVRkdkRXNzUlVGQk1FUXNUMEZCTjBOelN5eEpRVUZsZEVzc1IwRkJSMEVzUjBGQlJ5eEpRVUZxUW5GTExFVkJRVXNzUjBGQlJrRXNTVUZCVFN4SFFVRmhMRVZCUVVVc1MwRkJTeXhIUVVGSFFTeEZRVUZGSzBnc1JVRkJSUzlJTEVWQlFVVnlTeXhIUVVGVmMwc3NSVUZCUlN4SlFVRkpSQ3hGUVVGRlFTeERRVUZETEVOQlEzQmhMRk5CUVZOcFNTeEZRVUZIYWtrc1JVRkJSWEpMTEVkQlFVZDNVaXhGUVVGRmJrZ3NSMEZCUjBFc1JVRkJSV2hKTEVWQlFVVXNTVUZCU1dsSkxFVkJRVVYxUnl4RlFVRkZMRTlCUVU4M1VTeEZRVUZGY1ZNc1JVRkJSV2hKTEVWQlFVVkRMRWRCUVVjNFNDeEZRVUZGTDBnc1JVRkJSVU1zUlVGQlJTeERRVU42Unl4VFFVRlRhVWtzUjBGQlJXeEpMRWRCUVVjc1UwRkJVM0pMTEVWQlFVVXdSQ3hGUVVGRmNFSXNSMEZCUnl4SlFVRkpMRWxCUVVsblRTeEZRVUZGTEVWQlFVVXNSVUZCUlVFc1NVRkJTU3hKUVVGSk5Vc3NSMEZCUnl4RlFVRkZjRUlzUjBGQlIyZE5MRWxCUVVsb1RTeEZRVUZGYjBJc1JVRkJSWFJDTEVWQlFVVnJUU3hIUVVGSGFFMHNSVUZCUlVZc1JVRkJSV3ROTEVkQlFVc3NTVUZCUm1oTkxFVkJRVTFCTEV0QlFVc3NRMEZCUXl4RFFVRnBSRmNzUlVGQlJTeEZRVUZGYjBnc1JVRkJSV2hJTEZGQlFWRXNTVUZCU1hSRUxFZEJRVVVzUlVGQlJ5eE5RVUZOYzBzc1JVRkJSU3hMUVVGTGRFc3NSMEZCUlN4RlFVRkhjMHNzUlVGQlJVRXNSVUZCUlhaRExFMUJRVTBzU1VGQlNTeEpRVUZKTEVsQlFVa3hSaXhGUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlN4RlFVRkZMRVZCUVVVc1JVRkJSU3hIUVVGSGQwb3NSVUZCUlN4RlFVRkZRU3hGUVVGRmRrSXNSVUZCUldoSUxFOUJRVTkxU1N4SlFVRkpOVXdzUlVGQlJTeEhRVUZIY1Vzc1JVRkJSVzlJTEZkQlFWYzNSaXhIUVVGSExFbEJRVzlDTEU5QlFXaENOMHdzU1VGQkwwc3NWMEZCWVN4SlFVRkpMRWxCUVVreVJDeEZRVUZGTEVWQlFVVXNSVUZCUlVFc1JVRkJSVUVzU1VGQlNYUkNMRVZCUVVWelFpeEhRVUZUTEV0QlFVeDBRaXhGUVVGRmMwSXNSVUZCVFN4RFFVRnZTVFJITEVkQlFVbDBTeXhGUVVGRkxFVkJRVVVzU1VGQlYzZE5MRVZCUVVkd1N5eEZRVUZGTEVOQlFTdEhMRk5CUVZOdlVTeEhRVUZIYmtrc1IwRkJSeXhQUVVGUE1Vb3NUMEZCVHpoTUxHRkJRV0VzUjBGQlIzQkRMRVZCUVVVc1IwRkJSMEVzUlVGQlJTeEhRVUZIUVN4RlFVRkZMRU5CUTJoa0xGTkJRVk52U1N4SFFVRkhjRWtzUjBGQlJ5eFBRVUZQTEVsQlFVbEJMRVZCUVVWQkxFVkJRVVVzUjBGQlJ5eEhRVUZIUVN4RlFVRkZMRVZCUVVVc1EwRkZPRThzVTBGQlUzRkpMRWRCUVVkeVNTeEZRVUZGY2tzc1JVRkJSWE5MTEVWQlFVVjJTeXhGUVVGRmNVTXNSMEZCUnl4SlFVRkpkMG9zUlVGQlJTeEZRVUZGTEVkQlFVY3NTVUZCU1RkTUxFVkJRVVVzUzBGQlMwTXNSVUZCUlhOTExFZEJRVWRFTEVWQlFVVnlTeXhOUVVGTlJDeEhRVUZITmt3c1NVRkJTVFZNTEVkQlFVZHZReXhQUVVGUExFdEJRVXR3UXl4RlFVRkZjMHNzUjBGQlJ5eERRVUZETEVsQlFVa3NTVUZCU1RWSExFVkJRVVV6UkN4RlFVRkZMRWxCUVVreVJDeEhRVUZITEVOQlFVTXNSMEZCUnpKSExFVkJRVVZ5U3l4UFFVRlRMRWxCUVVZd1JDeEZRVUZOTEV0QlFVc3NUMEZCVDJ0SkxFVkJRVVZzU1N4SlFVRkpMRU5CUVVNc1EwRkJReXhIUVVGSE1rY3NSVUZCUlhKTExFMUJRVTB3UkN4RlFVRkZMRTFCUVUxclNTeEpRVUZKTlV3c1IwRkJSMjlETEVOQlFVTXNRMEZCUXl4UFFVRlBkMG9zUTBGQlF5eERRVXN4WXl4VFFVRlRLMGNzUjBGQlIzUkpMRWRCUVVjc1QwRkJSMEVzUlVGQlJYWktMR05CUVdNclRpeFhRVUZyUW5oRkxFVkJRVXRCTEVWQlFVVjJTaXhqUVVGak9GSXNZVUZCZDBOMlNTeEZRVUZGZGtvc1kwRkJZMVlzVFVGQmNrTXNTVUZCU1hsUExGZEJRVmQ0UlN4SFFVRjNSRUVzUlVGQlJYWktMR05CUVdOSUxFOUJRV000VGl4RlFVRkhjRVVzUjBGQlRVRXNZVUZCWVhkRkxGZEJRV3RDTEVsQlFVbEJMRmRCUVZkNFJTeEZRVUZGZDBrc1QwRkJUM2hKTEVWQlFVVjVTU3hYUVVGWGVra3NSVUZCUlRCSkxHRkJRVmt4VXl4RlFVRkZMSFZEUVVFNFF5eEpRVUZKZDA4c1YwRkJWeXhIUVVGRkxFTkJRV3RFTEZOQlFWTnRSU3hIUVVGRk0wa3NSVUZCUlhKTExFVkJRVVZ6U3l4SFFVRkhla29zUzBGQlMySXNSVUZCUlN4TFFVRkxZU3hMUVVGTGQwb3NSVUZCUlhoS0xFdEJRVXQ1U2l4RlFVRkZla29zUzBGQlN5dExMRVZCUVVVc1JVRkJSUzlMTEV0QlFVdHhReXhIUVVGRkxFVkJRVWR0U0N4SFFVRkhlRW9zUzBGQlN6QlNMRVZCUVVWc1NTeEZRVUZGY2tzc1JVRkJSWE5MTEVWQlFVVXNRMEZxUW5wTk1VZ3NSVUZCUlN3MFFrRkJNa0lzVjBGQlZ5eFBRVUZQVUN4RFFVRkRMRkZCUVVVc1IwRkJVVThzUlVGQlJTdzJRa0ZCTkVJc1YwRkJWeXhQUVVGUGFVOHNRMEZCUXl4UlFVRkZMRWRCUVRoRmFrOHNSVUZCUlN4NVFrRkJlVUpyVHl4UFFVRkhMRWRCUVN0TGJFOHNSVUZCUlN4M1FrRkJkMEp0VHl4UFFVRkZMRWRCUTJwclFtNVBMRVZCUVVVc01rSkJRVEpDY1U4c1QwRkJSeXhIUVVONVVISlBMRVZCUVVVc01FSkJRVEJDYzA4c1QwRkJSeXhIUVVOUmRFOHNSVUZCUlN3d1FrRkJNRUl5VHl4UFFVRkhMRWRCUTNaUk0wOHNSVUZCUlN4NVFrRkJlVUkwVHl4UFFVRkZMRWRCUVc5RU5VOHNSVUZCUlN4M1FrRkJkMEk0VHl4UFFVRkZMRWRCUVRaSE9VOHNSVUZCUlN4MVFrRkJkVUlyVHl4UFFVRkZMRWRCUTNKWkwwOHNSVUZCUlN4M1FrRkJkMEpuVUN4UFFVRkhMRWRCUVRCRGFGQXNSVUZCUlN3d1FrRkJNRUpwVUN4UFFVRkhMRWRCUVRCRmFsQXNSVUZCUlN3d1FrRkJNRUpyVUN4UFFVRkhMRWRCUVdsTGJGQXNSVUZCUlN4NVFrRkJlVUp0VUN4UFFVRkhMRWRCUXpkU2JsQXNSVUZCUlN4NVFrRkJlVUp6VUN4UFFVRkhMRWRCUVhsSmRGQXNSVUZCUlN4M1FrRkJkMEoxVUN4UFFVRkhMRWRCUVZGMlVDeEZRVUZGTEc5Q1FVRnZRaXh0UWtGQmJVSnRTU3hOUVVGTkxGTkJRVWtzUjBGRE9VZHVTU3hGUVVGRkxIVkRRVUYxUTNkUUxFOUJRVVVzUjBGRE4xZDRVQ3hGUVVGRkxIRkRRVUZ4UTNsUUxFOUJRVVVzUjBGQmFVVjZVQ3hGUVVGRkxHMURRVUZ0UXpCUUxFOUJRVWNzUjBGQlVURlFMRVZCUVVVc01FTkJRWGxETEZOQlFWTjVTQ3hGUVVGRmNrc3NSMEZCUnl4SlFVRkpMRWxCUVVselN5eEZRVUZGYkVzc1RVRkJUV2xMTEVWQlFVVm9TQ3hSUVVGUmRFUXNSVUZCUlN4RlFVRkZRU3hGUVVGRmMwc3NSVUZCUldoSUxFOUJRVTkwUkN4SlFVRkpkVXNzUlVGQlJYWkxMRWRCUVVkMVV5eEZRVUZIYWtrc1JVRkJSWFJMTEVkQlFVZERMRWRCUVVjc1QwRkJUM05MTEVOQlFVTXNVVUZCUlN4SFFVTmxNVWdzUlVGQlJTeHRRMEZCYlVNeVVDeFJRVUZGTEVkQlFWRXpVQ3hGUVVGRkxHbERRVUZuUXl4VFFVRlRlVWdzUjBGQlIyMUlMRVZCUVVWbExFZEJRVVZzU1N4SFFVRkhMRkZCUVVVc1IwRkRkRmQ2U0N4RlFVRkZMR2REUVVFclFpeFRRVUZUZVVnc1IwRkJSeXhKUVVGSmNrc3NSVUZCUlVrc1RVRkJUU3hKUVVGSlNpeEZRVUZGTEVkQlFVY3NTVUZCU1VFc1JVRkJSU3hIUVVGSExFbEJRVWtzU1VGQlNTeEpRVUZKYzBzc1JVRkJSU3hGUVVGRkxFVkJRVVZCTEVWQlFVVkJMRWxCUVVrc1EwRkJReXhKUVVGSmRrc3NSVUZCUlhOTExFVkJRVVZ2U0N4WFFVRlhMRVZCUVVWdVNDeEhRVUZIZEVzc1JVRkJSU3hGUVVGRmMwc3NSVUZCUlN4SFFVRkhhMGtzUjBGQlIzcFRMRWRCUVVjc1IwRkJSME1zUlVGQlJTeEZRVUZGYzBzc1JVRkJSU3hIUVVGSGEwa3NSMEZCU3l4SFFVRkdlbE1zUlVGQlN5eERRVUZETEU5QlFVOURMRVZCUVVWM1R5eExRVUZMTEVkQlFVY3NVVUZCUlN4SFFVRlJOVXdzUlVGQlJTeG5RMEZCSzBJc1UwRkJVM2xJTEVkQlFYRkNjRWdzUlVGQlJTeExRVUZ3UW05SUxFVkJRVVZCTEVWQlFVVTBTU3hsUVVGelFqVlFMRkZCUVZGS0xFVkJRVVVzUzBGQlMyOUlMRVZCUVVVc1NVRkJTWEJJTEVWQlFVVXNTMEZCUzI5SUxFVkJRVVVzU1VGQlNTeEpRVUZKTEVsQlFVbHlTeXhGUVVGRkxFZEJRVWR6U3l4RlFVRkZMRVZCUVVVc1JVRkJSVUVzUlVGQlJVRXNTVUZCU1hSTExFVkJRVVZYTEU5QlFVODRUQ3hoUVVGaExFZEJRVWRuUnl4SFFVRkhjRWtzUlVGQlJXOUlMRmRCUVZjc1JVRkJSVzVJTEVWQlFVVXNTVUZCU1cxSkxFZEJRVWR3U1N4RlFVRkZiMGdzVjBGQlZ5eEZRVUZGYmtnc1JVRkJSU3hMUVVGTGRFc3NSVUZCUlN4UFFVRlBRU3hEUVVGRExGRkJRVVVzUjBGRE5XSTBReXhGUVVGRkxEWkNRVUUwUWl4VFFVRlRlVWdzUlVGQlJYSkxMRWRCUVVkM1VpeEZRVUZGYmtnc1IwRkJSMEVzUlVGQlJXaEpMRVZCUVVVc1NVRkJTV2xKTEVWQlFVVjFSeXhGUVVGRkxFOUJRVTgzVVN4RlFVRkZNbElzUlVGQlJYUklMRVZCUVVWRExFZEJRVWR2U0N4RlFVRkZja2dzUlVGQlJVTXNSVUZCUlN4UlFVRkZMRWRCUVZFeFNDeEZRVUZGTERaQ1FVRTBRaXhUUVVGVGVVZ3NSMEZCVVN4UFFVRk1NRWNzUlVGQlJURkhMRWRCUVZVNFNDeEZRVUZIT1ZBc1JVRkJSWGRQTEVWQlFVVXNVVUZCUlN4SFFVRlJhazhzUlVGQlJTd3lRa0ZCTUVJc1UwRkJVM2xJTEVWQlFVVnlTeXhGUVVGRmMwc3NSMEZCUnl4SlFVRkpMRWxCUVVsMlN5eEZRVUZGTEVWQlFVVnhReXhGUVVGRmNFTXNSVUZCUlc5RExFVkJRVVZyU1N4RlFVRkZiRWtzU1VGQlNYSkRMRWRCUVVkelN5eEZRVUZGYWtrc1NVRkJTU3hGUVVGRkxFOUJRVTlyU1N4RlFVRkZkRXNzUlVGQlJVUXNRMEZCUXl4UlFVRkZMRWRCUTJwUk5rTXNSVUZCUlN4blEwRkJLMElzVTBGQlUzbElMRVZCUVVWeVN5eEZRVUZGYzBzc1JVRkJSWFpMTEVkQlFVY3NTVUZCU1hGRExFVkJRVVVzUlVGQlR5eEhRVUZITEV0QlFWSnlReXhIUVVGSExFZEJRVmNzUzBGQlMwTXNSVUZCUlhOTExFZEJRVWRFTEVWQlFVVnlTeXhOUVVGTlJDeEhRVUZITEVsQlFVbHhReXhOUVVGTkxFTkJRVU1zU1VGQlNYZEtMRVZCUVVWMlFpeEZRVUZGY2tzc1MwRkJTeXhMUVVGVExFbEJRVVkwVEN4SFFVRlBMRXRCUVVzc1RVRkJUU3hMUVVGTE5Vd3NSVUZCUlhOTExFZEJRVWNzUTBGQlF5eEpRVUZKYzBJc1JVRkJSVGRNTEVWQlFVVXNTVUZCU1RaTUxFZEJRVWNzUTBGQlF5eEhRVUZIZGtJc1JVRkJSWEpMTEV0QlFVOHNTVUZCUmpSTUxFVkJRVTBzUzBGQlN5eFBRVUZQZUVvc1JVRkJSWEJETEVsQlFVazBUQ3hKUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZIZGtJc1JVRkJSWEpMTEUxQlFVMDBUQ3hGUVVGRkxFMUJRVTBzU1VGQlNYaEtMRWxCUVcxQ0xFdEJRV1ozU2l4RlFVRkZka0lzUlVGQlJYSkxMRkZCUVd0Q0xFTkJRVU1zVDBGQlQyOURMRU5CUVVNc1VVRkJSU3hIUVVNNVVWRXNSVUZCUlN4cFEwRkJaME1zVTBGQlUzbElMRVZCUVVWeVN5eEZRVUZGYzBzc1JVRkJSWFpMTEVkQlFVY3NUMEZCVHpKVExFZEJRVWR5U1N4RlFVRkZja3NzUlVGQlJYTkxMRVZCUVVVc1JVRkJSWFpMTEVWQlFVVXNSVUZCUlN4RlFVRkZMRkZCUVVVc1IwRkJVVFpETEVWQlFVVXNhVU5CUVdkRExGTkJRVk41U0N4RlFVRkZja3NzUlVGQlJYTkxMRVZCUVVWMlN5eEhRVUZITEU5QlFVOHlVeXhIUVVGSGNra3NSVUZCUlhKTExFVkJRVVZ6U3l4RlFVRkZMRVZCUVVWMlN5eEZRVUZGTEVWQlFVVXNSVUZCUlN4UlFVRkZMRWRCUVZFMlF5eEZRVUZGTEcxRFFVRnJReXhUUVVGVGVVZ3NSVUZCUlhKTExFVkJRVVZ6U3l4RlFVRkZka3NzUjBGQlJ5eEpRVUZKY1VNc1JVRkJSU3hGUVVGRkxFbEJRVWx5UXl4RlFVRkZMRVZCUVVWQkxFVkJRVVVzUlVGQlJVTXNSVUZCUlhOTExFZEJRVWNzUTBGQlF5eEpRVUZKTEVsQlFVbHpRaXhGUVVGRk4wd3NSVUZCUlN4SlFVRkpOa3dzUjBGQlJ5eERRVUZETEVkQlFVZDJRaXhGUVVGRmNrc3NUMEZCVXl4SlFVRkdORXdzUlVGQlRTeExRVUZMTEU5QlFVOTRTaXhGUVVGRmQwb3NTVUZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSM1pDTEVWQlFVVnlTeXhOUVVGTk5Fd3NSVUZCUlN4TlFVRk5lRW9zU1VGQlNTeEpRVUZKTEVsQlFVbHpRaXhGUVVGRkxFVkJRVVZ3UWl4RlFVRkZMRVZCUVZkdlFpeEpRVUZOTEV0QlFXWnJTU3hGUVVGRmRrSXNSVUZCUlhKTExFOUJRV2RDYzBNc1JVRkJSVUVzUjBGQlJ5eEpRVUZWTEVsQlFVWnpTaXhKUVVGVE5Vd3NSMEZCUnpCRUxFTkJRVU1zUTBGQlF5eFBRVUZQZEVJc1EwRkJReXhSUVVGRkxFZEJRM1JhVVN4RlFVRkZMSEZEUVVGdlF5eFRRVUZUZVVnc1IwRkJSeXhKUVVGSmNrc3NSVUZCUlN4SlFVRkpMRWRCUVVkeFN5eEZRVUZGTEVOQlFVTkJMRVZCUVVWelNTeEhRVUZIZEVrc1IwRkJSeXhKUVVGSkxFbEJRVWxETEVWQlFVVXNSVUZCUlVFc1JVRkJSVVFzUlVGQlJXaElMRTlCUVU5cFNDeEpRVUZKZEVzc1IwRkJSeXhOUVVGTkxFZEJRVWR4U3l4RlFVRkZReXhMUVVGTGRFc3NSMEZCUnl4TFFVRkxRU3hIUVVGSGNVc3NSVUZCUlVNc1IwRkJSMHNzVTBGQlV5eEhRVUZITEVOQlFVTXNUMEZCVHpOTExFVkJRVVVzUjBGQlJ5eFJRVUZGTEVkQlEyNUxORU1zUlVGQlJTeHpRMEZCY1VNc1UwRkJVM2xJTEVkQlFVY3NSMEZCUnl4cFFrRkJhMEpCTEVWQlFVVXNRMEZCUTBFc1JVRkJSVEZLTEU5QlFVOHdTaXhIUVVGSExFbEJRVWtzU1VGQlNYSkxMRVZCUVVVc1EwRkJReXhMUVVGTGMwc3NSVUZCUlN4RlFVRkZRU3hGUVVGRlJDeEZRVUZGYUVnc1QwRkJUMmxJTEVsQlFVa3NRMEZCUXl4SlFVRXdRelZITEVWQlFYUkRNMFFzUlVGQlJYTkxMRVZCUVVWNVJTeFBRVUZQZUVVc1IwRkJSMnhKTEVWQlFVVnlReXhGUVVGRk1GSXNWMEZCVnl4SFFVRkhOMFlzUlVGQlJYUkNMRVZCUVVVc1IwRkJVelZITEVWQlFVVnpTeXhGUVVGSGFrOHNUVUZCVlN4SFFVRkhjVU1zUjBGQlJ5eEpRVUZKUVN4TFFVRk5RU3hGUVVGRmNrTXNTMEZCVDJ0UExFVkJRVWRzVHl4RlFVRkZhMDhzUlVGQlJ6ZE1MRWRCUVZkQkxFdEJRVXMwVEN4RlFVRkhhazhzUlVGQlJXdFBMRVZCUVVjM1RDeEhRVUZITkV3c1JVRkJSelZNTEVsQlFUWkNMRWxCUVhKQ2MwSXNSVUZCUlhSQ0xFVkJRVVZ4VUN4WFFVRlhMRXRCUVZrc1NVRkJTUzlPTEVWQlFVVXpSQ3hGUVVGRmNVTXNSMEZCVlN4SlFVRkpjMElzUjBGQlRUTkVMRVZCUVVVc1QwRkJUU3hIUVVGSE1rUXNSMEZCUnl4SlFVRkpRU3hMUVVGRk0wUXNSMEZCUnl4UFFVRlRRU3hGUVVGRkxFMUJRVTBzUzBGQlN6SkVMRWxCUVVrelJDeEhRVUZITEUxQlFVdEJMRWRCUVVjeVJDeEZRVUZGYVVnc1UwRkJVeXhKUVVGSmRVa3NaVUZCWTI1VUxFVkJRVVZyVHl4RlFVRkhOMHdzUjBGQlIzSkRMRWxCUVVVeVJDeEZRVUZGTTBRc1IwRkJSVU1zUlVGQlJUUk1MRWRCUVVkc1NTeERRVUZETEVOQlFVTXhSQ3hGUVVGRmMwUXNTMEZCU3l4TFFVRkxLMGNzUlVGQlJYSkxMRVZCUVVWM1R5eExRVUZMTEVkQlFVY3NUVUZCVFc1RkxFVkJRVVZCTEVWQlFVVk5MRmRCUVZjc1QwRkJUMDRzUTBGQlF5eFJRVUZGTEVkQlF6bGtla2dzUlVGQlJTeG5RMEZCSzBJc1UwRkJVM2xJTEVkQlFVY3NTVUZCU1N4SlFVRkpja3NzUlVGQlJTeEpRVUZKTms4c1YwRkJWM2hGTEVWQlFVVm9TQ3hSUVVGUmFVZ3NSVUZCUlN4RlFVRkZRU3hGUVVGRlJDeEZRVUZGYUVnc1QwRkJUMmxJTEVsQlFVa3NRMEZCUXl4SlFVRkpka3NzUlVGQlJYTkxMRVZCUVVWdlNDeFhRVUZYYmtnc1IwRkJSeXhIUVVGSExFbEJRVWwyU3l4RlFVRkZMRTFCUVUxeFNpeE5RVUZOTEhGRlFVRnhSWEJLTEVWQlFVVnpTeXhIUVVGSGRrc3NRMEZCUXl4RFFVRkRMRTlCUVU5RExFTkJRVU1zVVVGQlJTeEhRVU41U0RSRExFVkJRVVVzYjBOQlFXOURLMUFzVVVGQlJ5eEhRVUYzUmk5UUxFVkJRVVVzY1VKQlFYRkNiMUVzVVVGQlJTeEhRVUZSTEVsQlFVbHlSaXhIUVVGSExFZEJRWGxFTEZOQlFWTjNSaXhIUVVGSE9Va3NSVUZCUlhKTExFVkJRVVZ6U3l4SFFVRkhMRWRCUVVkeFJDeEhRVUZIZEVzc1QwRkJUeXhEUVVGRExFbEJRVWwwUkN4RlFVRkZORTRzUjBGQlIzWkxMRTFCUVc5Q0xFOUJRV1JwU0N4SFFVRkhkRXNzUlVGQlJYZFRMRVZCUVVWc1NTeEZRVUZGY2tzc1JVRkJSWE5MTEVkQlFWVjJTeXhEUVVGRExFTkJRVU1zVDBGQlR5eEpRVUZKYVZRc1IwRkJSVE5KTEVWQlFVVnlTeXhGUVVGRmMwc3NSVUZCUlN4RFFXVndZeXhUUVVGVE9Fa3NSMEZCUlM5SkxFVkJRVVZ5U3l4RlFVRkZjMHNzUjBGQlIzcEtMRXRCUVV0M1NpeEZRVUZGT0Vrc1IwRkJSemxKTEVWQlFVVnlTeXhGUVVGRmMwc3NSMEZCUjNwS0xFdEJRVXQzVXl4RlFVRkZlRk1zUzBGQlMzZEtMRVZCUVVWcFJTeEpRVUZKZWs0c1MwRkJTMklzUlVGQlJXRXNTMEZCUzNsS0xFZEJRVWNzUlVGQlJYcEtMRXRCUVVzclN5eEhRVUZGTEVWQlFVY3ZTeXhMUVVGTGNVTXNSVUZCUlN4SlFVRkpMRU5CWm5sT09GQXNSMEZCUlUwc2RVSkJRWFZDTEZkQlFWY3NUMEZCVHpOR0xFZEJRVWQwU3l4TlFVRk5MRVZCUVRaR01sQXNSMEZCUlU4c1RVRkJUVW9zUjBGQlIwZ3NSMEZCUlRGVExGVkJRVlVyVGl4SFFVRkhMRmRCUVZkNFRpeExRVUZMY1Uwc1VVRkJVU3hKUVVGSlV5eEhRVUZIZEVzc1VVRkJVWE5MTEVkQlFVZHlTeXhMUVVGTGVrTXNTMEZCU3l4RlFVRkZiVk1zUjBGQlJURlRMRlZCUVZWclZDeExRVUZMVWl4SFFVRkZNVk1zVlVGQlZTdE9MRWRCUVVjeVJTeEhRVUZGTVZNc1ZVRkJWVzFVTEUxQlFVMHNWMEZCVnl4UFFVRlBUaXhIUVVGSGRGTXNTMEZCUzJJc1JVRkJSV0VzUzBGQlN5dExMRVZCUVVVdlN5eExRVUZMZVVvc1JVRkJSWHBLTEV0QlFVc3JTeXhGUVVGRkxFVkJRVVZ2U0N4SFFVRkZNVk1zVlVGQlZXMVVMRTFCUVUxVUxFZEJRVVV4VXl4VlFVRlZiVlFzVFVGRE9USkNWQ3hIUVVGRk1WTXNWVUZCVlRSTkxFMUJRVTBzVjBGQlYzSk5MRXRCUVV0aUxFVkJRVVVzUzBGQlMyRXNTMEZCUzNkS0xFVkJRVVY0U2l4TFFVRkxlVW9zUlVGQlJYcEtMRXRCUVVzclN5eEZRVUZGTEVWQlFVVXZTeXhMUVVGTGNVTXNSMEZCUlN4RFFVRkZMRVZCUVVVNFVDeEhRVUZGTVZNc1ZVRkJWVFJOTEUxQlFVMDRSaXhIUVVGRk1WTXNWVUZCVlRSTkxFMUJRVTA0Uml4SFFVRkZNVk1zVlVGQlZXOVVMRVZCUVVVc1YwRkJWeXhQUVVGUE4xTXNTMEZCUzJJc1EwRkJReXhGUVVGRloxUXNSMEZCUlRGVExGVkJRVlZ4VkN4VlFVRlZXQ3hIUVVGRk1WTXNWVUZCVlc5VUxFVkJRVVZXTEVkQlFVVXhVeXhWUVVGVmFWTXNSVUZCUlN4VFFVRlRiRWtzUlVGQlJYSkxMRVZCUVVWelN5eEhRVUZIZWtvc1MwRkJTMklzUlVGQlJUSlRMRWRCUVVkMFNTeEhRVUZIZUVvc1MwRkJTeXRMTEU5QlFVVXNTVUZCVXpWTUxFVkJRVVZCTEVWQlFVVXNSVUZCUldFc1MwRkJTM2xLTEU5QlFVVXNTVUZCVTBFc1JVRkJSWHBLTEV0QlFVc3JTeXhGUVVGRmRFSXNSVUZCUlhwS0xFdEJRVXRpTEVWQlFVVnhSQ3hQUVVGUGVFTXNTMEZCUzNkS0xFVkJRVVY0U2l4TFFVRkxLMHNzUTBGQlF5eEZRVUZGYjBnc1IwRkJSVEZUTEZWQlFWVnpWQ3hUUVVGVFdpeEhRVUZGTVZNc1ZVRkJWV2xUTEVWQlFVVlRMRWRCUVVVeFV5eFZRVUZWZFZRc1IwRkJSeXhYUVVGWExFOUJRVTlvVkN4TFFVRkxlVW9zUTBGQlF5eEZRVUZGTUVrc1IwRkJSVEZUTEZWQlFWVjNWQ3hQUVVGUFpDeEhRVUZGTVZNc1ZVRkJWWFZVTEVkQlFVZGlMRWRCUVVVeFV5eFZRVUZWZVZRc1QwRkJUeXhUUVVGVE1Vb3NSMEZCUjNoS0xFdEJRVXQ1U2l4RlFVRkZSQ3hEUVVGRExFVkJRVVV5U1N4SFFVRkZNVk1zVlVGQlZYbFVMRTlCUVU5bUxFZEJRVVV4VXl4VlFVRlZlVlFzVDBGRE1XVm1MRWRCUVVVeFV5eFZRVUZWTUZRc1RVRkJUU3hYUVVGWGJsUXNTMEZCUzNkS0xFVkJRVVY0U2l4TFFVRkxLMHNzUTBGQlF5eEZRVUZGYjBnc1IwRkJSVEZUTEZWQlFWVXdWQ3hOUVVGTmFFSXNSMEZCUlRGVExGVkJRVlV3VkN4TlFVRk5hRUlzUjBGQlJURlRMRlZCUVZWblR5eEZRVUZGTEZkQlFWY3NUMEZCVDNwT0xFdEJRVXQzU2l4RFFVRkRMRVZCUVVVeVNTeEhRVUZGTVZNc1ZVRkJWVEpVTEZWQlFWVnFRaXhIUVVGRk1WTXNWVUZCVldkUExFVkJRVVV3UlN4SFFVRkZNVk1zVlVGQlZYZFNMRWRCUVVjc1UwRkJVM3BJTEVkQlFVZDRTaXhMUVVGTGQwb3NSVUZCUlVFc1EwRkJReXhGUVVGRk1ra3NSMEZCUlRGVExGVkJRVlUwVkN4VlFVRlZiRUlzUjBGQlJURlRMRlZCUVZWM1VpeEhRVUZIYTBJc1IwRkJSVEZUTEZWQlFWVTJWQ3hSUVVGUkxGTkJRVk01U2l4SFFVRkhlRW9zUzBGQlMzZEtMRWRCUVVkQkxFVkJRVVZ3U0N4RlFVRkZjRU1zUzBGQlMzZEtMRWRCUVVkNFNpeExRVUZMZVVvc1JVRkJSU3hGUVVGRk1Fa3NSMEZCUlRGVExGVkJRVlUyVkN4UlFVRlJia0lzUjBGQlJURlRMRlZCUVZVMlZDeFJRVUZSYmtJc1IwRkJSVEZUTEZWQlFWVXdUaXhIUVVGSExGZEJRVmNzVDBGQlQyNU9MRXRCUVV0M1NpeEhRVUZIZUVvc1MwRkJTM2xLTEVOQlFVTXNSVUZCUlRCSkxFZEJRVVV4VXl4VlFVRlZPRlFzVFVGQlRYQkNMRWRCUVVVeFV5eFZRVUZWTUU0c1IwRkJSMmRHTEVkQlFVVXhVeXhWUVVGVksxUXNSMEZCUnl4WFFVRlhMRTlCUVU5NFZDeExRVUZMZDBvc1JVRkJSWGhLTEV0QlFVdDVTaXhEUVVGRExFVkJRVVV3U1N4SFFVRkZNVk1zVlVGQlZXZFZMRkZCUVZGMFFpeEhRVUZGTVZNc1ZVRkJWU3RVTEVkQlF6ZGxja0lzUjBGQlJURlRMRlZCUVZWcFZTeFRRVUZUTEZkQlFWY3NUMEZCVHpGVUxFdEJRVXR4UXl4SFFVRkhMRVZCUVVWeVF5eExRVUZMZDBvc1IwRkJSM2hLTEV0QlFVdDNTaXhGUVVGRmVFb3NTMEZCUzNsS0xFTkJRVU1zUlVGQlJUQkpMRWRCUVVVeFV5eFZRVUZWYVZVc1UwRkJVM1pDTEVkQlFVVXhVeXhWUVVGVmFWVXNVMEZCVTNaQ0xFZEJRVVV4VXl4VlFVRlZaMDBzUlVGQlJTeFRRVUZUYWtNc1IwRkJSeXhKUVVGSkxFbEJRVWx5U3l4RlFVRkZMRWxCUVVselN5eEZRVUZGTEVWQlFVVjJTeXhGUVVGRkxFVkJRVVZ4UXl4RlFVRkZMRVZCUVVVc1JVRkJSVUVzUjBGQlJ5eExRVUZMY0VNc1JVRkJSVzlETEVsQlFYVkNhMGtzU1VGQlRTeExRVUY2UW5STExFVkJRVVZoTEV0QlFVdGlMRVZCUVVWaExFdEJRVXQzU2l4UlFVRnBRaXhGUVVGRmFra3NSVUZCTkVRc1IwRkJNVVFzUzBGQlMzQkRMRWxCUVhWQ2Mwc3NTVUZCVFN4TFFVRjZRblJMTEVWQlFVVmhMRXRCUVV0aUxFVkJRVVZoTEV0QlFVdDNTaXhSUVVGcFFpeEhRVUZIZEVzc1NVRkJUU3hKUVVGR1F5eEpRVUZSTEVkQlFVMHNTMEZCUzBFc1JVRkJSU3hKUVVGSmIwTXNSVUZCUlN4RlFVRkZMRVZCUVVWQkxFZEJRVWNzUzBGQlMzQkRMRVZCUVVWdlF5eEpRVUYxUW5KRExFbEJRVTBzUzBGQmVrSkRMRVZCUVVWaExFdEJRVXRpTEVWQlFVVmhMRXRCUVV0M1NpeFJRVUZwUWl4RlFVRkZha2tzUlVGQlJTeEZRVUZGTEVkQlFVY3NTVUZCU1hCRExFVkJRVVVzVDBGQlQzRkxMRVZCUVVWRExFbEJRVWtzUlVGQlJYWkxMRWxCUVVrc1IwRkJSMDBzUlVGQlJTd3JRMEZCSzBOUkxFdEJRVXR4UXl4SFFVRkZMRU5CUVVVc1JVRkJSVGhRTEVkQlFVVXhVeXhWUVVGVmExVXNhMEpCUVd0Q2VFSXNSMEZCUlRGVExGVkJRVlZuVFN4RlFVTXZaREJITEVkQlFVVXhVeXhWUVVGVmJVc3NSMEZCUnl4VFFVRlRTaXhIUVVGSExFOUJRVTk0U2l4TFFVRkxlVXdzUjBGQlJTeFRRVUZUZEUwc1JVRkJSWE5MTEVkQlFVY3NUMEZCVDNkSUxFVkJRVWM1VWl4RlFVRkZjMHNzUlVGQlJVUXNSVUZCUlN4SFFVRkZMRVZCUVVVeVNTeEhRVUZGTVZNc1ZVRkJWVzFWTEhkQ1FVRjNRbnBDTEVkQlFVVXhVeXhWUVVGVmJVc3NSMEZCUjNWSkxFZEJRVVV4VXl4VlFVRlZiMVVzUjBGQlJ5eFRRVUZUY2tzc1IwRkJSeXhKUVVGSmNrc3NSVUZCUldFc1MwRkJTMklzUlVGQlJYTkxMRVZCUVVWNlNpeExRVUZMZDBvc1JVRkJSWGhLTEV0QlFVdDNTaXhIUVVGSExFVkJRVVVzU1VGQlNTeEpRVUZKZEVzc1JVRkJSU3hGUVVGRmNVTXNSVUZCUlN4RlFVRkZkMG9zUlVGQlJYUkNMRVZCUVVVc1JVRkJSWE5DTEVkQlFVZDBRaXhGUVVGRmMwSXNTVUZCU1RkTUxFVkJRVVZCTEVkQlFVY3NSVUZCUlVNc1JVRkJSVFJNTEVkQlFVZDRTaXhGUVVGRlFTeEhRVUZITEVWQlFVVndReXhGUVVGRk5Fd3NSVUZCUlN4SFFVRkhMRTlCUVU5MlFpeEZRVUZGZEVzc1JVRkJSWEZETEVWQlFVVXNSVUZCUlRSUkxFZEJRVVV4VXl4VlFVRlZjVlVzYVVKQlFXbENNMElzUjBGQlJURlRMRlZCUVZWdlZTeEhRVUZITVVJc1IwRkJSVEZUTEZWQlFWVnpWU3hIUVVGSExGZEJRVmNzUzBGQmIwSXNTVUZCWmk5VUxFdEJRVXRpTEVWQlFVVmhMRXRCUVV0M1NpeEpRVUZSZUVvc1MwRkJTM2RLTEVsQlFVbDRTaXhMUVVGTGQwb3NSMEZCUnl4RlFVRkZNa2tzUjBGQlJURlRMRlZCUVZWMVZTeFhRVUZYTjBJc1IwRkJSVEZUTEZWQlFWVnpWU3hIUVVGSE5VSXNSMEZCUlRGVExGVkJRVlYzVlN4SFFVRkhMRk5CUVZONlN5eEhRVUZITEV0QlFVc3NTVUZCU1VFc1IwRkJSM2hLTEV0QlFVdDNTaXhKUVVGSlFTeExRVUZMTEVWQlFVVjRTaXhMUVVGTGQwb3NSMEZCUnl4RlFVRkZNa2tzUjBGQlJURlRMRlZCUVZWNVZTeGhRVUZoTDBJc1IwRkJSVEZUTEZWQlFWVjNWU3hIUVVNdlpqbENMRWRCUVVVeFV5eFZRVUZWYTBRc1JVRkJSU3hYUVVGWExFbEJRVWsyUnl4RlFVRkZlRW9zUzBGQlMySXNSVUZCVFVFc1JVRkJSWEZMTEVWQlFVVjRTaXhMUVVGTGQwb3NSMEZCVDBNc1JVRkJTU3hKUVVGR2RFc3NSVUZCVFN4UFFVRkhMRWxCUVVsQkxFZEJRVk5oTEV0QlFVdDNTaXhIUVVGSExFVkJRVVZ3U0N4RlFVRkZjRU1zUzBGQlMzZEtMRWRCUVVkNFNpeExRVUZMZVVvc1IwRkJSMEVzU1VGQlowSkJMRWxCUVUwc1MwRkJjRUowU3l4RlFVRkZjVXNzUlVGQlJYaEtMRXRCUVV0M1NpeEZRVUZGTEUxQlFXVXNSVUZCU3l4SlFVRkpja3NzUjBGQlUyRXNTMEZCUzNkS0xFZEJRVWNzUlVGQlJYQklMRVZCUVVWd1F5eExRVUZMZDBvc1IwRkJSM2hLTEV0QlFVdDVTaXhIUVVGSFFTeEpRVUZuUWtFc1NVRkJUU3hMUVVGd1FuUkxMRVZCUVVWeFN5eEZRVUZGZUVvc1MwRkJTM2RLTEVWQlFVVXNUVUZCWlN4SFFVRk5MRWxCUVVseVN5eEhRVUZUWVN4TFFVRkxkMG9zUjBGQlJ5eEZRVUZGY0Vnc1JVRkJSWEJETEV0QlFVdDNTaXhIUVVGSGVFb3NTMEZCUzNsS0xFZEJRVWRCTEVsQlFXZENRU3hKUVVGTkxFdEJRWEJDZEVzc1JVRkJSWEZMTEVWQlFVVjRTaXhMUVVGTGQwb3NSVUZCUlN4TlFVRmxMRWRCUVUwc1NVRkJTWEpMTEVkQlFWTmhMRXRCUVV0M1NpeEhRVUZITEVWQlFVVndTQ3hGUVVGRmNFTXNTMEZCUzNkS0xFZEJRVWQ0U2l4TFFVRkxlVW9zUjBGQlIwRXNTVUZCWjBKQkxFbEJRVTBzU1VGQmNFSjBTeXhGUVVGRmNVc3NSVUZCUlhoS0xFdEJRVXQzU2l4RlFVRkZMRTFCUVdNc1IwRkJUU3hKUVVGSmNrc3NSMEZCVTJFc1MwRkJTM2RLTEVkQlFVY3NSVUZCUlhCSUxFVkJRVVZ3UXl4TFFVRkxkMG9zUjBGQlIzaEtMRXRCUVV0NVNpeEhRVUZIUVN4SlFVRkpMRWxCUVVWNlNpeExRVUZMZDBvc1IwRkJSeXhGUVVGRkxFdEJRVXRCTEVWQlFVVjRTaXhMUVVGTGQwb3NUVUZCVFN4TFFVRkxRU3hGUVVGRmVFb3NTMEZCUzNkS0xFMUJRVTBzUzBGQlMwRXNSVUZCUlhoS0xFdEJRVXQzU2l4TlFVRk5MRXRCUVV0QkxFVkJRVVY0U2l4TFFVRkxkMG9zVFVGQlRTeExRVU5vWmtFc1JVRkJSWGhLTEV0QlFVdDNTaXhOUVVGTmNFZ3NSMEZCUlN4SFFVRkpRU3hGUVVGRmNFTXNTMEZCUzNkS0xFZEJRVWQ0U2l4TFFVRkxlVW9zUjBGQlZVRXNUVUZCUXl4RlFVRkZNRWtzUjBGQlJURlRMRlZCUVZVd1ZTeHhRa0ZCY1VKb1F5eEhRVUZGTVZNc1ZVRkJWV3RFTEVWQlFVVjNVQ3hIUVVGRk1WTXNWVUZCVld0TExFZEJRVWNzVjBGQlZ5eFJRVUZSTTBvc1MwRkJTekpETEVkQlFVY3NSVUZCUlhkUUxFZEJRVVV4VXl4VlFVRlZNbFVzYlVKQlFXMUNha01zUjBGQlJURlRMRlZCUVZWclN5eEhRVUZIZDBrc1IwRkJSVEZUTEZWQlFWVXJVeXhGUVVGRkxGZEJRVmNzVDBGQlQzaFRMRXRCUVVzeVF5eEpRVUZKYlVnc1ZVRkJWU3hGUVVGRmNVa3NSMEZCUlRGVExGVkJRVlV5VHl4SFFVRkhMRmRCUVZjc1QwRkJUM0JQTEV0QlFVc3lTaXhMUVVGTFJ5eFZRVUZWTEVWQlFVVnhTU3hIUVVGRk1WTXNWVUZCVlRSVkxIbENRVUY1UW14RExFZEJRVVV4VXl4VlFVRlZNazhzUjBGQlJ5dEVMRWRCUVVVeFV5eFZRVUZWYVZJc1IwRkJSeXhYUVVGWExFbEJRVWxzU0N4RlFVRkZlRW9zUzBGQlN6SkRMRWxCUVVrc1QwRkJUelpITEVsQlFVa3NTVUZCVFN4RlFVRkdRU3hGUVVGSkxFVkJRVVV5U1N4SFFVRkZNVk1zVlVGQlZUWlZMRzFDUVVGdFFtNURMRWRCUVVVeFV5eFZRVUZWYVZJc1IwRkJSM2xDTEVkQlFVVXhVeXhWUVVGVk1sRXNSMEZCUnl4WFFVRlhMRTlCUVU5d1VTeExRVUZMZVV3c1JVRkJSVzlHTEVWQlFVVXNSVUZET1dWelFpeEhRVUZGTVZNc1ZVRkJWVGhWTEhGQ1FVRnhRbkJETEVkQlFVVXhVeXhWUVVGVk1sRXNSMEZCUnl0Q0xFZEJRVVV4VXl4VlFVRlZORkVzUjBGQlJ5eFhRVUZYTEU5QlFVOXlVU3hMUVVGTGVVd3NSVUZCUlRoR0xFVkJRVVVzUlVGQlJWa3NSMEZCUlRGVExGVkJRVlVyVlN3eVFrRkJNa0p5UXl4SFFVRkZNVk1zVlVGQlZUUlJMRWRCUVVjNFFpeEhRVUZGTVZNc1ZVRkJWWGRNTEVkQlFVY3NWMEZCVnl4UFFVRlBha3dzUzBGQlMzbE1MRVZCUVVWeFJpeEZRVUZGTEVWQlFVVnhRaXhIUVVGRk1WTXNWVUZCVldkV0xHMUNRVUZ0UW5SRExFZEJRVVV4VXl4VlFVRlZkMHdzUjBGQlIydElMRWRCUVVVeFV5eFZRVUZWZDFFc1IwRkJSeXhYUVVGWExFOUJRVTlxVVN4TFFVRkxlVXdzUlVGQlJTdEdMRVZCUVVVc1JVRkJSVmNzUjBGQlJURlRMRlZCUVZWcFZpeDVRa0ZCZVVKMlF5eEhRVUZGTVZNc1ZVRkJWWGRSTEVkQlFVZHJReXhIUVVGRk1WTXNWVUZCVlhOU0xFZEJRVWNzVjBGQlZ5eFBRVUZQTDFFc1MwRkJTM2xNTEVWQlFVVjFSaXhGUVVGSExFVkJRVVZ0UWl4SFFVRkZNVk1zVlVGQlZXdFdMRzFDUVVGdFFuaERMRWRCUVVVeFV5eFZRVUZWYzFJc1IwRkJSMjlDTEVkQlFVVXhVeXhWUVVGVmJWWXNSMEZCUnl4WFFVRlhMRTlCUVU4MVZTeExRVUZMTkVvc1IwRkJSekJJTEVWQlFVY3NSVUZEYm1SaExFZEJRVVV4VXl4VlFVRlZiMVlzZFVKQlFYVkNNVU1zUjBGQlJURlRMRlZCUVZWdFZpeEhRVUZIZWtNc1IwRkJSVEZUTEZWQlFWVjFVaXhIUVVGSExGZEJRVmNzVDBGQlQyaFNMRXRCUVVzMFNpeEhRVUZITkVnc1JVRkJSU3hGUVVGRlZ5eEhRVUZGTVZNc1ZVRkJWWEZXTEhsQ1FVRjVRak5ETEVkQlFVVXhVeXhWUVVGVmRWSXNSMEZCUjIxQ0xFZEJRVVV4VXl4VlFVRlZjMVlzUjBGQlJ5eFhRVUZYTEVsQlFVbDJUQ3hGUVVGRmVFb3NTMEZCUzJJc1JVRkJSV0VzUzBGQlMzZEtMRWRCUVN0Q0xFOUJRVFZDZUVvc1MwRkJTM2RLTEVkQlFVY3NSVUZCUlhCSUxFVkJRVVZ3UXl4TFFVRkxkMG9zUjBGQlIzaEtMRXRCUVV0NVNpeEhRVUZWUkN4RFFVRkRMRVZCUVVVeVNTeEhRVUZGTVZNc1ZVRkJWWFZXTEZWQlFWVTNReXhIUVVGRk1WTXNWVUZCVlhOV0xFZEJRVWMxUXl4SFFVRkZNVk1zVlVGQlZYZFdMRWRCUVVjc1YwRkJWeXhKUVVGSmVrd3NSVUZCUlhoS0xFdEJRVXRpTEVWQlFVVmhMRXRCUVV0M1NpeEhRVUZIY2tzc1JVRkJSV0VzUzBGQlMySXNSVUZCUldFc1MwRkJTM2RLTEVWQlFVVXNSMEZCSzBJc1QwRkJOVUo0U2l4TFFVRkxkMG9zUjBGQlJ5eEZRVUZGY0Vnc1JVRkJSWEJETEV0QlFVdDNTaXhIUVVGSGVFb3NTMEZCUzNsS0xFZEJRVlZFTEVWQlFVdHlTeXhIUVVGSExFTkJRVU1zUlVGQlJXZFVMRWRCUVVVeFV5eFZRVUZWZVZZc1YwRkJWeTlETEVkQlFVVXhVeXhWUVVGVmQxWXNSMEZEYUdFNVF5eEhRVUZGTVZNc1ZVRkJWVzlFTEVWQlFVVXNWMEZCVnl4SlFVRkpNa2NzUlVGQlJYaEtMRXRCUVV0aUxFVkJRVVZoTEV0QlFVdDNTaXhIUVVGSGNrc3NSVUZCUldFc1MwRkJTMklzUlVGQlJXRXNTMEZCUzNkS0xFVkJRVVVzUjBGQlIwTXNSVUZCUlhwS0xFdEJRVXRpTEVWQlFVVmhMRXRCUVV0M1NpeEZRVUZGTEVkQlFVZDBTeXhGUVVGRll5eExRVUZMWWl4RlFVRkZZU3hMUVVGTGQwb3NSVUZCUlN4SFFVRXJRaXhQUVVFMVFuaEtMRXRCUVV0M1NpeEhRVUZITEVWQlFVVndTQ3hGUVVGRmNFTXNTMEZCUzNkS0xFZEJRVWQ0U2l4TFFVRkxlVW9zU1VGQlZVUXNSVUZCUzNKTExFZEJRVWNzUlVGQlJYTkxMRWRCUVVjc1IwRkJSM1pMTEVkQlFVY3NUVUZCVFN4RFFVRkRMRVZCUVVWcFZDeEhRVUZGTVZNc1ZVRkJWVEJXTEZkQlFWZG9SQ3hIUVVGRk1WTXNWVUZCVlc5RUxFVkJRVVZ6VUN4SFFVRkZNVk1zVlVGQlZUSldMRWRCUVVjc1YwRkJjVU1zVDBGQlQzWkZMRVZCUVROQ04xRXNTMEZCU3paRExFbEJRVTAzUXl4TFFVRkxOa01zU1VGQmFVSXNSVUZCUlhOUUxFZEJRVVV4VXl4VlFVRlZORllzVjBGQlYyeEVMRWRCUVVVeFV5eFZRVUZWTWxZc1IwRkJSMnBFTEVkQlFVVXhVeXhWUVVGVmMwc3NSMEZCUnl4WFFVRnhReXhQUVVGUGQwZ3NSVUZCTTBKMlVpeExRVUZMTmtNc1NVRkJUVGRETEV0QlFVczJReXhKUVVGcFFpeEZRVUZGYzFBc1IwRkJSVEZUTEZWQlFWVTJWaXhwUWtGQmFVSnVSQ3hIUVVGRk1WTXNWVUZCVlhOTExFZEJRMmhoYjBrc1IwRkJSVEZUTEZWQlFWVTRWaXhIUVVGSExGZEJRVmNzU1VGQlNTOU1MRVZCUVVWNFNpeExRVUZMWWl4RlFVRkZZU3hMUVVGTGQwb3NSMEZCSzBJc1QwRkJOVUo0U2l4TFFVRkxkMG9zUjBGQlJ5eEZRVUZGY0Vnc1JVRkJSWEJETEV0QlFVdDNTaXhIUVVGSGVFb3NTMEZCUzNsS0xFZEJRVlZFTEVkQlFVY3NTVUZCU1N4RlFVRkZMRVZCUVVVeVNTeEhRVUZGTVZNc1ZVRkJWU3RXTEZOQlFWTnlSQ3hIUVVGRk1WTXNWVUZCVlRoV0xFZEJRVWR3UkN4SFFVRkZNVk1zVlVGQlZXZFhMRWRCUVVjc1YwRkJWeXhKUVVGSmFrMHNSVUZCUlhoS0xFdEJRVXRpTEVWQlFVVmhMRXRCUVV0M1NpeEhRVUZIY2tzc1JVRkJSV0VzUzBGQlMySXNSVUZCUldFc1MwRkJTM2RLTEVWQlFVVXNSMEZCSzBJc1QwRkJOVUo0U2l4TFFVRkxkMG9zUjBGQlJ5eEZRVUZGY0Vnc1JVRkJSWEJETEV0QlFVdDNTaXhIUVVGSGVFb3NTMEZCUzNsS0xFbEJRVlZFTEVWQlFVdHlTeXhIUVVGSExFbEJRVWtzU1VGQlNTeEZRVUZGTEVWQlFVVm5WQ3hIUVVGRk1WTXNWVUZCVldsWExGVkJRVlYyUkN4SFFVRkZNVk1zVlVGQlZXZFhMRWRCUVVkMFJDeEhRVUZGTVZNc1ZVRkJWV0VzUlVGQlJTeFhRVUZYTEVsQlFVbHJTaXhGUVVGRmVFb3NTMEZCUzJJc1JVRkJSV0VzUzBGQlMzZEtMRWRCUVVkeVN5eEZRVUZGWVN4TFFVRkxZaXhGUVVGRllTeExRVUZMZDBvc1JVRkJSU3hIUVVGSFF5eEZRVUZGZWtvc1MwRkJTMklzUlVGQlJXRXNTMEZCUzNkS0xFVkJRVVVzUjBGQlIzUkxMRVZCUVVWakxFdEJRVXRpTEVWQlFVVmhMRXRCUVV0M1NpeEZRVUZGTEVkQlFTdENMRTlCUVRWQ2VFb3NTMEZCUzNkS0xFZEJRVWNzUlVGQlJYQklMRVZCUVVWd1F5eExRVUZMZDBvc1IwRkJSM2hLTEV0QlFVdDVTaXhIUVVGVlJDeEZRVUZMY2tzc1IwRkJSeXhGUVVGRmMwc3NSMEZCUnl4SFFVRkhka3NzUjBGQlJ5eEZRVUZGTEVWQlFVVnBWQ3hIUVVGRk1WTXNWVUZCVld0WExGVkJRVlY0UkN4SFFVRkZNVk1zVlVGQlZXRXNSVUZEYkdVMlVpeEhRVUZGTVZNc1ZVRkJWVEJMTEVkQlFVY3NWMEZCY1VNc1QwRkJUekpITEVWQlFUTkNPVkVzUzBGQlN6WkRMRWxCUVUwM1F5eExRVUZMTmtNc1NVRkJhVUlzUlVGQlJYTlFMRWRCUVVVeFV5eFZRVUZWYlZjc1ZVRkJWWHBFTEVkQlFVVXhVeXhWUVVGVk1Fc3NSMEZCUjJkSkxFZEJRVVV4VXl4VlFVRlZkMHNzUjBGQlJ5eFhRVUZ4UXl4UFFVRlBkVWdzUlVGQk0wSjRVaXhMUVVGTE5rTXNTVUZCVFRkRExFdEJRVXMyUXl4SlFVRnBRaXhGUVVGRmMxQXNSMEZCUlRGVExGVkJRVlZ2Vnl4blFrRkJaMEl4UkN4SFFVRkZNVk1zVlVGQlZYZExMRWRCUVVkclNTeEhRVUZGTVZNc1ZVRkJWVFpLTEVkQlFVY3NWMEZCTUVJc1QwRkJUelJJTEVWQlFXaENiRklzUzBGQlN6WkRMRWxCUVd0Q0xFVkJRVVZ6VUN4SFFVRkZNVk1zVlVGQlZYRlhMRlZCUVZVelJDeEhRVUZGTVZNc1ZVRkJWVFpLTEVkQlFVYzJTU3hIUVVGRk1WTXNWVUZCVlhOWExFVkJRVVVzVjBGQmNVTXNUMEZCVHpGRkxFVkJRVE5DY2xJc1MwRkJTelpETEVsQlFVMDNReXhMUVVGTE5rTXNTVUZCYTBJc1JVRkJSWE5RTEVkQlFVVXhVeXhWUVVGVmRWY3NWMEZCVnpkRUxFZEJRVVV4VXl4VlFVRlZjMWNzUlVGQlJUVkVMRWRCUVVVeFV5eFZRVUZWZDFjc1IwRkJSeXhYUVVGWExGRkJRVkZxVnl4TFFVRkxZaXhGUVVGRllTeExRVUZMZDBvc1NVRkJTU3hGUVVGRk1ra3NSMEZCUlRGVExGVkJRVlY1Vnl4VFFVRlRMMFFzUjBGQlJURlRMRlZCUVZWM1Z5eEhRVU5xWmpsRUxFZEJRVVV4VXl4VlFVRlZkVXdzUjBGQlJ5eFhRVUZYTEU5QlFVOW9UQ3hMUVVGTE1rb3NTVUZCU1N4RlFVRkZkMGtzUjBGQlJURlRMRlZCUVZVd1Z5eFRRVUZUYUVVc1IwRkJSVEZUTEZWQlFWVjFUQ3hIUVVNM1JXMUlMRWRCUVVVeFV5eFZRVUZWYjBzc1IwRkJSeXhUUVVGVFRDeEhRVUZITEVsQlFVbHlTeXhGUVVGRllTeExRVUZMWWl4RlFVRkZjMHNzUlVGQlJYcEtMRXRCUVV0M1NpeEZRVUZGUVN4RlFVRkZReXhGUVVGRlJDeEZRVUZGTEVsQlFVa3NTVUZCU1hSTExFVkJRVVVzUjBGQlIzRkRMRVZCUVVVc1IwRkJSMnRKTEVWQlFVVkVMRWRCUVVjc1EwRkJReXhKUVVGSmRVSXNSVUZCUlRWTUxFVkJRVVZ6U3l4TFFVRkxMRWRCUVVjc1NVRkJTWE5DTEVWQlFVVTNUQ3hGUVVGRmRVUXNTMEZCUzNOSkxFOUJRVkVzU1VGQlJ5eEpRVUZKUVN4RlFVRkZMRk5CUVdNc1IwRkJSeXhKUVVGSlFTeEZRVUZGTEVOQlFVTXNTVUZCU1d4SkxFVkJRVVV4UkN4RlFVRkZjMHNzUzBGQlMzWkxMRVZCUVVWMVJDeE5RVUZSTEVkQlFVWnpTU3hKUVVGUExFVkJRVWtzUjBGQlJteEpMRVZCUVVzc1RVRkJUU3hIUVVGSExFbEJRVWxyU1N4RlFVRkZMRU5CUVVOc1NTeEZRVUZGTVVRc1JVRkJSWE5MTEV0QlFVc3NTVUZCU1doSkxFVkJRVVYwUXl4RlFVRkZjMHNzUzBGQlMzWkxMRVZCUVVWMVJDeE5RVUZSTEVkQlFVWnpTU3hKUVVGUExFbEJRVTBzUjBGQlJteEpMRWxCUVU4c1JVRkJTU3hIUVVGR2NFSXNSVUZCU3l4TlFVRk5MRWRCUVVjc1NVRkJTWE5LTEVWQlFVVXNRMEZCWjBOQkxFZEJRVXNzUlVGQlJrRXNTVUZCVFN4SlFVRk5MRWxCUVRsRGJFa3NSVUZCUlRGRUxFVkJRVVZ6U3l4UlFVRXJReXhKUVVGTkxFbEJRV2hFYUVrc1JVRkJSWFJETEVWQlFVVnpTeXhSUVVGcFJDeEZRVUZKTEVkQlFURkRkRXNzUlVGQlJYTkxMRXRCUVRKRGMwSXNSMEZCUnl4TlFVRk5OMHdzUlVGQlJYVkVMRXRCUVd0Q0xFOUJRVnB6U1N4SFFVRkhMRWRCUVVjc1RVRkJjVUlzVDBGQlRpeExRVUZHUVN4SFFVRmpMRVZCUVVNc1RVRkJUVGRNTEVWQlFVVnpSQ3hUUVVGVGFrSXNSMEZCUjNwQ0xFOUJRVTg0VEN4aFFVRmhlRXNzVFVGQlRTeExRVUZMYkVNc1IwRkJSMEVzUlVGQlJYTkVMRTlCUVU4c1JVRkJSU3hEUVVGdFFpeFBRVUZzUW1wQ0xFZEJRVWR2U3l4RlFVRkhlazBzUjBGQlIyTXNTMEZCUzNkS0xFVkJRVVZETEVWQlFWTnNTU3hEUVVGRExFVkJRMjVsTkZFc1IwRkJSVEZUTEZWQlFWVXlWeXhYUVVGWGFrVXNSMEZCUlRGVExGVkJRVlZ2U3l4SFFVRkhjMGtzUjBGQlJURlRMRlZCUVZVMFZ5eEhRVUZITEZkQlFWY3NTVUZCU1RkTkxFVkJRVVY0U2l4TFFVRkxNa01zU1VGQlNTeFBRVUZQTTBNc1MwRkJTelpLTEVkQlFVZE1MRVZCUVVVc1JVRkJSVEpKTEVkQlFVVXhVeXhWUVVGVk5sY3NjVUpCUVhGQ2JrVXNSMEZCUlRGVExGVkJRVlUwVnl4SFFVRkhiRVVzUjBGQlJURlRMRlZCUVZWdFRDeEhRVUZITEZOQlFWTndRaXhIUVVGSExFZEJRVWNzUlVGQlJVRXNSMEZCUjNoS0xFdEJRVXQzU2l4RlFVRkZRU3hGUVVGRmVFb3NTMEZCUzJJc1JVRkJSWEZFTEU5QlFVOHNUMEZCVDNoRExFdEJRVXR4UXl4SFFVRkZMRVZCUVVjM1F5eEZRVUZGTEhkQ1FVRjNRaXhKUVVGSmQwOHNWMEZCVnl4SFFVRkhMRWxCUVVrM1R5eEZRVUZGWVN4TFFVRkxZaXhGUVVGRmExQXNVMEZCVTNKUExFdEJRVXQzU2l4RlFVRkZlRW9zUzBGQlMzZEtMRVZCUVVWQkxFZEJRU3RDTEU5QlFUVkNlRW9zUzBGQlMzZEtMRWRCUVVkQkxFVkJRVVZ3U0N4RlFVRkZjRU1zUzBGQlMzZEtMRWRCUVVkNFNpeExRVUZMZVVvc1IwRkJWWFJMTEVOQlFVTXNSVUZCUldkVUxFZEJRVVV4VXl4VlFVRlZPRmNzVlVGQlZYQkZMRWRCUVVVeFV5eFZRVUZWYlV3c1IwRkJSM1ZJTEVkQlFVVXhVeXhWUVVGVmRVc3NSMEZCUnl4WFFVRlhMRTlCUVU5b1N5eExRVUZMZVV3c1JVRkJSVFpHTEVWQlFVY3NSVUZCUldFc1IwRkJSVEZUTEZWQlFWVXJWeXhwUWtGQmFVSnlSU3hIUVVGRk1WTXNWVUZCVlhWTExFZEJRMnBrYlVrc1IwRkJSVEZUTEZWQlFWVm5XQ3hGUVVGRkxGZEJRVmNzU1VGQlNXcE9MRVZCUVVWNFNpeExRVUZMWWl4RlFVRkZRU3hGUVVGRllTeExRVUZMZDBvc1JVRkJSVU1zUlVGQlJVUXNSVUZCUlhKTExFZEJRVWRFTEVWQlFVVnpTeXhGUVVGRmNrc3NSVUZCUlN4SFFVRkhiME1zUlVGQlJXbEpMRVZCUVVWeVN5eEZRVUZGTEVkQlFVYzBUQ3hGUVVGRmRrSXNSVUZCUlhKTExFVkJRVVVzUjBGQlJ6QkVMRVZCUVVVeVJ5eEZRVUZGY2tzc1JVRkJSU3hIUVVGSGMwTXNSVUZCUlN0SUxFVkJRVVZ5U3l4RlFVRkZMRWRCUVVkelR5eEZRVUZGYWtVc1JVRkJSWEpMTEVWQlFVVXNSMEZCYzBJc1QwRkJia0p4U3l4RlFVRkZRU3hGUVVGRmNrc3NSVUZCUlN4SFFVRkhZU3hMUVVGTGQwb3NSMEZCUnl4RlFVRlRNVW9zVDBGQlR6aE1MR0ZCUVdGdVF5eEZRVUZGZGtzc1JVRkJSWEZETEVWQlFVVjNTaXhGUVVGRmJFa3NSVUZCUlhCQ0xFVkJRVVZuVFN4RlFVRkZha1VzUlVGQlJTeEZRVUZGTWtrc1IwRkJSVEZUTEZWQlFWVnBXQ3huUWtGQlowSjJSU3hIUVVGRk1WTXNWVUZCVldkWUxFVkJRVGhHTVZVc1JVRkJSU3h2UWtGQmIwSjNVU3hSUVVGRkxFZEJRVkVzU1VGQlNXOUZMRWRCUVVVc1IwRkJPRVlzVTBGQlUwTXNSMEZCUjNCT0xFVkJRVVZ5U3l4RlFVRkZjMHNzUjBGQlJ5eEhRVUZIYTA0c1IwRkJSVzVWTEU5QlFVOHNRMEZCUXl4SlFVRkpkRVFzUlVGQlJYbFlMRWRCUVVWd1ZTeE5RVUZ6UWl4UFFVRm9RbWxJTEVkQlFVZDBTeXhGUVVGRmMwc3NSVUZCUld0SkxFVkJRVVZzU1N4RlFVRkZja3NzUlVGQlJYTkxMRWRCUVZWMlN5eERRVUZETEVOQlFVTXNUMEZCVHl4SlFVRkpjVlFzUjBGQlJTOUpMRVZCUVVWeVN5eEZRVUZGYzBzc1JVRkJSU3hEUVdOMlRDeFRRVUZUYjA0c1IwRkJSWEpPTEVWQlFVVnlTeXhIUVVGSGFVUXNSVUZCUlN4SFFVRkhiMGdzUlVGQlJYSkxMRWRCUVVjc1NVRkJTWE5MTEVWQlFVVkVMRVZCUVVWQkxFVkJRVVUzUnl4SlFVRkpPRWNzUlVGQlJVUXNSVUZCUlVFc1JVRkJSV2xGTEVsQlFVbG9SU3hGUVVGRkxFbEJRVWtzU1VGQlNYWkxMRVZCUVVVc1IwRkJSM05MTEVWQlFVVkJMRVZCUVVWcFJTeEpRVUZKYUVVc1IwRkJSM1pMTEVWQlFVVjFSQ3hMUVVGTGRFUXNSVUZCUlZFc1MwRkJTelpLTEVWQlFVVkJMRWxCUVVrc1QwRkJUM1JMTEVOQlFVTXNRMEZMTjAwc1UwRkJVelpPTEVkQlFVZDJSQ3hGUVVGRmNrc3NSVUZCUlhOTExFVkJRVVYyU3l4RlFVRkZjVU1zUjBGQlIzWkNMRXRCUVVzNFZ5eEhRVUZIZEU0c1JVRkJSWGhLTEV0QlFVdDFUaXhIUVVGSGNFOHNSVUZCUldFc1MwRkJTekJMTEVkQlFVZHFRaXhGUVVGRmVrb3NTMEZCUzJ0U0xFZEJRVWRvVXl4RlFVRkZZeXhMUVVGTEsxY3NSMEZCUjNoV0xFTkJRVU1zUTBGQmQwTXNVMEZCVTNsV0xFZEJRVWQ0VGl4RlFVRkZja3NzUlVGQlJYTkxMRVZCUVVWMlN5eEZRVUZGY1VNc1JVRkJSWGRLTEVkQlFVY3ZTeXhMUVVGTFoxZ3NSMEZCUjNoT0xFVkJRVVY0U2l4TFFVRkxiMDRzUjBGQlIycFBMRVZCUVVWaExFdEJRVXR4VGl4SFFVRkhOVVFzUlVGQlJYcEtMRXRCUVV0elV5eEhRVUZIY0ZRc1JVRkJSV01zUzBGQlMybFlMRWRCUVVjeFZpeEZRVUZGZGtJc1MwRkJTMnRZTEVkQlFVZHVUU3hEUVVGRExFTkJRVzFKTEZOQlFWTnZUU3hMUVVGTExFTkJia0k1VHpWRkxFZEJRVVUyUlN4dFFrRkJiVUlzVjBGQlYxUXNSMEZCUlN4RlFVRkZMRVZCUVVWd1JTeEhRVUZGUlN4MVFrRkJkVUlzVjBGQlZ5eFBRVUZQYTBVc1IwRkJSVzVWTEUxQlFVMHNSVUZCTmtZclVDeEhRVUZGUnl4TlFVRk5hMFVzUjBGQlIzSkZMRWRCUVVVNVV5eFZRVUZWTkZnc1IwRkJSMVFzUjBGQlIzSkZMRWRCUVVVNVV5eFZRVUZWYVZRc1RVRkJUVWdzUjBGQlJUbFRMRlZCUVZVMFdDeEhRVUZIT1VVc1IwRkJSVGxUTEZWQlFWVXJUaXhIUVVGSExGZEJRVmQ0VGl4TFFVRkxkMG9zUlVGQlJUWkRMRkZCUVZGeVRTeExRVUZMWWl4RlFVRkZZU3hMUVVGTGVVb3NSMEZCUnl4RlFVRkZla29zUzBGQlN5dExMRWRCUVVVc1JVRkJSeTlMTEV0QlFVdHhReXhGUVVGRkxFdEJRVXNzU1VGQlNYTlZMRWRCUVVWdVZTeFJRVUZSYlZVc1IwRkJSV3hWTEV0QlFVdDZReXhMUVVGTExFVkJRM3B5UW5WVExFZEJRVVU1VXl4VlFVRlZhMVFzUzBGQlMwb3NSMEZCUlRsVExGVkJRVlVyVGl4SFFVRkhLMFVzUjBGQlJUbFRMRlZCUVZVMldDeEhRVUZITEZkQlFWY3NUMEZCVDNSWUxFdEJRVXQzVXl4RFFVRkRMRVZCUVVWRUxFZEJRVVU1VXl4VlFVRlZPRmdzWlVGQlpXaEdMRWRCUVVVNVV5eFZRVUZWTmxnc1IwRkJSeTlGTEVkQlFVVTVVeXhWUVVGVlowOHNSVUZCUlN4WFFVRlhMRTlCUVU5NlRpeExRVUZMZDBvc1JVRkJSV2xGTEVkQlFVY3NSVUZCUlRoRkxFZEJRVVU1VXl4VlFVRlZNbFFzVlVGQlZXSXNSMEZCUlRsVExGVkJRVlZuVHl4RlFVRkZPRVVzUjBGQlJUbFRMRlZCUVZWdlZDeEZRVUZGTEZkQlFWY3NUMEZCVHpkVExFdEJRVXQzU2l4RlFVRkZjVW9zUjBGQlJ5eEZRVUZGVGl4SFFVRkZPVk1zVlVGQlZYRlVMRlZCUVZWUUxFZEJRVVU1VXl4VlFVRlZiMVFzUlVGQlJVNHNSMEZCUlRsVExGVkJRVlVyV0N4SFFVRkhMRmRCUVZjc1QwRkJUM2hZTEV0QlFVdDVTaXhEUVVGRExFVkJRVVU0U1N4SFFVRkZPVk1zVlVGQlZXZFpMR1ZCUVdWc1JpeEhRVUZGT1ZNc1ZVRkJWU3RZTEVkQlFVZHFSaXhIUVVGRk9WTXNWVUZCVldsWkxFZEJRVWNzVjBGQlZ5eFBRVUZQTVZnc1MwRkJTMklzUTBGQlF5eEZRVUZGYjFRc1IwRkJSVGxUTEZWQlFWVnJXU3haUVVGWmNFWXNSMEZCUlRsVExGVkJRVlZwV1N4SFFVRkhia1lzUjBGQlJUbFRMRlZCUVZWdFdTeEhRVUZITEZkQlFWY3NUMEZCVHl4SFFVRkhOVmdzUzBGQlMySXNRMEZCUXl4RlFVTm9aVzlVTEVkQlFVVTVVeXhWUVVGVmIxa3NXVUZCV1hSR0xFZEJRVVU1VXl4VlFVRlZiVmtzUjBGQlIzSkdMRWRCUVVVNVV5eFZRVUZWZVU0c1IwRkJSeXhYUVVGWExFOUJRVThzUjBGQlIyeE9MRXRCUVV0aUxFTkJRVU1zUlVGQlJXOVVMRWRCUVVVNVV5eFZRVUZWY1Zrc1YwRkJWM1pHTEVkQlFVVTVVeXhWUVVGVmVVNHNSMEZCUjNGR0xFZEJRVVU1VXl4VlFVRlZhVlVzVTBGQlV5eFhRVUZYTEU5QlFVOHhWQ3hMUVVGTEswc3NSMEZCUnk5TExFdEJRVXQzU2l4RlFVRkZhMHNzVlVGQlZTeEZRVUZGYmtJc1IwRkJSVGxUTEZWQlFWVnBWU3hUUVVGVGJrSXNSMEZCUlRsVExGVkJRVlZwVlN4VFFVRlRia0lzUjBGQlJUbFRMRlZCUVZWcFV5eEZRVUZGTEZOQlFWTnNTU3hGUVVGRmNrc3NSVUZCUlhOTExFZEJRVWQ2U2l4TFFVRkxkMG9zUlVGQlJXdEpMRVZCUVVWc1NTeEZRVUZGY2tzc1JVRkJSWE5MTEVkQlFVZDZTaXhMUVVGTFlpeEZRVUZGWVN4TFFVRkxlVW9zUjBGQlJ5eERRVUZETEVWQlFVVTRTU3hIUVVGRk9WTXNWVUZCVlhOVUxGTkJRVk5TTEVkQlFVVTVVeXhWUVVGVmFWTXNSVUZCUldFc1IwRkJSVGxUTEZWQlFWVXdWQ3hOUVVGTkxGZEJRVmR1VkN4TFFVRkxkMG9zUlVGQlJUSktMRkZCUVZGdVZDeExRVUZMWWl4RlFVRkZZU3hMUVVGTGVVb3NSMEZCUnl4RFFVRkRMRVZCUVVVNFNTeEhRVUZGT1ZNc1ZVRkJWVEJVTEUxQlFVMWFMRWRCUVVVNVV5eFZRVUZWTUZRc1RVRkJUVm9zUjBGQlJUbFRMRlZCUVZVMlZDeFJRVUZSTEZOQlFWTTVTaXhIUVVGSGVFb3NTMEZCUzNkS0xFVkJRVVU0U2l4UlFVRlJPVW9zUlVGQlJTeEZRVUZGSzBrc1IwRkJSVGxUTEZWQlFWVTJWQ3hSUVVGUlppeEhRVUZGT1ZNc1ZVRkJWVFpVTEZGQlF6ZG1aaXhIUVVGRk9WTXNWVUZCVld0TUxFZEJRVWNzVjBGQlZ5eEhRVUZITTBzc1MwRkJTM2RLTEVWQlFVVXlSQ3hMUVVGTExFOUJRVTBzUlVGQlJ5eEhRVUZIYms0c1MwRkJTekJVTEZkQlFWY3NUMEZCVDJ4VkxFVkJRVVVzZVVKQlFYZENMRVZCUVVkUkxFdEJRVXQzVXl4RlFVRkZlRk1zUzBGQlMzZEtMRVZCUVVWcFJTeEpRVUZKTEVsQlFVbHFSU3hGUVVGRmVFb3NTMEZCUzNkS0xFVkJRVVUzUnl4SlFVRkplRVFzUlVGQlJYRkxMRWxCUVVrc1JVRkJUeXhQUVVGSExFbEJRVkpCTEVkQlFVY3NTVUZCVnl4SFFVRkhRU3hIUVVGSExFZEJRVWRCTEVkQlFVY3NSMEZCUjBFc1IwRkJSeXhIUVVGSFFTeEhRVUZITEVkQlFVZEJMRWRCUVZOb1N5eEZRVUZGTEhsRFFVRjVRMmRMTEVWQlFVVjRTaXhMUVVGTGQxTXNSMEZCUjNoVExFdEJRVXNyU3l4SFFVRkZMRWRCUVVjc1NVRkJSeTlMTEV0QlFVdDVTaXhGUVVGRmRFc3NSVUZCUldFc1MwRkJTMklzUlVGQlJYRkxMRWRCUVZFc1JVRkJSU3hGUVVGRkswa3NSMEZCUlRsVExGVkJRVlZ6V1N4VlFVRlZlRVlzUjBGQlJUbFRMRlZCUVZWclRDeEhRVUZITkVnc1IwRkJSVGxUTEZWQlFWVTBVaXhIUVVGSExGZEJRVmR5VWl4TFFVRkxkMG9zUlVGQlJYbExMRWRCUVVkcVZTeExRVUZMZVVvc1IwRkJSeXhGUVVGRmVrb3NTMEZCUzJJc1JVRkJSU3hGUVVGRmIxUXNSMEZCUlRsVExGVkJRVlYxV1N4aFFVRmhla1lzUjBGQlJUbFRMRlZCUVZVMFVpeEhRVU55WVd0Q0xFZEJRVVU1VXl4VlFVRlZkMWtzUjBGQlJ5eFhRVUZYTEVsQlFVbDZUeXhGUVVGRmVFb3NTMEZCUzNsS0xFVkJRVVVzU1VGQlNYcEtMRXRCUVV0eFVpeExRVUZMY2xJc1MwRkJTekpMTEUxQlFVMHpTeXhMUVVGTGVVb3NSMEZCUjBRc1IwRkJSM2hLTEV0QlFVc3lVU3hKUVVGSk0xRXNTMEZCUzNkS0xFVkJRVVV5UkN4TlFVRk5iazRzUzBGQlMzRlNMRWxCUVVrc1JVRkJSV3RDTEVkQlFVVTVVeXhWUVVGVmVWa3NiVUpCUVcxQ00wWXNSMEZCUlRsVExGVkJRVlYzV1N4SFFVRkhNVVlzUjBGQlJUbFRMRlZCUVZVd1dTeEhRVUZITEZkQlFWY3NSMEZCUjI1WkxFdEJRVXRpTEVkQlFVZExMRVZCUVVVc2VVTkJRWGxEVVN4TFFVRkxNbEVzUzBGQlN6TlJMRXRCUVV0M1NpeEZRVUZGZFVzc1NVRkJTU3hGUVVGRmVFSXNSMEZCUlRsVExGVkJRVlV5V1N4blFrRkJaMEkzUml4SFFVRkZPVk1zVlVGQlZUQlpMRWRCUVVjMVJpeEhRVUZGT1ZNc1ZVRkJWVFJaTEVkQlFVY3NWMEZCVnl4SFFVRkhMRWRCUVVkeVdTeExRVUZMWWl4RlFVRkZTeXhGUVVGRkxEUkRRVUUwUTFFc1MwRkJTekpSTEZGQlFWRXNRMEZCUXl4SlFVRkpia2dzUlVGQlJYaEtMRXRCUVV0M1NpeEZRVUZGTjBjc1NVRkJTVE5ETEV0QlFVdDNTaXhGUVVGRk9Fb3NVVUZCVVRsS0xFVkJRVVVzUTBGQlF5eEZRVUZGSzBrc1IwRkJSVGxUTEZWQlFWVTJXU3h0UWtGQmJVSXZSaXhIUVVGRk9WTXNWVUZCVlRSWkxFZEJReTlrT1VZc1IwRkJSVGxUTEZWQlFWVTRXU3hIUVVGSExGZEJRVmNzUjBGQlIzWlpMRXRCUVV0aUxFZEJRVWRMTEVWQlFVVXNNRU5CUVRCRFVTeExRVUZMTWxFc1MwRkJTek5STEV0QlFVdDNTaXhGUVVGRk9Fb3NVVUZCVVN4RlFVRkZMRVZCUVVWbUxFZEJRVVU1VXl4VlFVRlZLMWtzYVVKQlFXbENha2NzUjBGQlJUbFRMRlZCUVZVNFdTeEhRVUZIYUVjc1IwRkJSVGxUTEZWQlFWVm5XaXhIUVVGSExGZEJRVmNzUjBGQlIzcFpMRXRCUVV0aUxFZEJRVWRMTEVWQlFVVXNNRU5CUVRCRFVTeExRVUZMTWxFc1MwRkJTek5STEV0QlFVdDNTaXhGUVVGRk9Fb3NVVUZCVVN4RlFVRkZMRVZCUVVWbUxFZEJRVVU1VXl4VlFVRlZhVm9zYVVKQlFXbENia2NzUjBGQlJUbFRMRlZCUVZWbldpeEhRVUZIYkVjc1IwRkJSVGxUTEZWQlFWVnJXaXhIUVVGSExGZEJRWGRDTEVsQlFXSXNTVUZCU1c1UUxFVkJRVVY0U2l4TFFVRkxlVW9zU1VGQlNTeERRVUZETEVsQlFVbDZTaXhMUVVGTE1rc3NTMEZCU3l4RFFVRkRia3dzUlVGQlJTeDVRMEZCZVVOUkxFdEJRVXNyU3l4SFFVRkZMRVZCUVVjc1MwRkJTeXhEUVVGRExFZEJRVWNzUjBGQlJ5OUxMRXRCUVV0aUxFVkJRVVVzUTBGQlEyRXNTMEZCUzNsS0xFZEJRVWRFTEVsQlFVbG9TeXhGUVVGRkxESkNRVUV5UWxFc1MwRkJTeXRMTEVkQlFVVXNSMEZCU1N4TFFVRkxMRU5CUVVNdlN5eExRVUZMTWxFc1IwRkJSeXhEUVVGVExFVkJRMnBuUWpSQ0xFZEJRVVU1VXl4VlFVRlZiVm9zVlVGQlZYSkhMRWRCUVVVNVV5eFZRVUZWYTFvc1IwRkJSM0JITEVkQlFVVTVVeXhWUVVGVmExSXNSVUZCUlN4WFFVRlhMRTlCUVU4elVTeExRVUZMWWl4SFFVRkhMRXRCUVVzc1JVRkJSV0VzUzBGQlMyMVpMRXRCUVVzc1RVRkJUU3hMUVVGTExFVkJRVVZ1V1N4TFFVRkxlVmtzUzBGQlN5eE5RVUZOTEV0QlFVc3NSVUZCUlhwWkxFdEJRVXR4V1N4TFFVRkxMRTFCUVUwc1MwRkJTeXhGUVVGRmNsa3NTMEZCUzNWWkxFdEJRVXNzVFVGQlRTeExRVUZMTEVWQlFVVjJXU3hMUVVGTE1sa3NTMEZCU3l4TlFVRk5MRkZCUVZGdVdpeEZRVUZGTEc5RFFVRnZReXhGUVVGRksxTXNSMEZCUlRsVExGVkJRVlZ2V2l4VlFVRlZkRWNzUjBGQlJUbFRMRlZCUVZWclVpeEZRVUZGTkVJc1IwRkJSVGxUTEZWQlFWVnhXaXhIUVVGSExGTkJRVk4wVUN4RlFVRkZja3NzUjBGQlJ5eFBRVUZQWVN4TFFVRkxjVU1zU1VGQlNYSkRMRXRCUVV0eFF5eEZRVUZGTEVOQlFVVXNSMEZCUlVRc1IwRkJSM0JETEV0QlFVdHhReXhGUVVGRmJVZ3NTVUZCU1hoS0xFdEJRVXR4UXl4RlFVRkZiVWdzUjBGQlIzSkxMRU5CUVVNc1JVRkJSVzlVTEVkQlFVVTVVeXhWUVVGVmMxb3NjVUpCUVhGQ2VFY3NSMEZCUlRsVExGVkJRVlZ4V2l4SFFVRkhka2NzUjBGQlJUbFRMRlZCUVZWMVdpeEhRVUZITEZOQlFWTjRVQ3hIUVVGeFF5eFBRVUZzUTNCSUxFVkJRVVVzVDBGQlQzQkRMRXRCUVV0eFF5eEhRVUZsUkN4RlFVRmFiMGdzUlVGQlJYaEtMRXRCUVV0eFF5eEZRVUZGYlVnc1NVRkJaVUVzUlVGQlJYaEtMRXRCUVVzc1JVRkRiR1YxVXl4SFFVRkZPVk1zVlVGQlZYZGFMR2RDUVVGblFqRkhMRWRCUVVVNVV5eFZRVUZWZFZvc1IwRkJSM3BITEVkQlFVVTVVeXhWUVVGVmVWb3NSMEZCUnl4VFFVRlRNVkFzUlVGQlJYSkxMRWRCUVVkcFJDeEZRVUZGTEVkQlFVZHdReXhMUVVGTFlpeEhRVUZITEVsQlFVbHpTeXhGUVVGRmVrb3NTMEZCUzNkS0xFVkJRVVZETEVWQlFVVjJTeXhGUVVGRll5eExRVUZMZDBvc1JVRkJSVGRITEVsQlFVbDZSQ3hGUVVGRll5eExRVUZMZDBvc1JVRkJSV2xGTEVsQlFVbDJUeXhGUVVGRll5eExRVUZMZDBvc1JVRkJSVEJLTEU5QlFVOW9WU3hIUVVGSFF5eEZRVUZGY1Vzc1JVRkJSWGhLTEUxQlFVMUJMRXRCUVV0M1NpeEZRVUZGZVVnc1IwRkJSeTlTTEVkQlFVZGpMRXRCUVV0M1NpeEZRVUZGTUVvc1QwRkJUM3BLTEVWQlFVVXNSVUZCUlRoSkxFZEJRVVU1VXl4VlFVRlZNRm9zV1VGQldUVkhMRWRCUVVVNVV5eFZRVUZWZVZvc1IwRkJSek5ITEVkQlFVVTVVeXhWUVVGVk1sb3NSMEZCUnl4VFFVRlROVkFzUlVGQlJYSkxMRVZCUVVWelN5eEhRVUZIY2tnc1JVRkJSU3hIUVVGSGNFTXNTMEZCUzJJc1IwRkJSMmxFTEVWQlFVVndReXhMUVVGTGVVb3NSMEZCUjBRc1IwRkJSME1zUlVGQlJYUkxMRVZCUVVWaExFMUJRVTFCTEV0QlFVc3JTeXhIUVVGSExFZEJRVWN2U3l4TFFVRkxZaXhKUVVGSlN5eEZRVUZGTEhORVFVRnpSRkVzUzBGQlN5dExMRWRCUVVVc1JVRkJSeXhGUVVGRmQwZ3NSMEZCUlRsVExGVkJRVlUwV2l4VlFVRlZPVWNzUjBGQlJUbFRMRlZCUVZVeVdpeEhRVU01V2pkSExFZEJRVVU1VXl4VlFVRlZObG9zUjBGQlJ5eFhRVUZYYkZnc1JVRkJSU3hIUVVGSGNFTXNTMEZCUzJJc1IwRkJSeXhKUVVGSmNVc3NSVUZCUlhoS0xFdEJRVXQzU2l4RlFVRkZOMGNzU1VGQlNYaEVMRVZCUVVWaExFdEJRVXQzU2l4RlFVRkZhVVVzU1VGQlNXaEZMRVZCUVVWMFN5eEZRVUZGY1Vzc1JVRkJiME1zVDBGQmJFTkJMRVZCUVVVNFNTeEhRVUZIZEZNc1MwRkJTM2RLTEVWQlFVVnhTaXhKUVVGSk1WUXNSVUZCUlhGTExFZEJRVWQ0U2l4TFFVRkxkMG9zUlVGQlJYbElMRWRCUVVkNFNDeEhRVUZWUkN4RFFVRkRMRVZCUVVVclNTeEhRVUZGT1ZNc1ZVRkJWVGhhTEdkQ1FVRm5RbWhJTEVkQlFVVTVVeXhWUVVGVk5sb3NSMEZCUnk5SExFZEJRVVU1VXl4VlFVRlZZU3hGUVVGRkxGZEJRWGRDTEU5QlFXSTRRaXhGUVVGRkxFZEJRVWR3UXl4TFFVRkxZaXhIUVVGVllTeExRVUZMZDBvc1JVRkJSVWNzU1VGQlNTeEZRVUZGTkVrc1IwRkJSVGxUTEZWQlFWVnJWeXhWUVVGVmNFUXNSMEZCUlRsVExGVkJRVlZoTEVWQlFVVnBVeXhIUVVGRk9WTXNWVUZCVlN0YUxFZEJRVWNzVjBGQmQwSXNUMEZCWW5CWUxFVkJRVVVzUjBGQlIzQkRMRXRCUVV0aUxFZEJRVlZoTEV0QlFVdDNTaXhGUVVGRk5FVXNTVUZCU1N4RlFVRkZiVVVzUjBGQlJUbFRMRlZCUVZWbllTeG5Ra0ZCWjBKc1NDeEhRVUZGT1ZNc1ZVRkJWU3RhTEVkQlFVZHFTQ3hIUVVGRk9WTXNWVUZCVlRCTExFZEJRVWNzVjBGQmQwSXNUMEZCWWk5SUxFVkJRVVVzUjBGQlIzQkRMRXRCUVV0aUxFZEJRVlZoTEV0QlFVdDNTaXhGUVVGRmVVSXNTVUZCU1N4RlFVRkZjMGdzUjBGQlJUbFRMRlZCUVZWdFZ5eFZRVUZWY2tRc1IwRkJSVGxUTEZWQlFWVXdTeXhIUVVGSGIwa3NSMEZCUlRsVExGVkJRVlYzU3l4SFFVRkhMRmRCUVhkQ0xFOUJRV0kzU0N4RlFVRkZMRWRCUVVkd1F5eExRVUZMWWl4SFFVRlZZU3hMUVVGTGQwb3NSVUZCUlhsSExFbEJRVWtzUlVGREwyWnpReXhIUVVGRk9WTXNWVUZCVlc5WExHZENRVUZuUW5SRUxFZEJRVVU1VXl4VlFVRlZkMHNzUjBGQlIzTkpMRWRCUVVVNVV5eFZRVUZWYjBRc1JVRkJSU3hYUVVGM1FpeFBRVUZpVkN4RlFVRkZMRWRCUVVkd1F5eExRVUZMWWl4SFFVRlZZU3hMUVVGTGQwb3NSVUZCUlRkSExFZEJRVWNzUlVGQlJUUlFMRWRCUVVVNVV5eFZRVUZWTUZZc1YwRkJWelZETEVkQlFVVTVVeXhWUVVGVmIwUXNSVUZCUlRCUUxFZEJRVVU1VXl4VlFVRlZhV0VzUjBGQlJ5eFhRVUYzUWl4UFFVRmlkRmdzUlVGQlJTeEhRVUZIY0VNc1MwRkJTMklzUjBGQlZXRXNTMEZCUzNkS0xFVkJRVVZuU2l4SFFVRkhMRVZCUVVWRUxFZEJRVVU1VXl4VlFVRlZhMkVzYVVKQlFXbENjRWdzUjBGQlJUbFRMRlZCUVZWcFlTeEhRVUZIYmtnc1IwRkJSVGxUTEZWQlFWVXlWaXhIUVVGSExGZEJRWGRDTEU5QlFXSm9WQ3hGUVVGRkxFZEJRVWR3UXl4TFFVRkxZaXhIUVVGVllTeExRVUZMZDBvc1JVRkJSVFJITEVsQlFVa3NSVUZCUlcxRExFZEJRVVU1VXl4VlFVRlZORllzVjBGQlZ6bERMRWRCUVVVNVV5eFZRVUZWTWxZc1IwRkJSemRETEVkQlFVVTVVeXhWUVVGVmMwc3NSMEZCUnl4WFFVRjNRaXhQUVVGaU0wZ3NSVUZCUlN4SFFVRkhjRU1zUzBGQlMySXNSMEZCVldFc1MwRkJTM2RLTEVWQlFVVTJSeXhKUVVGSkxFVkJRVVZyUXl4SFFVRkZPVk1zVlVGQlZUWldMR2xDUVVGcFFpOURMRWRCUVVVNVV5eFZRVUZWYzBzc1IwRkJSM2RKTEVkQlFVVTVVeXhWUVVGVmJXRXNSMEZCUnl4WFFVRjNRaXhQUVVGaWVGZ3NSVUZCUlN4SFFVRkhjRU1zUzBGQlMySXNSMEZCVldFc1MwRkJTM2RLTEVWQlFVVnJTQ3hKUVVGSkxFVkJRMmhtTmtJc1IwRkJSVGxUTEZWQlFWVnZZU3hYUVVGWGRFZ3NSMEZCUlRsVExGVkJRVlZ0WVN4SFFVRkhja2dzUjBGQlJUbFRMRlZCUVZWeFlTeEhRVUZITEZkQlFYZENMRTlCUVdJeFdDeEZRVUZGTEVkQlFVZHdReXhMUVVGTFlpeEhRVUZWWVN4TFFVRkxkMG9zUlVGQlJYVklMRWxCUVVrc1JVRkJSWGRDTEVkQlFVVTVVeXhWUVVGVmMyRXNWMEZCVjNoSUxFZEJRVVU1VXl4VlFVRlZjV0VzUjBGQlIzWklMRWRCUVVVNVV5eFZRVUZWZFdFc1IwRkJSeXhYUVVGM1FpeFBRVUZpTlZnc1JVRkJSU3hIUVVGSGNFTXNTMEZCUzJJc1IwRkJWV0VzUzBGQlMzZEtMRVZCUVVWM1NDeEpRVUZKTEVWQlFVVjFRaXhIUVVGRk9WTXNWVUZCVlhkaExHbENRVUZwUWpGSUxFZEJRVVU1VXl4VlFVRlZkV0VzUjBGQlIzcElMRWRCUVVVNVV5eFZRVUZWZVdFc1IwRkJSeXhYUVVGM1FpeFBRVUZpT1Znc1JVRkJSU3hIUVVGSGNFTXNTMEZCUzJJc1IwRkJWV0VzUzBGQlMzZEtMRVZCUVVVelJ5eEhRVUZITEVWQlFVVXdVQ3hIUVVGRk9WTXNWVUZCVlRCaExGbEJRVmsxU0N4SFFVRkZPVk1zVlVGQlZYbGhMRWRCUVVjelNDeEhRVUZGT1ZNc1ZVRkJWVEpoTEVkQlFVY3NWMEZCZDBJc1QwRkJZbWhaTEVWQlFVVXNSMEZCUjNCRExFdEJRVXRpTEVkQlFWVmhMRXRCUVV0M1NpeEZRVUZGTkV3c1NVRkJTU3hGUVVGRk4wTXNSMEZCUlRsVExGVkJRVlUwWVN4WlFVRlpPVWdzUjBGQlJUbFRMRlZCUVZVeVlTeEhRVUZITjBnc1IwRkJSVGxUTEZWQlFWVTJZU3hIUVVGSExGZEJRWGRDTEU5QlFXSnNXU3hGUVVGRkxFZEJRVWR3UXl4TFFVRkxZaXhIUVVGVllTeExRVUZMZDBvc1JVRkJSVThzU1VGQlNTeEZRVU14WlhkSkxFZEJRVVU1VXl4VlFVRlZPR0VzYTBKQlFXdENhRWtzUjBGQlJUbFRMRlZCUVZVMllTeEhRVUZITDBnc1IwRkJSVGxUTEZWQlFWVXJZU3hIUVVGSExGZEJRWGRDTEU5QlFXSndXU3hGUVVGRkxFZEJRVWR3UXl4TFFVRkxZaXhIUVVGVllTeExRVUZMZDBvc1JVRkJSV3hLTEVkQlFVY3NSVUZCUldsVExFZEJRVVU1VXl4VlFVRlZaMklzWVVGQllXeEpMRWRCUVVVNVV5eFZRVUZWSzJFc1IwRkJSMnBKTEVkQlFVVTVVeXhWUVVGVmFXSXNSMEZCUnl4WFFVRjNRaXhQUVVGaWRGa3NSVUZCUlN4SFFVRkhjRU1zUzBGQlMySXNSMEZCVldFc1MwRkJTM2RLTEVWQlFVVnNTaXhKUVVGSmQwb3NWVUZCVlN4RlFVRkZlVWtzUjBGQlJUbFRMRlZCUVZWcllpeHRRa0ZCYlVKd1NTeEhRVUZGT1ZNc1ZVRkJWV2xpTEVkQlFVZHVTU3hIUVVGRk9WTXNWVUZCVlcxaUxFZEJRVWNzVjBGQmQwSXNUMEZCWW5oWkxFVkJRVVVzUjBGQlIzQkRMRXRCUVV0aUxFZEJRVlZoTEV0QlFVdDNTaXhGUVVGRlZ5eEpRVUZKTEVWQlFVVnZTU3hIUVVGRk9WTXNWVUZCVlc5aUxHRkJRV0YwU1N4SFFVRkZPVk1zVlVGQlZXMWlMRWRCUVVkeVNTeEhRVUZGT1ZNc1ZVRkJWWEZpTEVkQlFVY3NWMEZCZDBJc1QwRkJZakZaTEVWQlFVVXNSMEZCUjNCRExFdEJRVXRpTEVkQlFWVmhMRXRCUVV0M1NpeEZRVUZGVXl4SlFVRkpMRVZCUVVWelNTeEhRVUZGT1ZNc1ZVRkJWWE5pTEcxQ1FVRnRRbmhKTEVkQlFVVTVVeXhWUVVGVmNXSXNSMEZETTJOMlNTeEhRVUZGT1ZNc1ZVRkJWVFpLTEVkQlFVY3NWMEZCZDBJc1QwRkJZbXhJTEVWQlFVVXNSMEZCUjNCRExFdEJRVXRpTEVkQlFWVmhMRXRCUVV0M1NpeEZRVUZGUml4SlFVRkpMRVZCUVVWcFNpeEhRVUZGT1ZNc1ZVRkJWWEZYTEZWQlFWVjJSQ3hIUVVGRk9WTXNWVUZCVlRaS0xFZEJRVWRwU2l4SFFVRkZPVk1zVlVGQlZYTlhMRVZCUVVVc1YwRkJkMElzVDBGQllqTlVMRVZCUVVVc1IwRkJSM0JETEV0QlFVdGlMRWRCUVZWaExFdEJRVXQzU2l4RlFVRkZkVTBzUjBGQlJ5eEZRVUZGZUVRc1IwRkJSVGxUTEZWQlFWVjFWeXhYUVVGWGVrUXNSMEZCUlRsVExGVkJRVlZ6Vnl4RlFVRkZlRVFzUjBGQlJUbFRMRlZCUVZWM1Z5eEhRVUZITEZkQlFYZENMRTlCUVdJM1ZDeEZRVUZGTEVkQlFVZHdReXhMUVVGTFlpeExRVUZYWVN4TFFVRkxkMG9zUlVGQlJUZEhMRWRCUVVjc1JVRkJSVFJRTEVkQlFVVTVVeXhWUVVGVmVWY3NVMEZCVXpORUxFZEJRVVU1VXl4VlFVRlZkMWNzUjBGQlJ6RkVMRWRCUVVVNVV5eFZRVUZWZFV3c1IwRkJSeXhYUVVGM1FpeFBRVUZpTlVrc1JVRkJSU3hIUVVGSGNFTXNTMEZCUzJJc1IwRkJWV0VzUzBGQlMzZEtMRVZCUVVWNVFpeEpRVUZKTEVWQlFVVnpTQ3hIUVVGRk9WTXNWVUZCVlRCWExGTkJRVk0xUkN4SFFVRkZPVk1zVlVGQlZYVk1MRWRCUVVkMVNDeEhRVUZGT1ZNc1ZVRkJWVzlMTEVkQlFVY3NWMEZCVjNwSUxFVkJRVVVzUjBGQlIzQkRMRXRCUVV0aUxFZEJRVWNzU1VGQlNYRkxMRVZCUVVWNFNpeExRVUZMZDBvc1JVRkJSVGRITEVsQlFVa3NUMEZCVHpORExFdEJRVXQzU2l4RlFVRkZTeXhIUVVGSFRDeEZRVUZGTEVWQlFVVXJTU3hIUVVGRk9WTXNWVUZCVlRKWExGZEJRVmMzUkN4SFFVRkZPVk1zVlVGQlZXOUxMRWRCUXpWbE1Fa3NSMEZCUlRsVExGVkJRVlZ0VEN4SFFVRkhMRmRCUVZkNFNTeEZRVUZGTEVkQlFVZHdReXhMUVVGTFlpeEhRVUZITEVsQlFVbHhTeXhGUVVGRmVFb3NTMEZCUzNkS0xFVkJRVVUzUnl4SlFVRkpMRTlCUVU4elF5eExRVUZMZDBvc1JVRkJSVzlDTEVkQlFVZHdRaXhGUVVGRkxFVkJRVVVyU1N4SFFVRkZPVk1zVlVGQlZUaFhMRlZCUVZWb1JTeEhRVUZGT1ZNc1ZVRkJWVzFNTEVkQlFVY3lTQ3hIUVVGRk9WTXNWVUZCVlhWTExFZEJRVWNzVjBGQmQwSXNUMEZCWWpWSUxFVkJRVVVzUjBGQlIzQkRMRXRCUVV0aUxFZEJRVlZoTEV0QlFVdDNTaXhGUVVGRlVTeEpRVUZKTEVWQlFVVjFTU3hIUVVGRk9WTXNWVUZCVlN0WExHbENRVUZwUW1wRkxFZEJRVVU1VXl4VlFVRlZkVXNzUjBGQlIzVkpMRWRCUVVVNVV5eFZRVUZWZFdJc1IwRkJSeXhYUVVGM1FpeFBRVUZpTlZrc1JVRkJSU3hIUVVGSGNFTXNTMEZCUzJJc1IwRkJWV0VzUzBGQlMzZEtMRVZCUVVWdlRDeEpRVUZKTEVWQlFVVnlReXhIUVVGRk9WTXNWVUZCVlhkaUxHVkJRV1V4U1N4SFFVRkZPVk1zVlVGQlZYVmlMRWRCUVVkNlNTeEhRVUZGT1ZNc1ZVRkJWV2ROTEVWQlFVVXNVMEZCVTJwRExFZEJRV2RDTEU5QlFXSndTQ3hGUVVGRkxFZEJRVWR3UXl4TFFVRkxZaXhIUVVGVllTeExRVUZMZDBvc1JVRkJSV2xETEVWQlFVVnFReXhGUVVGRkxFVkJRVVVyU1N4SFFVRkZPVk1zVlVGQlZXdFZMR3RDUVVGclFuQkNMRWRCUVVVNVV5eFZRVUZWWjAwc1JVRkRibUU0Unl4SFFVRkZPVk1zVlVGQlZXMUxMRWRCUVVjc1UwRkJVMG9zUjBGQlowSXNUMEZCWW5CSUxFVkJRVVVzUjBGQlIzQkRMRXRCUVV0aUxFZEJRVlZoTEV0QlFVdDNTaXhGUVVGRmFVTXNSMEZCUlN4VFFVRlRkRTBzUlVGQlJYTkxMRWRCUVVjc1QwRkJUM2RJTEVWQlFVYzVVaXhGUVVGRmMwc3NSVUZCUlVRc1JVRkJSU3hIUVVGRkxFVkJRVVVyU1N4SFFVRkZPVk1zVlVGQlZXMVZMSGRDUVVGM1FuSkNMRWRCUVVVNVV5eFZRVUZWYlVzc1IwRkJSekpKTEVkQlFVVTVVeXhWUVVGVloxZ3NSVUZCUlN4WFFVRjNRaXhQUVVGaWNsVXNSVUZCUlN4SFFVRkhjRU1zUzBGQlMySXNSMEZCVldFc1MwRkJTM2RLTEVWQlFVVnBUaXhIUVVGSExFVkJRVVZzUlN4SFFVRkZPVk1zVlVGQlZXbFlMR2RDUVVGblFtNUZMRWRCUVVVNVV5eFZRVUZWWjFnc1JVRkJSV3hGTEVkQlFVVTVVeXhWUVVGVmIxVXNSMEZCUnl4VFFVRlRja3NzUjBGQlowSXNUMEZCWW5CSUxFVkJRVVVzUjBGQlIzQkRMRXRCUVV0aUxFZEJRVlZoTEV0QlFVdDNTaXhGUVVGRmNVc3NSMEZCUjNKTExFVkJRVVVzUlVGQlJTdEpMRWRCUVVVNVV5eFZRVUZWY1ZVc2FVSkJRV2xDZGtJc1IwRkJSVGxUTEZWQlFWVnZWU3hIUVVFMFIzUkNMRWRCUVVVNVV5eFZRVUZWZVdJc1IwRkJSeXhYUVVGWExFOUJRVTl5UlN4SFFVRkZOMWNzUzBGQlMwRXNTMEZCUzNkS0xFVkJRVVZITEVkQlFVY3NSVUZEY0dZMFNTeEhRVUZGT1ZNc1ZVRkJWVEJpTEdkQ1FVRm5RalZKTEVkQlFVVTVVeXhWUVVGVmVXSXNSMEZCUnpOSkxFZEJRVVU1VXl4VlFVRlZNbUlzUjBGQlJ5eFhRVUZYTEU5QlFVOTJSU3hIUVVGRk4xY3NTMEZCUzBFc1MwRkJTM2RLTEVWQlFVVTBSU3hIUVVGSExFVkJRVVZ0UlN4SFFVRkZPVk1zVlVGQlZUUmlMSE5DUVVGelFqbEpMRWRCUVVVNVV5eFZRVUZWTW1Jc1IwRkJSemRKTEVkQlFVVTVVeXhWUVVGVk5tSXNSMEZCUnl4WFFVRlhMRTlCUVU5NlJTeEhRVUZGTjFjc1MwRkJTMEVzUzBGQlMzZEtMRVZCUVVWNVFpeEhRVUZITEVWQlFVVnpTQ3hIUVVGRk9WTXNWVUZCVlRoaUxHZENRVUZuUW1oS0xFZEJRVVU1VXl4VlFVRlZObUlzUjBGQlJ5OUpMRWRCUVVVNVV5eFZRVUZWSzJJc1IwRkJSeXhYUVVGWExFOUJRVTh6UlN4SFFVRkZOMWNzUzBGQlMwRXNTMEZCUzNkS0xFVkJRVVY1Unl4SFFVRkhMRVZCUVVWelF5eEhRVUZGT1ZNc1ZVRkJWV2RqTEhOQ1FVRnpRbXhLTEVkQlFVVTVVeXhWUVVGVksySXNSMEZCUjJwS0xFZEJRVVU1VXl4VlFVRlZhV01zUjBGQlJ5eFhRVUZYTEU5QlFVODNSU3hIUVVGRk4xY3NTMEZCUzBFc1MwRkJTM2RLTEVWQlFVVTNSeXhGUVVGRkxFVkJRVVUwVUN4SFFVRkZPVk1zVlVGQlZXdGpMR2xDUVVGcFFuQktMRWRCUVVVNVV5eFZRVUZWYVdNc1IwRkJSMjVLTEVkQlFVVTVVeXhWUVVGVmJXTXNSMEZCUnl4WFFVRlhMRTlCUVU4dlJTeEhRVUZGTjFjc1MwRkJTMEVzUzBGQlMzZEtMRVZCUVVWblNpeEZRVUZGTEVWQlEzQmxSQ3hIUVVGRk9WTXNWVUZCVlc5akxIVkNRVUYxUW5SS0xFZEJRVVU1VXl4VlFVRlZiV01zUjBGQlIzSktMRWRCUVVVNVV5eFZRVUZWY1dNc1IwRkJSeXhYUVVGWExFOUJRVTlxUml4SFFVRkZOMWNzUzBGQlMwRXNTMEZCUzNkS0xFVkJRVVUwUnl4SFFVRkhMRVZCUVVWdFF5eEhRVUZGT1ZNc1ZVRkJWWE5qTEdsQ1FVRnBRbmhLTEVkQlFVVTVVeXhWUVVGVmNXTXNSMEZCUjNaS0xFZEJRVVU1VXl4VlFVRlZkV01zUjBGQlJ5eFhRVUZYTEU5QlFVOXVSaXhIUVVGRk4xY3NTMEZCUzBFc1MwRkJTM2RLTEVWQlFVVTJSeXhIUVVGSExFVkJRVVZyUXl4SFFVRkZPVk1zVlVGQlZYZGpMSFZDUVVGMVFqRktMRWRCUVVVNVV5eFZRVUZWZFdNc1IwRkJSM3BLTEVkQlFVVTVVeXhWUVVGVmVXTXNSMEZCUnl4WFFVRlhMRTlCUVU5eVJpeEhRVUZGTjFjc1MwRkJTMEVzUzBGQlMzZEtMRVZCUVVWclNDeEhRVUZITEVWQlFVVTJRaXhIUVVGRk9WTXNWVUZCVlRCakxHbENRVUZwUWpWS0xFZEJRVVU1VXl4VlFVRlZlV01zUjBGQlJ6TktMRWRCUVVVNVV5eFZRVUZWTW1Nc1IwRkJSeXhYUVVGWExFOUJRVTkyUml4SFFVRkZOMWNzUzBGQlMwRXNTMEZCUzNkS0xFVkJRVVYxU0N4SFFVRkhMRVZCUVVWM1FpeEhRVUZGT1ZNc1ZVRkJWVFJqTEdsQ1FVRnBRamxLTEVkQlFVVTVVeXhWUVVGVk1tTXNSMEZCUnpkS0xFZEJRVVU1VXl4VlFVRlZObU1zUjBGQlJ5eFhRVUZYTEU5QlFVOTZSaXhIUVVGRk4xY3NTMEZCUzBFc1MwRkJTM2RLTEVWQlFVVjNTQ3hIUVVGSExFVkJRekZsZFVJc1IwRkJSVGxUTEZWQlFWVTRZeXgxUWtGQmRVSm9TeXhIUVVGRk9WTXNWVUZCVlRaakxFZEJRVWN2U2l4SFFVRkZPVk1zVlVGQlZTdGpMRWRCUVVjc1YwRkJWeXhQUVVGUE0wWXNSMEZCUlRkWExFdEJRVXRCTEV0QlFVdDNTaXhGUVVGRk0wY3NSVUZCUlN4RlFVRkZNRkFzUjBGQlJUbFRMRlZCUVZWblpDeHJRa0ZCYTBKc1N5eEhRVUZGT1ZNc1ZVRkJWU3RqTEVkQlFVZHFTeXhIUVVGRk9WTXNWVUZCVldsa0xFZEJRVWNzVjBGQlZ5eFBRVUZQTjBZc1IwRkJSVGRYTEV0QlFVdEJMRXRCUVV0M1NpeEZRVUZGTkV3c1IwRkJSeXhGUVVGRk4wTXNSMEZCUlRsVExGVkJRVlZyWkN4clFrRkJhMEp3U3l4SFFVRkZPVk1zVlVGQlZXbGtMRWRCUVVkdVN5eEhRVUZGT1ZNc1ZVRkJWVzFrTEVkQlFVY3NWMEZCVnl4UFFVRlBMMFlzUjBGQlJUZFhMRXRCUVV0QkxFdEJRVXQzU2l4RlFVRkZUeXhIUVVGSExFVkJRVVYzU1N4SFFVRkZPVk1zVlVGQlZXOWtMSGRDUVVGM1FuUkxMRWRCUVVVNVV5eFZRVUZWYldRc1IwRkJSM0pMTEVkQlFVVTVVeXhWUVVGVmNXUXNSMEZCUnl4WFFVRlhMRTlCUVU5cVJ5eEhRVUZGTjFjc1MwRkJTMEVzUzBGQlMzZEtMRVZCUVVWc1NpeEZRVUZGTEVWQlFVVnBVeXhIUVVGRk9WTXNWVUZCVlhOa0xHMUNRVUZ0UW5oTExFZEJRVVU1VXl4VlFVRlZjV1FzUjBGQlIzWkxMRWRCUVVVNVV5eFZRVUZWZFdRc1IwRkJSeXhYUVVGWExFOUJRVTl1Unl4SFFVRkZOMWNzUzBGQlMwRXNTMEZCUzNkS0xFVkJRVVZYTEVkQlFVY3NSVUZETjJWdlNTeEhRVUZGT1ZNc1ZVRkJWWGRrTEcxQ1FVRnRRakZMTEVkQlFVVTVVeXhWUVVGVmRXUXNSMEZCUjNwTExFZEJRVVU1VXl4VlFVRlZlV1FzUjBGQlJ5eFhRVUZYTEU5QlFVOXlSeXhIUVVGRk4xY3NTMEZCUzBFc1MwRkJTM2RLTEVWQlFVVlRMRWRCUVVjc1JVRkJSWE5KTEVkQlFVVTVVeXhWUVVGVk1HUXNlVUpCUVhsQ05Vc3NSMEZCUlRsVExGVkJRVlY1WkN4SFFVRkhNMHNzUjBGQlJUbFRMRlZCUVZVeVpDeEhRVUZITEZkQlFWY3NUMEZCVDNaSExFZEJRVVUzVnl4TFFVRkxRU3hMUVVGTGQwb3NSVUZCUlVZc1IwRkJSeXhGUVVGRmFVb3NSMEZCUlRsVExGVkJRVlUwWkN4blFrRkJaMEk1U3l4SFFVRkZPVk1zVlVGQlZUSmtMRWRCUVVjM1N5eEhRVUZGT1ZNc1ZVRkJWVFprTEVkQlFVY3NWMEZCVnl4UFFVRlBla2NzUjBGQlJUZFhMRXRCUVV0QkxFdEJRVXQzU2l4RlFVRkZkVTBzUlVGQlJTeEZRVUZGZUVRc1IwRkJSVGxUTEZWQlFWVTRaQ3hwUWtGQmFVSm9UQ3hIUVVGRk9WTXNWVUZCVlRaa0xFZEJRVWN2U3l4SFFVRkZPVk1zVlVGQlZTdGtMRWRCUVVjc1YwRkJWeXhQUVVGUE0wY3NSMEZCUlRkWExFdEJRVXRCTEV0QlFVdDNTaXhGUVVGRmVVMHNSMEZCUnl4RlFVRkZNVVFzUjBGQlJUbFRMRlZCUVZWblpTeGxRVUZsYkV3c1IwRkJSVGxUTEZWQlFWVXJaQ3hIUVVGSGFrd3NSMEZCUlRsVExGVkJRVlZwWlN4SFFVRkhMRmRCUVZjc1QwRkJUemRITEVkQlFVVTNWeXhMUVVGTFFTeExRVUZMZDBvc1JVRkJSWGRDTEVkQlFVY3NSVUZEY0dWMVNDeEhRVUZGT1ZNc1ZVRkJWV3RsTEdWQlFXVndUQ3hIUVVGRk9WTXNWVUZCVldsbExFZEJRVWR1VEN4SFFVRkZPVk1zVlVGQlZXMWxMRWRCUVVjc1YwRkJWeXhQUVVGUEwwY3NSMEZCUlRkWExFdEJRVXRCTEV0QlFVdDNTaXhGUVVGRlVTeEhRVUZITEVWQlFVVjFTU3hIUVVGRk9WTXNWVUZCVlc5bExIVkNRVUYxUW5STUxFZEJRVVU1VXl4VlFVRlZiV1VzUjBGQlIzSk1MRWRCUVVVNVV5eFZRVUZWY1dVc1IwRkJSeXhYUVVGWExFOUJRVTlxU0N4SFFVRkZOMWNzUzBGQlMwRXNTMEZCUzNkS0xFVkJRVVZwVGl4RlFVRkZMRVZCUVVWc1JTeEhRVUZGT1ZNc1ZVRkJWWE5sTEhOQ1FVRnpRbmhNTEVkQlFVVTVVeXhWUVVGVmNXVXNSMEZCTkVVdllpeEZRVUZGTERCQ1FVRXdRbWRNTEZGQlFVY3NSMEZCTmtab1RDeEZRVUZGTEdkRFFVRm5RMmxXTEZGQlFVY3NSMEZCVVdwTExFZEJRVWQwVGl4VlFVRlZPRklzUlVGQlJTeFhRVUZYTEZGQlFWRjJVaXhMUVVGTE1Fc3NSVUZCUlN4RlFVRkZjVU1zUjBGQlIzUk9MRlZCUVZWMVpTeGpRVUZqYWxJc1IwRkJSM1JPTEZWQlFWVTRVaXhGUVVGblFuaFFMRVZCUVVVc1pVRkJaVzlXTEZGQlFVVXNSMEZCVVVFc1IwRkJSVGhITEc5Q1FVRnRRaXhGUVVGSE9VY3NSMEZCUlN0SExITkNRVUZ4UWl4RlFVRkhMRWxCUVVsRExFZEJRVWNzYlVKQlFXMUNibEVzVjBGQlYyMUtMRWRCUVVVeFdDeFZRVUZWTW1Vc1IwRkJSeXhYUVVGWExFOUJRVTl3WlN4TFFVRkxZaXhEUVVGRExFVkJRMngxUW1kWkxFZEJRVVV4V0N4VlFVRlZOR1VzYVVKQlFXbENiRWdzUjBGQlJURllMRlZCUVZVeVpTeEhRVU42UTJwSUxFZEJRVVZ0U0N4WFFVRlhMRk5CUVZNNVZTeEZRVUZGY2tzc1JVRkJSWE5MTEVWQlFVVjJTeXhGUVVGRmNVTXNSVUZCUlhkS0xFZEJRV2RUTEVkQlFUZFNka0lzUlVGQlJXcEpMRVZCUVVVc1MwRkJTM0JETEVsQlFVbEJMRVZCUVVWelN5eEZRVUZGTEVOQlFVTkJMRWRCUVVjc1NVRkJTVVFzUlVGQlJYSkxMRVZCUVVWelN5eEZRVUZGTTBvc1QwRkJUekpLTEZGQlFVY3NSVUZCVDBRc1JVRkJSWEZJTEVWQlFVVXNTVUZCU1hCSUxFZEJRVWNzUlVGQlJTeEZRVUZGUkN4RlFVRkZhME1zUlVGQlJYWk5MRVZCUVd0Q1FTeEhRVUZITEVsQlFXaENjMHNzUlVGQlJVUXNSVUZCUld0RExFVkJRVVZzU2l4VlFVRnRRbkpFTEVWQlFVVnpTeXhGUVVGRkxFVkJRV0VzVVVGQldFRXNSVUZCUlVRc1JVRkJSV3RETEVWQlFVVjJUU3hMUVVGbExHbENRVUZwUW5OTExFZEJRVWRzU3l4TlFVRk5aMllzVVVGQlVUbFZMRWxCUVVrd1ZTeEpRVUZKTVZVc1lVRkJZWFZGTEdGQlFYVkRMRVZCUVVVNVR5eEhRVUZIYzBzc1JVRkJSV2RKTEVWQlFVVXpSQ3hMUVVGTE1sRXNTVUZCU1hSbUxFVkJRVVZETEVWQlFVVXNSVUZCUlhGTExFVkJRVVZ4U0N4SFFVRkhja2dzUlVGQlJURkhMRVZCUVVVc1RVRkJUVEJITEVWQlFVVm5TU3hGUVVGRmFVNHNUMEZCVDBNc1YwRkJNMFZzVml4RlFVRkZaMGtzUlVGQlJYSlRMRVZCUVVWeFN5eEZRVUZGY1Vnc1JVRkJSWEpJTEVWQlFVVXhSeXhGUVVGRk1rY3NSMEZCZFVWRUxFVkJRVVZCTEVWQlFVVXNRMEZCUVN4RlFVRk5ha2tzUlVGQlJTeEpRVUZKY2tNc1JVRkJSU3hGUVVGRlFTeEZRVUZGY1VNc1JVRkJSV2xDTEU5QlFVOTBSQ3hMUVVGSlF5eEZRVUZGYjBNc1JVRkJSWEpETEVsQlFVdHpTeXhGUVVGRlowa3NSMEZCUjNKVExFZEJRVWR4U3l4RlFVRkZjVWdzUlVGQlJYSklMRVZCUVVWclF5eEZRVUZGZGswc1IwRkJSM0ZMTEVWQlFVVnJReXhGUVVGRmRrMHNTVUZCU1hkbUxFdEJRVXQ2VWl4SFFVRkhNVVFzUjBGQlIwRXNSVUZCUlRGSExFVkJRVVV6UkN4SFFVRkhjVXNzUlVGQlJURkhMRVZCUVVVelJDeEpRVUZKZDJZc1NVRkJTU3hIUVVGSE5WUXNSMEZCUjBFc1JVRkJSWFpKTEU5QlFVOHNTVUZCU1hSRUxFVkJRVVVzUlVGQlJVRXNSVUZCUlRaTUxFVkJRVVYyU1N4UFFVRlBkRVFzU1VGQlNUQm1MRWRCUVVkd1ZpeEZRVUZGZFVJc1JVRkJSVGRNTEVkQlFVY3NSVUZET1dNc1NVRkJTWGxtTEVkQlFVZDJaaXhQUVVGUGVXWXNUMEZCVDNwbUxFOUJRVTk1Wml4UFFVRlBMRWxCUVVrc1IwRkJSeXhUUVVGVE0xSXNSMEZCUnpGRUxFZEJRVWNzU1VGQlNYSkxMRVZCUVVWeFN5eEZRVUZGWjBrc1JVRkJSV2hKTEVWQlFVVnhTQ3hGUVVGRmNrZ3NSVUZCUld0RExFVkJRVVYyVFN4TFFVRkxjVXNzUlVGQlJURkhMRVZCUVVVd1J5eEZRVUZGYTBNc1JVRkJSWFpOTEVkQlFVY3NRMEZCUlN4RlFVRkRMRU5CUVVNc1UwRkJVekptTEVkQlFVZDBWaXhGUVVGRmNrc3NSVUZCUlhOTExFZEJRVWNzU1VGQlNTeEpRVUZKZGtzc1JVRkJSU3hIUVVGSGNVTXNSVUZCUlN4RlFVRkZRU3hGUVVGRmFVa3NSVUZCUldoSUxFOUJRVTlxUWl4SlFVRkpja01zUlVGQlJYRkRMRWRCUVVkd1F5eEZRVUZGVVN4TFFVRkxOa29zUlVGQlJXcEpMRWRCUVVkclNTeEZRVUZGUkN4RlFVRkZha2tzU1VGQlNTeFBRVUZQY2tNc1EwRkJReXhEUVVWelNTeFRRVUZUYzFRc1IwRkJSV2hLTEVWQlFVVnlTeXhIUVVGSExFZEJRVWRCTEVWQlFVVnhTeXhGUVVGRlowa3NSVUZCUlN4RFFVRkRjbE1zUjBGQlIzRkxMRVZCUVVWeFNDeEZRVUZGTEVsQlFVbHdTQ3hGUVVGRlJDeEZRVUZGYTBNc1JVRkJSWFpOTEVkQlFVY3NUMEZCVDNOTExFbEJRVWxyVml4SFFVRkhibFlzUlVGQlJXdERMRVZCUVVWMlRTeEhRVUZITEVkQlFVZHpTeXhEUVVGRExFTkJRVU1zUjBGQlIwUXNSVUZCUlRGSExFVkJRVVVzVDBGQlR6SkhMRVZCUVVWRUxFVkJRVVV4Unl4RlFVRkZNMFFzVFVGQlQzZG1MRWRCUVVkdVZpeEZRVUZGTVVjc1JVRkJSVE5FTEVkQlFVY3NSMEZCUjNOTExFTkJRVU1zUTBGRE1XRXNVMEZCVTNOV0xFZEJRVWQyVml4RlFVRkZja3NzUjBGQldTeFBRVUZQTEU5QlFXaENjVXNzUlVGQlJXZEtMRWRCUVVWb1NpeEZRVUZGY2tzc1NVRkJhMEp4U3l4SFFVRkhRU3hEUVVGRExFTkJRVzlETEZOQlFWTnZUQ3hIUVVGSGNFd3NSVUZCUlhKTExFZEJRVmtzVDBGQlR5eFBRVUZvUW5GTExFVkJRVVZuU2l4SFFVRkZhRW9zUlVGQlJYSkxMRWxCUVd0Q2NVc3NTVUZCU1VFc1EwRkJReXhEUVVNdlNDeFRRVUZUTms4c1IwRkJSemRQTEVkQlFVY3NUMEZCUnl4TlFVRk5RU3hIUVVGSExHbENRVUZyUWtFc1JVRkJVMEVzUlVGQlN6SlZMRWxCUVVrelZTeGhRVUZoZDBVc1YwRkJhMEpVTEVWQlFVY3ZSQ3hKUVVGSGFFc3NSVUZCUlN4blEwRkJaME5uVEN4RlFVRkZhRUlzU1VGQlZ5eExRVUZKTEVOQlFXbENMRk5CUVZNclR5eEhRVUZITDA4c1IwRkJSeXhQUVVGSExFMUJRVTFCTEVkQlFVZEJMR0ZCUVdGM1JTeFhRVUZyUW5oRkxFVkJRVXNzYVVKQlFXdENRU3hGUVVGVGIwVXNSVUZCUjNCRkxFbEJRVWRvU3l4RlFVRkZMR2REUVVGblEyZE1MRVZCUVVWb1FpeEpRVUZYTEV0QlFVa3NRMEZETTFRc1UwRkJVMmxRTEVkQlFVZHFVQ3hIUVVGSExFZEJRVWRCTEVkQlFVY3NSVUZCUlVFc1JVRkJSV2hJTEU5QlFVOHNRMEZCUXl4SlFVRkpja1FzUlVGQlJYRk1MRVZCUVVWb1FpeEZRVUZGTEVsQlFVbHZRaXhGUVVGSGNFSXNSMEZCUlN4VFFVRlRReXhIUVVGSFpTeEZRVUZGWml4SlFVRkpkRXNzUjBGQlIwc3NSVUZCUlN4MVJFRkJkVVJuVEN4RlFVRkZaaXhIUVVGSExHRkJRV0YwU3l4RlFVRkZMRWRCUVVVc1EwRkJReXhEUVVGRExGTkJRVk4zV2l4SFFVRkhibEFzUlVGQlJYSkxMRVZCUVVWelN5eEhRVUZaTEU5QlFVOHNUMEZCYUVKRUxFVkJRVVZuU2l4SFFVRkZhRW9zUlVGQlJYSkxMRWxCUVd0Q2Mwc3NSVUZCUlVRc1EwRkJReXhEUVVONFJDeFRRVUZUYkVvc1IwRkJSV3RLTEVWQlFVVnlTeXhGUVVGRmMwc3NSMEZCT0VNc1QwRkJNME41UWl4RlFVRkZNVUlzUlVGQlJUSk9MRWxCUVVkb1dTeEZRVUZGY1Vzc1JVRkJSV2RKTEVWQlFVVm9TU3hGUVVGRmEwTXNSVUZCUlhaTkxFVkJRVVZ4U3l4RlFVRkZjVWdzUjBGQlIzQklMRWRCUVVkNVJDeEhRVUZITVVRc1IwRkJSMEVzUlVGQlJURkhMRVZCUVVVelJDeEhRVUZIYzBzc1IwRkJWVVFzUTBGQlF5eERRVU53UXl4VFFVRlRkMVlzUjBGQlJYaFdMRVZCUVVWeVN5eEZRVUZGYzBzc1JVRkJSWFpMTEVkQlFYRkZMRTlCUVd4RlowMHNSVUZCUlRGQ0xFVkJRVVV5VGl4SlFVRkhNVTRzU1VGQlNYWkxMRVZCUVVWdlFpeEhRVUZGYTBvc1JVRkJSWEpMTEVWQlFVVnpTeXhIUVVGSGRFc3NSVUZCUlhGTExFVkJRVVZuU1N4RlFVRkZhRWtzUlVGQlJXdERMRVZCUVVWMlRTeEZRVUZGY1Vzc1JVRkJSWEZJTEVkQlFVY3NUVUZCVFRORUxFZEJRVWN4UkN4VlFVRlZRU3hGUVVGRk1VY3NSVUZCUlRORUxFbEJRVmR4U3l4RFFVRkRMRU5CUVhOSExGTkJRVk4xU3l4SFFVRkhka3NzUlVGQlJYSkxMRVZCUVVWelN5eEZRVUZGZGtzc1IwRkJlVVlzVDBGQmRFWm5UU3hGUVVGRk1VSXNSVUZCUlRKT0xFdEJRVWt4VGl4RlFVRkZiVllzUjBGQlIzQldMRVZCUVVWRExFdEJRVXRCTEVsQlFVbDBTeXhSUVVGSExFbEJRVk5FTEVsQlFVbHpTeXhGUVVGRmFra3NSMEZCUjJ0SkxFdEJRVXRFTEVWQlFVVnFTU3hKUVVGSmFVa3NSVUZCUldwSkxFVkJRVVZyU1N4UlFVRkhMRWRCUVZGdVNpeEhRVUZGYTBvc1JVRkJSVU1zVDBGQlJTeEpRVUZuUW01S0xFZEJRVVZyU2l4RlFVRkZja3NzUlVGQlJVUXNSVUZCUlN4RFFVTTFaQ3hUUVVGVE1HWXNSMEZCUjNCV0xFVkJRVVZ5U3l4SFFVRkhMRWxCUVVrc1NVRkJTWE5MTEVWQlFVVjJTeXhGUVVGRmNVTXNSVUZCUlN4RlFVRkZRU3hGUVVGRmNFTXNSVUZCUlhGRUxFOUJRVTlxUWl4SlFVRkpMRU5CUVVNc1NVRkJTWGRLTEVWQlFVVTFUQ3hGUVVGRmIwTXNSMEZCUjNOQ0xFVkJRVVV5VUN4SFFVRkZhRW9zUlVGQlJYVkNMRWRCUVVjc1RVRkJUV3hKTEVsQlFVazBSeXhGUVVGRmMwSXNSVUZCUlRkTUxFVkJRVVV5UkN4RlFVRkZka01zUjBGQlJXdEtMRVZCUVVWMVFpeFBRVUZGTEVkQlFWRXNRMEZCUXl4UFFVRlBkRUlzUjBGQlIyNUtMRWRCUVVWclNpeEZRVUZGUXl4RlFVRkZka3NzUjBGQlIzVkxMRWRCUVVjc1EwRkJReXhEUVVGeFR5eFRRVUZUTUU4c1IwRkJSek5QTEVWQlFVVnlTeXhGUVVGRmMwc3NSMEZCYVVJc1IwRkJaRVFzUlVGQlJXcEpMRWxCUVVscFNTeEZRVUZGYWtrc1JVRkJSU3hEUVVGQkxFbEJRVkZwU1N4RlFVRkZha2tzUlVGQlJXdEpMRWRCUVVjc1EwRkJReXhKUVVGSkxFbEJRVWwyU3l4RlFVRkZjMVFzUjBGQlJXaEtMRVZCUVVWRExFZEJRVWRzU1N4RlFVRkZMRWRCUVVkM1NpeEZRVUZGTEVWQlFVVkJMRVZCUVVVM1RDeEZRVUZGYzBRc1QwRkJUM1ZKTEVsQlFVbDRTaXhGUVVGRmQwb3NSMEZCUnl4SlFVRkpOVXdzUlVGQlJVUXNSVUZCUlRaTUxFbEJRVWwyUWl4RlFVRkZha2tzUlVGQlJXdEpMRWRCUVVkc1NTeERRVUZETEVOQlFVTXNRMEZGY2t3c1UwRkJVekJUTEVkQlFVZDZTeXhIUVVGSExFZEJRVWRCTEVWQlFVVnFTU3hGUVVGRkxFbEJRVWtzU1VGQlNYQkRMRXRCUVV0eFN5eEZRVUZGYWtrc1JVRkJSU3hEUVVGRExFbEJRVWxyU1N4RlFVRkZSQ3hGUVVGRmFra3NSVUZCUlhCRExFZEJRVWNzUjBGQlIwa3NUVUZCVFdkbUxGRkJRVkU1VlN4SFFVRkhMRWxCUVVrc1NVRkJTWFpMTEVWQlFVVXNSVUZCUlVFc1JVRkJSWFZMTEVWQlFVVnFTQ3hQUVVGUGRFUXNTVUZCU1hWTExFVkJRVVYyU3l4SlFVRkpkVXNzUlVGQlJYWkxMRWRCUVVjMlF5eFRRVUZUTUVnc1IwRkJSMEVzUlVGQlJURklMRWRCUVVjc1EwRkJReXhEUVVkeVZpeFRRVUZUYTJRc1IwRkJSM3BXTEVWQlFVVnlTeXhIUVVGSGNVc3NSVUZCUlVFc1IwRkJSeXhEUVVGQkxFVkJRVWR5U3l4RlFVRkZRU3hIUVVGSExFTkJRVVVzUlVGQlF5eEpRVUZUUkN4RlFVRk1kVXNzUlVGQlJTeERRVUZCTEVWQlFVc3NTVUZCU1haTExFdEJRVXR6U3l4RlFVRkZReXhGUVVGRmRrc3NSMEZCUnl4RlFVRkZMRWxCUVVsQkxFdEJRVXRETEVWQlFVVnpTeXhGUVVGRmRrc3NSMEZCUnl4RlFVRkZMRWxCUVVsQkxFdEJRVXQxU3l4RlFVRkZMRWxCUVVsNVZpeEhRVUZITVZZc1JVRkJSWFJMTEVkQlFVZERMRVZCUVVWRUxFbEJRVWtzVDBGQlRTeEZRVUZITEU5QlFVMHNRMEZCUlN4RFFVTXhUaXhUUVVGVFoyZENMRWRCUVVjeFZpeEZRVUZGY2tzc1IwRkJSeXhIUVVGSGNVc3NSMEZCUjNKTExFVkJRVVVzVDBGQlRTeEZRVUZITEVsQlFVbDFUQ3hGUVVGSGJFSXNTMEZCUzJ0Q0xFVkJRVWQyVEN4SFFVRkhMRk5CUVUwc2FVSkJRV3RDY1Vzc1IwRkJSemhITEUxQlFVMDVSeXhKUVVGSkxHbENRVUZyUW5KTExFZEJRVWR0VWl4TlFVRk5ibElzUzBGQlIxY3NUMEZCVHpCS0xFbEJRVWt4U2l4UFFVRlBXQ3hIUVVGTkxFZEJRVWR4U3l4RlFVRkZka29zWVVGQllXUXNSVUZCUldNc1dVRkJXU3hQUVVGTkxFVkJRVWNzUjBGQlIydGxMRWxCUVVrelZTeEZRVUZGZGtvc1kwRkJZeXRPTEZkQlFWY3NRMEZCUXl4SFFVRkhlRVVzUlVGQlJXaElMRkZCUVZGeVJDeEZRVUZGY1VRc1QwRkJUeXhQUVVGTkxFVkJRVWNzU1VGQlNTeEpRVUZKYVVnc1JVRkJSU3hGUVVGRlFTeEZRVUZGUkN4RlFVRkZhRWdzVDBGQlQybElMRWxCUVVrc1IwRkJSMFFzUlVGQlJVTXNTVUZCU1hSTExFVkJRVVZ6U3l4SFFVRkhMRTlCUVUwc1JVRkJSeXhQUVVGTkxFTkJRVVVzUTBGQlF5eEhRVUZIUkN4RlFVRkZka29zWTBGQlkxWXNUVUZCVFN4RFFVRkRMRWxCUVVsTUxFOUJRVVVzUlVGQlQzRkRMRTlCUVVVc1JVRkJUM2RLTEVWQlFVVTRReXhMUVVGTE1sRXNTVUZCU1doV0xFVkJRVVZvU0N4UFFVRlBja1FzUlVGQlJYRkVMRkZCUVZFc1NVRkJTV2xJTEVWQlFVVXNSVUZCUlVFc1JVRkJSWE5DTEVWQlFVVjBRaXhKUVVGSkxFTkJRVU1zU1VGQlNUVkhMRVZCUVVVeVJ5eEZRVUZGUXl4SFFVRkhhRWtzUlVGQlJYUkRMRVZCUVVWelN5eEhRVU0xVnl4SFFVUXJWelZITEVkQlFVZEJMRVZCUVVVMVF5eGhRVUZoWWl4VFFVRlRaMFFzVDBGQlJTeEpRVUZUYkVRc1IwRkJSMnRFTEVWQlFVVnhTQ3hKUVVGSlJDeEZRVUZGYUVnc1QwRkJUeXhIUVVGSGRFUXNSVUZCUlRKRUxFVkJRVVZCTEU5QlFVVXNSMEZCVVhCQ0xFZEJRVWRCTEVWQlFVVjRRaXhoUVVOd1ptSXNVMEZCVTJkRUxFOUJRVVVzU1VGQlUySXNSMEZCUjJFc1JVRkJSWEZJTEVsQlFVbDBTeXhGUVVGRmNVUXNUMEZCVHl4SFFVRkhha0lzUlVGQlJVVXNSVUZCUlVFc1QwRkJSU3hKUVVGWmVXUXNSMEZCUjNKakxFVkJRVVZ3UWl4SFFVRkhMRTlCUVUwc1EwRkJSU3hEUVVGRExFOUJRVTkyUXl4SlFVRkhjVU1zUjBGQmJVSXdaQ3hIUVVGb1FpOW1MRVZCUVVWQkxFZEJRVWNzUTBGQlJTeEZRVUZEY1VNc1JVRkJSVUVzUjBGQlJ5eERRVUZGTEVWQlFWa3NRMEZCUXl4SFFVRkhhVWtzUlVGQlJYWktMR05CUVdOaUxFOUJRVThzVDBGQlR6Wm1MRWRCUVVkNlZpeEZRVUZGY2tzc1IwRkJSeXhOUVVGTmIwb3NUVUZCVFN3MlFrRkJPRUlzUTBGQk1rNHNVMEZCVXpSWExFZEJRVWN6Vml4SFFVRkhMRTlCUVU4c1NVRkJTVUVzUlVGQlJYWktMRmxCUVZsdFppeEhRVUZITlZZc1JVRkJSWHBJTEV0QlFVc3NRMEZETTFBc1UwRkJVM0ZrTEVkQlFVYzFWaXhIUVVGSExFZEJRVWRxU3l4TlFVRk5aMllzVVVGQlVTOVZMRWRCUVVjc1EwRkJReXhKUVVGSkxFbEJRVWx5U3l4RlFVRkZTU3hOUVVGTmFVc3NSVUZCUldoSUxGRkJRVkZwU0N4RlFVRkZMRVZCUVVWQkxFVkJRVVZFTEVWQlFVVm9TQ3hQUVVGUGFVZ3NTVUZCU1N4RFFVRkRMRWxCUVVsMlN5eEZRVUZGYzBzc1JVRkJSVU1zUjBGQlJ5eE5RVUZOZGtzc1NVRkJTVU1zUlVGQlJYTkxMRWRCUVVjc2FVSkJRV2xDZGtzc1JVRkJSV3RuUWl4SFFVRkhhR1FzUlVGQlJXeEVMRWxCUVVsQkxFVkJRVVVzUTBGQlF5eFBRVUZQUXl4RFFVRkRMRU5CUVVNc1IwRkJSMmRtTEVsQlFVa3pWU3hoUVVGaGQwVXNWMEZCVnl4UFFVRlBMRWxCUVVsQkxGZEJRVmQ0UlN4SFFVRlJMRWxCUVVsRExFdEJRVlIwU3l4RlFVRkZMRU5CUVVVc1JVRkJWWEZMTEVWQlFWTXNUMEZCVUhSTExFVkJRVVZ6U3l4RlFVRkZReXhOUVVGaGRFc3NSVUZCUlhOTExFZEJRVWNzYVVKQlFXbENka3NzUlVGQlJXdG5RaXhIUVVGSGFHUXNSVUZCUld4RUxFbEJRVWxCTEVkQlFVY3NUMEZCVDBNc1EwRkJReXhEUVdoQ0wxUm5XU3hIUVVGRmEwa3NZVUZCWVZBc1IwRkJSek5JTEVkQlFVVnRTU3hyUWtGQmEwSXNVMEZCVXpsV0xFVkJRVVZ5U3l4RlFVRkZjMHNzUlVGQlJYWkxMRVZCUVVWeFF5eEhRVUZITEVsQlFVa3NTVUZCU1hkS0xFdEJRVXQwUWl4RlFVRkZMRU5CUVVNc1NVRkJTVFZITEVWQlFVVTBSeXhGUVVGRmMwSXNSMEZCUjNSS0xFVkJRVVYyUXl4RlFVRkZVeXhMUVVGTE5rb3NSVUZCUlROSExFZEJRVWNzUjBGQlJ5eE5RVUZOY0VJc1JVRkJSU3hEUVVGRExFbEJRVWtzU1VGQlNXZE5MRXRCUVVzMVN5eEZRVUZGTUVzc1IwRkJSeXhIUVVGSE1Vc3NSVUZCUlRCTExFZEJRVWMzVGl4bFFVRmxLMDRzUjBGQlJ5eE5RVUZOZEU4c1JVRkJSWE5QTEVkQlFVYzFTeXhGUVVGRmNVOHNSMEZCUjNKUExFVkJRVVZyVlN4SFFVRkhLMGdzUjBGQlIzSmtMRVZCUVVWdlFpeEZRVUZGY1U4c1IwRkJSek5RTEVkQlFVZHpRaXhGUVVGRmNVOHNSMEZCUnpOUUxFVkJRVVZGTEVkQlFVZEJMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRemxZTUZZc1IwRkJSVzlKTERCQ1FVRXdRaXhUUVVGVEwxWXNSVUZCUlhKTExFVkJRVVZ6U3l4RlFVRkZka3NzUjBGQlJ5eEpRVUZKTEVsQlFVbHhReXhMUVVGTGEwa3NSVUZCUlN4RFFVRkRMRWxCUVVselFpeEZRVUZGZEVJc1JVRkJSV3hKTEVkQlFVZHpRaXhGUVVGRmEwa3NSVUZCUldsTkxFZEJRVWNzU1VGQlNXcE5MRVZCUVVWelF5eEhRVUZITEUxQlFVMDVSU3hOUVVGTkxIRkdRVUZ4Uml4SlFVRkpPVWNzUlVGQlJYWkRMRVZCUVVWVExFdEJRVXMyU2l4RlFVRkZNMGNzUjBGQlJ5eEhRVUZITEUxQlFVMXdRaXhGUVVGRkxFZEJRVWR2UWl4RlFVRkZNRThzU1VGQlNTeExRVUZIZUVjc1JVRkJSWFZJTEVkQlFXbERMRTFCUVUwdlNpeE5RVUZOTEdsSlFVRXhRM2RETEVWQlFVVnpReXhIUVVGSE1VNHNTMEZCUzFJc1JVRkJSVEJFTEVWQlFVVnBWU3hIUVVGSGNsWXNSVUZCUlhOS0xFVkJRVVYxU0N4SFFVRnhTaXhOUVVGTmRrZ3NSVUZCUlhORExFZEJRVWN4VGl4TFFVRkxVaXhGUVVGRk1FUXNSVUZCUldsVkxFZEJRVWR5Vml4RlFVRkZMRU5CUVVNc1JVRkROV0V3Vml4SFFVRkZjVWtzYjBKQlFXOUNMRk5CUVZOb1Z5eEZRVUZGY2tzc1JVRkJSWE5MTEVWQlFVVjJTeXhGUVVGRmNVTXNSMEZCUnl4SlFVRkpkMG9zUlVGQlJYUkNMRVZCUVVWMFN5eEZRVUZGYzBzc1IwRkJSeXhIUVVGSGMwSXNSVUZCUlN4RFFVRlJMRWRCUVZCMFFpeEZRVUZGYzBJc1JVRkJSV2xOTEVsQlFVOXFUU3hGUVVGRmNVTXNSMEZCUnl4TlFVRk5OMFVzVFVGQlRTd3JSVUZCSzBVc1IwRkJSMnRDTEVWQlFVVTRTQ3hKUVVGSkxFTkJRVU1zU1VGQlNURlBMRVZCUVVVc1NVRkJTVFJITEVWQlFVVnBRaXhIUVVGSFN5eEZRVUZGY1VNc1IwRkJSM3BPTEV0QlFVdFNMRVZCUVVVd1JDeEZRVUZGYTBrc1JVRkJSV3ROTEVkQlFVY3NUVUZCVFhCVkxFVkJRVVZyU1N4RlFVRkZjVU1zUjBGQlIzcE9MRXRCUVV0U0xFZEJRVWR6U3l4RlFVRkZjMDRzUzBGQlMyaE5MRVZCUVVWdFRTeEpRVUZKTDFnc1JVRkJSVVFzUlVGQlJWTXNTMEZCU3paS0xFVkJRVVZETEVsQlFVbDBTeXhGUVVGRmMwUXNTMEZCUzBrc1IwRkJSM1JDTEVWQlFVVTFRaXhMUVVGTE5rb3NSVUZCUlVNc1JVRkJSU3hEUVVGRE5VY3NTVUZCU1hSQ0xFVkJRVVUxUWl4TFFVRkxOa29zUlVGQlJVTXNSVUZCUlRWSExFVkJRVVVzVFVGQlRURkVMRVZCUVVWM1VpeEhRVUZITEVWQlFXOUlkMGNzUjBGQlJYTkpMRk5CUVZOcVRpeEhRVUZGTWtVc1IwRkJSWFZKTEdsQ1FVRnBRaXhUUVVGVGJGY3NSVUZCUlhKTExFZEJRVWNzVDBGQlQzRlVMRWRCUVVWb1NpeEZRVUZGY2tzc1JVRkJSU3hGUVVONFltZFpMRWRCUVVWM1NTdzRRa0ZCT0VKYUxFZEJRV3RFTlVnc1IwRkJSWGxKTEdkQ1FVRm5RbWhNTEVkQlFVZDFReXhIUVVGRk1Fa3NPRUpCUVRoQ0xGTkJRVk55Vnl4RlFVRkZja3NzUjBGQlJ5eEpRVUZKYzBzc1JVRkJSU3RKTEVkQlFVVm9TaXhGUVVGRmNrc3NSMEZCYVVJc1IwRkJaSEZMTEVWQlFVVkJMRWxCUVVsQkxFVkJRVVZCTEVWQlFVVXNRMEZCUlN4SlFVRk5RU3hGUVVGRlFTeEZRVUZGY2tzc1IwRkJSeXhEUVVGRExFbEJRVWtzU1VGQlNVUXNSVUZCUlN4RlFVRkZRU3hGUVVGRmRVc3NSVUZCUldwSUxFOUJRVTkwUkN4SlFVRkpkVXNzUlVGQlJYWkxMRWxCUVVsMVN5eEZRVUZGZGtzc1IwRkJSM05MTEVWQlFVVkJMRVZCUVVWeVN5eEpRVUZITEVOQlFVVXNRMEZCUXl4UFFVRlBjMHNzUTBGQlF5eEZRVUZGTUU0c1IwRkJSVEpKTEhkQ1FVRjNRaXhUUVVGVGRGY3NSVUZCUlhKTExFZEJRVWNzU1VGQlNYTkxMRVZCUVVVclNTeEhRVUZGYUVvc1JVRkJSWEpMTEVkQlFXbENMRWRCUVdSeFN5eEZRVUZGUVN4SlFVRkpRU3hGUVVGRlFTeEZRVUZGTEVOQlFVRXNTVUZCVVVFc1JVRkJSVUVzUlVGQlJYSkxMRWRCUVVjc1EwRkJReXhKUVVGSkxFbEJRVWxFTEVWQlFVVXNSVUZCUlVFc1JVRkJSWFZMTEVWQlFVVnFTQ3hQUVVGUGRFUXNTVUZCU1hWTExFVkJRVVYyU3l4TFFVRkxkVXNzUlVGQlJYWkxMRWRCUVVkelN5eEZRVUZGUVN4RlFVRkZja3NzU1VGQlJ5eERRVUZGTEVOQlFVTXNUMEZCVDNOTExFTkJRVU1zUlVGRGNGSXdUaXhIUVVGRk5Fa3NWMEZCVnpGSUxFZEJRWFZLYkVJc1IwRkJSVFpKTEZWQlFWVjZTQ3hIUVVGSGNFSXNSMEZCUlRoSkxHVkJRV1VzVTBGQlUzcFhMRWRCUVZNc1QwRkJUbWxRTEVkQlFVZHFVQ3hIUVVGVlFTeEZRVUZGYUVnc1VVRkJVU3hwUWtGQmEwSm5TQ3hGUVVGRkxFZEJRVWN6UXl4RlFVRkZNa01zUlVGQlJUWlBMRWxCUVVrM1R5eERRVUZETEVWQlFVVXlUaXhIUVVGRkswa3NZMEZCWXl4VFFVRlRNVmNzUjBGQlV5eFBRVUZPYVZBc1IwRkJSMnBRTEVsQlFWVkJMRVZCUVVWb1NDeFJRVUZSWjBnc1JVRkJSU3hoUVVGaGQwVXNWMEZCVjNoRkxFVkJRVVV6UXl4RlFVRkZNa01zUlVGQlJTdFBMRWRCUVVjc1JVRkRPVk53UWl4SFFVRkZaMG9zYjBKQlFXOUNlRWdzUjBGQlIzaENMRWRCUVVWcFNpd3lRa0ZCTWtJc1UwRkJVelZYTEVWQlFVVnlTeXhGUVVGRmMwc3NSMEZCWVN4UFFVRlBMRTlCUVdwQ1JDeEZRVUZGYjB3c1IwRkJSM0JNTEVWQlFVVnlTeXhKUVVGclFuTkxMRVZCUVVWRUxFTkJRVU1zUlVGQlJUSk9MRWRCUVVWclNpeHBRMEZCYVVNc1UwRkJVemRYTEVWQlFVVnlTeXhGUVVGRmMwc3NSMEZCWVN4UFFVRlBMRTlCUVdwQ1JDeEZRVUZGZFZZc1IwRkJSM1pXTEVWQlFVVnlTeXhKUVVGclFuTkxMRVZCUVVWRUxFTkJRVU1zUlVGQlJUSk9MRWRCUVVWdFNpeGxRVUZsTTBnc1IwRkRMMWw0UWl4SFFVRkZiMG9zV1VGQldTeFRRVUZUTDFjc1JVRkJSWEpMTEVWQlFVVnpTeXhGUVVGRmRrc3NSMEZCYVVJc1IwRkJaSE5MTEVWQlFVVnFTU3hKUVVGSmFVa3NSVUZCUldwSkxFVkJRVVVzUTBGQlFTeEhRVUZQY0VNc1MwRkJTM0ZMTEVWQlFVVnFTU3hGUVVGRkxFOUJRVTlwU1N4RlFVRkZha2tzUlVGQlJYQkRMRWRCUVVjc1NVRkJTVzlETEVWQlFVVnBVaXhIUVVGRmFFb3NSVUZCUlhKTExFZEJRVWNzU1VGQlNXOURMRVZCUVVVc1EwRkJReXhIUVVGSGEwa3NSVUZCUlN4UFFVRlpia29zUjBGQlJXdEtMRVZCUVVWeVN5eEZRVUZVYjBNc1JVRkJSU3hIUVVGWExFTkJRVU1zVDBGQlQybEpMRVZCUVVWcVNTeEZRVUZGY0VNc1IwRkJSeXhKUVVGSmJVMHNSVUZCUlM5S0xFVkJRVVZ5UXl4RlFVRkZMRVZCUVhkRmFWa3NSMEZCUlhGS0xGTkJRVk5zWjBJc1IwRkJSVFpYTEVkQlFVVnpTaXhyUWtGQmEwSXNVMEZCVTJwWUxFVkJRVVZ5U3l4RlFVRkZjMHNzUjBGQlJ5eFBRVUZQZFZZc1IwRkJSWGhXTEVWQlFVVnlTeXhGUVVGRmMwc3NSVUZCUlN4RlFVRkZMRVZCUVVVd1RpeEhRVUZGZFVvc2IwSkJRVzlDTEZOQlFWTnNXQ3hGUVVGRmNrc3NSVUZCUlhOTExFZEJRVWNzVDBGQlQzVldMRWRCUVVWNFZpeEZRVUZGY2tzc1JVRkJSWE5MTEVWQlFVVXNSVUZCUlN4RlFVRkZNRTRzUjBGQlJYZEtMSE5DUVVGelFpeFRRVUZUYmxnc1JVRkJSWEpMTEVWQlFVVnpTeXhIUVVGSExFOUJRVTkxVml4SFFVRkZlRllzUlVGQlJYSkxMRVZCUVVWelN5eEhRVUZGTEVWQlFVY3NSVUZCUlRCT0xFZEJRVVY1U2l4eFFrRkJjVUlzVTBGQlUzQllMRVZCUVVWeVN5eEZRVUZGYzBzc1IwRkJSeXhQUVVGUGRWWXNSMEZCUlhoV0xFVkJRVVZ5U3l4RlFVRkZjMHNzUlVGQlJTeEhRVUZITEVWQlEzaGpNRTRzUjBGQlJUQktMRzlDUVVGdlFpeFRRVUZUY2xnc1JVRkJSWEpMTEVWQlFVVnpTeXhIUVVGSExFOUJRVTkxVml4SFFVRkZlRllzUlVGQlJYSkxMRVZCUVVWelN5eEZRVUZGTEVkQlFVY3NSVUZCUlRCT0xFZEJRVVV5U2l4dFFrRkJiVUlzVTBGQlUzUllMRVZCUVVWeVN5eEZRVUZGYzBzc1IwRkJSeXhQUVVGUGRWWXNSMEZCUlhoV0xFVkJRVVZ5U3l4RlFVRkZjMHNzUlVGQlJTeEZRVUZGTEVWQlFVVXdUaXhIUVVGRk5Fb3NkMEpCUVhkQ0xGTkJRVk4yV0N4RlFVRkZja3NzUlVGQlJYTkxMRWRCUVVjc1QwRkJUM1ZXTEVkQlFVVjRWaXhGUVVGRmNrc3NSVUZCUlhOTExFVkJRVVVzU1VGQlNTeEZRVUZwUnpCT0xFZEJRVVUyU2l4dFFrRkJiVUlzVTBGQlUzaFlMRVZCUVVWeVN5eEZRVUZGYzBzc1JVRkJSWFpMTEVkQlFYVkVMRTlCUVhCRVowMHNSVUZCUlRGQ0xFVkJRVVV5VGl4SlFVRkhhRmtzUlVGQlJYRlVMRWRCUVVWb1NpeEZRVUZGY2tzc1IwRkJSeXhOUVVGUlJDeEZRVUZGUXl4RlFVRkZNa2dzVDBGQlR6VklMRVZCUVVVc1JVRkJSWFZMTEVkQlFVZDBTeXhGUVVGRmMwUXNTMEZCUzJkSUxFZEJRVlZFTEVOQlFVTXNSVUZEYmxneVRpeEhRVUZGT0Vvc1kwRkJZMnhPTEVkQlFXbEpiMFFzUjBGQlJTdEtMR2xDUVVGcFFuUkRMRWRCUVVkNlNDeEhRVUZGWjBzc1owSkJRV2RDTEZOQlFWTXpXQ3hGUVVGRmNrc3NSVUZCUlhOTExFVkJRVVYyU3l4SFFVRnBRaXhIUVVGa2Mwc3NSVUZCUldwSkxFbEJRVWxwU1N4RlFVRkZha2tzUlVGQlJTeExRVUZSYVVrc1JVRkJSV3BKTEVWQlFVVnJTU3hIUVVGSExFTkJRVU1zU1VGQlNXeEpMRVZCUVVWcFVpeEhRVUZGYUVvc1JVRkJSVU1zU1VGQlRYWkxMRWRCUVVkeFF5eExRVUZGYVVrc1JVRkJSV3BKTEVWQlFVVnJTU3hIUVVGSExFbEJRVWwwU3l4RlFVRkZiME1zUjBGQlJTeERRVUZETEU5QlFVOXBTU3hGUVVGRmFra3NSVUZCUld0SkxFVkJRVVVzUlVGQlJUQk9MRWRCUVVWcFN5eDNRa0ZCZDBJc1UwRkJVelZZTEVWQlFVVnlTeXhGUVVGRmMwc3NSMEZCTWtNc1QwRkJlRU13VHl4SFFVRkhNMDhzUlVGQlJYSkxMRVZCUVVWelN5eEpRVUZIZEVzc1JVRkJSWEZMTEVWQlFVVnFTU3hGUVVGRmEwa3NTMEZCVFd0V0xFdEJRVXQ0Wml4RlFVRkZjVXNzUlVGQlJXcEpMRVZCUVVWclNTeEhRVUZITEVsQlFWZDBTeXhEUVVGRExFVkJRMjVZWjFrc1IwRkJSV3RMTEdkQ1FVRm5RaXhUUVVGVE4xZ3NSVUZCUlhKTExFVkJRVVZ6U3l4SFFVRkhlVUlzUlVGQlJURkNMRVZCUVVVeVRpeEpRVUZITTA0c1JVRkJSV3BKTEVsQlFVbHBTU3hGUVVGRmFra3NSVUZCUlN4RFFVRkJMRWRCUVVrc1NVRkJTWEpETEVWQlFVVjFTeXhGUVVGRlFTeEZRVUZGTVVnc1NVRkJTVEJJTEVWQlFWY3NUMEZCVkVRc1JVRkJSV3BKTEVWQlFVVndReXhIUVVGSGMwc3NSVUZCVTI1S0xFZEJRVVZyU2l4RlFVRkZja3NzUlVGQlJVUXNSVUZCUlN4RlFVRkZhVmtzUjBGQlJXMUxMSEZDUVVGeFFpeFRRVUZUT1Znc1JVRkJSWEpMTEVWQlFVVnpTeXhGUVVGRmRrc3NSMEZCUjJkTkxFVkJRVVV4UWl4RlFVRkZNazRzU1VGQlJ6Tk9MRVZCUVVWcVNTeEpRVUZKYVVrc1JVRkJSV3BKTEVWQlFVVXNRMEZCUlN4SFFVRkZMRWxCUVVsQkxFVkJRVVZ5UXl4RlFVRkZRU3hGUVVGRk5rTXNTVUZCU1RkRExFVkJRVmNzVDBGQlZITkxMRVZCUVVWcVNTeEZRVUZGY0VNc1IwRkJSMFFzUlVGQlV6WlZMRWRCUVVkMlN5eEZRVUZGY2tzc1JVRkJSWE5MTEVWQlFVVnNTU3hGUVVGRkxFVkJRVVUwVml4SFFVRkZiMHNzZDBKQlFYZENMRk5CUVZNdldDeEZRVUZGY2tzc1JVRkJSWE5MTEVkQlFVZDVRaXhGUVVGRk1VSXNSVUZCUlRKT0xFbEJRVWN6VGl4RlFVRkZha2tzU1VGQlNXbEpMRVZCUVVWcVNTeEZRVUZGTEVsQlFVbHJTU3hGUVVGRlFTeEhRVUZITEVkQlFVY3NTVUZCU1N4SlFVRkpka3NzUlVGQlJTeEhRVUZIY1VNc1JVRkJSU3hGUVVGRlFTeEZRVUZGYTBrc1JVRkJSV3BJTEU5QlFVOXFRaXhKUVVGSmNrTXNSVUZCUlhGRExFZEJRVWRyU1N4RlFVRkZiRWtzUjBGQlIxRXNTVUZCWVN4UFFVRlVlVWdzUlVGQlJXcEpMRVZCUVVWd1F5eEhRVUZIYzBzc1JVRkJVMjVLTEVkQlFVVnJTaXhGUVVGRmNrc3NSVUZCUlVRc1JVRkJSU3hGUVVONlZtbFpMRWRCUVVWeFN5d3dRa0ZCTUVJc1UwRkJVMmhaTEVWQlFVVnlTeXhGUVVGRmMwc3NSVUZCUlhaTExFVkJRVVZ4UXl4SFFVRkhORmNzUjBGQlJ6TlBMRVZCUVVWMFN5eEZRVUZGUXl4SFFVRkhMRWxCUVVrMFRDeEZRVUZGZGtJc1JVRkJSV3BKTEVWQlFVVndReXhIUVVGdFNDeFBRVUZvU0RSTUxFbEJRVWxCTEVWQlFVVjJRaXhGUVVGRmFra3NSVUZCUlhCRExFZEJRVWNzU1VGQlNYTkxMRVZCUVVWQkxFZEJRVWtzU1VGQlNYWkxMRVZCUVVWelN5eEZRVUZGWjBvc1IwRkJSV2hLTEVWQlFVVnlTeXhIUVVGSExFMUJRVkZ2UXl4SFFVRkhkMG9zUlVGQlJXcEZMRTlCUVU5MlJpeEZRVUZGTEVWQlFVVnJTU3hIUVVGSFJDeEZRVUZGTVVNc1QwRkJUM1pHTEVWQlFVVXNSVUZCUld0SkxFVkJRVVV4U0N4UFFVRlBaMG9zUlVGQlJYUkpMRXRCUVV0blNDeEhRVUZIUkN4RlFVRkZMMGNzUzBGQlMyZElMRVZCUVVVeFNDeE5RVUZoTUVnc1EwRkJReXhGUVVGRk1FNHNSMEZCUlhOTExFMUJRVTBzVTBGQlUycFpMRVZCUVVWeVN5eEZRVUZGYzBzc1JVRkJSWFpMTEVkQlFVY3NTVUZCU1N4SlFVRkpjVU1zUlVGQlJTeERRVUZCTEVWQlFVZDNTaXhGUVVGRkxFVkJRVVZCTEVWQlFVVjJRaXhGUVVGRmFFZ3NUMEZCVDNWSkxFbEJRVWw0U2l4RlFVRkZjRU1zUlVGQlJWRXNTMEZCU3paS0xFVkJRVVYxUWl4TFFVRkxkRUlzUlVGQlJVRXNSVUZCUlRsS0xFdEJRVXMyU2l4RlFVRkZkVUlzUjBGQlJ6ZE1MRVZCUVVWelN5eEZRVUZGZFVJc1NVRkJTWFpDTEVWQlFVVjFRaXhIUVVGSExFOUJRVTk0U2l4RFFVRkRMRVZCUVc5Sk5GWXNSMEZCUlRGWUxGVkJRVlZ6UXl4RlFVRkZMRmRCUVc5Q0xFOUJRVlJyVXl4SFFVRkhhbFVzVFVGQllVRXNTMEZCU3pCTUxFTkJRVU1zUlVGRGFtVjVUQ3hIUVVGRk1WZ3NWVUZCVlhGTkxGRkJRVkZ4VEN4SFFVRkZNVmdzVlVGQlZYTkRMRVZCUVVWdlZpeEhRVUZGTVZnc1ZVRkJWWEZMTEZOQlFWTXNWMEZCYjBJc1QwRkJWRzFMTEVkQlFVZHFWU3hOUVVGaFFTeExRVUZMTUV3c1JVRkJSVFZDTEZWQlFWVXNSVUZCUlhGT0xFZEJRVVV4V0N4VlFVRlZhV2xDTEdGQlFXRXNVMEZCVTJ4WkxFZEJRVWNzUjBGQlIzaEtMRXRCUVVzNFF5eEZRVUZGTEVOQlFVTTVReXhMUVVGTGRVSXNTVUZCU1haQ0xFdEJRVXQxUWl4RlFVRkZMRWxCUVVrc1NVRkJTWEJETEVWQlFVVnhTeXhGUVVGRmMwNHNSMEZCUnl4SFFVRkhkRTRzUlVGQlJYVk9MRWxCUVVrc1IwRkJSM1pPTEVWQlFVVXJTQ3hKUVVGSkxFOUJRVTkyVWl4TFFVRkxkVUlzUlVGQlJYQkRMRXRCUVV0aExFdEJRVXQxUWl4RlFVRkZjRU1zUjBGQlJ6QklMRVZCUVVVM1J5eExRVUZMT0VNc1JVRkJSVE5FTEVsQlFVa3NTVUZCUnl4VFFVRlRjMHNzUjBGQlJ5eFBRVUZQTEVsQlFVbEVMRVZCUVVWclFpeEhRVUZIYWtJc1JVRkJSU3hMUVVGSmVrb3NTMEZCUzNWQ0xFVkJRVVZ3UXl4UlFVRlJMRWRCUVVkeFN5eEZRVUZGSzBnc1NVRkJTU3hQUVVGUGRsSXNTMEZCUzNWQ0xFVkJRVVZ3UXl4SlFVRkpZU3hMUVVGTE9FTXNSVUZCUlRORUxFdEJRVXRoTEV0QlFVdDFRaXhGUVVGRmNFTXNSMEZCUnl4SlFVRkpjVXNzUlVGQlJXdENMRWRCUVVjeFN5eExRVUZMT0VNc1JVRkJSVE5FTEV0QlFVdGhMRXRCUVV0MVFpeEZRVUZGY0VNc1IwRkJSeXhQUVVGUFlTeExRVUZMT0VNc1JVRkJSVE5FTEVWQlFVVXNRMEZCUXl4RlFVRkZaMWtzUjBGQlJURllMRlZCUVZWcGFVSXNZVUZCWVhaTExFZEJRVVV4V0N4VlFVRlZhV2xDTEdGQlF6Vmhka3NzUjBGQlJURllMRlZCUVZWcmFVSXNSMEZCUnl4VFFVRlRibGtzUlVGQlJYSkxMRWRCUVVkaExFdEJRVXQxUWl4SlFVRkpka0lzUzBGQlMzVkNMRVZCUVVVc1EwRkJRU3hIUVVGSk1rd3NSMEZCUjJ4T0xFMUJRVTBzU1VGQlNYbEtMRVZCUVVWRUxFVkJRVVZ6VGl4SFFVRXJTU3hQUVVFMVNYUk9MRVZCUVVWMVRpeEpRVUZKTlZnc1JVRkJSVUVzUjBGQlJ5eEhRVUZIY1Vzc1JVRkJSU3RJTEV0QlFVdDJVaXhMUVVGTGRVSXNSVUZCUld0SkxFZEJRVWQwU3l4RlFVRkZZU3hMUVVGTE9FTXNSVUZCUlRKSExFZEJRVWMxUXl4RlFVRkZNVWdzUjBGQlJTeFRRVUZUUkN4SFFVRkhMRTlCUVU5QkxFVkJRVVUyUXl4SFFVRkhMRXRCUVVrdlFpeExRVUZMT0VNc1JVRkJSVEpITEVkQlFVZDBTeXhIUVVGSGNVc3NSVUZCUlN0SUxFdEJRVXQyVWl4TFFVRkxkVUlzUlVGQlJXdEpMRWRCUVVkMFN5eEZRVUZGWVN4TFFVRkxPRU1zUlVGQlJUSkhMRWRCUVVkMFN5eEZRVUZGUVN4RlFVRkZORU1zU1VGQlNUVkRMRWRCUVVkaExFdEJRVXM0UXl4RlFVRkZNa2NzUjBGQlIzUkxMRVZCUVZOaExFbEJRVWtzUlVGQlJXMVlMRWRCUVVVeFdDeFZRVUZWYldsQ0xHRkJRV0Y2U3l4SFFVRkZNVmdzVlVGQlZXdHBRaXhIUVVGSGVFc3NSMEZCUlRCTExGZEJRVmNzVTBGQlUzSlpMRVZCUVVWeVN5eEhRVUZITEV0QlFVdHhTeXhoUVVGaGNrc3NSVUZCUldNc1lVRkJZU3hOUVVGTmMwa3NUVUZCVFN4clEwRkJhME1zU1VGQlNXdENMRVZCUVVWRUxFVkJRVVY2U0N4SlFVRkpOVU1zUlVGQlJVRXNSVUZCUlRSRExFbEJRVWtzU1VGQlNUZERMRVZCUVVVc1IwRkJSM0ZETEVWQlFVVXNSVUZCUlhkS0xFVkJRVVYwUWl4RlFVRkZha2dzVDBGQlQzSkVMRVZCUVVWeFJDeFBRVUZQYVVnc1JVRkJSV3BJTEU5QlFVOXlSQ3hGUVVGRmNVUXNUMEZCTWtJc1NVRkJjRUpuU0N4RlFVRkZja3NzU1VGQlNVUXNSVUZCUlN4SFFVRkhjMHNzUlVGQlJYSkxMRVZCUVVWdlF5eEZRVUZGTEVkQlFWRkJMRVZCUVVWM1NpeEZRVUZGZUVvc1NVRkJTVEprTEVkQlFVZDZWaXhGUVVGRmJFa3NSMEZCUjNCRExFVkJRVVZ2UXl4TlFVRk5ja01zUlVGQlJYRkRMRWRCUVVkd1F5eEZRVUZGYjBNc1NVRkJTU3hQUVVGUExFbEJRVWxwU1N4RlFVRkZka29zV1VGQldXWXNSVUZCUlN4RlFVTTVaMEpwV1N4SFFVRkZNa3NzVDBGQlR5eFRRVUZUZEZrc1JVRkJSWEpMTEVkQlFVY3NUMEZCVDNGTExFZEJRVWR5U3l4TlFVRk5jVXNzU1VGQlNYSkxMRWxCUVVseFN5eGhRVUZoY2tzc1JVRkJSV01zWVVGQllXbG1MRWRCUVVjeFZpeEZRVUZGZWtnc1NVRkJTVFZETEVWQlFVVTBReXhKUVVGSkxFVkJRV2xKYjFZc1IwRkJSVFJMTEd0Q1FVRnJRamxETEVkQlJYUkRPVWdzUjBGQlJUWkxMR05CUVdNNVF5eEhRVUZITDBnc1IwRkJSVEZZTEZWQlFWVjNhVUlzUjBGQlJ5eFhRVUZYTEU5QlFVODVReXhIUVVGSGJtWXNTMEZCU3l4RlFVRkZiVmdzUjBGQlJURllMRlZCUVZWNWFVSXNZVUZCWVM5TExFZEJRVVV4V0N4VlFVRlZkMmxDTEVkQlFVYzVTeXhIUVVGRk1WZ3NWVUZCVlcxVUxFMUJRVTBzVjBGQlZ5eFBRVUZQZFUwc1IwRkJSMjVtTEV0QlFVc3NSVUZCUlcxWUxFZEJRVVV4V0N4VlFVRlZiVlFzVFVGQlRYVkZMRWRCUVVVeFdDeFZRVUZWYlZRc1RVRkJUWFZGTEVkQlFVVjJSU3hOUVVGTkxGTkJRVk53U2l4SFFVRkhMRTlCUVU4eVZpeEhRVUZITTFZc1JVRkJSU3hGUVVOcVlUSk9MRWRCUVVWblRDeFRRVUZUTEZOQlFWTXpXU3hGUVVGRmNrc3NSMEZCUnl0TUxFVkJRVVV4UWl4RlFVRkZNazRzU1VGQlIycE5MRVZCUVVVdlRDeEZRVUZGWjFrc1NVRkJSeTlWTEVWQlFVVnZTQ3hGUVVGRmRrb3NZVUZCWVdRc1JVRkJSV01zV1VGQldTdzJSRUZCTmtSMVNpeEZRVUZGTWxZc1IwRkJSek5XTEVkQlFVY3NTVUZCU1N4SlFVRkpReXhGUVVGRmRFc3NSVUZCUlRSRExFbEJRVWszUXl4RlFVRkZjMHNzUlVGQlJYcElMRWxCUVVsU0xFVkJRVVZyU1N4RlFVRkZha2dzVDBGQlR5eEZRVUZGYWtJc1JVRkJSWEpETEVWQlFVVnpSQ3hQUVVGUGFrSXNTVUZCU1d0SkxFVkJRVVZzU1N4SFFVRkhja01zUlVGQlJYRkRMRWRCUVVkd1F5eEZRVUZGYjBNc1JVRkJSV2xKTEVWQlFVVnFTU3hGUVVGRmNFTXNSVUZCUlRKRUxFVkJRVVV3Unl4RlFVRkZNVWNzUTBGQlF5eEZRVU40VG5GVkxFZEJRVVZwVEN4dlFrRkJiMElzVTBGQlV6VlpMRVZCUVVWeVN5eEhRVUZIUVN4RlFVRkZhMnBDTEVkQlFVYzNXU3hEUVVGRExFVkJRVVVzU1VGQlNUaFpMRWRCUVVVc1EwRkJRME1zUzBGQlN5eFRRVUZUTDFrc1IwRkJPRWdzVDBGQk0wZ3dRaXhGUVVGRk1VSXNSVUZCUlRKT0xFZEJRVVVzYTBOQlFXdERMMVVzUlVGQlJXOUlMRVZCUVVWcldTeGhRVUZoTEd0RlFVRjVSVmtzUjBGQlJVVXNSVUZCUldoYUxFVkJRVVVzUjBGRk1GUXNVMEZCVTJsYUxFdEJRVWw2YVVJc1MwRkJTM2RLTEVWQlFVVXNSVUZCUlN4RFFWVnVaaXhUUVVGVGExb3NSMEZCUld4YUxFVkJRVVZ5U3l4SFFVRkhZU3hMUVVGTE1tbENMRWRCUVVkdVdpeEZRVUZGZUVvc1MwRkJTelJwUWl4SFFVRkhlbXBDTEVOQlFVTXNRMEZGTUVZc1UwRkJVekJxUWl4SFFVRkhjbG9zUlVGQlJYSkxMRWRCUVVjc1NVRkJTWE5MTEVWQlFVa3NUVUZCUmtRc1JVRkJiMEowU3l4RlFVRkpMRTFCUVVaRExFVkJRVkZ2UXl4RlFVRkZjRU1zU1VGQlNTeEhRVUUyUXl4SlFVRXhRMEVzUlVGQlJYTkxMRVZCUVVWMlN5eEZRVUZGTEU5QlFVOTFTeXhGUVVGRmJFa3NSVUZCUlN4UFFVRlBMRkZCUVhaRWFVa3NTMEZCU3l4SlFVRXlSSFJMTEVWQlFVVXNUMEZCVjNWTExFVkJRVVZFTEVWQlFVVnFTU3hIUVVGSGEwa3NSVUZCUld4SkxFbEJRVWtzUzBGQlMybEpMRVZCUVVWMFN5eEpRVUZKTEVsQlFVa3NXVUZCV1VNc1IwRkJSMEVzUjBGQlJ5eFhRVUZYYzBzc1IwRkJSeXhGUVVGRkxFOUJRVThzU1VGQlNXbGFMRWRCUVVWMmFrSXNTVUZCU1N4RlFVRkZjMHNzU1VGQlNTeEZRVUZGTEVOQlJYcFhMRk5CUVZOeFdpeEhRVUZGZEZvc1IwRkJSeXhKUVVGSkxFbEJRVWx5U3l4RlFVRkZMRWxCUVVsMWFrSXNSMEZCUlN4RlFVRkZMRWRCUVVkcVdpeEZRVUZGTEVsQlFVbHBXaXhIUVVGRkxFVkJRVVVzUjBGQlIzaHFRaXhGUVVGRkxFVkJRVVZCTEVWQlFVVnpTeXhGUVVGRmFFZ3NUMEZCVDNSRUxFbEJRVWtzUTBGQlF5eEhRVUZITEVsQlFVbHpTeXhGUVVGRmRFc3NTVUZCU1N4SlFVRkpjMHNzUlVGQlJYUkxMRWRCUVVjc1QwRkJUeXhMUVVGTGRVc3NSVUZCUld0YUxFZEJRVWRKTEZOQlFWTjJXaXhGUVVGRmRFc3NSMEZCUnl4SlFVRkpReXhGUVVGRlFTeEZRVUZGTkdZc1IwRkJSeXhKUVVGSmFVVXNTVUZCU1haYUxFVkJRVVVzUTBGQlF5eFBRVUZQZEVzc1EwRkJReXhEUVVGblNDeFRRVUZUT0dwQ0xFZEJRVVY2V2l4RlFVRkZja3NzUjBGQlIyRXNTMEZCU3pKcFFpeEhRVUZIYmxvc1JVRkJSWGhLTEV0QlFVczBhVUlzUjBGQlIzcHFRaXhEUVVGRExFTkJSVEZUTEZOQlFWTXJha0lzUjBGQlJ6RmFMRWRCUVVjc1NVRkJTWEpMTEVWQlFVVXNSVUZCUlhGTExFVkJRVVZvU0N4UlFVRlJMRXRCUVV0blNDeEZRVUZGTEVkQlFXZERMRTlCUVRkQ2Nrc3NTVUZCU1hGTExFVkJRVVZCTEVWQlFVVXlXaXhWUVVGVkxFbEJRV01zVVVGQlZqTmFMRVZCUVVWeldpeEhRVUZGZEZvc1NVRkJjMElzVFVGQlMzSkxMRWxCUVVseFN5eEZRVUZGTEVsQlFVdHJXaXhIUVVGRkxFVkJRVVVzUjBGQlNWVXNTVUZCU1RWYUxFbEJRVmNzU1VGQlNYbGFMRWRCUVVWNldpeEZRVUZGYlZvc1IwRkJSMjVhTEVWQlFVVnZXaXhKUVVGSExFTkJRV2xDTEZOQlFWTlRMRXRCUVVseWFrSXNTMEZCUzNsS0xFVkJRVVVzUjBGQlIzcEtMRXRCUVV0aUxFVkJRVVVzUlVGQlJXRXNTMEZCUzNkS0xFVkJRVVVzU1VGQlNXbGFMRWRCUVVWNmFVSXNTMEZCU3l0TExFVkJRVVVzUlVGQlJTeERRVUZwUXl4VFFVRlRkVmtzUjBGQlJ6bGFMRVZCUVVWeVN5eEhRVUZITEVsQlFVbHpTeXhGUVVGRlJDeEZRVUZGUVN4RlFVRkZLMW9zVFVGQlRTOWFMRVZCUVVWRExFVkJRVVZvU0N4TFFVRkxaMGdzUjBGQlIwUXNSVUZCUlVNc1JVRkJSV2hJTEV0QlFVdDBSQ3hIUVVGSGNVc3NSVUZCUlhKTExFZEJRVWR6U3l4RlFVRkZha2dzVDBGQlQzSkVMRVZCUVVWeFJDeE5RVUZOTEVOQlFVTXNVMEZCVTJkblFpeEhRVUZGYUZvc1JVRkJSWEpMTEVkQlFUaEVMRTlCUVRORU1GUXNSMEZCUlhKS0xFVkJRVVZ5U3l4RlFVRkZMRWRCUVVkQkxFVkJRVVZ4U3l4RlFVRkZRU3hGUVVGRksxb3NUVUZCVFM5YUxFVkJRVVZETEVWQlFVVm9TQ3hMUVVGTGRFUXNSMEZCUjNGTExFVkJRVVZ5U3l4SFFVRkhRU3hGUVVGRmNVUXNUMEZCVDNKRUxFVkJRVVZ6UkN4TFFVRkxLMGNzUlVGQlJYSkxMRWRCUVZWQkxFTkJRVU1zUTBGQlF5eFRRVUZUTkZjc1IwRkJSWFpOTEVWQlFVVnlTeXhIUVVGSExFbEJRVWx6U3l4RlFVRkZkRXNzUlVGQlJXOUVMRTFCUVRKQ0xFbEJRVWxJTEVWQlFVVXNTVUZCTTBKeFNDeEZRVUZGUkN4RlFVRkZja3NzUlVGQlJYRkxMRVZCUVVWQkxFVkJRVVZvU0N4VFFVRlRhVWdzU1VGQll5eEpRVUZKUVN4SFFVRkhkRXNzUlVGQlJYTkVMRXRCUVU4c1NVRkJSbWRJTEVWQlFVMHNTMEZCUzBFc1MwRkJTeXhGUVVGRlJDeEZRVUZGY2tzc1NVRkJTVUVzUlVGQlJYTkVMRXRCUVV0blNDeEhRVUZIUkN4RlFVRkZja3NzUjBGQlJ5eERRVVY0VEN4VFFVRlRNRlFzUjBGQlJYSktMRVZCUVVWeVN5eEZRVUZGYzBzc1IwRkJSM0pJTEVWQlFVVXNSMEZCUjJwRUxFZEJRVWRCTEVkQlFVY3dUeXhMUVVGTFF5eE5RVUZOTTA4c1NVRkJTWEZMTEVWQlFVVkJMRVZCUVVWbllTeEZRVUZGTEVWQlFVVnlhMElzUlVGQlJYTkxMRVZCUVVVc1EwRkZla3dzVTBGQlUyZGhMRWRCUVVkcVlTeEZRVUZGY2tzc1JVRkJSWE5MTEVkQlFVY3NUVUZCVFVFc1NVRkJTVzlLTEVkQlFVVnlTaXhGUVVGRmNrc3NSVUZCUlN4SFFVRkhjVXNzUlVGQlJVRXNSVUZCUldkaExFVkJRVVV2V2l4SFFVRkhMRU5CUVVNc1UwRkJVMmxoTEVkQlFVZHNZU3hGUVVGRmNrc3NSVUZCUlhOTExFZEJRVWNzVFVGQlRVRXNTVUZCU1c5S0xFZEJRVVZ5U2l4RlFVRkZja3NzUlVGQlJTeEhRVUZIY1Vzc1JVRkJSVUVzUlVGQlJXdEZMRVZCUVVWcVJTeEhRVUZITEVOQmRFSjZSekZJTEVWQlFVVXNhMEpCUVd0Q2RXZENMRWRCUVVWRExGVkJRVXNzUjBGRE1VOUVMRWRCUVVWRkxFVkJRVVVzVTBGQlUyaGFMRWRCUVVjc1NVRkJTWEpMTEVWQlFVVnhUQ3hGUVVGRmFFSXNSMEZCUnl4SFFVRkhMRlZCUVZWeVN5eEhRVUZITEZWQlFWVkJMRWRCUVVjc1YwRkJWMEVzUjBGQlJ5eFJRVUZSUVN4SFFVRkhMR0ZCUVdGQkxFZEJRVWNzYjBKQlFYRkNOazhzV1VGQldYaEZMR0ZCUVdGM1JTeFhRVUZYTEU5QlFVOTRSU3hGUVVGRkxFZEJRVWNzVTBGQlUzSkxMRVZCUVVVc1QwRjBSbXBNTEZOQlFWbHhTeXhGUVVGRmNrc3NSVUZCUlhOTExFZEJRVWNzU1VGQlNTeEpRVUZKZGtzc1JVRkJSU3hIUVVGSGNVTXNSVUZCUlN4RlFVRkZRU3hGUVVGRmQwVXNWVUZCVlhaRUxGTkJRVk5xUWl4RlFVRkZja01zUlVGQlJYRkRMRVZCUVVVc1IwRkJSM2RGTEZWQlFWVjRSU3hIUVVGSGFFTXNUVUZCVFdkbUxGRkJRVkV2VlN4SlFVRkplVUlzUlVGQlJ5eHBRMEZCYVVNc1EwRkJRMVFzUlVGQlJXaENMRWRCUVVkQkxFZEJRVWR5U3l4RlFVRkZSQ3hGUVVGRkxFTkJjMFp6UTNsclFpeERRVUZIYm1Fc1IwRkJSek5ETEVWQlFVVXlReXhGUVVGRk9Ga3NSMEZCUlVVc1IwRkJSeXhIUVVGSGFGb3NZVUZCWVRoQ0xFVkJRVVVzUTBGQmQwSXNTVUZCZGtJc1NVRkJTVGRDTEVWQlFVVXNRMEZCUVN4RlFVRjVRblpMTEVkQlFYUkNjMHNzUlVGQlJVRXNSVUZCUld0RUxGZEJRWE5DTlV3c1VVRkJVVFZDTEVWQlFVVm5ReXhMUVVGTGFFTXNSVUZCUlhOTExFVkJRVVV4U1N4UFFVRlBNa2tzUlVGQlJYWkxMRVZCUVVVd1FpeE5RVUZOTEVsQlFVa3dhRUlzUjBGQlJVVXNSVUZCUlhScVFpeEZRVUZGTUVJc1RVRkJUU3hKUVVGSkxFOUJRVTgyU1N4RFFVRkRMRU5CUVVONVFpeEZRVUZGTVVJc1JVRkJSVEpPTEVkQlFVVXNNa0pCUVRKQ00wNHNSMEZCYlVJc1NVRkJTV3BKTEVWQlFVVXNRMEZCUTNGcFFpeFBRVUYyUW5wclFpeEZRVUZGY1Vzc1JVRkJSWFpLTEdGQlFUSkNkVWtzVFVGQlRYSktMRVZCUVVWclRTeGhRVUZoTEVsQlFVazFTaXhMUVVGTGRFTXNSVUZCUlUwc1ZVRkJWU3hEUVVGRExFbEJRVWx6VEN4RlFVRkZMR2xDUVVGcFFqaFpMRXRCUVV0d2FVSXNSMEZCUnl4SFFVRkhjMG9zUjBGQlJ5eG5Ra0ZCWjBKMFNpeEhRVUZITEc5Q1FVTndaVUVzUlVGQlJTeERRVUZETEVsQlFVbHZRaXhGUVVGRkxFMUJRVTFyU1N4RlFVRkZMRWRCUVU5MlFpeEZRVUZGTTBjc1MwRkJTVEpITEVWQlFVVXpSeXhQUVVGTFFTeEZRVUZGTWtjc1JVRkJSUzlJTEV0QlFVdEdMRVZCUVVVclowSXNSMEZCUlc1RkxFZEJRVWR3VkN4RlFVRkZMRXRCUVV0MVdDeEhRVUZGUlN4RlFVRkZNMllzUjBGQlJTeERRVUZETEVOQlFVTXNSMEZCUnpKSExFVkJRVVZ6WVN4cFFrRkJhVUlzVDBGQlQzWnBRaXhGUVVGRmQybENMRmxCUVZrc2VVaEJRWGxJZUdsQ0xFVkJRVVVzU1VGQlNYSkRMRXRCUVV0RExFVkJRVVUyYTBJc1YwRkJWeXhIUVVGSExGRkJRVkUzVml4TFFVRkxhbEFzUjBGQlJ5eERRVUZETWtRc1JVRkJSVEZFTEVWQlFVVTJhMElzVjBGQlZ6bHJRaXhIUVVGSExFbEJRVWwxUXl4RlFVRkZLMGdzUlVGQlJXdFpMR0ZCUVdFM1pTeEhRVUZIYTBrc1QwRkJSU3hGUVVGUGJFa3NSVUZCUlVFc1JVRkJSVEJMTEVkQlFVY3NTVUZCU1VVc1JVRkJSU3hIUVVGSFF5eEZRVUZGTEVWQlFVVXNTVUZCU1RORExFdEJRVXRzU1N4RlFVRkZORXNzUlVGQlJVTXNTMEZCU3pORExFVkJRVVZCTEVWQlFVVXdReXhGUVVGRkxFZEJRVWNzVFVGQlRXaE5MRWxCUVVsblNTeEpRVUZKUVN4RlFVRkZiRWtzUlVGQlJYZHBRaXhaUVVGWkxFTkJRVUVzUjBGQlNYUmhMRVZCUVVVMldTeEhRVUZGYmtVc1IwRkJSM0JVTEVsQlFVbDFXQ3hIUVVGRlJTeEZRVUZGTDJkQ0xFZEJRVWNzUTBGQlF5eFBRVUZQUml4RFFVRkRMRVZCUVVVclowSXNSMEZCUlc1RkxFZEJRVWNzVTBGQlV6TlZMRWRCUVVjc1QwRkJUMEVzUlVGQlJYbGhMRkZCUVZFc1ZVRkJVeXhUUVVGVE9XdENMRWRCUVVjc1QwRkJUMEVzUlVGQlJXbFVMR0ZCUVdFc1IwRkJSU3hGUVVGNVFuSlJMRVZCUVVVc2NVSkJRWEZDTUdkQ0xGRkJRVVVzUjBGQlVVRXNSMEZCUldocVFpeFZRVUZWSzBNc1QwRkJUeXhYUVVGWExFOUJRVTk0UXl4TFFVRkxkMG9zUlVGQlJXaElMRTFCUVUwc1JVRkJSV2xuUWl4SFFVRkZhR3BDTEZWQlFWVXJReXhQUVVGUGFXZENMRWRCUVVWb2FrSXNWVUZCVlN0RExFOUJRVTlwWjBJc1IwRkJSV2hxUWl4VlFVRlZPR3BDTEVsQlFVa3NWMEZCVnl4SlFVRkpMMW9zUlVGQlJYaEtMRXRCUVV0M1NpeEZRVUZaTEU5QlFWWjRTaXhMUVVGTGQwb3NSVUZCUlN4SFFVRlZRU3hEUVVGRExFVkJRVVZwV2l4SFFVRkZhR3BDTEZWQlFWVTRha0lzU1VGQlNXUXNSMEZCUldocVFpeFZRVUZWT0dwQ0xFbEJRVWxrTEVkQlFVVm9ha0lzVlVGQlZXOUlMRVZCUVVVc1UwRkJVekpETEVWQlFVVnlTeXhIUVVGcFJTeEpRVUU1UkdsRUxFVkJRVVZ2U0N4SFFVRkhjVVVzUzBGQlMwTXNUVUZCVFhSRkxFbEJRVWx3U0N4RlFVRkZha1FzUjBGQlJ6QlBMRXRCUVV0RExFMUJRVTB6VHl4SlFVRkphVVFzUlVGQlJTeEhRVUZIYjBnc1IwRkJSeXhYUVVGWFFTeEhRVUZQY0Vnc1JVRkJSU3hIUVVGSGFrUXNSMEZCUnl4WFFVRlhRU3hIUVVGSExFVkJRVVZCTEVkQlFVY3NTVUZCU1hGTExFZEJRVWQ0U2l4TFFVRkxkMG9zUlVGQlJTOUhMRXRCUVU4c1NVRkJSaXRITEVWQlFVMHNTMEZCUzBFc1IwRkJSMEVzU1VGQlNTeEZRVUZGY2tzc1IwRkJSeXhOUVVGTkxFVkJRVVZCTEV0QlFVc3NSVUZCUldFc1MwRkJTM2RLTEVWQlFVVXZSeXhMUVVGTEswY3NSVUZCUlN4RlFVRkZhVm9zUjBGQlJXaHFRaXhWUVVGVmVXdENMRzFDUVVGdFFucENMRWRCUVVWb2FrSXNWVUZCVlc5SUxFVkJRMm9yUWpSaUxFZEJRVVZvYWtJc1ZVRkJWWGxSTEVWQlFVVXNVMEZCVXpGSExFVkJRVVZ5U3l4SFFVRkhhVVFzUlVGQlJXOUlMRWRCUVVkeFJTeExRVUZMUXl4TlFVRk5kRVVzU1VGQlNYQklMRVZCUVVWcVJDeEhRVUZITUU4c1MwRkJTME1zVFVGQlRUTlBMRWxCUVVscFJDeEZRVUZGTEVkQlFVZHZTQ3hIUVVGSExGZEJRVmRCTEVkQlFVZHdTQ3hGUVVGRkxFZEJRVWRxUkN4SFFVRkhMRmRCUVZkQkxFZEJRVWRoTEV0QlFVczBReXhGUVVGRk5FY3NSMEZCUjNoS0xFdEJRVXMwUXl4RlFVRkZla1FzUlVGQlJTeEZRVUZGYzJwQ0xFZEJRVVZvYWtJc1ZVRkJWVEJyUWl4clFrRkJhMEl4UWl4SFFVRkZhR3BDTEZWQlFWVjVVU3hGUVVGRmRWTXNSMEZCUldocVFpeFZRVUZWSzJwQ0xFVkJRVVVzVTBGQlUyaGhMRWRCUVhWQ0xFbEJRWEJDY0Vnc1JVRkJSVzlJTEVkQlFVZHhSU3hMUVVGTFF5eE5RVUZOZEVVc1NVRkJVWEJJTEVWQlFVVXNSMEZCUjI5SUxFZEJRVWNzVjBGQlYwRXNSMEZCUnl4SlFVRkpRU3hIUVVGSGVFb3NTMEZCUzNkS0xFVkJRVVV2Unl4TFFVRlBMRWxCUVVZclJ5eEZRVUZOTEV0QlFVdEJMRXRCUVVzc1JVRkJSWGhLTEV0QlFVdDNTaXhGUVVGRkwwY3NTMEZCU3l0SExFVkJRVVVzUlVGQlJXbGFMRWRCUVVWb2FrSXNWVUZCVlRKclFpeHpRa0ZCYzBJelFpeEhRVUZGYUdwQ0xGVkJRVlVyYWtJc1JVRkJSV1lzUjBGQlJXaHFRaXhWUVVGVmFVOHNSVUZCUlN4VFFVRlRiRVVzUjBGQmRVUXNSMEZCY0VSd1NDeEZRVUZGYjBnc1IwRkJSM0ZGTEV0QlFVdERMRTFCUVUxMFJTeEpRVUZKY0Vnc1IwRkJSeXhaUVVGWmIwZ3NSMEZCUnl4WFFVRlhRU3hIUVVGTkxFZEJRVWRCTEVWQlFVVjRTaXhMUVVGTGQycENMRVZCUVVWb1lTeFBRVUZQTEVOQlFVTXNTVUZCU1N4SlFVRkpja3NzUlVGQlJTeEZRVUZGTEVWQlFVVkJMRVZCUVVWQkxFbEJRVWxoTEV0QlFVdDNTaXhGUVVGRkwwY3NTMEZCVHl4SlFVRkdLMGNzUlVGQlRTeExRVUZMUVN4SlFVRkpMRVZCUVVWNFNpeExRVUZMZDBvc1JVRkJSUzlITEV0QlFVc3NSVUZCUlN4RFFVRkRMRVZCUTI1blFtZG5RaXhIUVVGRmFHcENMRlZCUVZVMGEwSXNiMEpCUVc5Q05VSXNSMEZCUldocVFpeFZRVUZWYVU4c1JVRkJSU3RWTEVkQlFVVm9ha0lzVlVGQlZUQk1MRWRCUVVjc1UwRkJVek5DTEVkQlFVZHdTQ3hGUVVGRmIwZ3NSMEZCUjNGRkxFdEJRVXRETEUxQlFVMTBSU3hKUVVGSmNFZ3NSVUZCUlN4SFFVRkhiMGdzUjBGQlJ5eHZRa0ZCYzBKQkxFZEJRVWN3Unl4RlFVRkZNVWNzUjBGQlIzaEtMRXRCUVVzMlJ5eEZRVUZGY2tZc1JVRkJSWGRQTEVWQlFVVXNSVUZCUlhsVExFZEJRVVZvYWtJc1ZVRkJWVFpyUWl4elFrRkJjMEkzUWl4SFFVRkZhR3BDTEZWQlFWVXdUQ3hIUVVGSGMxZ3NSMEZCUldocVFpeFZRVUZWYTJ0Q0xFZEJRVWNzVTBGQlUyNWhMRWRCUVVkd1NDeEZRVUZGYjBnc1IwRkJSM0ZGTEV0QlFVdERMRTFCUVUxMFJTeEpRVUZKY0Vnc1IwRkJSeXh2UWtGQmNVSnZTQ3hIUVVGSExHMUNRVUZ0UWtFc1IwRkJSekJITEVWQlFVVXhSeXhIUVVGSGVFb3NTMEZCU3paSExFVkJRVVZ5Uml4RlFVRkZkMDhzUlVGQlJTeEZRVUZGZVZNc1IwRkJSV2hxUWl4VlFVRlZPR3RDTEc5Q1FVRnZRamxDTEVkQlFVVm9ha0lzVlVGQlZXdHJRaXhIUVVGSGJFSXNSMEZCUldocVFpeFZRVUZWSzB3c1IwRkJSeXhUUVVGVGFFTXNSMEZCUjNCSUxFVkJRVVZ2U0N4SFFVRkhjVVVzUzBGQlMwTXNUVUZCVFhSRkxFbEJRVWx3U0N4SFFVRkhMRmxCUVZsdlNDeEhRVUZITEZkQlFWZEJMRWRCUVVkNFNpeExRVUZMZDJwQ0xFZEJRVWRvWVN4SFFVRkhMRVZCUVVWQkxFZEJRVWNzVFVGQlRTeEZRVUZGTEVWQlFVVnBXaXhIUVVGRmFHcENMRlZCUVZVcmEwSXNiMEpCUVc5Q0wwSXNSMEZCUldocVFpeFZRVUZWSzB3c1IwRkRkbVpwV0N4SFFVRkZhR3BDTEZWQlFWVnJUU3hIUVVGSExGTkJRVk51UXl4SFFVRkhjRWdzUlVGQlJXOUlMRWRCUVVkeFJTeExRVUZMUXl4TlFVRk5kRVVzU1VGQlNYQklMRWRCUVVjc2IwSkJRWEZDYjBnc1IwRkJSeXh0UWtGQmJVSkJMRWRCUVVjMFJ5eEZRVUZITlVjc1IwRkJSM2hLTEV0QlFVczJSeXhGUVVGRmNrWXNSVUZCUlhkUExFVkJRVVVzUlVGQlJYbFRMRWRCUVVWb2FrSXNWVUZCVldkc1FpeHZRa0ZCYjBKb1F5eEhRVUZGYUdwQ0xGVkJRVlZyVFN4SFFVRkhPRmNzUjBGQlJXaHFRaXhWUVVGVmIxTXNSMEZCUnl4VFFVRlRja2tzUjBGQlIzaEtMRXRCUVV0eGFrSXNSVUZCUlROU0xFZEJRVVZzU1N4SFFVRkhMRVZCUVVWcFdpeEhRVUZGYUdwQ0xGVkJRVlZwYkVJc01FSkJRVEJDYWtNc1IwRkJSV2hxUWl4VlFVRlZiMU1zUjBGQlJ6UlJMRWRCUVVWb2FrSXNWVUZCVlRScVFpeEZRVUZGTEZOQlFWTTNXaXhIUVVGSExFbEJRVWx5U3l4RlFVRkZZU3hMUVVGTE1sRXNSVUZCUlc1SUxFZEJRVWQxU0N4RlFVRkhkbEFzUlVGQlJYZFBMRWRCUVVVc1UwRkJVM1pITEVWQlFVVjJTeXhIUVVGSFF5eEZRVUZGTUVnc1JVRkJSVFJETEVsQlFVa3NSVUZCUlhaTExFbEJRVWtzUlVGQlJTeEhRVUZGTEVWQlFVVjFha0lzUjBGQlJXaHFRaXhWUVVGVmEyeENMSGRDUVVGM1FteERMRWRCUVVWb2FrSXNWVUZCVlRScVFpeEZRVUZGV2l4SFFVRkZhR3BDTEZWQlFWVnRiRUlzUjBGQlJ5eFRRVUZUY0dJc1IwRkJSM0JJTEVWQlFVVnZTQ3hIUVVGSGNVVXNTMEZCUzBNc1RVRkJUWFJGTEVsQlFVbHdTQ3hGUVVGRkxFZEJRVWR2U0N4SFFVRkhMRWxCUVVsQkxFZEJRVWQ0U2l4TFFVRkxkMG9zUlVGQlJTOUhMRXRCUVVzclJ5eEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZhVm9zUjBGQlJXaHFRaXhWUVVGVmIyeENMRmRCUVZkd1F5eEhRVUZGYUdwQ0xGVkJRVlZ0YkVJc1IwRkRPV1p1UXl4SFFVRkZhR3BDTEZWQlFWVnhiRUlzUjBGQlJ5eFRRVUZUZEdJc1IwRkJSM0JJTEVWQlFVVnZTQ3hIUVVGSGNVVXNTMEZCUzBNc1RVRkJUWFJGTEVsQlFVbHdTQ3hGUVVGRkxFZEJRVWR2U0N4SFFVRkhMRTFCUVUxQkxFZEJRVWQ0U2l4TFFVRkxkMG9zUlVGQlJTOUhMRXRCUVVzclJ5eEpRVUZKTEVWQlFVVXNTMEZCUzNoS0xFdEJRVXQzU2l4RlFVRkZMMGNzUzBGQlN5dEhMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVZwV2l4SFFVRkZhR3BDTEZWQlFWVnpiRUlzV1VGQldYUkRMRWRCUVVWb2FrSXNWVUZCVlhGc1FpeEhRVUZIY2tNc1IwRkJSV2hxUWl4VlFVRlZiVVFzUlVGQlJTeFRRVUZUTkVjc1IwRkJSM0JJTEVWQlFVVnZTQ3hIUVVGSGNVVXNTMEZCUzBNc1RVRkJUWFJGTEVsQlFVbHdTQ3hGUVVGRkxFZEJRVWR2U0N4SFFVRkhMRmRCUVZkQkxFZEJRVWQ0U2l4TFFVRkxkMG9zUlVGQlJTOUhMRXRCUVVzclJ5eEpRVUZKTEVWQlFVVXNTMEZCUzNoS0xFdEJRVXQzU2l4RlFVRkZMMGNzUzBGQlN5dEhMRWxCUVVrc1JVRkJSU3hMUVVGTGVFb3NTMEZCUzNkS0xFVkJRVVV2Unl4TFFVRkxLMGNzU1VGQlNTeEhRVUZITEV0QlFVdDRTaXhMUVVGTGQwb3NSVUZCUlM5SExFdEJRVXNyUnl4SlFVRkpMRWRCUVVjc1NVRkJTU3hGUVVGRmFWb3NSMEZCUldocVFpeFZRVUZWZFd4Q0xGbEJRVmwyUXl4SFFVRkZhR3BDTEZWQlFWVnRSQ3hGUVVGRk5tWXNSMEZCUldocVFpeFZRVUZWZDJwQ0xFVkJRVVVzVTBGQlUzcGFMRWRCUVVkd1NDeEZRVUZGYjBnc1IwRkJSM0ZGTEV0QlFVdERMRTFCUVUxMFJTeEpRVUZKY0Vnc1JVRkJSU3hIUVVGSGIwZ3NSMEZCUnl4dlFrRkJjMEpCTEVkQlFVZDVSeXhGUVVGSGVrY3NSMEZCUjNoS0xFdEJRVXMwUXl4RlFVRkZjRUlzUjBGQlIzaENMRXRCUVVzMFF5eEZRVUZGYjA0c1JVRkJSU3hGUVVGRmVWTXNSMEZCUldocVFpeFZRVUZWZDJ4Q0xGbEJRVmw0UXl4SFFVRkZhR3BDTEZWQlFWVjNha0lzUlVGRE4yVlNMRWRCUVVWb2FrSXNWVUZCVlhsc1FpeEhRVUZITEZOQlFWTXhZaXhIUVVGSGNFZ3NSVUZCUlc5SUxFZEJRVWR4UlN4TFFVRkxReXhOUVVGTmRFVXNTVUZCU1hCSUxFZEJRVWNzUzBGQlMyOUlMRWRCUVVjc1NVRkJTVUVzUjBGQlIzaEtMRXRCUVV0M1NpeEZRVUZGTDBjc1MwRkJTeXRITEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVWcFdpeEhRVUZGYUdwQ0xGVkJRVlV3YkVJc1ZVRkJWVEZETEVkQlFVVm9ha0lzVlVGQlZYbHNRaXhIUVVGSGVrTXNSMEZCUldocVFpeFZRVUZWTW14Q0xFZEJRVWNzVTBGQlV6VmlMRWRCUVVkd1NDeEZRVUZGYjBnc1IwRkJSM0ZGTEV0QlFVdERMRTFCUVUxMFJTeEpRVUZKY0Vnc1IwRkJSeXhQUVVGUGIwZ3NSMEZCUnl4TlFVRk5RU3hIUVVGSGVFb3NTMEZCUzNkS0xFVkJRVVV2Unl4TFFVRkxLMGNzU1VGQlNTeEZRVUZGTEV0QlFVdDRTaXhMUVVGTGQwb3NSVUZCUlM5SExFdEJRVXNyUnl4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRmFWb3NSMEZCUldocVFpeFZRVUZWTkd4Q0xGZEJRVmMxUXl4SFFVRkZhR3BDTEZWQlFWVXliRUlzUjBGQlJ6TkRMRWRCUVVWb2FrSXNWVUZCVldkcVFpeEZRVUZGTEZOQlFWTnFXaXhIUVVGSGNFZ3NSVUZCUlc5SUxFZEJRVWR4UlN4TFFVRkxReXhOUVVGTmRFVXNTVUZCU1hCSUxFZEJRVWNzV1VGQldXOUlMRWRCUVVjc1YwRkJWMEVzUjBGQlIzaEtMRXRCUVV0M1NpeEZRVUZGTDBjc1MwRkJTeXRITEVsQlFVa3NSVUZCUlN4TFFVRkxlRW9zUzBGQlMzZEtMRVZCUVVVdlJ5eExRVUZMSzBjc1NVRkJTU3hGUVVGRkxFdEJRVXQ0U2l4TFFVRkxkMG9zUlVGQlJTOUhMRXRCUVVzclJ5eEpRVUZKTEVkQlFVY3NTMEZCUzNoS0xFdEJRVXQzU2l4RlFVRkZMMGNzUzBGQlN5dEhMRWxCUVVrc1IwRkJSeXhKUVVGSkxFVkJRVVZwV2l4SFFVRkZhR3BDTEZWQlFWVTJiRUlzVjBGQlZ6ZERMRWRCUVVWb2FrSXNWVUZCVldkcVFpeEZRVU40WlVFc1IwRkJSV2hxUWl4VlFVRlZhV3BDTEVWQlFVVXNVMEZCVTJ4YUxFZEJRVWR3U0N4RlFVRkZiMGdzUjBGQlIzRkZMRXRCUVV0RExFMUJRVTEwUlN4SlFVRkpjRWdzUjBGQlJ5eHZRa0ZCY1VKdlNDeEhRVUZITEcxQ1FVRnRRa0VzUjBGQlJ6QkhMRVZCUVVVeFJ5eEhRVUZIZUVvc1MwRkJTMnRSTEVWQlFVVXhUeXhGUVVGRmQwOHNSVUZCUlN4RlFVRkZlVk1zUjBGQlJXaHFRaXhWUVVGVk9HeENMRmRCUVZjNVF5eEhRVUZGYUdwQ0xGVkJRVlZwYWtJc1JVRkJSVVFzUjBGQlJXaHFRaXhWUVVGVk5Fc3NSMEZCUnl4VFFVRlRZaXhIUVVGSGNFZ3NSVUZCUlc5SUxFZEJRVWR4UlN4TFFVRkxReXhOUVVGTmRFVXNTVUZCU1hCSUxFZEJRVWNzY1VKQlFYTkNiMGdzUjBGQlJ5eHZRa0ZCYjBKQkxFZEJRVWR0U0N4RlFVRkZaU3hIUVVGRmJFa3NTVUZCU1hoS0xFdEJRVXRyVVN4RlFVRkZNVThzUlVGQlJYZFBMRVZCUVVVc1JVRkJSWGxUTEVkQlFVVm9ha0lzVlVGQlZTdHNRaXhwUWtGQmFVSXZReXhIUVVGRmFHcENMRlZCUVZVMFN5eEhRVUZIYjFrc1IwRkJSV2hxUWl4VlFVRlZiMWdzUlVGQlJTeFRRVUZUY2s0c1IwRkJSM0JJTEVWQlFVVm5VQ3hOUVVGWE5VZ3NTVUZCU1RSSUxFMUJRVmMxU0N4SFFVRkhPRWNzVFVGQlRUbEhMRXRCUVVzc2MwSkJRWFZDUVN4SFFVRkhMSE5DUVVGMVFrRXNSMEZCUnpaSExFVkJRVWMzUnl4SFFVRkhlRW9zUzBGQlN6UkRMRVZCUVVWd1FpeEZRVUZGTEVWQlFVVnBhRUlzUjBGQlJXaHFRaXhWUVVGVloyMUNMRmRCUVZkb1JDeEhRVUZGYUdwQ0xGVkJRVlZ2V0N4RlFVTnlaVFJNTEVkQlFVVm9ha0lzVlVGQlZUaFRMRVZCUVVVc1UwRkJVeTlKTEVkQlFVZHdTQ3hGUVVGRloxQXNUVUZCVnpWSUxFbEJRVWswU0N4TlFVRlhOVWdzUjBGQlJ6aEhMRTFCUVUwNVJ5eExRVUZMTEhWQ1FVRjNRa0VzUjBGQlJ5eDFRa0ZCZDBKQkxFZEJRVWRyU0N4RlFVRkhiRWdzUjBGQlIzaEtMRXRCUVVzMFF5eEZRVUZGY0VJc1IwRkJSM2hDTEV0QlFVczBReXhGUVVGRmIwNHNSVUZCUlN4RlFVRkZlVk1zUjBGQlJXaHFRaXhWUVVGVmFXMUNMRmxCUVZscVJDeEhRVUZGYUdwQ0xGVkJRVlU0VXl4RlFVRkZhMUVzUjBGQlJXaHFRaXhWUVVGVk1GTXNSVUZCUlN4VFFVRlRNMGtzUjBGQlIzQklMRVZCUVVVc2EwSkJRVzFDYjBnc1IwRkJSeXhwUWtGQmEwSkJMRWRCUVVkNFNpeExRVUZMZDBvc1JVRkJSUzlITEV0QlFVc3JSeXhGUVVGRkxFVkJRVVVzUlVGQlJTeEZRVUZGYVZvc1IwRkJSV2hxUWl4VlFVRlZhMjFDTEZWQlFWVnNSQ3hIUVVGRmFHcENMRlZCUVZVd1V5eEZRVUZGYzFFc1IwRkJSV2hxUWl4VlFVRlZObWxDTEVWQlFVVXNVMEZCVXpsWkxFZEJRVWR3U0N4RlFVRkZiMGdzUjBGQlIzRkZMRXRCUVV0RExFMUJRVTEwUlN4SlFVRkpjRWdzUjBGQlJ5eFpRVUZaYjBnc1IwRkJSeXhYUVVGWFFTeEhRVUZIZUVvc1MwRkJTekJPTEVWQlFVVnNSU3hGUVVGRkxFVkJRVVZwV2l4SFFVRkZhR3BDTEZWQlFWVnRiVUlzVlVGQlZXNUVMRWRCUVVWb2FrSXNWVUZCVlRacFFpeEZRVUZGUnl4SFFVRkZhR3BDTEZWQlFWVXlTeXhIUVVGSExGTkJRVk5hTEVkQlFVZDRTaXhMUVVGTGQwb3NSVUZCUlM5SExFdEJRVXR5UWl4TlFVRk5jRUlzUzBGQlMzZEtMRVZCUVVWQkxFVkJRVVVzUlVGRE4yVnBXaXhIUVVGRmFHcENMRlZCUVZWdmJVSXNWMEZCVjNCRUxFZEJRVVZvYWtJc1ZVRkJWVEpMTEVkQlFVZHhXU3hIUVVGRmFHcENMRlZCUVZVd1dDeEZRVUZGTEZOQlFWTXpUaXhIUVVGSGJVZ3NSVUZCUlc1SUxFZEJRVWQ0U2l4TFFVRkxOa2NzUlVGQlJYSkdMRVZCUVVWM1R5eEZRVUZGTEVWQlFVVjVVeXhIUVVGRmFHcENMRlZCUVZWeGJVSXNhMEpCUVd0Q2NrUXNSMEZCUldocVFpeFZRVUZWTUZnc1JVRkJSWE5NTEVkQlFVVm9ha0lzVlVGQlZXdFlMRVZCUVVVc1UwRkJVMjVPTEVkQlFVZHRTQ3hGUVVGRmJrZ3NSMEZCUjNoS0xFdEJRVXMwUXl4RlFVRkZjRUlzUjBGQlIzaENMRXRCUVVzMFF5eEZRVUZGYjA0c1JVRkJSU3hGUVVGRmVWTXNSMEZCUldocVFpeFZRVUZWYzIxQ0xHbENRVUZwUW5SRUxFZEJRVVZvYWtJc1ZVRkJWV3RZTEVWQlF6Tk9PRXdzUjBGQlJXaHFRaXhWUVVGVmNXcENMRVZCUVVVc1UwRkJVM1JhTEVkQlFVY3NTVUZCU1hKTExFVkJRVVZoTEV0QlFVdDNTaXhGUVVGRmFFZ3NVVUZxUjNkVExGTkJRVmxuU0N4RlFVRkZja3NzUlVGQlJYTkxMRWRCUVVjc1NVRkJTU3hKUVVGSmRrc3NSVUZCUlN4SFFVRkhjVU1zUlVGQlJTeEZRVUZGUVN4RlFVRkZkMFVzVlVGQlZYWkVMRk5CUVZOcVFpeEZRVUZGY2tNc1JVRkJSWEZETEVWQlFVVXNSMEZCUjNkRkxGVkJRVlY0UlN4SFFVRkhMR2xDUVVGclFtbEpMRWRCUVVkNVFpeEZRVUZITEd0RFFVRnJReXhEUVVGRFZDeEZRVUZGYUVJc1IwRkJSMEVzUjBGQlIzSkxMRVZCUVVWRUxFVkJRVVVzUTBGcFIzWmlNbFVzUTBGQlIzSkxMRWRCUVVjc1NVRkJTU3hKUVVGSlF5eEZRVUZGTEVWQlFVVkJMRVZCUVVWRUxFVkJRVVZvU0N4UFFVRlBhVWdzU1VGQlNTeERRVUZETEVsQlFVbDJTeXhGUVVGRmMwc3NSVUZCUlc5SUxGZEJRVmR1U0N4SFFVRkhMRWRCUVVjc1NVRkJTWFpMTEVWQlFVVmpMRXRCUVV0M1NpeEZRVUZGTDBjc1MwRkJTM1pFTEZGQlFWRXNSMEZCUnl4TFFVRkxRU3hGUVVGRll5eExRVUZMZDBvc1JVRkJSUzlITEV0QlFVdDJSQ3hIUVVGSExFVkJRVVVzUzBGQlMyTXNTMEZCUzNkS0xFVkJRVVV2Unl4TFFVRlBMRWRCUVVaMlJDeEZRVUZMTEZWQlFWVXNSMEZCUnl4TlFVRk5RU3hGUVVGRkxFZEJRVWNzVDBGQlQwRXNSMEZCUnl4UFFVRlBRU3hIUVVGSGRVc3NSVUZCUlN4RlFVRkZSQ3hGUVVGRmFFZ3NUMEZCVHl4RFFVRkRMRWxCUVVscVFpeEZRVUZGYVVrc1JVRkJSVzlJTEZkQlFWZHVTQ3hGUVVGRkxFZEJRVWNzVDBGQlQyeEpMRWRCUVVjc1QwRkJUMEVzU1VGQlNYSkRMRVZCUVVVc1RVRkJUVUVzUlVGQlJTeFBRVUZQY1VNc1JVRkJSU3hOUVVGTkxFMUJRVTEyUWl4TFFVRkxkMG9zUlVGQlJTOUhMRXRCUVV0MlJDeEhRVUZITEVkQlFVY3NTMEZCUzJNc1MwRkJTM2RLTEVWQlFVVXZSeXhMUVVGTGRrUXNSMEZCUnl4SFFVRkhMRWRCUVVjc1MwRkJTMk1zUzBGQlMzZEtMRVZCUVVVdlJ5eExRVUZMZGtRc1IwRkJSeXhGUVVGRkxFZEJRVWNzUzBGQlMyTXNTMEZCUzNkS0xFVkJRVVV2Unl4TFFVRlBMRWRCUVVaMlJDeEZRVUZMTEV0QlFVdDFTeXhKUVVGSkxFMUJRVTE2U2l4TFFVRkxkMG9zUlVGQlJTOUhMRXRCUVV0MlJDeEhRVUZITEVkQlFVY3NTMEZCUzJNc1MwRkJTM2RLTEVWQlFVVXZSeXhMUVVGTGRrUXNSMEZCUnl4RlFVRkZMRWRCUVVjc1MwRkJTMk1zUzBGQlMzZEtMRVZCUVVVdlJ5eExRVUZQTEVkQlFVWjJSQ3hGUVVGTExFbEJRVWtzUTBGQlF5eFBRVUZQWXl4TFFVRkxkMG9zUlVGQlJXaElMRTlCUTNobWNrUXNRMEZCUXl4RlFVRkZjMnBDTEVkQlFVVm9ha0lzVlVGQlZYVnRRaXhaUVVGWmRrUXNSMEZCUldocVFpeFZRVUZWY1dwQ0xFVkJRWE5ETDJkQ0xFVkJRVVVzYjBKQlFXOUNNbWRDTEZGQlFVVXNSMEZCVVVFc1IwRkJSV3BxUWl4VlFVRlZkMjFDTEVsQlFVa3NVMEZCVTNwakxFZEJRVWNzVDBGQlQzaEtMRXRCUVVzMGFVSXNSMEZCUjNCYUxFVkJRVVZ2V2l4SlFVRkpOV2xDTEV0QlFVczBhVUlzU1VGQlNYQmFMRVZCUVVWdldpeEpRVUZKTldsQ0xFdEJRVXN5YVVJc1IwRkJSMjVhTEVWQlFVVnRXaXhKUVVGSkxFVkJRVVV6YVVJc1MwRkJTelJwUWl4SlFVRkpjRm9zUlVGQlJXOWFMRWxCUVVrMWFVSXNTMEZCU3pKcFFpeEpRVUZKYmxvc1JVRkJSVzFhTEVkQlFVY3NSVUZCUlN4RFFVRkRMRVZCUVVWRUxFZEJRVVZxYWtJc1ZVRkJWWGR0UWl4SlFVRkpka1FzUjBGQlJXcHFRaXhWUVVGVmQyMUNMRWxCUVVsMlJDeEhRVUZGYW1wQ0xGVkJRVlY1VHl4SFFVRkhMRmRCUVZjc1QwRkJUeXhKUVVGSmQxVXNTVUZCUnpGcFFpeExRVUZMTW1sQ0xFdEJRVXNzUjBGQlZ5eEZRVUZTTTJsQ0xFdEJRVXMwYVVJc1MwRkJUeXhOUVVGTkxFVkJRVVUxYVVJc1MwRkJTelJwUWl4TFFVRkxMRWxCUVVrc1JVRkJSU3hGUVVGRlJpeEhRVUZGYW1wQ0xGVkJRVlY1YlVJc1YwRkJWM2hFTEVkQlFVVnFha0lzVlVGQlZYbFBMRWRCUVVkM1ZTeEhRVUZGYW1wQ0xGVkJRVlZ0VHl4SFFVRkhMRmRCUVZjc1QwRkJUeXhKUVVGSk9GVXNSMEZCUlRGcFFpeExRVUZMTW1sQ0xFbEJRVWtzU1VGQlNTeEhRVUZITTJsQ0xFdEJRVXMwYVVJc1NVRkJTU3hGUVVGRk5XbENMRXRCUVVzeWFVSXNTMEZCU3l4TlFVRk5MRVZCUVVVc1JVRkJSVVFzUjBGQlJXcHFRaXhWUVVGVk1HMUNMRlZCUVZWNlJDeEhRVUZGYW1wQ0xGVkJRVlZ0VHl4SFFVTjRaamhWTEVkQlFVVnFha0lzVlVGQlZXMW1MRWRCUVVjc1YwRkJWeXhUUVVGcFFpeFhRVUZTTldVc1MwRkJTelJwUWl4SFFVRmpMRVZCUVVWR0xFZEJRVVZxYWtJc1ZVRkJWVEp0UWl4SlFVRkpNVVFzUjBGQlJXcHFRaXhWUVVGVmJXWXNSMEZCUnpoRUxFZEJRVVZxYWtJc1ZVRkJWVFJ0UWl4SFFVRkhMRmRCUVZjc1UwRkJhVUlzUlVGQlVuSnRRaXhMUVVGTE1tbENMRWRCUVVzc1JVRkJSVVFzUjBGQlJXcHFRaXhWUVVGVk5tMUNMRWxCUVVrMVJDeEhRVUZGYW1wQ0xGVkJRVlUwYlVJc1IwRkJSek5FTEVkQlFVVnFha0lzVlVGQlZYRlRMRWRCUVVjc1YwRkJWeXhQUVVGUExFZEJRVWM1VWl4TFFVRkxNbWxDTEVsQlFVa3NSMEZCUnpOcFFpeExRVUZMTkdsQ0xFVkJRVVVzUlVGQlJVWXNSMEZCUldwcVFpeFZRVUZWT0cxQ0xFdEJRVXMzUkN4SFFVRkZhbXBDTEZWQlFWVnhVeXhIUVVGSE5GRXNSMEZCUldwcVFpeFZRVUZWZFdwQ0xFbEJRVWtzVTBGQlUzaGFMRWRCUVVjc1QwRkJUeXhKUVVGSmExb3NTVUZCUnpGcFFpeExRVUZMTW1sQ0xFZEJRVWR1V2l4RlFVRkZiVm9zUjBGQlJ5eGpRVUZqTEVsQlFVa3NTVUZCU1ROcFFpeExRVUZMTkdsQ0xFZEJRVWR3V2l4RlFVRkZiMW9zUjBGQlJ5eGpRVUZqTEVsQlFVa3NXVUZCV1RWcFFpeExRVUZMTW1sQ0xFZEJRVWR1V2l4RlFVRkZiVm9zUjBGQlJ5eEZRVUZGTEV0QlFVc3NSVUZCUlN4RlFVRkZSQ3hIUVVGRmFtcENMRlZCUVZWMWFrSXNTVUZCU1U0c1IwRkJSV3BxUWl4VlFVRlZkV3BDTEVsQlF6RmhUaXhIUVVGRmFtcENMRlZCUVZVeWFrSXNTVUZCU1N4VFFVRlROVm9zUjBGQlJ5eFBRVUZQTEVsQlFVbHJXaXhKUVVGSE1XbENMRXRCUVVzeWFVSXNSMEZCUjI1YUxFVkJRVVZ0V2l4SFFVRkhMR05CUVdNc1NVRkJTU3hKUVVGSk0ybENMRXRCUVVzMGFVSXNSMEZCUjNCYUxFVkJRVVZ2V2l4SFFVRkhMR05CUVdNc1NVRkJTU3hGUVVGRk5XbENMRXRCUVVzeWFVSXNSMEZCUjI1YUxFVkJRVVZ0V2l4SFFVRkhMRVZCUVVVc1MwRkJTeXhGUVVGRkxFVkJRVVZFTEVkQlFVVnFha0lzVlVGQlZUSnFRaXhKUVVGSlZpeEhRVUZGYW1wQ0xGVkJRVlV5YWtJc1NVRkJkMDFXTEVkQlFVVTRSQ3hUUVVGVE0wUXNSMEZCUjBnc1IwRkJSV3BxUWl4VlFVRlZjMllzUjBGQlJ5eFRRVUZUZGxZc1IwRkJSeXhKUVVGSmNrc3NSVUZCUlRCcVFpeEhRVUZITjJsQ0xFdEJRVXN5YVVJc1IwRkJSMjVhTEVkQlFXOURMRTlCUVdwRFFTeEZRVUZGY1Zvc1IwRkJSemRwUWl4TFFVRkxOR2xDTEVkQlFVZHdXaXhKUVVGTGIxb3NSMEZCUjNCYUxFVkJRVVZ0V2l4SFFVRkhibG9zUlVGQlJXMWFMRWRCUVVjc1JVRkJVM2hxUWl4RlFVRkZObXBDTEVsQlFVbDRXaXhGUVVGRkxFVkJRVVZyV2l4SFFVRkZhbXBDTEZWQlFWVm5ia0lzU1VGQlNTOUVMRWRCUVVWcWFrSXNWVUZCVlhObUxFZEJRM0ptTWtRc1IwRkJSV3BxUWl4VlFVRlZiVmdzUjBGQlJ5eFRRVUZUY0U0c1IwRkJSeXhIUVVGSExFZEJRVWRCTEVWQlFVVXNUVUZCVFN4SFFVRkhMRWxCUVVseVN5eEZRVUZGTEVsQlFVbDFha0lzUjBGQlJTeEZRVUZGTEVkQlFVZHFXaXhGUVVGRkxFbEJRVWxwV2l4SFFVRkZNV2xDTEV0QlFVc3lhVUlzUjBGQlJ6TnBRaXhMUVVGTE5HbENMRWxCUVVsd1dpeEZRVUZGTEVsQlFVbHJXaXhIUVVGRmJGb3NSVUZCUlN4SFFVRkhMRWxCUVVrc1NVRkJTWFJMTEVWQlFVVXNTVUZCU1hkcVFpeEhRVUZGTEVWQlFVVXNTVUZCU1d4YUxFVkJRVVZ2Vml4TlFVRk5jRllzUlVGQlJVRXNSVUZCUlc5RkxFdEJRVXN4VHl4RlFVRkZRU3hGUVVGRk1FOHNTMEZCU3l4TlFVRk5NVThzUlVGQlJUUlRMRTFCUVUwc1IwRkJSM1JKTEVWQlFVVjVZeXhKUVVGSmVHTXNTMEZCUzNSTExFVkJRVVZCTEVWQlFVVTJha0lzU1VGQlNUbHFRaXhIUVVGSGRVc3NSVUZCUlVFc1JVRkJSVEphTEVsQlFVazFXaXhKUVVGSlFTeEZRVUZGUVN4RlFVRkZNRVVzUzBGQlMyaFFMRVZCUVVWQkxFVkJRVVZuVUN4TFFVRkxMRTFCUVUwc1EwRkJReTlQTEVWQlFVVnpTeXhGUVVGRkxFVkJRVVZwV2l4SFFVRkZhbXBDTEZWQlFWVnBia0lzU1VGQlNXaEZMRWRCUVVWcWFrSXNWVUZCVlcxWUxFZEJRVWM0VEN4SFFVRkZhbXBDTEZWQlFWVnhTeXhUUVVGVExGZEJRVmNzU1VGQlNTeEpRVUZKVGl4RlFVRkZMRWRCUVVkeVN5eEZRVUZGWVN4TlFVRk5ZaXhGUVVGRk1sTXNUVUZCVFN4RFFVRlpMRWxCUVVseVNTeEhRVUZtZEVzc1JVRkJSVUVzUlVGQlJYbFlMRWRCUVVjc1MwRkJXU3hIUVVGSGNFNHNSVUZCUlhKTExFVkJRVVVzUjBGQlIzZHFRaXhIUVVGSGJsb3NSVUZCUlhKTExFVkJRVVZ6U3l4RFFVRkRMRU5CUVdkQ0xFMUJRV1lzU1VGQlNVUXNTVUZCU1VFc1JVRkJSU3hMUVVGWlFTeERRVUZETEVWQlFVVnJXaXhIUVVGRmFtcENMRlZCUVZWeFN5eFRRVUZUTkZrc1IwRkJSV3BxUWl4VlFVRlZjVXNzVTBGRE1WRTBXU3hIUVVGRmFVVXNWMEZCVnpkRUxFZEJRVVZLTEVkQlFVVnFha0lzVlVGQlZXMVVMRTFCUVUwc1YwRkJWeXhQUVVGUExFbEJRVWs0VUN4SFFVRkZNV2xDTEV0QlFVc3lhVUlzUjBGQlJ6TnBRaXhMUVVGTE5HbENMRWRCUVVjc1JVRkJSVVlzUjBGQlJXcHFRaXhWUVVGVmJWUXNUVUZCVFRoUUxFZEJRVVZxYWtJc1ZVRkJWVzFVTEUxQlFUQkROMUVzUlVGQlJTeHRRa0ZCYlVKcmFFSXNVVUZCUlN4SFFVRlJRU3hIUVVGRmVHcENMRlZCUVZWMWFrSXNTVUZCU1N4VFFVRlRlRm9zUjBGQlJ5eFBRVUZQTEVsQlFVbDVXaXhKUVVGSGFtcENMRXRCUVVzeWFVSXNSMEZCUjI1YUxFVkJRVVZ0V2l4SFFVRkhMR05CUVdNc1NVRkJTU3hKUVVGSk0ybENMRXRCUVVzMGFVSXNSMEZCUjNCYUxFVkJRVVZ2V2l4SFFVRkhMR05CUVdNc1NVRkJTU3haUVVGWk5XbENMRXRCUVVzeWFVSXNSMEZCUjI1YUxFVkJRVVZ0V2l4SFFVRkhMRVZCUVVVc1MwRkJTeXhGUVVGRkxFVkJRVVZOTEVkQlFVVjRha0lzVlVGQlZYVnFRaXhKUVVGSlF5eEhRVUZGZUdwQ0xGVkJRVlYxYWtJc1NVRkRkR1pETEVkQlFVVjRha0lzVlVGQlZUSnFRaXhKUVVGSkxGTkJRVk0xV2l4SFFVRkhMRTlCUVU4c1NVRkJTWGxhTEVsQlFVZHFha0lzUzBGQlN6SnBRaXhIUVVGSGJsb3NSVUZCUlcxYUxFZEJRVWNzWTBGQll5eEpRVUZKTEVsQlFVa3phVUlzUzBGQlN6UnBRaXhIUVVGSGNGb3NSVUZCUlc5YUxFZEJRVWNzWTBGQll5eEpRVUZKTEVWQlFVVTFhVUlzUzBGQlN6SnBRaXhIUVVGSGJsb3NSVUZCUlcxYUxFZEJRVWNzUlVGQlJTeExRVUZMTEVWQlFVVXNSVUZCUlUwc1IwRkJSWGhxUWl4VlFVRlZNbXBDTEVsQlFVbElMRWRCUVVWNGFrSXNWVUZCVlRKcVFpeEpRVUZKU0N4SFFVRkZlR3BDTEZWQlFWVnRWQ3hOUVVGTkxGZEJRVmNzVDBGQlR5eEpRVUZKY1ZFc1IwRkJSV3BxUWl4TFFVRkxNbWxDTEVkQlFVY3phVUlzUzBGQlN6UnBRaXhIUVVGSExFVkJRVVZMTEVkQlFVVjRha0lzVlVGQlZXMVVMRTFCUVUxeFVTeEhRVUZGZUdwQ0xGVkJRVlZ0VkN4TlFVRk5jVkVzUjBGQlJYaHFRaXhWUVVGVmNVc3NVMEZCVXl4WFFVRlhMRWxCUVVsT0xFdEJRV01zVjBGQlVuaEtMRXRCUVVzMGFVSXNTVUZCWlhwcVFpeEZRVUZGTEVsQlFVbDFha0lzUjBGQlJURnBRaXhMUVVGTE1tbENMRWRCUVVjemFVSXNTMEZCU3pScFFpeEpRVUVyUWl4UFFVRXpRbkJhTEVsQlFVbHlTeXhGUVVGRkxFbEJRVXQxYWtJc1IwRkJSU3hGUVVGRkxFZEJRVWxWTEVsQlFVbHFhMElzUzBGQlYzRkxMRVZCUVVVc1NVRkJTU3hKUVVGSmNrc3NSVUZCUlRKTExGVkJRVlVzUlVGQlJXMWFMRWRCUVVWNGFrSXNWVUZCVlhGTExGTkJRVk50V2l4SFFVRkZlR3BDTEZWQlFWVnhTeXhUUVVOeVUyMWFMRWRCUVVVd1JDeFhRVUZYZWtRc1IwRkJNRVJ1YUVJc1JVRkJSU3h2UWtGQmIwSnphRUlzVVVGQlJTeEhRVUZwVTBFc1IwRkJSVFZxUWl4VlFVRlZNR1lzUjBGQlJ5eFRRVUZUTTFZc1JVRkJSWEpMTEVWQlFVVnpTeXhIUVVGSE5sb3NSMEZCUjNScVFpeExRVUZMZDBvc1JVRkJSVFpGTEZOQlFWTnNVQ3hGUVVGRmMwc3NSMEZCUnl4RlFVRkZORm9zUjBGQlJUVnFRaXhWUVVGVmJXNUNMSFZDUVVGMVFuWkVMRWRCUVVVMWFrSXNWVUZCVlRCbUxFZEJRek51UW10RkxFZEJRVVUxYWtJc1ZVRkJWVzl1UWl4SFFVRkhMRk5CUVZOeVpDeEZRVUZGY2tzc1JVRkJSWE5MTEVkQlFVY3NUVUZCVFVRc1IwRkJSeXhOUVVGTmNrc3NSMEZCUnl4TlFVRk5jMHNzUjBGQlIzcEtMRXRCUVV0dFppeEhRVUZITTFZc1JVRkJSWEpMTEVWQlFVVnpTeXhGUVVGRkxFVkJRVVUwV2l4SFFVRkZOV3BDTEZWQlFWVnhia0lzTkVKQlFUUkNla1FzUjBGQlJUVnFRaXhWUVVGVmIyNUNMRWRCUVVkNFJDeEhRVUZGTldwQ0xGVkJRVlV3VkN4TlFVRk5MRmRCUVZkdVZDeExRVUZMZVVvc1JVRkJSU3hIUVVGSGVrb3NTMEZCUzNkS0xFVkJRVVVyV2l4TlFVRk5kbXBDTEV0QlFVdGlMRVZCUVVVc1JVRkJSV0VzUzBGQlN5dExMRVZCUVVVc1JVRkJSU3hGUVVGRmMxa3NSMEZCUlRWcVFpeFZRVUZWTUZRc1RVRkJUV3RSTEVkQlFVVTFha0lzVlVGQlZUQlVMRTFCUVUxclVTeEhRVUZGTldwQ0xGVkJRVlZyWml4SFFVRkhMRmRCUVZkMll5eEZRVUZGTEVkQlFVZHdReXhMUVVGTEswc3NSVUZCUlhaSkxGRkJRVkVzU1VGQlNTeEpRVUZKWjBnc1JVRkJSU3hKUVVGSmQwVXNWMEZCVjJoUExFdEJRVXRpTEVWQlFVVmhMRXRCUVV0M1NpeEZRVUZGYUVnc1ZVRkJWWEpFTEVWQlFVVmhMRXRCUVV0NVNpeEZRVUZGUVN4RlFVRkZkRXNzUlVGQlJYRkVMRTlCUVU5MFJDeEZRVUZGTEVWQlFVVnhReXhGUVVGRkxFVkJRVVZCTEVWQlFVVnJTU3hGUVVGRmJFa3NTVUZCU1N4RFFVRkRMRWxCUVVsM1NpeEZRVUZGTlV3c1JVRkJSVzlETEVkQlFVZHBTU3hGUVVGRk1FTXNTVUZCU1c1Q0xFVkJRVVUzVEN4SFFVRkhRU3hIUVVGSE5rd3NSVUZCUlhaSkxFMUJRVTBzUTBGQmFVVXNUMEZCYUVWeVJDeEZRVUZGWVN4TFFVRkxkMG9zUlVGQlJTdGFMRTFCUVUwdldpeEZRVUZGTUVNc1NVRkJTUzlOTEVWQlFVVkVMRWRCUVdWclJDeEhRVUZhYkVRc1IwRkJSME1zUlVGQlJYRkVMRk5CUVZsblNDeEZRVUZGYUVnc1VVRkJVWGhETEV0QlFVdDVTaXhGUVVGRkxFTkJRVU5FTEVkQlFWVkJMRU5CUVVNc1JVRkRNMlEyV2l4SFFVRkZOV3BDTEZWQlFWVnpia0lzWjBKQlFXZENNVVFzUjBGQlJUVnFRaXhWUVVGVmEyWXNSMEZCUnpCRkxFZEJRVVUxYWtJc1ZVRkJWWFZ1UWl4SFFVRkhMRk5CUVZONFpDeEhRVUZITEU5QlFVOHJSQ3hGUVVGSGRrNHNTMEZCU3pKbExFdEJRVXR1Vml4RlFVRkZMRVZCUVVVMldpeEhRVUZGTldwQ0xGVkJRVlYzYmtJc2MwSkJRWE5DTlVRc1IwRkJSVFZxUWl4VlFVRlZkVzVDTEVkQlFVY3pSQ3hIUVVGRk5XcENMRlZCUVZWeFRpeEhRVUZITEZOQlFWTjBSQ3hIUVVGSGVFb3NTMEZCU3l0TExFVkJRVVYwU1N4TFFVRkxLMllzUjBGQlJYaHBRaXhMUVVGTGQwb3NSMEZCUnl4RlFVRkZObG9zUjBGQlJUVnFRaXhWUVVGVmVXNUNMR2RDUVVGblFqZEVMRWRCUVVVMWFrSXNWVUZCVlhGT0xFZEJRVWQxVnl4SFFVRkZOV3BDTEZWQlFWVnpUaXhIUVVGSExGZEJRVmN6U3l4RlFVRkZMRWRCUVVkd1F5eExRVUZMSzBzc1JVRkJSWFpKTEZGQlFWRjFWQ3hIUVVGRkwxWXNTMEZCUzBFc1MwRkJTeXRMTEVWQlFVVjRTU3hOUVVGTkxFVkJRVVU0WjBJc1IwRkJSVFZxUWl4VlFVRlZNRzVDTEdOQlFXTTVSQ3hIUVVGRk5XcENMRlZCUVZWelRpeEhRVU4yVm5OWExFZEJRVVUxYWtJc1ZVRkJWVEp1UWl4SFFVRkhMRk5CUVZNMVpDeEZRVUZGY2tzc1JVRkJSWE5MTEVkQlFVY3NUMEZCVDBRc1IwRkJSeXhMUVVGTExFVkJRVVY0U2l4TFFVRkxkVk1zUlVGQlJYQlVMRVZCUVVWelN5eEhRVUZITEUxQlFVMHNTMEZCU3l4RlFVRkZla29zUzBGQlN6WlhMRVZCUVVVeFdDeEZRVUZGYzBzc1IwRkJSeXhOUVVGTkxFdEJRVXNzUlVGQlJYcEtMRXRCUVVzd2FVSXNSVUZCUlhacVFpeEZRVUZGYzBzc1IwRkJSeXhOUVVGTkxFdEJRVXNzUlVGQlJYcEtMRXRCUVV0cGFrSXNSVUZCUlRscVFpeEZRVUZGYzBzc1IwRkJSeXhOUVVGTkxFdEJRVXNzUlVGQlJYcEtMRXRCUVV0NWFVSXNSVUZCUlhScVFpeEZRVUZGYzBzc1IwRkJSeXhOUVVGTkxFdEJRVXNzUlVGQlJYcEtMRXRCUVV0NVVpeEhRVUZIZEZNc1JVRkJSWE5MTEVkQlFVY3NUVUZCVFN4TFFVRkxMRVZCUVVWNlNpeExRVUZMYzFJc1IwRkJSMjVUTEVWQlFVVnpTeXhIUVVGSExFMUJRVTBzUzBGQlN5eEZRVUZGZWtvc1MwRkJTMjFUTEVWQlFVVm9WQ3hGUVVGRmMwc3NSMEZCUnl4TlFVRk5MRXRCUVVzc1JVRkJSWHBLTEV0QlFVczRhVUlzUlVGQlJUTnFRaXhGUVVGRmMwc3NSMEZCUnl4TlFVRk5MRXRCUVVzc1IwRkJSMnBMTEVWQlFVVXNaMFJCUVdkRUxFMUJRVTBzUzBGQlN5eEhRVUZIUVN4RlFVRkZMR3RFUVVGclJDeE5RVUZOTEV0QlFVc3NSMEZCUjFFc1MwRkJTMjlMTEVkQlFVZHFUQ3hGUVVGRmMwc3NSMEZCUnl4TlFVRk5MRXRCUVVzc1IwRkJSM3BLTEV0QlFVczBReXhGUVVGRmVrUXNSVUZCUlhOTExFZEJRVWNzVFVGQlRTeExRVUZMTEVkQlFVZDZTaXhMUVVGTGMybENMRVZCUVVWdWFrSXNSVUZCUlhOTExFZEJRVWNzVFVGQlRTeExRVUZMTEVkQlFVZDZTaXhMUVVGTE1sSXNSMEZCUjNoVExFVkJRVVZ6U3l4SFFVRkhMRTFCUTJ4bUxFdEJRVXNzUjBGQlIzcEtMRXRCUVVzMFVpeEhRVUZIZWxNc1JVRkJSWE5MTEVkQlFVY3NUVUZCVFN4TFFVRkxMRWRCUVVkNlNpeExRVUZMTm1sQ0xFZEJRVWN4YWtJc1JVRkJSWE5MTEVkQlFVY3NUVUZCVFN4TFFVRkxMRWRCUVVkNlNpeExRVUZMYTJwQ0xFZEJRVWN2YWtJc1JVRkJSWE5MTEVkQlFVY3NUVUZCVFN4TFFVRkxMRWRCUVVkNlNpeExRVUZMTWxjc1JVRkJSWGhZTEVWQlFVVnpTeXhIUVVGSExFMUJRVTBzUzBGQlN5eEhRVUZIZWtvc1MwRkJTMjFZTEVWQlFVVm9XU3hGUVVGRmMwc3NSMEZCUnl4TlFVRk5MRkZCUVZGcVN5eEZRVUZGTEc5RFFVRnZReXhGUVVGRk5tcENMRWRCUVVVMWFrSXNWVUZCVlRSdVFpeFRRVUZUYUVVc1IwRkJSVFZxUWl4VlFVRlZNbTVDTEVkQlFXMUhMMFFzUjBGQlJUVnFRaXhWUVVGVloycENMRVZCUVVVc1UwRkJVMnBhTEVWQlFVVnlTeXhIUVVGSExFMUJRVTFCTEVsQlFVbHBSQ3hIUVVGSExGbEJRVmxxUkN4SFFVRkhMRmRCUVZkQkxFZEJRVWQxYTBJc1IwRkJSekZxUWl4TFFVRkxkMG9zUlVGQlJYSkxMRWRCUVVjc1JVRkJSV3RyUWl4SFFVRkZOV3BDTEZWQlFWVTJiRUlzVjBGQlYycERMRWRCUVVVMWFrSXNWVUZCVldkcVFpeEZRVU5xWWxrc1IwRkJSVFZxUWl4VlFVRlZkMllzUjBGQlJ5eFRRVUZUZWxZc1JVRkJSWEpMTEVkQlFVY3NUVUZCVFVFc1NVRkJjVUpwUkN4SFFVRkhMR0ZCUVhCQ2FrUXNSVUZCUlRScVFpeFRRVUZUTldwQ0xFVkJRVVVzVFVGQmMwSXNWMEZCVjBFc1IwRkJSM1ZyUWl4SFFVRkhNV3BDTEV0QlFVdDNTaXhGUVVGRmNrc3NSMEZCUnl4RlFVRkZhMnRDTEVkQlFVVTFha0lzVlVGQlZUWnVRaXhwUWtGQmFVSnFSU3hIUVVGRk5XcENMRlZCUVZWM1ppeEhRVUZIYjBVc1IwRkJSVFZxUWl4VlFVRlZhV3BDTEVWQlFVVXNVMEZCVTJ4YUxFVkJRVVZ5U3l4SFFVRkhMRTFCUVUxQkxFbEJRVWxwUkN4SFFVRkhMRzlDUVVGeFFtcEVMRWRCUVVjc2JVSkJRVzFDUVN4SFFVRkhMRTFCUVUxQkxFbEJRVWt3VkN4SFFVRkZOMU1zUzBGQlMzZEtMRVZCUVVVc1IwRkJSM2hLTEV0QlFVdDNTaXhGUVVGRmJXRXNSMEZCUjNoclFpeEpRVUZKTEVWQlFVVnJhMElzUjBGQlJUVnFRaXhWUVVGVk9HeENMRmRCUVZkc1F5eEhRVUZGTldwQ0xGVkJRVlZwYWtJc1JVRkJSVmNzUjBGQlJUVnFRaXhWUVVGVk5Fc3NSMEZCUnl4VFFVRlRZaXhGUVVGRmNrc3NSMEZCUnl4TlFVRk5RU3hKUVVGSlFTeEZRVUZGSzJwQ0xFZEJRVWN2YWtJc1IwRkJSekJVTEVkQlFVVTNVeXhMUVVGTGQwb3NSVUZCUlN4SFFVRkhlRW9zUzBGQlMzZEtMRVZCUVVVelF5eEZRVUZGTVVnc1JVRkJSWGRxUWl4SFFVRkhlR3BDTEVWQlFVVjVha0lzU1VGQlNTeEZRVUZGVXl4SFFVRkZOV3BDTEZWQlFWVXJiRUlzYVVKQlFXbENia01zUjBGQlJUVnFRaXhWUVVGVk5Fc3NSMEZETDJGbldpeEhRVUZGTldwQ0xGVkJRVlZ0UkN4RlFVRkZMRk5CUVZNMFJ5eEZRVUZGY2tzc1IwRkJSeXhOUVVGTlFTeEpRVUZKYVVRc1JVRkJSU3hIUVVGSGFrUXNSMEZCUnl4WFFVRlhRU3hIUVVGSGMydENMRWRCUVVkNmFrSXNTMEZCUzNkS0xFVkJRVVZ5U3l4SFFVRkhMRVZCUVVWcmEwSXNSMEZCUlRWcVFpeFZRVUZWZFd4Q0xGbEJRVmt6UWl4SFFVRkZOV3BDTEZWQlFWVnRSQ3hGUVVGRmVXZENMRWRCUVVVMWFrSXNWVUZCVldkclFpeEhRVUZITEZOQlFWTnFZU3hGUVVGRmNrc3NSMEZCUnl4TlFVRk5RU3hKUVVGeFFtbEVMRVZCUVVVc1NVRkJia0pxUkN4RlFVRkZOR3BDTEZOQlFWTTFha0lzUlVGQlJTeE5RVUZaTEZkQlFWZEJMRWRCUVVkemEwSXNSMEZCUjNwcVFpeExRVUZMZDBvc1JVRkJSWEpMTEVkQlFVY3NSVUZCUld0clFpeEhRVUZGTldwQ0xGVkJRVlU0YmtJc2EwSkJRV3RDYkVVc1IwRkJSVFZxUWl4VlFVRlZaMnRDTEVkQlFVZEtMRWRCUVVVMWFrSXNWVUZCVlhkcVFpeEZRVUZGTEZOQlFWTjZXaXhGUVVGRmNrc3NSMEZCUnl4TlFVRk5RU3hKUVVGSmFVUXNSVUZCUlN4SFFVRkhha1FzUjBGQlJ5eHZRa0ZCYzBKQkxFZEJRVWNzVFVGQlRVRXNTVUZCU1RCVUxFZEJRVVUzVXl4TFFVRkxkMG9zUlVGQlJTeEhRVUZIZUVvc1MwRkJTM2RLTEVWQlFVVXlRaXhIUVVGSGFFMHNTVUZCU1N4RlFVRkZhMnRDTEVkQlFVVTFha0lzVlVGQlZYZHNRaXhaUVVGWk5VSXNSMEZCUlRWcVFpeFZRVUZWZDJwQ0xFVkJRVVZKTEVkQlFVVTFha0lzVlVGQlZXbHJRaXhIUVVGSExGTkJRVk5zWVN4RlFVRkZja3NzUjBGQlJ5eE5RVUZOUVN4SlFVRkpRU3hGUVVGRk1tcENMRWRCUVVVemFrSXNSMEZCUnpCVUxFZEJRVVUzVXl4TFFVRkxkMG9zUlVGQlJTeEhRVUZIZUVvc1MwRkJTM2RLTEVWQlFVVXpReXhGUVVGRk1VZ3NSVUZCUlhkcVFpeEhRVUZIZUdwQ0xFVkJRVVY1YWtJc1NVRkJTU3hGUVVNMVpGTXNSMEZCUlRWcVFpeFZRVUZWSzI1Q0xHdENRVUZyUW01RkxFZEJRVVUxYWtJc1ZVRkJWV2xyUWl4SFFVRkhUQ3hIUVVGRk5XcENMRlZCUVZWdmFrSXNSMEZCUnl4VFFVRlRjbG9zUlVGQlJYSkxMRWRCUVVjc1RVRkJUVUVzU1VGQlNXbEVMRWRCUVVjc1dVRkJXV3BFTEVkQlFVY3NWMEZCVjBFc1IwRkJSeXhOUVVGTlFTeEpRVUZKTUZRc1IwRkJSVGRUTEV0QlFVdDNTaXhGUVVGRkxFZEJRVWQ0U2l4TFFVRkxkMG9zUlVGQlJXZERMRWRCUVVkeVRTeEpRVUZKTEVWQlFVVnJhMElzUjBGQlJUVnFRaXhWUVVGVloyOUNMRmxCUVZsd1JTeEhRVUZGTldwQ0xGVkJRVlZ2YWtJc1IwRkJSMUVzUjBGQlJUVnFRaXhWUVVGVmVXcENMRWRCUVVjc1UwRkJVekZhTEVWQlFVVnlTeXhIUVVGSExFMUJRVTFCTEVsQlFVbHBSQ3hIUVVGSExHOUNRVUZ4UW1wRUxFZEJRVWNzYlVKQlFXMUNRU3hIUVVGSExFMUJRVTFCTEVsQlFVa3dWQ3hIUVVGRk4xTXNTMEZCUzNkS0xFVkJRVVVzUjBGQlIzaEtMRXRCUVV0M1NpeEZRVUZGYlVNc1IwRkJSM2hOTEVsQlFVa3NSVUZCUld0clFpeEhRVUZGTldwQ0xGVkJRVlZwYjBJc1dVRkJXWEpGTEVkQlFVVTFha0lzVlVGQlZYbHFRaXhIUVVGSFJ5eEhRVUZGTldwQ0xGVkJRVlZyYjBJc1IwRkJSeXhUUVVGVGJtVXNSVUZCUlhKTExFZEJRVWNzVFVGQlRVRXNSMEZCUnl4TlFVRk5RU3hKUVVGSk1GUXNSMEZCUlRkVExFdEJRVXQzU2l4RlFVRkZMRWRCUVVkNFNpeExRVUZMZDBvc1JVRkJSVFphTEVWQlFVVnNhMElzUjBGQlJ5eEZRVUZGYTJ0Q0xFZEJRVVUxYWtJc1ZVRkJWVzF2UWl4blFrRkJaMEoyUlN4SFFVRkZOV3BDTEZWQlFWVnJiMElzUjBGRGVHUjBSU3hIUVVGRk5XcENMRlZCUVZWdmIwSXNSMEZCUnl4VFFVRlRjbVVzUlVGQlJYSkxMRWRCUVVjc1RVRkJUVUVzUjBGQlJ5eE5RVUZOUVN4SlFVRkpNRlFzUjBGQlJUZFRMRXRCUVV0M1NpeEZRVUZGTEVkQlFVZDRTaXhMUVVGTGQwb3NSVUZCUlhGSkxFZEJRVWN4VXl4SFFVRkhMRVZCUVVWcmEwSXNSMEZCUlRWcVFpeFZRVUZWY1c5Q0xHdENRVUZyUW5wRkxFZEJRVVUxYWtJc1ZVRkJWVzl2UWl4SFFVRkhlRVVzUjBGQlJUVnFRaXhWUVVGVk5sSXNSMEZCUnl4VFFVRlRPVWdzUlVGQlJYSkxMRWRCUVVjc1RVRkJUVUVzU1VGQlNXbEVMRVZCUVVVc1IwRkJSMnBFTEVkQlFVY3NWMEZCVjBFc1IwRkJSekJVTEVkQlFVVTNVeXhMUVVGTGQwb3NSVUZCUlN4SFFVRkhlRW9zUzBGQlMzZEtMRVZCUVVVMVJ5eEZRVUZGZWtRc1IwRkJSeXhGUVVGRmEydENMRWRCUVVVMWFrSXNWVUZCVlhOdlFpeGhRVUZoTVVVc1IwRkJSVFZxUWl4VlFVRlZObElzUjBGQlJ5dFNMRWRCUVVVMWFrSXNWVUZCVldkVExFZEJRVWNzVTBGQlUycEpMRVZCUVVWeVN5eEhRVUZITEUxQlFVMUJMRWxCUVVscFJDeEZRVUZGTEVkQlFVZHFSQ3hIUVVGSExHOUNRVUZ6UWtFc1IwRkJSekJVTEVkQlFVVTNVeXhMUVVGTGQwb3NSVUZCUlN4SFFVRkhlRW9zUzBGQlMzZEtMRVZCUVVWNVdpeEZRVUZGT1dwQ0xFZEJRVWNzUlVGQlJXdHJRaXhIUVVGRk5XcENMRlZCUVZWMWIwSXNZVUZCWVRORkxFZEJRVVUxYWtJc1ZVRkJWV2RUTEVkQlFVYzBVaXhIUVVGRk5XcENMRlZCUVZWNVppeEhRVUZITEZOQlFWTXhWaXhGUVVGRmNrc3NSMEZCUnl4TlFVRk5RU3hKUVVGSlFTeEZRVUZGTW1wQ0xFZEJRVVV6YWtJc1IwRkJSekJVTEVkQlFVVTNVeXhMUVVGTGQwb3NSVUZCUlN4SFFVRkhlRW9zUzBGQlMzZEtMRVZCUVVVd1J5eEZRVUZGTDFFc1JVRkJSWGRxUWl4SFFVRkhlR3BDTEVWQlFVVjVha0lzU1VGQlNTeEZRVUZGVXl4SFFVRkZOV3BDTEZWQlFWVjNiMElzYlVKQlFXMUNOVVVzUjBGQlJUVnFRaXhWUVVGVmVXWXNSMEZETldadFJTeEhRVUZGTldwQ0xGVkJRVlZyVXl4SFFVRkhMRk5CUVZOdVNTeEZRVUZGY2tzc1IwRkJSeXhOUVVGTlFTeEpRVUZKYVVRc1IwRkJSeXhaUVVGWmFrUXNSMEZCUnl4WFFVRlhRU3hIUVVGSE1GUXNSMEZCUlRkVExFdEJRVXQzU2l4RlFVRkZMRWRCUVVkNFNpeExRVUZMZDBvc1JVRkJSV2xhTEVWQlFVVjBha0lzUjBGQlJ5eEZRVUZGYTJ0Q0xFZEJRVVUxYWtJc1ZVRkJWWGx2UWl4alFVRmpOMFVzUjBGQlJUVnFRaXhWUVVGVmExTXNSMEZCUnpCU0xFZEJRVVUxYWtJc1ZVRkJWVzFUTEVkQlFVY3NVMEZCVTNCSkxFVkJRVVZ5U3l4SFFVRkhMRTFCUVUxQkxFbEJRVWxwUkN4SFFVRkhMRzlDUVVGeFFtcEVMRWRCUVVjc2JVSkJRVzFDUVN4SFFVRkhNRlFzUjBGQlJUZFRMRXRCUVV0M1NpeEZRVUZGTEVkQlFVZDRTaXhMUVVGTGQwb3NSVUZCUld0YUxFVkJRVVYyYWtJc1IwRkJSeXhGUVVGRmEydENMRWRCUVVVMWFrSXNWVUZCVlRCdlFpeGpRVUZqT1VVc1IwRkJSVFZxUWl4VlFVRlZiVk1zUjBGQlIzbFNMRWRCUVVVMWFrSXNWVUZCVlRKbUxFZEJRVWNzVTBGQlV6VldMRVZCUVVWeVN5eEhRVUZITEUxQlFVMUJMRWxCUVVsQkxFVkJRVVVyYWtJc1IwRkJSeTlxUWl4SFFVRkhNRlFzUjBGQlJUZFRMRXRCUVV0M1NpeEZRVUZGTEVkQlFVZDRTaXhMUVVGTGQwb3NSVUZCUlRCSExFVkJRVVV2VVN4RlFVRkZkMnBDTEVkQlFVZDRha0lzUlVGQlJYbHFRaXhKUVVGSkxFVkJRVVZUTEVkQlFVVTFha0lzVlVGQlZUSnZRaXh2UWtGQmIwSXZSU3hIUVVGRk5XcENMRlZCUVZVeVppeEhRVUZIYVVVc1IwRkJSVFZxUWl4VlFVRlZiMWdzUlVGQlJTeFRRVUZUY2s0c1JVRkJSWEpMTEVkQlFVY3NUVUZCVFVFc1NVRkJTVEJVTEVkQlFVVTNVeXhMUVVGTGQwb3NSVUZCUlN4SFFVRkhlRW9zUzBGQlMzZEtMRVZCUVVWeFRpeEZRVUZGTVZnc1IwRkJSeXhGUVVOdVpXdHJRaXhIUVVGRk5XcENMRlZCUVZWbmJVSXNWMEZCVjNCRExFZEJRVVUxYWtJc1ZVRkJWVzlZTEVWQlFVVjNUU3hIUVVGRk5XcENMRlZCUVZVNFV5eEZRVUZGTEZOQlFWTXZTU3hGUVVGRmNrc3NSMEZCUnl4TlFVRk5RU3hKUVVGSk1GUXNSMEZCUlRkVExFdEJRVXQzU2l4RlFVRkZMRWRCUVVkNFNpeExRVUZMZDBvc1JVRkJSU3RKTEVWQlFVVndWQ3hIUVVGSExFVkJRVVZyYTBJc1IwRkJSVFZxUWl4VlFVRlZhVzFDTEZsQlFWbHlReXhIUVVGRk5XcENMRlZCUVZVNFV5eEZRVUZGT0ZFc1IwRkJSVFZxUWl4VlFVRlZNRk1zUlVGQlJTeFRRVUZUTTBrc1JVRkJSWEpMTEVkQlFVY3NUVUZCVFVFc1NVRkJTV2xFTEVWQlFVVXNhMEpCUVcxQ2FrUXNSMEZCUnl4cFFrRkJhMEpCTEVkQlFVY3dWQ3hIUVVGRk4xTXNTMEZCUzNkS0xFVkJRVVVzUjBGQlIzaEtMRXRCUVV0M1NpeEZRVUZGTWtrc1JVRkJSV2hVTEVkQlFVY3NSVUZCUld0clFpeEhRVUZGTldwQ0xGVkJRVlZyYlVJc1ZVRkJWWFJETEVkQlFVVTFha0lzVlVGQlZUQlRMRVZCUVVWclVpeEhRVUZGTldwQ0xGVkJRVlUyYVVJc1JVRkJSU3hUUVVGVE9Wa3NSVUZCUlhKTExFZEJRVWNzVFVGQlRVRXNTVUZCU1dsRUxFZEJRVWNzV1VGQldXcEVMRWRCUVVjc1YwRkJWMEVzUjBGQlJ6QlVMRWRCUVVVM1V5eExRVUZMZDBvc1JVRkJSU3hIUVVGSGVFb3NTMEZCUzNkS0xFVkJRVVZyUlN4RlFVRkZkazhzUjBGQlJ5eEZRVUZGYTJ0Q0xFZEJRVVUxYWtJc1ZVRkJWVzF0UWl4VlFVRlZka01zUjBGQlJUVnFRaXhWUVVGVk5tbENMRVZCUVVWbExFZEJRVVUxYWtJc1ZVRkJWWEZxUWl4RlFVRkZMRk5CUVZOMFdpeEZRVUZGY2tzc1IwRkJSeXhOUVVGTlFTeEpRVUZKY1Vzc1JVRkJSV2RhTEVkQlFVVjRhVUlzUzBGQlMzZEtMRWRCUVVkNFNpeExRVUZMZDBvc1JVRkJSWE5hTEVWQlFVVXpha0lzUjBGQlJ6UlhMRWRCUVVVdlZpeExRVUZMZDBvc1IwRkJSeXhGUVVONFpUWmFMRWRCUVVVMWFrSXNWVUZCVlhWdFFpeFpRVUZaTTBNc1IwRkJSVFZxUWl4VlFVRlZjV3BDTEVWQlFVVlBMRWRCUVVVMWFrSXNWVUZCVlRKTExFZEJRVWNzVTBGQlUxb3NSVUZCUlhKTExFZEJRVWNzVFVGQlRVRXNTVUZCU1VFc1JVRkJSVEpUTEVkQlFVY3pVeXhIUVVGSE1GUXNSMEZCUlRkVExFdEJRVXQzU2l4RlFVRkZMRWRCUVVkNFNpeExRVUZMZDBvc1JVRkJSV2RoTEVWQlFVVnlhMElzUlVGQlJYRkVMRkZCUVZFNFowSXNSMEZCUjNScVFpeExRVUZMWWl4SFFVRkhMRVZCUVVWcmEwSXNSMEZCUlRWcVFpeFZRVUZWYjIxQ0xGZEJRVmQ0UXl4SFFVRkZOV3BDTEZWQlFWVXlTeXhIUVVGSGFWb3NSMEZCUlRWcVFpeFZRVUZWTkc5Q0xFZEJRVWNzVTBGQlV6ZGxMRVZCUVVWeVN5eEZRVUZGYzBzc1IwRkJSeXhOUVVGTmRFc3NTVUZCU1hGTExFVkJRVVZuV2l4SFFVRkZlR2xDTEV0QlFVdDNTaXhIUVVGSFF5eEZRVUZGZEVzc1JVRkJSV0VzVFVGQlRTdFdMRWRCUVVVdlZpeExRVUZMZDBvc1IwRkJSeXhGUVVGRk5sb3NSMEZCUlRWcVFpeFZRVUZWTm05Q0xHRkJRV0ZxUml4SFFVRkZOV3BDTEZWQlFWVTBiMElzUjBGQlIyaEdMRWRCUVVVMWFrSXNWVUZCVlRodlFpeEhRVUZITEZOQlFWTXZaU3hGUVVGRmNrc3NSVUZCUlhOTExFZEJRVWNzVFVGQlRYUkxMRWxCUVVrd1ZDeEhRVUZGTjFNc1MwRkJTeXhGUVVGRkxFZEJRVWMyVXl4SFFVRkZOMU1zUzBGQlN5eEZRVUZGTEVkQlFVZEJMRXRCUVV0M1NpeEZRVUZGYTBVc1JVRkJSV3hGTEVkQlFVZEJMRVZCUVVWbldpeEhRVUZGZUdsQ0xFdEJRVXNzUjBGQlIzbEtMRVZCUVVWMFN5eEZRVUZGWVN4TlFVRk5LMVlzUjBGQlJTOVdMRXRCUVV0M1NpeEhRVUZIY1Vvc1IwRkJSVGRUTEV0QlFVc3NSVUZCUlN4SFFVRkhMRVZCUVVWeGFrSXNSMEZCUlRWcVFpeFZRVUZWSzI5Q0xHZENRVUZuUW01R0xFZEJRVVUxYWtJc1ZVRkJWVGh2UWl4SFFVTTNZbXhHTEVkQlFVVTFha0lzVlVGQlZXZHdRaXhIUVVGSExGTkJRVk5xWml4RlFVRkZja3NzUlVGQlJYTkxMRWRCUVVjc1RVRkJUWFJMTEVsQlFVa3dWQ3hIUVVGRk4xTXNTMEZCUzNkS0xFVkJRVVVzUjBGQlIwTXNSVUZCUlhSTExFVkJRVVZoTEUxQlFVMDJVeXhIUVVGRk4xTXNTMEZCUzNkS0xFVkJRVVVzUjBGQlJ5eEZRVUZGTmxvc1IwRkJSVFZxUWl4VlFVRlZhWEJDTEZkQlFWZHlSaXhIUVVGRk5XcENMRlZCUVZWbmNFSXNSMEZCUjNCR0xFZEJRVVUxYWtJc1ZVRkJWV3RZTEVWQlFVVXNVMEZCVTI1T0xFVkJRVVZ5U3l4SFFVRkhMRTFCUVUxQkxFbEJRVWxwUkN4RlFVRkZMRWRCUVVkcVJDeEZRVUZGY1VRc1VVRkJVWEZSTEVkQlFVVTNVeXhMUVVGTGQwb3NSVUZCUlN4SFFVRkhlRW9zUzBGQlMzZEtMRVZCUVVWdFRpeEZRVUZGZUZnc1IwRkJSeXhGUVVGRmEydENMRWRCUVVVMWFrSXNWVUZCVlhOdFFpeHBRa0ZCYVVJeFF5eEhRVUZGTldwQ0xGVkJRVlZyV0N4RlFVRkZNRTBzUjBGQlJUVnFRaXhWUVVGVk1GZ3NSVUZCUlN4VFFVRlRNMDRzUlVGQlJYSkxMRWRCUVVjc1RVRkJUVUVzU1VGQlNXbEVMRVZCUVVVc1IwRkJSMnBFTEVWQlFVVnhSQ3hSUVVGUmNWRXNSMEZCUlRkVExFdEJRVXQzU2l4RlFVRkZMRWRCUVVkNFNpeExRVUZMZDBvc1JVRkJSVEpPTEVWQlFVVm9XU3hIUVVGSExFVkJRVVZyYTBJc1IwRkJSVFZxUWl4VlFVRlZjVzFDTEd0Q1FVRnJRbnBETEVkQlFVVTFha0lzVlVGQlZUQllMRVZCUVVWclRTeEhRVUZGTldwQ0xGVkJRVlY1VVN4RlFVRkZMRk5CUVZNeFJ5eEZRVUZGY2tzc1JVRkJSWE5MTEVkQlFVZHZTaXhIUVVGRk4xTXNTMEZCUzNkS0xFVkJRVVVzUjBGQlIzaEtMRXRCUVV0M1NpeEZRVUZGTUVjc1JVRkJSUzlSTEVWQlFVVnpTeXhGUVVGRkxFVkJRVVUwV2l4SFFVRkZOV3BDTEZWQlFWVXdhMElzYTBKQlFXdENaQ3hIUVVGRk5XcENMRlZCUVZWNVVTeEZRVU16WTIxVUxFZEJRVVUxYWtJc1ZVRkJWVzlJTEVWQlFVVXNVMEZCVXpKRExFVkJRVVZ5U3l4RlFVRkZjMHNzUjBGQlIyOUtMRWRCUVVVM1V5eExRVUZMZDBvc1JVRkJSU3hIUVVGSGVFb3NTMEZCUzNkS0xFVkJRVVV6UXl4RlFVRkZNVWdzUlVGQlJYTkxMRVZCUVVVc1JVRkJSVFJhTEVkQlFVVTFha0lzVlVGQlZYbHJRaXh0UWtGQmJVSmlMRWRCUVVVMWFrSXNWVUZCVlc5SUxFVkJRVVYzWXl4SFFVRkZOV3BDTEZWQlFWVTJha0lzUjBGQlJ5eFRRVUZUT1Zvc1JVRkJSWEpMTEVWQlFVVnpTeXhIUVVGSGIwb3NSMEZCUlRkVExFdEJRVXQzU2l4RlFVRkZMRWRCUVVjc1NVRkJTWFJMTEVWQlFVVmpMRXRCUVV0M1NpeEZRVUZGZFVnc1JVRkJSelZTTEVWQlFVVnpTeXhIUVVGRkxGTkJRVk5zU1N4RlFVRkZkMG9zUjBGQlJ6ZE1MRVZCUVVVeVNDeEZRVUZGZEVZc1NVRkJTU3hGUVVGRmQwb3NTVUZCU1N4RlFVRkZMRWRCUVVVc1JVRkJSWE5aTEVkQlFVVTFha0lzVlVGQlZXdHdRaXg1UWtGQmVVSjBSaXhIUVVGRk5XcENMRlZCUVZVMmFrSXNSMEZCUjBRc1IwRkJSVFZxUWl4VlFVRlZiWEJDTEVkQlFVY3NVMEZCVTNCbUxFVkJRVVZ5U3l4SFFVRkhMRWRCUVVjc1RVRkJUVUVzUlVGQlJTeEpRVUZKTEVsQlFVbHpTeXhGUVVGRkxFVkJRVVZCTEVWQlFVVjBTeXhGUVVGRmNVUXNUMEZCVDJsSUxFbEJRVWxwWVN4SFFVRkhNV3BDTEV0QlFVdDNTaXhGUVVGRmNrc3NSVUZCUlhOTExFZEJRVWNzUlVGQlJUUmFMRWRCUVVVMWFrSXNWVUZCVlc5d1FpeHRRa0ZCYlVKNFJpeEhRVUZGTldwQ0xGVkJRVlZ0Y0VJc1IwRkJSM1pHTEVkQlFVVTFha0lzVlVGQlZYRndRaXhIUVVGSExGTkJRVk4wWml4RlFVRkZja3NzUjBGQlJ5eEhRVUZITEUxQlFVMUJMRVZCUVVVc1NVRkJTU3hKUVVGSmMwc3NSVUZCUlN4RlFVRkZRU3hGUVVGRmRFc3NSVUZCUlhGRUxFOUJRVTlwU0N4SlFVRkpla29zUzBGQlMybG1MRWRCUVVkNlZpeEZRVUZGY2tzc1JVRkJSWE5MTEVkQlFVY3NSVUZETDJNMFdpeEhRVUZGTldwQ0xGVkJRVlZ6Y0VJc2VVSkJRWGxDTVVZc1IwRkJSVFZxUWl4VlFVRlZjWEJDTEVkQlFVZDZSaXhIUVVGRk5XcENMRlZCUVZWMWNFSXNSMEZCUnl4VFFVRlRlR1lzUlVGQlJYSkxMRWRCUVVjc1IwRkJSeXhOUVVGTlFTeEZRVUZGTEVsQlFVa3NTVUZCU1hOTExFVkJRVVVzUlVGQlJVRXNSVUZCUlhSTExFVkJRVVZ4UkN4UFFVRlBhVWdzU1VGQlNTeERRVUZETEVsQlFVbDJTeXhGUVVGRlF5eEZRVUZGYzBzc1IwRkJSeXhOUVVGTmRrc3NTVUZCU1RKVUxFZEJRVVUzVXl4TFFVRkxkMG9zUlVGQlJTeEhRVUZIZUVvc1MwRkJTM2RLTEVWQlFVVnRZU3hIUVVGSGVtdENMRWRCUVVjc1EwRkJReXhGUVVGRmJXdENMRWRCUVVVMWFrSXNWVUZCVlhkd1FpeHRRa0ZCYlVJMVJpeEhRVUZGTldwQ0xGVkJRVlYxY0VJc1IwRkJSek5HTEVkQlFVVTFha0lzVlVGQlZYbHdRaXhIUVVGSExGTkJRVk14Wml4RlFVRkZja3NzUlVGQlJYTkxMRVZCUVVWMlN5eEhRVUZITEVkQlFVY3NUVUZCVFVNc1JVRkJSU3hKUVVGSkxFbEJRVWx2UXl4RlFVRkZMRVZCUVVWQkxFVkJRVVZ3UXl4RlFVRkZjVVFzVDBGQlQycENMRWxCUVVsMlFpeExRVUZMYTFFc1JVRkJSVEZITEVWQlFVVkRMRVZCUVVWMFN5eEZRVUZGYjBNc1NVRkJTWEpETEVWQlFVVkRMRVZCUVVWdlF5eEpRVUZKTEVWQlFVVTRhRUlzUjBGQlJUVnFRaXhWUVVGVk1IQkNMREJDUVVFd1FqbEdMRWRCUVVVMWFrSXNWVUZCVlhsd1FpeEhRVUZITjBZc1IwRkJSVFZxUWl4VlFVRlZNbkJDTEVkQlFVY3NVMEZCVXpWbUxFVkJRVVZ5U3l4RlFVRkZjMHNzUlVGQlJYWkxMRWRCUVVjc1IwRkJSeXhOUVVGTlF5eEZRVUZGTEVsQlFVa3NTVUZCU1c5RExFVkJRVVVzUlVGQlJVRXNSVUZCUlhCRExFVkJRVVZ4UkN4UFFVRlBha0lzU1VGQlNYWkNMRXRCUVVzMlJ5eEZRVUZGTWtNc1JVRkJSVU1zUlVGQlJYUkxMRVZCUVVWdlF5eEpRVUZKY2tNc1JVRkJSVU1zUlVGQlJXOURMRWxCUVVrc1JVRkRPV000YUVJc1IwRkJSVFZxUWl4VlFVRlZOSEJDTERKQ1FVRXlRbWhITEVkQlFVVTFha0lzVlVGQlZUSndRaXhIUVVGSEwwWXNSMEZCUlRWcVFpeFZRVUZWTm5CQ0xFZEJRVWNzVTBGQlV6bG1MRVZCUVVWeVN5eEZRVUZGYzBzc1JVRkJSWFpMTEVkQlFVY3NSMEZCUnl4TlFVRk5ReXhGUVVGRkxFbEJRVWtzU1VGQlNXOURMRVZCUVVVc1JVRkJSVUVzUlVGQlJYQkRMRVZCUVVWeFJDeFBRVUZQYWtJc1NVRkJTWFpDTEV0QlFVdHpha0lzUjBGQlJ6bGFMRVZCUVVWRExFVkJRVVYwU3l4RlFVRkZiME1zU1VGQlNYSkRMRVZCUVVWRExFVkJRVVZ2UXl4SlFVRkpMRVZCUVVVNGFFSXNSMEZCUlRWcVFpeFZRVUZWT0hCQ0xHbERRVUZwUTJ4SExFZEJRVVUxYWtJc1ZVRkJWVFp3UWl4SFFVRkhha2NzUjBGQlJUVnFRaXhWUVVGVkszQkNMRWRCUVVjc1UwRkJVMmhuUWl4RlFVRkZja3NzUjBGQlJ5eEhRVUZITEUxQlFVMUJMRVZCUVVVc1NVRkJTU3hKUVVGSmMwc3NSVUZCUlN4RlFVRkZRU3hGUVVGRmRFc3NSVUZCUlhGRUxFOUJRVTlwU0N4SlFVRkpla29zUzBGQlMzRkxMRWRCUVVkaUxFVkJRVVZ5U3l4RlFVRkZjMHNzUjBGQlJ5eEZRVUZGTkZvc1IwRkJSVFZxUWl4VlFVRlZaM0ZDTEhsQ1FVRjVRbkJITEVkQlFVVTFha0lzVlVGQlZTdHdRaXhIUVVGSGJrY3NSMEZCUlRWcVFpeFZRVUZWYVhGQ0xFZEJRVWNzVTBGQlUyeG5RaXhGUVVGRmNrc3NSMEZCUnl4SFFVRkhMRTFCUVUxQkxFVkJRVVVzU1VGQlNTeEpRVUZKYzBzc1JVRkJSU3hGUVVGRlFTeEZRVUZGZEVzc1JVRkJSWEZFTEU5QlFVOXBTQ3hKUVVGSloyRXNSMEZCUjNwcVFpeExRVUZMZDBvc1JVRkJSWEpMTEVWQlFVVnpTeXhIUVVGSExFVkJRVVUwV2l4SFFVRkZOV3BDTEZWQlFWVnJjVUlzYjBKQlFXOUNkRWNzUjBGQlJUVnFRaXhWUVVGVmFYRkNMRWRCUXpka2NrY3NSMEZCUlRWcVFpeFZRVUZWYlhGQ0xFZEJRVWNzVTBGQlUzQm5RaXhGUVVGRmNrc3NSMEZCUnl4SFFVRkhMRTFCUVUxQkxFVkJRVVVzU1VGQlNTeEpRVUZKYzBzc1JVRkJSU3hGUVVGRlFTeEZRVUZGZEVzc1JVRkJSWEZFTEU5QlFVOXBTQ3hKUVVGSmVrb3NTMEZCUzNscVFpeEhRVUZIYW1Fc1JVRkJSWEpMTEVWQlFVVnpTeXhIUVVGSExFVkJRVVUwV2l4SFFVRkZOV3BDTEZWQlFWVnZjVUlzTUVKQlFUQkNlRWNzUjBGQlJUVnFRaXhWUVVGVmJYRkNMRWRCUVVkMlJ5eEhRVUZGTldwQ0xGVkJRVlZ4Y1VJc1IwRkJSeXhUUVVGVGRHZENMRVZCUVVWeVN5eEhRVUZITEVkQlFVY3NUVUZCVFVFc1JVRkJSU3hKUVVGSkxFbEJRVWx6U3l4RlFVRkZMRVZCUVVWQkxFVkJRVVYwU3l4RlFVRkZjVVFzVDBGQlQybElMRWxCUVVrc1EwRkJReXhKUVVGSmRrc3NSVUZCUlVNc1JVRkJSWE5MTEVkQlFVY3NUVUZCVFhaTExFbEJRVWt5VkN4SFFVRkZOMU1zUzBGQlMzZEtMRVZCUVVVc1IwRkJSM2hLTEV0QlFVdDNTaXhGUVVGRk1rSXNSMEZCUjJwTkxFZEJRVWNzUTBGQlF5eEZRVUZGYld0Q0xFZEJRVVUxYWtJc1ZVRkJWWE54UWl4dlFrRkJiMEl4Unl4SFFVRkZOV3BDTEZWQlFWVnhjVUlzUjBGQlIzcEhMRWRCUVVVMWFrSXNWVUZCVlhWeFFpeEhRVUZITEZOQlFWTjRaMElzUlVGQlJYSkxMRWRCUVVjc1IwRkJSeXhOUVVGTlFTeEZRVUZGTEVsQlFVa3NTVUZCU1hOTExFVkJRVVVzUlVGQlJVRXNSVUZCUlhSTExFVkJRVVZ4UkN4UFFVRlBhVWdzU1VGQlNYcEtMRXRCUVVzd2FrSXNSMEZCUjJ4aExFVkJRVVZ5U3l4RlFVRkZjMHNzUjBGQlJ5eEZRVUZGTkZvc1IwRkJSVFZxUWl4VlFVRlZkM0ZDTERCQ1FVRXdRalZITEVkQlFVVTFha0lzVlVGQlZYVnhRaXhIUVVOdVlqTkhMRWRCUVVVMWFrSXNWVUZCVlhseFFpeEhRVUZITEZOQlFWTXhaMElzUlVGQlJYSkxMRWRCUVVjc1IwRkJSeXhOUVVGTlFTeEZRVUZGTEVsQlFVa3NTVUZCU1hOTExFVkJRVVVzUlVGQlJVRXNSVUZCUlhSTExFVkJRVVZ4UkN4UFFVRlBhVWdzU1VGQlNTeERRVUZETEVsQlFVbDJTeXhGUVVGRlF5eEZRVUZGYzBzc1IwRkJSeXhOUVVGTmRrc3NTVUZCU1RKVUxFZEJRVVUzVXl4TFFVRkxkMG9zUlVGQlJTeEhRVUZIZUVvc1MwRkJTM2RLTEVWQlFVVm5ReXhIUVVGSGRFMHNSMEZCUnl4RFFVRkRMRVZCUVVWdGEwSXNSMEZCUlRWcVFpeFZRVUZWTUhGQ0xHOUNRVUZ2UWpsSExFZEJRVVUxYWtJc1ZVRkJWWGx4UWl4SFFVRkhOMGNzUjBGQlJUVnFRaXhWUVVGVk1uRkNMRWRCUVVjc1UwRkJVelZuUWl4RlFVRkZja3NzUjBGQlJ5eEhRVUZITEUxQlFVMUJMRVZCUVVVc1NVRkJTU3hKUVVGSmMwc3NSVUZCUlN4RlFVRkZRU3hGUVVGRmRFc3NSVUZCUlhGRUxFOUJRVTlwU0N4SlFVRkpMRU5CUVVNc1NVRkJTWFpMTEVWQlFVVkRMRVZCUVVWelN5eEhRVUZITEUxQlFVMTJTeXhKUVVGSk1sUXNSMEZCUlRkVExFdEJRVXQzU2l4RlFVRkZMRWRCUVVkNFNpeExRVUZMZDBvc1JVRkJSVzFETEVkQlFVZDZUU3hIUVVGSExFTkJRVU1zUlVGQlJXMXJRaXhIUVVGRk5XcENMRlZCUVZVMGNVSXNiMEpCUVc5Q2FFZ3NSMEZCUlRWcVFpeFZRVUZWTW5GQ0xFZEJRVWN2Unl4SFFVRkZOV3BDTEZWQlFWVTJjVUlzUjBGQlJ5eFRRVUZUT1dkQ0xFVkJRVVZ5U3l4SFFVRkhMRWRCUVVjc1RVRkJUVUVzUlVGQlJTeEpRVUZKTEVsQlFVbHpTeXhGUVVGRkxFVkJRVVZCTEVWQlFVVjBTeXhGUVVGRmNVUXNUMEZCVDJsSUxFbEJRVWtzUTBGQlF5eEpRVUZKZGtzc1JVRkJSVU1zUlVGQlJYTkxMRWRCUVVjc1RVRkJUWFpMTEVsQlFVa3lWQ3hIUVVGRk4xTXNTMEZCUzNkS0xFVkJRVVVzUjBGQlIzaEtMRXRCUVV0M1NpeEZRVUZGY1Vrc1IwRkJSek5UTEVkQlFVY3NRMEZCUXl4RlFVRkZiV3RDTEVkQlFVVTFha0lzVlVGQlZUaHhRaXd3UWtGQk1FSnNTQ3hIUVVGRk5XcENMRlZCUVZVMmNVSXNSMEZETDJWcVNDeEhRVUZGTldwQ0xGVkJRVlVyY1VJc1IwRkJSeXhUUVVGVGFHaENMRVZCUVVWeVN5eEhRVUZITEVkQlFVY3NUVUZCVFVFc1JVRkJSU3hKUVVGSkxFbEJRVWx6U3l4RlFVRkZMRVZCUVVWQkxFVkJRVVYwU3l4RlFVRkZjVVFzVDBGQlQybElMRWxCUVVrc1EwRkJReXhKUVVGSmRrc3NSVUZCUlVNc1JVRkJSWE5MTEVkQlFVY3NUVUZCVFhaTExFbEJRVWt5VkN4SFFVRkZOMU1zUzBGQlMzZEtMRVZCUVVVc1IwRkJSM2hLTEV0QlFVdDNTaXhGUVVGRk5sb3NSVUZCUlc1clFpeEhRVUZITEVOQlFVTXNSVUZCUlcxclFpeEhRVUZGTldwQ0xGVkJRVlZuY2tJc2QwSkJRWGRDY0Vnc1IwRkJSVFZxUWl4VlFVRlZLM0ZDTEVkQlFVZHVTQ3hIUVVGRk5XcENMRlZCUVZWcGNrSXNSMEZCUnl4VFFVRlRiR2hDTEVWQlFVVnlTeXhIUVVGSExFZEJRVWNzVFVGQlRVRXNSVUZCUlN4SlFVRkpMRWxCUVVselN5eEZRVUZGTEVWQlFVVkJMRVZCUVVWMFN5eEZRVUZGY1VRc1QwRkJUMmxJTEVsQlFVbDZTaXhMUVVGTGMxSXNSMEZCUnpsSUxFVkJRVVZ5U3l4RlFVRkZjMHNzUjBGQlJ5eEZRVUZGTkZvc1IwRkJSVFZxUWl4VlFVRlZhM0pDTEhGQ1FVRnhRblJJTEVkQlFVVTFha0lzVlVGQlZXbHlRaXhIUVVGSGNrZ3NSMEZCUlRWcVFpeFZRVUZWYlhKQ0xFZEJRVWNzVTBGQlUzQm9RaXhGUVVGRmNrc3NSMEZCUnl4SFFVRkhMRTFCUVUxQkxFVkJRVVVzU1VGQlNTeEpRVUZKYzBzc1JVRkJSU3hGUVVGRlFTeEZRVUZGZEVzc1JVRkJSWEZFTEU5QlFVOXBTQ3hKUVVGSmVrb3NTMEZCUzNsU0xFZEJRVWRxU1N4RlFVRkZja3NzUlVGQlJYTkxMRWRCUVVjc1JVRkJSVFJhTEVkQlFVVTFha0lzVlVGQlZXOXlRaXh4UWtGQmNVSjRTQ3hIUVVGRk5XcENMRlZCUVZWdGNrSXNSMEZETldGMlNDeEhRVUZGTldwQ0xGVkJRVlZ4Y2tJc1IwRkJSeXhUUVVGVGRHaENMRVZCUVVWeVN5eEhRVUZITEVkQlFVY3NUVUZCVFVFc1JVRkJSU3hKUVVGSkxFbEJRVWx6U3l4RlFVRkZMRVZCUVVWQkxFVkJRVVYwU3l4RlFVRkZjVVFzVDBGQlQybElMRWxCUVVsNlNpeExRVUZMYTJZc1IwRkJSekZXTEVWQlFVVnlTeXhGUVVGRmMwc3NSMEZCUnl4RlFVRkZORm9zUjBGQlJUVnFRaXhWUVVGVmMzSkNMREpDUVVFeVFqRklMRWRCUVVVMWFrSXNWVUZCVlhGeVFpeEhRVUZIZWtnc1IwRkJSVFZxUWl4VlFVRlZkWEpDTEVkQlFVY3NVMEZCVTNob1FpeEZRVUZGY2tzc1IwRkJSeXhIUVVGSExFMUJRVTFCTEVWQlFVVXNTVUZCU1N4SlFVRkpjMHNzUlVGQlJTeEZRVUZGUVN4RlFVRkZkRXNzUlVGQlJYRkVMRTlCUVU5cFNDeEpRVUZKZWtvc1MwRkJTekpTTEVkQlFVZHVTU3hGUVVGRmNrc3NSVUZCUlhOTExFZEJRVWNzUlVGQlJUUmFMRWRCUVVVMWFrSXNWVUZCVlhkeVFpeHpRa0ZCYzBJMVNDeEhRVUZGTldwQ0xGVkJRVlYxY2tJc1IwRkJSek5JTEVkQlFVVTFha0lzVlVGQlZYbHlRaXhIUVVGSExGTkJRVk14YUVJc1JVRkJSWEpMTEVkQlFVY3NSMEZCUnl4TlFVRk5RU3hGUVVGRkxFbEJRVWtzU1VGQlNYTkxMRVZCUVVVc1JVRkJSVUVzUlVGQlJYUkxMRVZCUVVWeFJDeFBRVUZQYVVnc1NVRkJTWHBLTEV0QlFVczBVaXhIUVVGSGNFa3NSVUZCUlhKTExFVkJRVVZ6U3l4SFFVRkhMRVZCUVVVMFdpeEhRVUZGTldwQ0xGVkJRVlV3Y2tJc2MwSkJRWE5DT1Vnc1IwRkJSVFZxUWl4VlFVRlZlWEpDTEVkQlFVYzNTQ3hIUVVGRk5XcENMRlZCUVZVeWNrSXNSMEZCUnl4VFFVRlROV2hDTEVWQlFVVnlTeXhIUVVGSExFZEJRVWNzVFVGQlRVRXNSVUZCUlN4SlFVRkpMRWxCUVVselN5eEZRVUZGTEVWQlFVVkJMRVZCUVVWMFN5eEZRVUZGY1VRc1QwRkJUMmxJTEVsQlFVbDZTaXhMUVVGTGIyWXNSMEZCUnpWV0xFVkJRVVZ5U3l4RlFVRkZjMHNzUjBGQlJ5eEZRVU4wWlRSYUxFZEJRVVUxYWtJc1ZVRkJWVFJ5UWl3MFFrRkJORUpvU1N4SFFVRkZOV3BDTEZWQlFWVXlja0lzUjBGQlJ5OUlMRWRCUVVVMWFrSXNWVUZCVlRaeVFpeEhRVUZITEZOQlFWTTVhRUlzUlVGQlJYSkxMRWRCUVVjc1IwRkJSeXhOUVVGTlFTeEZRVUZGTEVsQlFVa3NTVUZCU1hOTExFVkJRVVVzUlVGQlJVRXNSVUZCUlhSTExFVkJRVVZ4UkN4UFFVRlBhVWdzU1VGQlNYcEtMRXRCUVVzMlZ5eEZRVUZGY2s0c1JVRkJSWEpMTEVWQlFVVnpTeXhIUVVGSExFVkJRVVUwV2l4SFFVRkZOV3BDTEZWQlFWVTRja0lzYlVKQlFXMUNiRWtzUjBGQlJUVnFRaXhWUVVGVk5uSkNMRWRCUVVkcVNTeEhRVUZGTldwQ0xGVkJRVlVyY2tJc1IwRkJSeXhUUVVGVGFHbENMRVZCUVVWeVN5eEhRVUZITEVkQlFVY3NUVUZCVFVFc1JVRkJSU3hKUVVGSkxFbEJRVWx6U3l4RlFVRkZMRVZCUVVWQkxFVkJRVVYwU3l4RlFVRkZjVVFzVDBGQlQybElMRWxCUVVsNlNpeExRVUZMZFZNc1JVRkJSUzlKTEVWQlFVVnlTeXhGUVVGRmMwc3NSMEZCUnl4RlFVRkZORm9zUjBGQlJUVnFRaXhWUVVGVlozTkNMRzlDUVVGdlFuQkpMRWRCUVVVMWFrSXNWVUZCVlN0eVFpeEhRVUZIYmtrc1IwRkJSVFZxUWl4VlFVRlZhWE5DTEVkQlFVY3NVMEZCVTJ4cFFpeEZRVUZGY2tzc1IwRkJSeXhIUVVGSExFMUJRVTFCTEVWQlFVVXNTVUZCU1N4SlFVRkpjMHNzUlVGQlJTeEZRVUZGUVN4RlFVRkZkRXNzUlVGQlJYRkVMRTlCUVU5cFNDeEpRVUZKZWtvc1MwRkJTMjFUTEVWQlFVVXpTU3hGUVVGRmNrc3NSVUZCUlhOTExFZEJRVWNzUlVGQlJUUmFMRWRCUVVVMWFrSXNWVUZCVld0elFpeHJRa0ZCYTBKMFNTeEhRVUZGTldwQ0xGVkJRVlZwYzBJc1IwRkRkbUp5U1N4SFFVRkZOV3BDTEZWQlFWVnRjMElzUjBGQlJ5eFRRVUZUY0dsQ0xFVkJRVVZ5U3l4SFFVRkhMRWRCUVVjc1RVRkJUVUVzUlVGQlJTeEpRVUZKTEVsQlFVbHpTeXhGUVVGRkxFVkJRVVZCTEVWQlFVVjBTeXhGUVVGRmNVUXNUMEZCVDJsSUxFbEJRVWw2U2l4TFFVRkxjMmxDTEVWQlFVVTVXU3hGUVVGRmNrc3NSVUZCUlhOTExFZEJRVWNzUlVGQlJUUmFMRWRCUVVVMWFrSXNWVUZCVlc5elFpeHJRa0ZCYTBKNFNTeEhRVUZGTldwQ0xGVkJRVlZ0YzBJc1IwRkJSM1pKTEVkQlFVVTFha0lzVlVGQlZYRnpRaXhIUVVGSExGTkJRVk4wYVVJc1JVRkJSWEpMTEVkQlFVY3NSMEZCUnl4TlFVRk5RU3hGUVVGRkxFbEJRVWtzU1VGQlNYTkxMRVZCUVVVc1JVRkJSVUVzUlVGQlJYUkxMRVZCUVVWeFJDeFBRVUZQYVVnc1NVRkJTWHBLTEV0QlFVczRhVUlzUlVGQlJYUmFMRVZCUVVWeVN5eEZRVUZGYzBzc1IwRkJSeXhGUVVGRk5Gb3NSMEZCUlRWcVFpeFZRVUZWYzNOQ0xHOUNRVUZ2UWpGSkxFZEJRVVUxYWtJc1ZVRkJWWEZ6UWl4SFFVRkhla2tzUjBGQlJUVnFRaXhWUVVGVmRYTkNMRWRCUVVjc1UwRkJVM2hwUWl4RlFVRkZja3NzUjBGQlJ5eEhRVUZITEUxQlFVMUJMRVZCUVVVc1NVRkJTU3hKUVVGSmMwc3NSVUZCUlN4RlFVRkZRU3hGUVVGRmRFc3NSVUZCUlhGRUxFOUJRVTlwU0N4SlFVRkpla29zUzBGQlMyOUxMRWRCUVVkYUxFVkJRVVZ5U3l4RlFVRkZjMHNzUjBGQlJ5eEZRVUZGTkZvc1IwRkJSVFZxUWl4VlFVRlZkM05DTEcxQ1FVRnRRalZKTEVkQlFVVTFha0lzVlVGQlZYVnpRaXhIUVVGSE0wa3NSMEZCUlRWcVFpeFZRVUZWZVhOQ0xFZEJRVWNzVTBGQlV6RnBRaXhGUVVGRmNrc3NSVUZCUlhOTExFZEJRVWNzUjBGQlJ5eE5RVUZOZEVzc1JVRkJSU3hKUVVGSkxFbEJRVWxFTEVWQlFVVXNSVUZCUlVFc1JVRkJSVU1zUlVGQlJYRkVMRTlCUVU5MFJDeEpRVUZKTEVOQlFVTXNTVUZCU1hGRExFVkJRVVZwYUVJc1IwRkJSWGhwUWl4TFFVRkxkMG9zUjBGQlIwTXNSVUZCUlhSTExFVkJRVVZFTEVkQlFVZGpMRTFCUVUwclZpeEhRVUZGTDFZc1MwRkJTM1ZDTEVWQlFVVXNRMEZCUXl4RlFVTnFaamhvUWl4SFFVRkZOV3BDTEZWQlFWVXdjMElzY1VKQlFYRkNPVWtzUjBGQlJUVnFRaXhWUVVGVmVYTkNMRWRCUVVjM1NTeEhRVUZGTldwQ0xGVkJRVlV5YzBJc1IwRkJSeXhUUVVGVE5XbENMRVZCUVVWeVN5eEZRVUZGYzBzc1IwRkJSeXhIUVVGSExFMUJRVTEwU3l4RlFVRkZMRWxCUVVrc1NVRkJTVVFzUlVGQlJTeEZRVUZGUVN4RlFVRkZReXhGUVVGRmNVUXNUMEZCVDNSRUxFbEJRVWt5VkN4SFFVRkZOMU1zUzBGQlMzZEtMRVZCUVVVc1IwRkJSME1zUlVGQlJYUkxMRVZCUVVWRUxFZEJRVWRqTEUxQlFVMDJVeXhIUVVGRk4xTXNTMEZCUzNkS0xFVkJRVVVzUlVGQlJTeEZRVUZGTmxvc1IwRkJSVFZxUWl4VlFVRlZOSE5DTEcxQ1FVRnRRbWhLTEVkQlFVVTFha0lzVlVGQlZUSnpRaXhIUVVGSEwwa3NSMEZCUlRWcVFpeFZRVUZWTm5OQ0xFZEJRVWNzVTBGQlV6bHBRaXhGUVVGRmNrc3NSMEZCUnl4SFFVRkhMRTFCUVUxQkxFVkJRVVVzU1VGQlNTeEpRVUZKYzBzc1JVRkJSU3hGUVVGRlFTeEZRVUZGZEVzc1JVRkJSWEZFTEU5QlFVOXBTQ3hKUVVGSmVrb3NTMEZCU3pKWExFVkJRVVZ1VGl4RlFVRkZja3NzUlVGQlJYTkxMRWRCUVVjc1JVRkJSVFJhTEVkQlFVVTFha0lzVlVGQlZUaHpRaXg1UWtGQmVVSnNTaXhIUVVGRk5XcENMRlZCUVZVMmMwSXNSMEZCUjJwS0xFZEJRVVUxYWtJc1ZVRkJWU3R6UWl4SFFVRkhMRk5CUVZOb2FrSXNSVUZCUlhKTExFZEJRVWNzUjBGQlJ5eE5RVUZOUVN4RlFVRkZMRWxCUVVrc1NVRkJTWE5MTEVWQlFVVXNSVUZCUlVFc1JVRkJSWFJMTEVWQlFVVnhSQ3hQUVVGUGFVZ3NTVUZCU1hwS0xFdEJRVXR0V0N4RlFVRkZNMDRzUlVGQlJYSkxMRVZCUVVWelN5eEhRVUZITEVWQlFVVTBXaXhIUVVGRk5XcENMRlZCUVZWbmRFSXNNRUpCUVRCQ2NFb3NSMEZCUlRWcVFpeFZRVUZWSzNOQ0xFZEJRM0prYmtvc1IwRkJSVFZxUWl4VlFVRlZhWFJDTEVkQlFVY3NVMEZCVTJ4cVFpeEZRVUZGY2tzc1IwRkJSeXhIUVVGSExFMUJRVTFCTEVkQlFVZEJMRVZCUVVWeFJDeFBRVUZQTEVOQlFVTm5TQ3hGUVVGRloxb3NSMEZCUlhocFFpeExRVUZMZDBvc1IwRkJSeXhKUVVGSkxFbEJRVWxETEVWQlFVVXNSVUZCUlVFc1JVRkJSWFJMTEVWQlFVVnhSQ3hQUVVGUGFVZ3NTVUZCU1hwS0xFdEJRVXQzU2l4RlFVRkZhMFVzUlVGQlJYWlBMRVZCUVVWelN5eEpRVUZKYzAwc1IwRkJSUzlXTEV0QlFVdDNTaXhGUVVGRkxFTkJRVU1zUlVGQlJUWmFMRWRCUVVVMWFrSXNWVUZCVld0MFFpeHBRa0ZCYVVKMFNpeEhRVUZGTldwQ0xGVkJRVlZwZEVJc1IwRkJSM0pLTEVkQlFVVTFha0lzVlVGQlZXMTBRaXhIUVVGSExGTkJRVk53YWtJc1JVRkJSWEpMTEVkQlFVY3NSMEZCUnl4TlFVRk5RU3hIUVVGSFFTeEZRVUZGY1VRc1QwRkJUeXhEUVVGRFowZ3NSVUZCUldkYUxFZEJRVVY0YVVJc1MwRkJTM2RLTEVkQlFVY3NTVUZCU1N4SlFVRkpReXhGUVVGRkxFVkJRVVZCTEVWQlFVVjBTeXhGUVVGRmNVUXNUMEZCVDJsSUxFbEJRVWw2U2l4TFFVRkxkMG9zUlVGQlJXdEZMRVZCUVVWeFZpeFRRVUZUTldwQ0xFVkJRVVZ6U3l4SFFVRkhMRXRCUVV0elRTeEhRVUZGTDFZc1MwRkJTM2RLTEVWQlFVVXNRMEZCUXl4RlFVRkZObG9zUjBGQlJUVnFRaXhWUVVGVmIzUkNMSFZDUVVGMVFuaEtMRWRCUVVVMWFrSXNWVUZCVlcxMFFpeEhRVUZIZGtvc1IwRkJSVFZxUWl4VlFVRlZjWFJDTEVkQlFVY3NVMEZCVTNScVFpeEZRVUZGY2tzc1IwRkJSeXhIUVVGSExFMUJRVTFCTEVkQlFVZEJMRVZCUVVWeFJDeFBRVUZQTEVOQlFVTm5TQ3hGUVVGRloxb3NSMEZCUlhocFFpeExRVUZMZDBvc1IwRkJSeXhKUVVGSkxFbEJRVWxETEVWQlFVVXNSVUZCUlVFc1JVRkJSWFJMTEVWQlFVVnhSQ3hQUVVGUGFVZ3NTVUZCU1hwS0xFdEJRVXQzU2l4RlFVRkZiV0VzUjBGQlIzaHJRaXhGUVVGRmMwc3NTVUZCU1hOTkxFZEJRVVV2Vml4TFFVRkxkMG9zUlVGQlJTeERRVUZETEVWQlFVVTJXaXhIUVVGRk5XcENMRlZCUVZWemRFSXNhVUpCUVdsQ01Vb3NSMEZCUlRWcVFpeFZRVUZWY1hSQ0xFZEJRM0JtZWtvc1IwRkJSVFZxUWl4VlFVRlZkWFJDTEVkQlFVY3NVMEZCVTNocVFpeEZRVUZGY2tzc1JVRkJSWE5MTEVWQlFVVjJTeXhIUVVGSExFZEJRVWNzVFVGQlRVTXNSVUZCUlN4RFFVRkRjVXNzUlVGQlJXZGFMRWRCUVVWNGFVSXNTMEZCUzNkS0xFZEJRVWNzU1VGQlNTeEpRVUZKYWtrc1JVRkJSU3hGUVVGRlFTeEZRVUZGY0VNc1JVRkJSWEZFTEU5QlFVOXFRaXhKUVVGSmRrSXNTMEZCUzNkS0xFVkJRVVV3Unl4RlFVRkZla2NzUlVGQlJYUkxMRVZCUVVWdlF5eEpRVUZKY2tNc1JVRkJSVU1zUlVGQlJXOURMRXRCUVV0M1ZTeEhRVUZGTDFZc1MwRkJTM2RLTEVWQlFVVXNRMEZCUXl4RlFVRkZObG9zUjBGQlJUVnFRaXhWUVVGVmQzUkNMSGRDUVVGM1FqVktMRWRCUVVVMWFrSXNWVUZCVlhWMFFpeEhRVUZITTBvc1IwRkJSVFZxUWl4VlFVRlZlWFJDTEVkQlFVY3NVMEZCVXpGcVFpeEZRVUZGY2tzc1JVRkJSWE5MTEVWQlFVVjJTeXhIUVVGSExFZEJRVWNzVFVGQlRVTXNSVUZCUlN4RFFVRkRjVXNzUlVGQlJXZGFMRWRCUVVWNGFVSXNTMEZCUzNkS0xFZEJRVWNzU1VGQlNTeEpRVUZKYWtrc1JVRkJSU3hGUVVGRlFTeEZRVUZGY0VNc1JVRkJSWEZFTEU5QlFVOXFRaXhKUVVGSmRrSXNTMEZCUzNkS0xFVkJRVVV6UXl4RlFVRkZORU1zUlVGQlJYUkxMRVZCUVVWdlF5eEpRVUZKY2tNc1JVRkJSVU1zUlVGQlJXOURMRXRCUVV0M1ZTeEhRVUZGTDFZc1MwRkJTM2RLTEVWQlFVVXNRMEZCUXl4RlFVRkZObG9zUjBGQlJUVnFRaXhWUVVGVk1IUkNMSGxDUVVGNVFqbEtMRWRCUVVVMWFrSXNWVUZCVlhsMFFpeEhRVUZITjBvc1IwRkJSVFZxUWl4VlFVRlZNblJDTEVkQlFVY3NVMEZCVXpWcVFpeEZRVUZGY2tzc1JVRkJSWE5MTEVWQlFVVjJTeXhIUVVGSExFZEJRVWNzVFVGQlRVTXNSVUZCUlN4RFFVRkRjVXNzUlVGQlJXZGFMRWRCUVVWNGFVSXNTMEZCUzNkS0xFZEJRVWNzU1VGQlNTeEpRVUZKYWtrc1JVRkJSWFpDTEV0QlFVdDNTaXhGUVVGRmRVSXNSVUZCUlN4RlFVRkZRU3hGUVVGRk5Vd3NSVUZCUlhGRUxFOUJRVTkxU1N4SlFVRkpaMGNzUlVGQlIzUklMRVZCUVVWMFN5eEZRVUZGTkV3c1NVRkJTVGRNTEVWQlFVVkRMRVZCUVVVMFRDeExRVUZKTEZOQlFWTnNTU3hGUVVGRmNFSXNSMEZCUjBZc1JVRkJSWE5HTEVWQlFVVm9SU3hKUVVGSkxFVkJRVVZ3UWl4SlFVRkpMRVZCUVVVc1NVRkJSM05WTEVkQlFVVXZWaXhMUVVGTGQwb3NSVUZCUlN4RFFVRkRMRVZCUTNSbU5sb3NSMEZCUlRWcVFpeFZRVUZWTkhSQ0xDdENRVUVyUW1oTExFZEJRVVUxYWtJc1ZVRkJWVEowUWl4SFFVRkhMMG9zUjBGQlJUVnFRaXhWUVVGVk5uUkNMRWRCUVVjc1UwRkJVemxxUWl4RlFVRkZja3NzUjBGQlJ5eEhRVUZITEUxQlFVMUJMRWRCUVVkQkxFVkJRVVZ4UkN4UFFVRlBMRU5CUVVOblNDeEZRVUZGWjFvc1IwRkJSWGhwUWl4TFFVRkxkMG9zUjBGQlJ5eEpRVUZKTEVsQlFVbERMRVZCUVVVc1JVRkJSVUVzUlVGQlJYUkxMRVZCUVVWeFJDeFBRVUZQYVVnc1NVRkJTU3hEUVVGRExFbEJRVWwyU3l4RlFVRkZaMnRDTEVkQlFVY3Zha0lzUlVGQlJYTkxMRWxCUVVsNlNpeExRVUZMZDBvc1JVRkJSVE5ETEVWQlFVVXpTQ3hGUVVGRmVXcENMRWRCUVVkNmFrSXNSVUZCUlRCcVFpeEhRVUZITEVOQlFVTTNUU3hIUVVGRkwxWXNTMEZCUzNkS0xFVkJRVVVzUTBGQlF5eEZRVUZGTmxvc1IwRkJSVFZxUWl4VlFVRlZPSFJDTEhWQ1FVRjFRbXhMTEVkQlFVVTFha0lzVlVGQlZUWjBRaXhIUVVGSGFrc3NSMEZCUlRWcVFpeFZRVUZWSzNSQ0xFZEJRVWNzVTBGQlUyaHJRaXhGUVVGRmNrc3NSMEZCUnl4SFFVRkhMRTFCUVUxQkxFZEJRVWRCTEVWQlFVVnhSQ3hQUVVGUExFTkJRVU5uU0N4RlFVRkZaMW9zUjBGQlJYaHBRaXhMUVVGTGQwb3NSMEZCUnl4SlFVRkpMRWxCUVVsRExFVkJRVVVzUlVGQlJVRXNSVUZCUlhSTExFVkJRVVZ4UkN4UFFVRlBhVWdzU1VGQlNYcEtMRXRCUVV0M1NpeEZRVUZGWjJFc1JVRkJSWEpyUWl4RlFVRkZjMHNzU1VGQlNYTk5MRWRCUVVVdlZpeExRVUZMZDBvc1JVRkJSU3hEUVVGRExFVkJRVVUyV2l4SFFVRkZOV3BDTEZWQlFWVm5kVUlzYTBKQlFXdENjRXNzUjBGQlJUVnFRaXhWUVVGVkszUkNMRWRCUTNKYWJrc3NSMEZCUlRWcVFpeFZRVUZWYVhWQ0xFZEJRVWNzVTBGQlUyeHJRaXhGUVVGRmNrc3NSMEZCUnl4SFFVRkhMRTFCUVUxQkxFZEJRVWRCTEVWQlFVVnhSQ3hQUVVGUExFTkJRVU5uU0N4RlFVRkZaMW9zUjBGQlJYaHBRaXhMUVVGTGQwb3NSMEZCUnl4SlFVRkpMRWxCUVVsRExFVkJRVVVzUlVGQlJVRXNSVUZCUlhSTExFVkJRVVZ4UkN4UFFVRlBhVWdzU1VGQlNYcEtMRXRCUVV0M1NpeEZRVUZGWjJFc1JVRkJSVlFzVTBGQlV6VnFRaXhGUVVGRmMwc3NSMEZCUnl4TFFVRkxjMDBzUjBGQlJTOVdMRXRCUVV0M1NpeEZRVUZGTEVOQlFVTXNSVUZCUlRaYUxFZEJRVVUxYWtJc1ZVRkJWV3QxUWl4M1FrRkJkMEowU3l4SFFVRkZOV3BDTEZWQlFWVnBkVUlzUjBGQlIzSkxMRWRCUVVVMWFrSXNWVUZCVlcxMVFpeEhRVUZITEZOQlFWTndhMElzUlVGQlJYSkxMRWRCUVVjc1IwRkJSeXhOUVVGTlFTeEhRVUZIUVN4RlFVRkZjVVFzVDBGQlR5eERRVUZEWjBnc1JVRkJSV2RhTEVkQlFVVjRhVUlzUzBGQlMzZEtMRWRCUVVjc1NVRkJTU3hKUVVGSlF5eEZRVUZGTEVWQlFVVkJMRVZCUVVWMFN5eEZRVUZGY1VRc1QwRkJUMmxJTEVsQlFVbDZTaXhMUVVGTGQwb3NSVUZCUlRKQ0xFZEJRVWRvVFN4RlFVRkZjMHNzU1VGQlNYTk5MRWRCUVVVdlZpeExRVUZMZDBvc1JVRkJSU3hEUVVGRExFVkJRVVUyV2l4SFFVRkZOV3BDTEZWQlFWVnZkVUlzYTBKQlFXdENlRXNzUjBGQlJUVnFRaXhWUVVGVmJYVkNMRWRCUVVkMlN5eEhRVUZGTldwQ0xGVkJRVlZ4ZFVJc1IwRkJSeXhUUVVGVGRHdENMRVZCUVVWeVN5eEhRVUZITEVkQlFVY3NUVUZCVFVFc1IwRkJSMEVzUlVGQlJYRkVMRTlCUVU4c1EwRkJRMmRJTEVWQlFVVm5XaXhIUVVGRmVHbENMRXRCUVV0M1NpeEhRVUZITEVsQlFVa3NTVUZCU1VNc1JVRkJSU3hGUVVGRlFTeEZRVUZGZEVzc1JVRkJSWEZFTEU5QlFVOXBTQ3hKUVVGSkxFTkJRVU1zU1VGQlNYWkxMRVZCUVVVMGFrSXNSMEZCUlROcVFpeEZRVUZGYzBzc1NVRkJTWHBLTEV0QlFVdDNTaXhGUVVGRk0wTXNSVUZCUlROSUxFVkJRVVY1YWtJc1IwRkJSM3BxUWl4RlFVRkZNR3BDTEVkQlFVY3NRMEZCUXpkTkxFZEJRVVV2Vml4TFFVRkxkMG9zUlVGQlJTeERRVUZETEVWQlF5OWtObG9zUjBGQlJUVnFRaXhWUVVGVmMzVkNMSGRDUVVGM1FqRkxMRWRCUVVVMWFrSXNWVUZCVlhGMVFpeEhRVUZIZWtzc1IwRkJSVFZxUWl4VlFVRlZkWFZDTEVkQlFVY3NVMEZCVTNoclFpeEZRVUZGY2tzc1IwRkJSeXhIUVVGSExFMUJRVTFCTEVkQlFVZEJMRVZCUVVWeFJDeFBRVUZQTEVOQlFVTm5TQ3hGUVVGRloxb3NSMEZCUlhocFFpeExRVUZMZDBvc1IwRkJSeXhKUVVGSkxFbEJRVWxETEVWQlFVVXNSVUZCUlVFc1JVRkJSWFJMTEVWQlFVVnhSQ3hQUVVGUGFVZ3NTVUZCU1hwS0xFdEJRVXQzU2l4RlFVRkZaME1zUjBGQlIzSk5MRVZCUVVWelN5eEpRVUZKYzAwc1IwRkJSUzlXTEV0QlFVdDNTaXhGUVVGRkxFTkJRVU1zUlVGQlJUWmFMRWRCUVVVMWFrSXNWVUZCVlhkMVFpeHJRa0ZCYTBJMVN5eEhRVUZGTldwQ0xGVkJRVlYxZFVJc1IwRkJSek5MTEVkQlFVVTFha0lzVlVGQlZYbDFRaXhIUVVGSExGTkJRVk14YTBJc1JVRkJSWEpMTEVkQlFVY3NSMEZCUnl4TlFVRk5RU3hIUVVGSFFTeEZRVUZGY1VRc1QwRkJUeXhEUVVGRFowZ3NSVUZCUldkYUxFZEJRVVY0YVVJc1MwRkJTM2RLTEVkQlFVY3NTVUZCU1N4SlFVRkpReXhGUVVGRkxFVkJRVVZCTEVWQlFVVjBTeXhGUVVGRmNVUXNUMEZCVDJsSUxFbEJRVWw2U2l4TFFVRkxkMG9zUlVGQlJXMURMRWRCUVVkNFRTeEZRVUZGYzBzc1NVRkJTWE5OTEVkQlFVVXZWaXhMUVVGTGQwb3NSVUZCUlN4RFFVRkRMRVZCUVVVMldpeEhRVUZGTldwQ0xGVkJRVlV3ZFVJc2EwSkJRV3RDT1Vzc1IwRkJSVFZxUWl4VlFVRlZlWFZDTEVkQlFVYzNTeXhIUVVGRk5XcENMRlZCUVZVeWRVSXNSMEZCUnl4VFFVRlROV3RDTEVWQlFVVnlTeXhIUVVGSExFZEJRVWNzVFVGQlRVRXNSMEZCUjBFc1JVRkJSWEZFTEU5QlFVOHNRMEZCUTJkSUxFVkJRVVZuV2l4SFFVRkZlR2xDTEV0QlFVdDNTaXhIUVVGSExFbEJRVWtzU1VGQlNVTXNSVUZCUlN4RlFVRkZRU3hGUVVGRmRFc3NSVUZCUlhGRUxFOUJRVTlwU0N4SlFVRkpla29zUzBGQlMzZEtMRVZCUVVVMldpeEZRVUZGTTFJc1IwRkJSWFpUTEVWQlFVVnpTeXhMUVVGTGMwMHNSMEZCUlM5V0xFdEJRVXQzU2l4RlFVRkZMRU5CUVVNc1JVRkRMMlUyV2l4SFFVRkZOV3BDTEZWQlFWVTBkVUlzZDBKQlFYZENhRXdzUjBGQlJUVnFRaXhWUVVGVk1uVkNMRWRCUVVjdlN5eEhRVUZGTldwQ0xGVkJRVlUyZFVJc1IwRkJSeXhUUVVGVE9XdENMRVZCUVVWeVN5eEhRVUZITEVkQlFVY3NUVUZCVFVFc1IwRkJSMEVzUlVGQlJYRkVMRTlCUVU4c1EwRkJRMmRJTEVWQlFVVm5XaXhIUVVGRmVHbENMRXRCUVV0M1NpeEhRVUZITEVsQlFVa3NTVUZCU1VNc1JVRkJSU3hGUVVGRlFTeEZRVUZGZEVzc1JVRkJSWEZFTEU5QlFVOXBTQ3hKUVVGSmVrb3NTMEZCUzNkS0xFVkJRVVUyV2l4RlFVRkZiR3RDTEVWQlFVVnpTeXhKUVVGSmMwMHNSMEZCUlM5V0xFdEJRVXQzU2l4RlFVRkZMRU5CUVVNc1JVRkJSVFphTEVkQlFVVTFha0lzVlVGQlZUaDFRaXh6UWtGQmMwSnNUQ3hIUVVGRk5XcENMRlZCUVZVMmRVSXNSMEZCUjJwTUxFZEJRVVUxYWtJc1ZVRkJWU3QxUWl4SFFVRkhMRk5CUVZOb2JFSXNSVUZCUlhKTExFZEJRVWNzUjBGQlJ5eE5RVUZOUVN4SFFVRkhRU3hGUVVGRmNVUXNUMEZCVHl4SlFVRkpjVkVzUjBGQlJUZFRMRXRCUVV0M1NpeEZRVUZGTEVkQlFVZDRTaXhMUVVGTGQwb3NSVUZCUldkaExFVkJRVVVzUlVGQlJYSnJRaXhGUVVGRmNVUXNVVUZCVVdkSUxFVkJRVVVzUlVGQlJVRXNSVUZCUlhKTExFVkJRVVZ4UkN4UFFVRlBaMGdzU1VGQlNYaEtMRXRCUVV0M1NpeEZRVUZGTlVjc1JVRkJSWHBFTEVWQlFVVnhTeXhIUVVGSExFVkJRVVUyV2l4SFFVRkZOV3BDTEZWQlFWVm5ka0lzYlVKQlFXMUNjRXdzUjBGQlJUVnFRaXhWUVVGVkszVkNMRWRCUVVkdVRDeEhRVUZGTldwQ0xGVkJRVlZwZGtJc1IwRkJSeXhUUVVGVGJHeENMRVZCUVVWeVN5eEhRVUZITEVkQlFVY3NUVUZCVFVFc1IwRkJSMEVzUlVGQlJYRkVMRTlCUVU4c1NVRkJTWEZSTEVkQlFVVTNVeXhMUVVGTGQwb3NSVUZCUlN4SFFVRkhlRW9zUzBGQlMzZEtMRVZCUVVWbllTeEZRVUZGTEVWQlFVVnlhMElzUlVGQlJYRkVMRkZCUVZGblNDeEZRVUZGTEVWQlFVVkJMRVZCUVVWeVN5eEZRVUZGY1VRc1QwRkJUMmRJTEVsQlFVbDRTaXhMUVVGTGQwb3NSVUZCUlhsYUxFVkJRVVU1YWtJc1JVRkJSWEZMTEVkQlFVY3NSVUZEZW1ZMldpeEhRVUZGTldwQ0xGVkJRVlZyZGtJc2JVSkJRVzFDZEV3c1IwRkJSVFZxUWl4VlFVRlZhWFpDTEVkQlFVZHlUQ3hIUVVGRk5XcENMRlZCUVZWdGRrSXNSMEZCUnl4VFFVRlRjR3hDTEVWQlFVVnlTeXhIUVVGSExFZEJRVWNzVFVGQlRVRXNSMEZCUjBFc1JVRkJSWEZFTEU5QlFVOHNTVUZCU1hGUkxFZEJRVVUzVXl4TFFVRkxkMG9zUlVGQlJTeEhRVUZIZUVvc1MwRkJTM2RLTEVWQlFVVm5ZU3hGUVVGRkxFVkJRVVZ5YTBJc1JVRkJSWEZFTEZGQlFWRm5TQ3hGUVVGRkxFVkJRVVZCTEVWQlFVVnlTeXhGUVVGRmNVUXNUMEZCVDJkSUxFbEJRVWtzUTBGQlF5eEpRVUZKUXl4RlFVRkZjVm9zUjBGQlJUTnFRaXhGUVVGRmNVc3NTVUZCU1hoS0xFdEJRVXQzU2l4RlFVRkZNRWNzUlVGQlJYcEhMRVZCUVVWcldpeEhRVUZIYkZvc1JVRkJSVzFhTEVkQlFVY3NRMEZCUXl4RlFVRkZVeXhIUVVGRk5XcENMRlZCUVZWdmRrSXNlVUpCUVhsQ2VFd3NSMEZCUlRWcVFpeFZRVUZWYlhaQ0xFZEJRVWQyVEN4SFFVRkZOV3BDTEZWQlFWVnhka0lzUjBGQlJ5eFRRVUZUZEd4Q0xFVkJRVVZ5U3l4SFFVRkhMRWRCUVVjc1RVRkJUVUVzUjBGQlIwRXNSVUZCUlhGRUxFOUJRVThzU1VGQlNYRlJMRWRCUVVVM1V5eExRVUZMZDBvc1JVRkJSU3hIUVVGSGVFb3NTMEZCUzNkS0xFVkJRVVZuWVN4RlFVRkZMRVZCUVVWeWEwSXNSVUZCUlhGRUxGRkJRVkZuU0N4RlFVRkZMRVZCUVVWQkxFVkJRVVZ5U3l4RlFVRkZjVVFzVDBGQlQyZElMRWxCUVVsNFNpeExRVUZMZDBvc1JVRkJSV2xhTEVWQlFVVjBha0lzUlVGQlJYRkxMRWRCUVVjc1JVRkJSVFphTEVkQlFVVTFha0lzVlVGQlZYTjJRaXh2UWtGQmIwSXhUQ3hIUVVGRk5XcENMRlZCUVZWeGRrSXNSMEZEZGxwNlRDeEhRVUZGTldwQ0xGVkJRVlYxZGtJc1IwRkJSeXhUUVVGVGVHeENMRVZCUVVWeVN5eEhRVUZITEVkQlFVY3NUVUZCVFVFc1IwRkJSMEVzUlVGQlJYRkVMRTlCUVU4c1NVRkJTWEZSTEVkQlFVVTNVeXhMUVVGTGQwb3NSVUZCUlN4SFFVRkhlRW9zUzBGQlMzZEtMRVZCUVVWbllTeEZRVUZGTEVWQlFVVnlhMElzUlVGQlJYRkVMRkZCUVZGblNDeEZRVUZGTEVWQlFVVkJMRVZCUVVWeVN5eEZRVUZGY1VRc1QwRkJUMmRJTEVsQlFVbDRTaXhMUVVGTGQwb3NSVUZCUld0YUxFVkJRVVYyYWtJc1JVRkJSWEZMTEVkQlFVY3NSVUZCUlRaYUxFZEJRVVUxYWtJc1ZVRkJWWGQyUWl4dlFrRkJiMEkxVEN4SFFVRkZOV3BDTEZWQlFWVjFka0lzUjBGQlJ6Tk1MRWRCUVVVMWFrSXNWVUZCVlhsMlFpeEhRVUZITEZOQlFWTXhiRUlzUlVGQlJYSkxMRWRCUVVjc1IwRkJSeXhOUVVGTlFTeEhRVUZIUVN4RlFVRkZjVVFzVDBGQlR5eEpRVUZKY1ZFc1IwRkJSVGRUTEV0QlFVdDNTaXhGUVVGRkxFZEJRVWQ0U2l4TFFVRkxkMG9zUlVGQlJXZGhMRVZCUVVVc1JVRkJSWEpyUWl4RlFVRkZjVVFzVVVGQlVXZElMRVZCUVVVc1JVRkJSVUVzUlVGQlJYSkxMRVZCUVVWeFJDeFBRVUZQWjBnc1NVRkJTWGhLTEV0QlFVdDNTaXhGUVVGRllTeEhRVUZIYkV3c1JVRkJSWEZMTEVkQlFVY3NSVUZCUlRaYUxFZEJRVVUxYWtJc1ZVRkJWVEIyUWl3d1FrRkJNRUk1VEN4SFFVRkZOV3BDTEZWQlFWVjVka0lzUjBGQlJ6ZE1MRWRCUVVVMWFrSXNWVUZCVlRKMlFpeEhRVUZITEZOQlFWTTFiRUlzUlVGQlJYSkxMRWRCUVVjc1IwRkJSeXhOUVVGTlFTeEhRVUZIUVN4RlFVRkZjVVFzVDBGQlR5eEpRVUZKY1ZFc1IwRkJSVGRUTEV0QlFVdDNTaXhGUVVGRkxFZEJRVWQ0U2l4TFFVRkxkMG9zUlVGQlJXZGhMRVZCUVVVc1JVRkJSWEpyUWl4RlFVRkZjVVFzVVVGQlVXZElMRVZCUVVVc1JVRkJSVUVzUlVGQlJYSkxMRVZCUVVWeFJDeFBRVUZQWjBnc1NVRkJTWGhLTEV0QlFVdDNTaXhGUVVGRmNVNHNSVUZCUlRGWUxFVkJRVVZ4U3l4SFFVRkhMRVZCUVVVMldpeEhRVUZGTldwQ0xGVkJRVlUwZGtJc2FVSkJRV2xDYUUwc1IwRkJSVFZxUWl4VlFVRlZNblpDTEVkQlF6Vm1MMHdzUjBGQlJUVnFRaXhWUVVGVk5uWkNMRWRCUVVjc1UwRkJVemxzUWl4RlFVRkZja3NzUjBGQlJ5eEhRVUZITEUxQlFVMUJMRWRCUVVkQkxFVkJRVVZ4UkN4UFFVRlBMRWxCUVVseFVTeEhRVUZGTjFNc1MwRkJTM2RLTEVWQlFVVXNSMEZCUjNoS0xFdEJRVXQzU2l4RlFVRkZaMkVzUlVGQlJTeEZRVUZGY210Q0xFVkJRVVZ4UkN4UlFVRlJaMGdzUlVGQlJTeEZRVUZGUVN4RlFVRkZja3NzUlVGQlJYRkVMRTlCUVU5blNDeEpRVUZKZUVvc1MwRkJTM2RLTEVWQlFVVXJTU3hGUVVGRmNGUXNSVUZCUlhGTExFZEJRVWNzUlVGQlJUWmFMRWRCUVVVMWFrSXNWVUZCVlRoMlFpeHJRa0ZCYTBKc1RTeEhRVUZGTldwQ0xGVkJRVlUyZGtJc1IwRkJSMnBOTEVkQlFVVTFha0lzVlVGQlZTdDJRaXhIUVVGSExGTkJRVk5vYlVJc1JVRkJSWEpMTEVkQlFVY3NSMEZCUnl4TlFVRk5RU3hIUVVGSFFTeEZRVUZGY1VRc1QwRkJUeXhKUVVGSmNWRXNSMEZCUlRkVExFdEJRVXQzU2l4RlFVRkZMRWRCUVVkNFNpeExRVUZMZDBvc1JVRkJSV2RoTEVWQlFVVnlhMElzUlVGQlJYRkVMRkZCUVZGblNDeEZRVUZGTEVWQlFVVkJMRVZCUVVWeVN5eEZRVUZGY1VRc1QwRkJUMmRJTEVsQlFVbDRTaXhMUVVGTGQwb3NSVUZCUlRKSkxFVkJRVVZvVkN4RlFVRkZjVXNzUjBGQlJ5eEZRVUZGTmxvc1IwRkJSVFZxUWl4VlFVRlZaM2RDTEdkQ1FVRm5RbkJOTEVkQlFVVTFha0lzVlVGQlZTdDJRaXhIUVVGSGJrMHNSMEZCUlRWcVFpeFZRVUZWYVhkQ0xFZEJRVWNzVTBGQlUyeHRRaXhGUVVGRmNrc3NSMEZCUnl4SFFVRkhMRTFCUVUxQkxFZEJRVWRCTEVWQlFVVnhSQ3hQUVVGUExFTkJRVU5uU0N4RlFVRkZaMW9zUjBGQlJYaHBRaXhMUVVGTGQwb3NSMEZCUnl4SlFVRkpMRWxCUVVsRExFVkJRVVVzUlVGQlJVRXNSVUZCUlhSTExFVkJRVVZ4UkN4UFFVRlBhVWdzU1VGQlNYcEtMRXRCUVV0M1NpeEZRVUZGT0Zrc1JVRkJSVzVxUWl4RlFVRkZjMHNzU1VGQlNYTk5MRWRCUVVVdlZpeExRVUZMZDBvc1JVRkJSU3hEUVVGRExFVkJRVVUyV2l4SFFVRkZOV3BDTEZWQlFWVnJkMElzWjBKQlFXZENkRTBzUjBGQlJUVnFRaXhWUVVGVmFYZENMRWRCUTNabGNrMHNSMEZCUlRWcVFpeFZRVUZWYlhkQ0xFZEJRVWNzVTBGQlUzQnRRaXhGUVVGRmNrc3NSMEZCUnl4SFFVRkhMRTFCUVUxQkxFZEJRVWRCTEVWQlFVVnhSQ3hQUVVGUExFbEJRVWx4VVN4SFFVRkZOMU1zUzBGQlMzZEtMRVZCUVVVc1IwRkJSM2hLTEV0QlFVdDNTaXhGUVVGRloyRXNSVUZCUlN4RlFVRkZjbXRDTEVWQlFVVnhSQ3hSUVVGUlowZ3NSVUZCUlN4RlFVRkZRU3hGUVVGRmNrc3NSVUZCUlhGRUxFOUJRVTluU0N4SlFVRkplRW9zUzBGQlMzZEtMRVZCUVVWdFRpeEZRVUZGZUZnc1JVRkJSWEZMTEVkQlFVY3NSVUZCUlRaYUxFZEJRVVUxYWtJc1ZVRkJWVzkzUWl4MVFrRkJkVUo0VFN4SFFVRkZOV3BDTEZWQlFWVnRkMElzUjBGQlIzWk5MRWRCUVVVMWFrSXNWVUZCVlhGM1FpeEhRVUZITEZOQlFWTjBiVUlzUlVGQlJYSkxMRWRCUVVjc1IwRkJSeXhOUVVGTlFTeEhRVUZIUVN4RlFVRkZjVVFzVDBGQlR5eERRVUZEWjBnc1JVRkJSV2RhTEVkQlFVVjRhVUlzUzBGQlMzZEtMRWRCUVVjc1NVRkJTU3hKUVVGSlF5eEZRVUZGTEVWQlFVVkJMRVZCUVVWMFN5eEZRVUZGY1VRc1QwRkJUMmxJTEVsQlFVbDZTaXhMUVVGTGQwb3NSVUZCUlRKT0xFVkJRVVZvV1N4RlFVRkZjMHNzU1VGQlNYTk5MRWRCUVVVdlZpeExRVUZMZDBvc1JVRkJSU3hEUVVGRExFVkJRVVUyV2l4SFFVRkZOV3BDTEZWQlFWVnpkMElzZDBKQlFYZENNVTBzUjBGQlJUVnFRaXhWUVVGVmNYZENMRWRCUVN0Q1JTeEZRVUZqUXl4TlFVRkJNMDRzUjBGQlJUQk9MRVZCUVZsRkxFbEJRVUUxYTBJc1JVRkJSVEJyUWl4RlFVRm5Ra2NzVVVGQlFXaGFMRWRCUVVVMldTeEZRVUZCU1N4aFFVRnhRamRrTEVkQlFVVjVaQ3hsUVVGeFFqTk5MRWRCUVVVeVRTeHhRa0ZCTWtKcWFrSXNSMEZCUjJscVFpd3lRa0ZCYVVOb1dpeEhRVUZIWjFvc1JVRkJjVUpMTEdGQmVrbHVXaXhUUVVGWk4yMUNMRVZCUVVWeVN5eEZRVUZGYzBzc1IwRkJSekZJTEVWQlFVVjVTQ3hGUVVGRmNrc3NSVUZCUlhOTExFVkJRVVVzUlVGNVNUSllkVzFDTEVWQlFVRk5MRk5CZWtreFdDeFRRVUZaT1cxQ0xFVkJRVVZ5U3l4SFFVRkhMRk5CUVZOelN5eEpRVUZMTEVOQlFVRkJMRVZCUVVWb1N5eFZRVUZWVGl4RlFVRkZUU3hWUVVGVkswb3NSVUZCUlM5S0xGVkJRVlVzU1VGQlNXZExMRVZCUVVWRUxFVkJRVVV2U2l4VlFVRlZVU3haUVVGWmRVb3NRMEZCUXl4RlFYbEpORk4zYlVJc1JVRkJRUzl3UWl4UFFVRmxMRU5CUVVOemNVSXNUMEY2U1hoTkxGTkJRVmt2YlVJc1JVRkJSWEpMTEVkQlFVY3NTVUZCU1N4SlFVRkpjMHNzUlVGQlJYWkxMRVZCUVVWeFF5eEZRVUZGTEVWQlFVVkJMRVZCUVVWM1JTeFZRVUZWZGtRc1QwRkJUMnBDTEVsQlFVa3NRMEZCWjBJc1NVRkJTV3RKTEV0QlFXNUNka3NzUlVGQlJUWkhMRlZCUVZWNFJTeEhRVUZqYVVrc1JVRkJSVU1zUjBGQlIzWkxMRVZCUVVWMVN5eEhRVUZITEVsQlFVa3NTVUZCU1hOQ0xFVkJRVVVzUlVGQlJVRXNSVUZCUlVvc1JVRkJSMjVKTEU5QlFVOTFTU3hKUVVGSmRFSXNSVUZCUld0Q0xFVkJRVWRKTEVkQlFVY3pUQ3hQUVVGUFN5eFZRVUZWUXl4bFFVRmxReXhMUVVGTFZDeEZRVUZGZFVzc1MwRkJTMFFzUlVGQlJVTXNSMEZCUjNaTExFVkJRVVYxU3l4SFFVRkhMRU5CUVVNc1IwRjVTVEpDZFcxQ0xFVkJRV1ZSTEU5QlFVRm9iVUlzVFVRNVNYSnRRaXhUUVVGcFFtNUNMRWxCUVUwc1UwRkJRVzl1UWl4aFFVTnVRa01zUlVGQlFTeFRRVUZCYkhCQ0xFZEJSVWtzVTBGQlFXdHdRaXhGUVVGWlF5eEhRVUZhTEVsQlFVRnNjRUlzUlVGSlNVUXNZMEZWU0hoSUxGbEJaa1EwZDBJc1JVRkJRVEZyUWl4SlFVRkJla1VzUlVGQk5FSXNTVUZOZUVKdmNFSXNSVUZCV1ZZc1VVRkJRemRTTEZkQlFWYzNWeXhGUVVGTmJFa3NUVUZCVFdkbUxGRkJRVkZ2VXl4SFFVRlJRU3hGUVVGUExFZEJRVWtzUjBGQlNTeEZRVUZITEVkQlFVbDZkRUlzUlVGQlFYVkZMRVZCUVVsdGNFSXNSVUZCUVN4TlFVTjZSWEo0UWl4TlFVRk5aMllzVVVGQlVXOVRMRWxCUVhkQ0xHbENRVUZTUVN4SlFVTXpRaXhUUVVGVlFTeEhRVUZ4UW1wd1FpeE5RVUZpYVhCQ0xFVkJRVXRITEU5QlEzWkNjbkJDTEVWQlFVdHhjRUlzUzBGQlQwZ3NSVUZCUzBjc1RVRkZha0lzVjBGQldVZ3NSMEZCZFVKcWNFSXNUVUZCWm1sd1FpeEZRVUZMU1N4VFFVTjZRblJ3UWl4RlFVRkxjM0JDTEU5QlFWTktMRVZCUVV0SkxGVkJSemxDTEVOQmVVVk1MRTlCZWtZeVFtNTRRaXhGUVVGWk9IZENMRVZCUVVGc2NFSXNSMEZwUW01RGNFa3NUMEZCUVN0RkxHVkJRVWwxYzBJc1JVRkJTV3A0UWl4VlFVRkJMRTlCUVVFc1EwRkJVamhFTEVsQlFVRXNWMEZEU1N4UFFVRlBjM1JDTEVWQlFWbFdMRkZCUVVOb1VTeHZRa0ZCYjBKdVowSXNTMEZCVFN4RlFVRkhMRWRCUTNCRUxFVkJRMFJyVFN4SlFVRkJMRk5CUVZOMFRDeEhRVU5NYVhkQ0xFVkJRVUZCTEZGQlFXRnlVU3hUUVVGVGVHZENMRXRCUVUwc1JVRkJSMWtzUlVGRGJFTXNhME5CUTBSNFFpeFBRVUZCSzBVc1pVRkJTWFZ6UWl4RlFVRk5hbmhDTEZWQlFVRXNVMEZCUVN4RFFVRldPRVFzU1VGQlFTeFhRVU5KTEU5QlFVOXpkRUlzUlVGQlFVRXNVVUZCWVRGUkxHOUNRVUZ2UW01blFpeExRVUZOTEVWQlFVY3NTVUZCU1dkUExGZEJRVmNzUjBGRGJrVXNSVUZEUkRsQ0xFbEJRVUVzVTBGQlYzUk1MRWRCUTFCcGQwSXNSVUZCUVVFc1VVRkJZWEpSTEZOQlFWTjRaMElzUzBGQlRTeEZRVUZIV1N4RlFVTnNReXhyUTBGRFRUaDJRaXhGUVVGVmVtdENMRmRCUVdwQ0xGTkJRV3RDTUd0Q0xFZEJTV1FzU1VGQlRVc3NSVUZCVlN4SlFVRkpUaXhGUVVGTkxFTkJRVUVzUjBGUE1VSXNUMEZPYVVJc1RVRkJZa01zUlVGQlMwY3NUMEZEVEVVc1JVRkJVVVlzUzBGQlQwZ3NSVUZCUzBjc1RVRkZUQ3hOUVVGbVNDeEZRVUZMU1N4VFFVTk1ReXhGUVVGUlJDeFBRVUZUU2l4RlFVRkxTU3hSUVVWdVFrTXNSMEZGV0U0c1JVRkJRV3A0UWl4VlFVRkJkVTBzVTBGQlFTeFhRVU5KTEVsQlFVMHlhMElzUlVGSFJpeERRVUZCTEVWQlQwb3NUMEZPYVVJc1RVRkJZak4zUWl4TFFVRkxPSGRDTEU5QlEweElMRVZCUVV0SExFdEJRVTg1ZDBJc1MwRkJTemgzUWl4TlFVVkdMRTFCUVdZNWQwSXNTMEZCU3l0M1FpeFRRVU5NU2l4RlFVRkxTU3hQUVVGVEwzZENMRXRCUVVzcmQwSXNVVUZGYUVKS0xFZEJTVmhFTEVWQlFWTnFlRUlzVlVGQlFYZDRRaXhWUVVGVUxGTkJRVlY0YkVJc1IwRkRUaXhKUVVGTmVXeENMRVZCUVZONmJFSXNSMEZCU3l4SlFVRkpNR3hDTEVWQlFVRkJMR0ZCUzNoQ0xFZEJTa2x1ZUVJc1MwRkJTemgzUWl4TFFVRkxkSFZDTEZGQlExWXdkVUlzUlVGQlQyeE1MRmxCUVZrc1JVRkJSMmh0UWl4TFFVRkxPSGRDTEUxQlF6TkNPWGRDTEV0QlFVc3JkMElzVDBGQlQzWjFRaXhSUVVOYU1IVkNMRVZCUVU5eVRDeFhRVUZYTEVWQlFVYzNiRUlzUzBGQlN5dDNRaXhUUVVONlFuUnNRaXhGUVVORUxFOUJRVTk1YkVJc1JVRkJUMjVMTEcxQ1FVVm1Na29zUlVGQlYxVXNXVUZCYkVJc1UwRkJiVUpETEVkQlJXWXNTVUZFUVN4SlFVRk5ReXhGUVVGVFJDeGhRVUZwUWtVc1JVRkJhVUp1UWl4aFFVRkhhVUlzUlVGQlVTeEpRVUZKUlN4bFFVRnJRa1lzUjBGQlVVd3NSVUZCVlN4SlFVRkpUaXhGUVVOcVIxa3NSVUZCVDNaYUxHTkJRMDUxV2l4RlFVRlBlRm9zWTBGRldDeFBRVUZSZDFvc1JVRkJUemRhTEd0Q1FVTllMRXRCUVVzc1JVRkRSSFZhTEVWQlFWRkdMRXRCUVU5UkxFVkJRVTlzWWl4aFFVTjBRaXhOUVVOS0xFdEJRVXNzUlVGRFJEUmhMRVZCUVZGRUxFOUJRVk5QTEVWQlFVOHZZU3haUVVONFFpeE5RVU5LTEZGQlFWTXJZU3hGUVVGUGVsa3NXVUZIZUVJc1QwRkJUMjFaTEVkQlJWaE9MRVZCUVVGcWVFSXNWVUZCUVhWT0xHZENRVUZCTEZkQlEwa3NUMEZCVDJoT0xFdEJRVXRwZUVJc1lVRkZWRkFzUlVGQmFVSjZha0lzYTBKQlFYaENMRk5CUVhsQ2IydENMRWRCUTNKQ0xFOUJRVTlZTEVWQlFVMVZMRmxCUVZsRExFbEJSV2hEV0N4RFFVRkVMRU5CZWtaQkxFTkJRVEpDUnl4RlFVRkJRU3gxUWtGQlpFb3NSVUZCUVVNc1VVRXdSbUlzU1VGQlFXTXNSVUZCUVN4VFFVRkJhSEZDTEVkQlJVa3NVMEZCUVdkeFFpeEZRVUZaWWl4SFFVRmFMRWxCUVVGc2NFSXNSVUZSU1VRc1kwRnpRa2g0U0N4WlFTOUNSSGw0UWl4RlFVRkJkbXhDTEVsQlFVRjZSU3hGUVVFMFFpeEpRVlY0UW05d1FpeFZRVUZoZGxNc1YwRkJWemRYTEVWQlFVMXNTU3hOUVVGTloyWXNVVUZCVVc5VExFZEJRVkZCTEVWQlFVOHNSMEZCU1N4SFFVRkpMRVZCUVVjc1EwRkJReXhGUVVGSExFZEJRVWw2ZEVJc1JVRkJRWFZGTEVWQlFVbG5jVUlzUlVGQlFTeE5RVU0zUld4NVFpeE5RVUZOWjJZc1VVRkJVVzlUTEVsQlFYZENMR2xDUVVGU1FTeEpRVU16UWl4alFVRmxRU3hIUVVFd1FtcHdRaXhOUVVGc1FtbHdRaXhGUVVGTE5YRkNMRmxCUXpWQ01FSXNSVUZCU3pGQ0xGVkJRVmswY1VJc1JVRkJTelZ4UWl4WFFVVjBRaXhYUVVGWk5IRkNMRWRCUVhWQ2FuQkNMRTFCUVdacGNFSXNSVUZCUzJVc1UwRkRla0pxY1VJc1JVRkJTMmx4UWl4UFFVRlRaaXhGUVVGTFpTeFJRVVZ1UWl4bFFVRm5RbVlzUjBGQk1rSnFjRUlzVFVGQmJrSnBjRUlzUlVGQlMyZENMR0ZCUXpkQ2JIRkNMRVZCUVV0cmNVSXNWMEZCWVdoQ0xFVkJRVXRuUWl4WlFVVjJRaXhYUVVGWmFFSXNSMEZCZFVKcWNFSXNUVUZCWm1sd1FpeEZRVUZMYVVJc1UwRkRla0p1Y1VJc1JVRkJTMjF4UWl4UFFVRlRha0lzUlVGQlMybENMRkZCUlc1Q0xHTkJRV1ZxUWl4SFFVRXdRbXB3UWl4TlFVRnNRbWx3UWl4RlFVRkxhMElzV1VGRE5VSndjVUlzUlVGQlMyOXhRaXhWUVVGWmJFSXNSVUZCUzJ0Q0xGZEJSWFJDTEdkQ1FVRnBRbXhDTEVkQlFUUkNhbkJDTEUxQlFYQkNhWEJDTEVWQlFVdHRRaXhqUVVNNVFuSnhRaXhGUVVGTGNYRkNMRmxCUVdOdVFpeEZRVUZMYlVJc1pVRkhia01zUTBGeFNrd3NUMEZ5VEdsRGJIbENMRVZCUVZrMGVFSXNSVUZCUVdoeFFpeEhRV2xEZWtOd1NTeFBRVUZCSzBVc1pVRkJTWEYwUWl4RlFVRlRMM2hDTEZWQlFVRXNXVUZCUVN4RFFVRmlPRVFzU1VGQlFTeFhRVU5KTEU5QlFVOXpkRUlzUlVGQldWWXNVVUZCUTJoUkxHOUNRVUZ2UW01blFpeExRVUZOTEVWQlFVY3NSMEZEY0VRc1JVRkRSR3ROTEVsQlFVRXNVMEZCWTNSTUxFZEJRMVpwZDBJc1JVRkJRVUVzVVVGQllYSlJMRk5CUVZONFowSXNTMEZCVFN4RlFVRkhXU3hGUVVOc1F5eHJRMEZEUkhoQ0xFOUJRVUVyUlN4bFFVRkpjWFJDTEVWQlFVMHZlRUlzVlVGQlFTeFRRVUZCTEVOQlFWWTRSQ3hKUVVGQkxGZEJRMGtzVDBGQlQzTjBRaXhGUVVGWlZpeFJRVUZETDA4c2QwSkJRWGRDY0doQ0xFdEJRVTB3ZDBJc1JVRkJUeXhGUVVNMVJDeEZRVU5FZUd0Q0xFbEJRVUVzVTBGQlYzUk1MRWRCUTFCcGQwSXNSVUZCUVVFc1VVRkJZWFJRTEhkQ1FVRjNRblpvUWl4TFFVRk5MRVZCUVVkWkxFVkJRMnBFTEd0RFFVTkVlRUlzVDBGQlFTdEZMR1ZCUVVseGRFSXNSVUZCVlM5NFFpeFZRVUZCTEdGQlFVRXNRMEZCWkRoRUxFbEJRVUVzVjBGRFNTeFBRVUZQYzNSQ0xFVkJRVmxXTEZGQlFVTm9VU3h2UWtGQmIwSnVaMElzUzBGQlRTeEZRVUZITEVWQlEzQkVMRVZCUTBSclRTeEpRVUZCTEZOQlFXVjBUQ3hIUVVOWWFYZENMRVZCUVVGQkxGRkJRV0Z5VVN4VFFVRlRlR2RDTEV0QlFVMHNSVUZCUjFrc1JVRkRiRU1zYTBOQlEwUjRRaXhQUVVGQkswVXNaVUZCU1hGMFFpeEZRVUZOTDNoQ0xGVkJRVUVzVTBGQlFTeERRVUZXT0VRc1NVRkJRU3hYUVVOSkxFOUJRVTl6ZEVJc1JVRkJXVllzVVVGQlEyaFJMRzlDUVVGdlFtNW5RaXhMUVVGTkxFZEJRVWNzUlVGRGNFUXNSVUZEUkd0TkxFbEJRVUVzVTBGQlYzUk1MRWRCUTFCcGQwSXNSVUZCUVVFc1VVRkJZWEpSTEZOQlFWTjRaMElzUzBGQlRTeEZRVUZIV1N4RlFVTnNReXhyUTBGRFJIaENMRTlCUVVFclJTeGxRVUZKY1hSQ0xFVkJRVk12ZUVJc1ZVRkJRU3haUVVGQkxFTkJRV0k0UkN4SlFVRkJMRmRCUTBrc1QwRkJUM04wUWl4RlFVRlpWaXhSUVVGRGFGRXNiMEpCUVc5Q2JtZENMRXRCUVUwc1JVRkJSeXhGUVVOd1JDeEZRVU5FYTAwc1NVRkJRU3hUUVVGamRFd3NSMEZEVm1sM1FpeEZRVUZCUVN4UlFVRmhjbEVzVTBGQlUzaG5RaXhMUVVGTkxFVkJRVWRaTEVWQlEyeERMR3REUVVORWVFSXNUMEZCUVN0RkxHVkJRVWx4ZEVJc1JVRkJWeTk0UWl4VlFVRkJMR05CUVVFc1EwRkJaamhFTEVsQlFVRXNWMEZEU1N4UFFVRlBjM1JDTEVWQlFWbFdMRkZCUVVOb1VTeHZRa0ZCYjBKdVowSXNTMEZCVFN4RlFVRkhMRWRCUTNCRUxFVkJRMFJyVFN4SlFVRkJMRk5CUVdkQ2RFd3NSMEZEV21sM1FpeEZRVUZCUVN4UlFVRmhjbEVzVTBGQlUzaG5RaXhMUVVGTkxFVkJRVWRaTEVWQlEyeERMR3REUVVOTk5IZENMRVZCUVZWMmJFSXNWMEZCYWtJc1UwRkJhMEl3YTBJc1IwRlJaQ3hKUVVGTlN5eEZRVUZWTEVsQlFVbFJMRVZCUVZrc1EwRkJRU3hIUVcxQ2FFTXNUMEZzUW5OQ0xFMUJRV3hDWWl4RlFVRkxOWEZDTEZsQlEweHBja0lzUlVGQlVXcHlRaXhWUVVGWk5IRkNMRVZCUVVzMWNVSXNWMEZGVml4TlFVRm1OSEZDTEVWQlFVdGxMRk5CUTB4V0xFVkJRVkZWTEU5QlFWTm1MRVZCUVV0bExFOUJRVTgxYlVJc1MwRkJTU3hUUVVGQmFXNUNMRWRCUVZFc1QwRkJRWEpDTEVWQlFVMTZhMElzVjBGQlZ6aHNRaXhGUVVGTExFdEJSVFZETEUxQlFXNUNjRUlzUlVGQlMyZENMR0ZCUTB4WUxFVkJRVkZYTEZkQlFXRm9RaXhGUVVGTFowSXNXVUZGV0N4TlFVRm1hRUlzUlVGQlMybENMRk5CUTB4YUxFVkJRVkZaTEU5QlFWTnFRaXhGUVVGTGFVSXNVVUZGU2l4TlFVRnNRbXBDTEVWQlFVdHJRaXhaUVVOTVlpeEZRVUZSWVN4VlFVRlpiRUlzUlVGQlMydENMRmRCUlV3c1RVRkJjRUpzUWl4RlFVRkxiVUlzWTBGRFRHUXNSVUZCVVdNc1dVRkJZMjVDTEVWQlFVdHRRaXhoUVVWNFFtUXNSMEZGV0ZFc1JVRkJRUzk0UWl4VlFVRkJkVTBzVTBGQlFTeFhRVU5KTEVsQlFVMHlhMElzUlVGUFJpeERRVUZCTEVWQmJVSktMRTlCYkVKelFpeE5RVUZzUWpOM1FpeExRVUZMSzBZc1dVRkRURFJ4UWl4RlFVRkxOWEZDTEZWQlFWa3ZSaXhMUVVGTEswWXNWMEZGVUN4TlFVRm1MMFlzUzBGQlN6QjRRaXhUUVVOTVppeEZRVUZMWlN4UFFVRlRNWGhDTEV0QlFVc3dlRUlzVDBGQlR6VnRRaXhMUVVGSkxGTkJRVU5wYmtJc1IwRkJaMElzVDBGQlFVRXNSVUZCU3k5c1FpeFZRVUZWTEV0QlJUTkRMRTFCUVc1Q2FFMHNTMEZCU3pKNFFpeGhRVU5NYUVJc1JVRkJTMmRDTEZkQlFXRXplRUlzUzBGQlN6SjRRaXhaUVVWU0xFMUJRV1l6ZUVJc1MwRkJTelI0UWl4VFFVTk1ha0lzUlVGQlMybENMRTlCUVZNMWVFSXNTMEZCU3pSNFFpeFJRVVZFTEUxQlFXeENOWGhDTEV0QlFVczJlRUlzV1VGRFRHeENMRVZCUVV0clFpeFZRVUZaTjNoQ0xFdEJRVXMyZUVJc1YwRkZSaXhOUVVGd1FqZDRRaXhMUVVGTE9IaENMR05CUTB4dVFpeEZRVUZMYlVJc1dVRkJZemw0UWl4TFFVRkxPSGhDTEdGQlJYSkNia0lzUjBGSldHRXNSVUZCVXk5NFFpeFZRVUZCZDNoQ0xGVkJRVlFzVTBGQlZYaHNRaXhIUVVOT0xFbEJRVTE1YkVJc1JVRkJVM3BzUWl4SFFVRkxMRWxCUVVrd2JFSXNSVUZCUVVFc1lVRmhlRUlzUjBGYVNXNTRRaXhMUVVGTEswWXNWVUZCVlhaRUxGRkJRMll3ZFVJc1JVRkJUMjVHTEc5Q1FVRnZRaXhGUVVGSEwzSkNMRXRCUVVzclJpeFhRVU51UXk5R0xFdEJRVXN3ZUVJc1QwRkJUMngyUWl4UlFVTmFNSFZDTEVWQlFVOHZSU3h4UWtGQmNVSXNSVUZCUjI1elFpeExRVUZMTUhoQ0xGRkJRVkVzVTBGQlEwc3NSMEZCWjBJc1QwRkJRVUVzUlVGQlMyUXNWVUZCVlVNc1JVRkJUeXhKUVVOb1JTeEhRVUZ1UW14NFFpeExRVUZMTW5oQ0xGbEJRMHhVTEVWQlFVODFUQ3hYUVVGWExFVkJRVWQwYkVJc1MwRkJTeko0UWl4WlFVTllMRWRCUVdZemVFSXNTMEZCU3pSNFFpeFJRVU5NVml4RlFVRlBka3dzVlVGQlZTeEZRVUZITTJ4Q0xFdEJRVXMwZUVJc1VVRkRVQ3hIUVVGc1FqVjRRaXhMUVVGTE5uaENMRmRCUTB4WUxFVkJRVTgxVEN4WFFVRlhMRVZCUVVkMGJFSXNTMEZCU3paNFFpeFhRVU14UWpkNFFpeExRVUZMT0hoQ0xGbEJRVmwwZGtJc1VVRkRha0l3ZFVJc1JVRkJUMnhNTEZsQlFWa3NSVUZCUjJodFFpeExRVUZMT0hoQ0xHTkJRekZDY20xQ0xFVkJRMFFzVDBGQlQzbHNRaXhGUVVGUGJrc3NiVUpCUldaNVN5eEZRVUZYU2l4WlFVRnNRaXhUUVVGdFFrTXNSMEZGWml4SlFVUkJMRWxCUVUxRExFVkJRVk5FTEdGQlFXbENSU3hGUVVGcFFtNUNMR0ZCUVVkcFFpeEZRVUZSTEVsQlFVbEZMR1ZCUVd0Q1JpeEhRVUZSVEN4RlFVRlZMRWxCUVVsUkxFVkJRMnBIUml4RlFVRlBkbG9zWTBGRFRuVmFMRVZCUVU5NFdpeGpRVVZZTEU5QlFWRjNXaXhGUVVGUE4xb3NhMEpCUTFnc1MwRkJTeXhGUVVORWIxb3NSVUZCV1ZZc1VVRkJRMjVRTEcxQ1FVRnRRbWRSTEVWQlFWTXNSVUZCUjAwc1JVRkJUMnhpTEdOQlEyNUVMRTFCUTBvc1MwRkJTeXhGUVVORWEySXNSVUZCVDI1WkxGbEJRVmsyV0N4RlFVRlJWU3hSUVVGUkxGZEJRVTBzVDBGQlFXSXNSVUZCUVVFc1VVRkJZWEpRTERCQ1FVRXdRbmRRTEVWQlFWTXNSVUZCUjA0c1JVRkJUVlVzV1VGQldVVXNSMEZCVTFvc1JVRkJPVVVzU1VGRGVrTXNUVUZEU2l4TFFVRkxMRVZCUTBSTkxFVkJRVkZYTEZkQlFXRk1MRVZCUVU4ellpeFpRVU0xUWl4TlFVTktMRXRCUVVzc1JVRkRSSEZpTEVWQlFWRlpMRTlCUVZOT0xFVkJRVTl3WWl4WFFVTjRRaXhOUVVOS0xFdEJRVXNzUlVGRFJEaGhMRVZCUVZGaExGVkJRVmxRTEVWQlFVOHpZaXhaUVVNelFpeE5RVU5LTEV0QlFVc3NSVUZEUkhGaUxFVkJRVkZqTEZsQlFXTlNMRVZCUVU5c1lpeGhRVU0zUWl4TlFVTktMRkZCUVZOcllpeEZRVUZQZWxrc1dVRkhlRUlzVDBGQlQyMVpMRWRCUlZoUkxFVkJRVUV2ZUVJc1ZVRkJRWFZPTEdkQ1FVRkJMRmRCUTBrc1QwRkJUMmhPTEV0QlFVdHBlRUlzWVVGRlZFOHNSVUZCYVVKMmEwSXNhMEpCUVhoQ0xGTkJRWGxDYjJ0Q0xFZEJRM0pDTEU5QlFVOUhMRVZCUVZsS0xGbEJRVmxETEVsQlJYUkRSeXhEUVVGRUxFTkJja3hCTEVOQlFXbERXQ3hGUVVGQlFTeDFRa0ZCY0VKS0xFVkJRVUZsTEdOQmMweGlMRWxCUVVGUkxFVkJRVUVzVTBGQlFYaHhRaXhIUVVWSkxGTkJRVUYzY1VJc1JVRkJXWEpDTEVkQlFWb3NTVUZCUVd4d1FpeEZRVTFKUkN4alFXZENTSGhJTEZsQmRrSkVhWGxDTEVWQlFVRXZiRUlzU1VGQlFYcEZMRVZCUVRSQ0xFbEJVWGhDYjNCQ0xFVkJRVmxXTEZGQlFVTTNVaXhYUVVGWE4xY3NSVUZCVFd4SkxFMUJRVTFuWml4UlFVRlJiMU1zUjBGQlVVRXNSVUZCVHl4SFFVRkpMRWRCUVVrc1JVRkJSeXhIUVVGSmVuUkNMRVZCUVVGMVJTeEZRVUZKZDNGQ0xFVkJRVUVzVFVGRGVrVXhlVUlzVFVGQlRXZG1MRkZCUVZGdlV5eEpRVUYzUWl4cFFrRkJVa0VzU1VGRE0wSXNZMEZCWlVFc1IwRkJNRUpxY0VJc1RVRkJiRUpwY0VJc1JVRkJTM1ZDTEZsQlF6VkNlbkZDTEVWQlFVdDVjVUlzVlVGQldYWkNMRVZCUVV0MVFpeFhRVVYwUWl4WFFVRlpka0lzUjBGQmRVSnFjRUlzVFVGQlptbHdRaXhGUVVGTGQwSXNVMEZEZWtJeGNVSXNSVUZCU3pCeFFpeFBRVUZUZUVJc1JVRkJTM2RDTEZGQlJXNUNMR1ZCUVdkQ2VFSXNSMEZCTWtKcWNFSXNUVUZCYmtKcGNFSXNSVUZCUzJkQ0xHRkJRemRDYkhGQ0xFVkJRVXRyY1VJc1YwRkJZV2hDTEVWQlFVdG5RaXhaUVVWMlFpeHJRa0ZCYlVKb1FpeEhRVUU0UW1wd1FpeE5RVUYwUW1sd1FpeEZRVUZMZVVJc1owSkJRMmhETTNGQ0xFVkJRVXN5Y1VJc1kwRkJaMEo2UWl4RlFVRkxlVUlzYVVKQlIzSkRMRU5CSzBkTUxFOUJka2xyUTNoNVFpeEZRVUZaYjNsQ0xFVkJRVUY0Y1VJc1IwRjVRakZEY0Vrc1QwRkJRU3RGTEdWQlFVazJkRUlzUlVGQlUzWjVRaXhWUVVGQkxGbEJRVUVzUTBGQllqaEVMRWxCUVVFc1YwRkRTU3hQUVVGUGMzUkNMRVZCUVZsV0xGRkJRVU5vVVN4dlFrRkJiMEp1WjBJc1MwRkJUU3hGUVVGSExFVkJRM0JFTEVWQlEwUnJUU3hKUVVGQkxGTkJRV04wVEN4SFFVTldhWGRDTEVWQlFVRkJMRkZCUVdGeVVTeFRRVUZUZUdkQ0xFdEJRVTBzUlVGQlIxa3NSVUZEYkVNc2EwTkJRMFI0UWl4UFFVRkJLMFVzWlVGQlNUWjBRaXhGUVVGTmRubENMRlZCUVVFc1UwRkJRU3hEUVVGV09FUXNTVUZCUVN4WFFVTkpMRTlCUVU5emRFSXNSVUZCV1ZZc1VVRkJRMmhSTEc5Q1FVRnZRbTVuUWl4TFFVRk5MRVZCUVVjc1IwRkRjRVFzUlVGRFJHdE5MRWxCUVVFc1UwRkJWM1JNTEVkQlExQnBkMElzUlVGQlFVRXNVVUZCWVhKUkxGTkJRVk40WjBJc1MwRkJUU3hGUVVGSFdTeEZRVU5zUXl4clEwRkRSSGhDTEU5QlFVRXJSU3hsUVVGSk5uUkNMRVZCUVZWMmVVSXNWVUZCUVN4aFFVRkJMRU5CUVdRNFJDeEpRVUZCTEZkQlEwa3NUMEZCVDNOMFFpeEZRVUZaVml4UlFVRkRhRkVzYjBKQlFXOUNibWRDTEV0QlFVMHNSVUZCUnl4RlFVTndSQ3hGUVVORWEwMHNTVUZCUVN4VFFVRmxkRXdzUjBGRFdHbDNRaXhGUVVGQlFTeFJRVUZoY2xFc1UwRkJVM2huUWl4TFFVRk5MRVZCUVVkWkxFVkJRMnhETEd0RFFVTkVlRUlzVDBGQlFTdEZMR1ZCUVVrMmRFSXNSVUZCWVhaNVFpeFZRVUZCTEdkQ1FVRkJMRU5CUVdwQ09FUXNTVUZCUVN4WFFVTkpMRTlCUVU5emRFSXNSVUZCV1ZZc1VVRkJRMmhSTEc5Q1FVRnZRbTVuUWl4TFFVRk5MRWRCUVVjc1JVRkRjRVFzUlVGRFJHdE5MRWxCUVVFc1UwRkJhMEowVEN4SFFVTmthWGRDTEVWQlFVRkJMRkZCUVdGeVVTeFRRVUZUZUdkQ0xFdEJRVTBzUlVGQlIxa3NSVUZEYkVNc2EwTkJRMDF2ZUVJc1JVRkJWUzlzUWl4WFFVRnFRaXhUUVVGclFqQnJRaXhIUVUxa0xFbEJRVTFMTEVWQlFWVXNTVUZCU1dkQ0xFVkJRV0VzUTBGQlFTeEhRV0ZxUXl4UFFWcHpRaXhOUVVGc1FuSkNMRVZCUVV0MVFpeFpRVU5NYkVJc1JVRkJVV3RDTEZWQlFWbDJRaXhGUVVGTGRVSXNWMEZGVml4TlFVRm1ka0lzUlVGQlMzZENMRk5CUTB4dVFpeEZRVUZSYlVJc1QwRkJVM2hDTEVWQlFVdDNRaXhSUVVWSUxFMUJRVzVDZUVJc1JVRkJTMmRDTEdGQlEweFlMRVZCUVZGWExGZEJRV0ZvUWl4RlFVRkxaMElzV1VGRlNpeE5RVUYwUW1oQ0xFVkJRVXQ1UWl4blFrRkRUSEJDTEVWQlFWRnZRaXhqUVVGblFucENMRVZCUVV0NVFpeGxRVVV4UW5CQ0xFZEJSVmhuUWl4RlFVRkJkbmxDTEZWQlFVRjFUU3hUUVVGQkxGZEJRMGtzU1VGQlRUSnJRaXhGUVV0R0xFTkJRVUVzUlVGaFNpeFBRVnB6UWl4TlFVRnNRak4zUWl4TFFVRkxhM2xDTEZsQlEweDJRaXhGUVVGTGRVSXNWVUZCV1d4NVFpeExRVUZMYTNsQ0xGZEJSVkFzVFVGQlpteDVRaXhMUVVGTGJYbENMRk5CUTB4NFFpeEZRVUZMZDBJc1QwRkJVMjU1UWl4TFFVRkxiWGxDTEZGQlJVRXNUVUZCYmtKdWVVSXNTMEZCU3pKNFFpeGhRVU5NYUVJc1JVRkJTMmRDTEZkQlFXRXplRUlzUzBGQlN6SjRRaXhaUVVWRUxFMUJRWFJDTTNoQ0xFdEJRVXR2ZVVJc1owSkJRMHg2UWl4RlFVRkxlVUlzWTBGQlowSndlVUlzUzBGQlMyOTVRaXhsUVVWMlFucENMRWRCU1ZoeFFpeEZRVUZUZG5sQ0xGVkJRVUYzZUVJc1ZVRkJWQ3hUUVVGVmVHeENMRWRCUTA0c1NVRkJUWGxzUWl4RlFVRlRlbXhDTEVkQlFVc3NTVUZCU1RCc1FpeEZRVUZCUVN4aFFWTjRRaXhIUVZKelFpeEhRVUZzUW01NFFpeExRVUZMYTNsQ0xGZEJRMHhvUWl4RlFVRlBOVXdzVjBGQlZ5eEZRVUZIZEd4Q0xFdEJRVXRyZVVJc1YwRkRNVUpzZVVJc1MwRkJTMjE1UWl4UFFVRlBNM1pDTEZGQlExb3dkVUlzUlVGQlQyeE1MRmxCUVZrc1JVRkJSMmh0UWl4TFFVRkxiWGxDTEZGQlExSXNSMEZCYmtKdWVVSXNTMEZCU3pKNFFpeFpRVU5NVkN4RlFVRlBOVXdzVjBGQlZ5eEZRVUZIZEd4Q0xFdEJRVXN5ZUVJc1dVRkRTaXhIUVVGMFFqTjRRaXhMUVVGTGIzbENMR1ZCUTB4c1FpeEZRVUZQZGt3c1ZVRkJWU3hGUVVGSE0yeENMRXRCUVV0dmVVSXNaMEpCUTNoQ00yMUNMRVZCUTBRc1QwRkJUM2xzUWl4RlFVRlBia3NzYlVKQlJXWnBUQ3hGUVVGWFdpeFpRVUZzUWl4VFFVRnRRa01zUjBGRlppeEpRVVJCTEVsQlFVMURMRVZCUVZORUxHRkJRV2xDUlN4RlFVRnBRbTVDTEdGQlFVZHBRaXhGUVVGUkxFbEJRVWxGTEdWQlFXdENSaXhIUVVGUlRDeEZRVUZWTEVsQlFVbG5RaXhGUVVOcVIxWXNSVUZCVDNaYUxHTkJRMDUxV2l4RlFVRlBlRm9zWTBGRldDeFBRVUZSZDFvc1JVRkJUemRhTEd0Q1FVTllMRXRCUVVzc1JVRkRSSFZhTEVWQlFWRnJRaXhWUVVGWldpeEZRVUZQTTJJc1dVRkRNMElzVFVGRFNpeExRVUZMTEVWQlEwUnhZaXhGUVVGUmJVSXNUMEZCVTJJc1JVRkJUMnhpTEdGQlEzaENMRTFCUTBvc1MwRkJTeXhGUVVORU5HRXNSVUZCVVZjc1YwRkJZVXdzUlVGQlR6TmlMRmxCUXpWQ0xFMUJRMG9zUzBGQlN5eEZRVU5FY1dJc1JVRkJVVzlDTEdOQlFXZENaQ3hGUVVGUGNHSXNWMEZETDBJc1RVRkRTaXhSUVVGVGIySXNSVUZCVDNwWkxGbEJSM2hDTEU5QlFVOXRXU3hIUVVWWVowSXNSVUZCUVhaNVFpeFZRVUZCZFU0c1owSkJRVUVzVjBGRFNTeFBRVUZQYUU0c1MwRkJTMmw0UWl4aFFVVlVaU3hGUVVGcFFpOXJRaXhyUWtGQmVFSXNVMEZCZVVKdmEwSXNSMEZEY2tJc1QwRkJUMWNzUlVGQllWb3NXVUZCV1VNc1NVRkZka05YTEVOQlFVUXNRMEYyU1VFc1EwRkJhME51UWl4RlFVRkJRU3gxUWtGQmNrSktMRVZCUVVGMVFpeGpRWGRKYUVJc1EwRjZXbk5DTEVOQlFVRXpiMElzUlVGQlRXOXVRaXhUUVVGT2NHNUNMRk5CZVZwMFFpeERRVUZCTEVkQlFVRXNRMEY2V2tRc1EwRkJhVUpCTEVsQlFVRkJMRVZCZVZwb1FpeERRVUZCTERSQ1JXcGFTU3hUUVVGblEyZHdRaXcyU0VGRE5VSkRMRVZCUVdNc1NVRkJTWEJETEVsQlJYQkNjVU1zUlVGQlpVTXNUMEZCVHpsbUxFMUJRVTBzZVVSQlJVd3JaaXhGUVVGaFF5eEZRVUZCT1hoQ0xFMUJRV0lyZUVJc1IwRkJZU3hOUVVFM1FpeEpRVUZOTTJkQ0xFbEJRMVEwWjBJc1JVRkJaMEpLTEU5QlFVOXNhMElzVDBGQlR5eERRVUZEYVd0Q0xFVkJRVTEyWjBJc1NVRkRja00yWjBJc1UwRkZSVU1zUlVOTVVpeFRRVUU0UWpsblFpeEhRVXRvUXl4SlFVcEJMRWxCUVVrM1V5eEZRVU5CT0VJc1JVRkJVeXhGUVVOVU9IaENMRVZCUVZrc1JVRkZVR3AzUWl4RlFVRkpMRVZCUVVkQkxFVkJRVWtzU1VGRmFFSTNRaXhKUVVGbExFdEJSR1k1UWl4RlFVRkpObE1zUlVGQlR5dG5RaXhSUVVOakxFVkJRVWxxZDBJc1JVRkRia0lzU1VGQlNqTkVMRWRCU0dFeVJDeExRVkYyUWl4TlFVRlBMRU5CUVVWbmQwSXNTMEZCVFRkNFFpeEZRVUZSSzNoQ0xGZEJRVmxFTEVWQlEzWkRMRU5FVkhGQ1JTeERRVUZ2UWt3c1IwRkZha01zUzBGQlNVVXNSVUZCUzBFc1RVRkJVVVlzUlVGQlRYQjNRaXhQUVVGVGMzZENMRVZCUVV0RkxHMUNRVXRxUTFRc1JVRkJUMHNzWVVGSVVFTXNSMEZFUVVRc1JVRkJVVUVzUlVGQlRUTnlRaXhOUVVGTk5uSkNMRVZCUVV0RkxHRkJRMVF2Y2tJc1RVRkJUU3hGUVVGSE5uSkNMRVZCUVV0QkxFMUJRemxDVUN4RlFVRlBTeXhGUVVGTk0zSkNMRTFCUVUwMmNrSXNSVUZCUzBFc1RVRk5OVUlzU1VGQlRVa3NSVUZCVlRkd1FpeEZRVUZOYjI1Q0xFOUJRVTlsTEZsQlFWbEtMRmxCUVZsNVFpeEhRVVZ5UkN4SFFVRkpTeXhGUVVGUmRFSXNZMEZETWtJc1VVRkJia04xUWl4RlFVRkJZaXhGUVVGWkwzVkNMRWxCUVVreWRrSXNSVUZCVVhaQ0xHMUNRVUZYTEVsQlFVRjNRaXhIUVVGQlFTeEZRVUZGUXl4dFFrRkpla01zU1VGQlRVTXNSVUZCYTBJc1NVRkJTWGh5UWl4blFrRkROVUo1Y1VJc1JVRkJXWEJ0UWl4SlFVRkpaMjVDTEVWQlFWRjJRaXhYUVVGWk1FSXNSMEZGY0VNc1NVRkJUVU1zUlVGQlZ5eEpRVUZKYW5GQ0xFVkJRVTF2YmtJc1QwRkJUM1ZDTEdGQlFXRXNRMEZETTBOTUxGZEJRVmwxUWl4RlFVRlJka0lzWVVGSGJFSTBRaXhGUVVGbExFbEJRVWxvTUVJc1RVRkRia0pwTUVJc1JVRkJaU3hKUVVGSlF5eFhRVUZUTEVOQlF6bENReXhOUVVGUExGTkJRVU5rTEVWQlFVOWxMRVZCUVZWc2RFSXNSMEZEY2tJNGMwSXNSVUZCWVRsM1FpeExRVUZMSzNaQ0xFOUJRVTl2UWl4TFFVRkxhRUlzUlVGQlQyVXNTVUZEY2tOc2RFSXNVMEZCUVVFc1QwRkJWMmxDTEVWQlEyUXNSVUZEUkcxelFpeG5Ra0ZCYVVJc1ZVRkhja0o0UWl4RlFVRmxMRU5CUTFoMGMwSXNWVUZCVjIxMFFpeEZRVUZSYm5SQ0xGVkJRMjVDTW5KQ0xFOUJRVkYzUWl4RlFVRlJlRUlzVDBGRGFFSkRMRmRCUVZsMVFpeEZRVUZSZGtJc1YwRkRjRUpGTEZWQlFWZHhRaXhGUVVGUmNrSXNWVUZEYmtKRExGbEJRV0Z2UWl4RlFVRlJjRUlzV1VGRGNrSnVjRUlzVDBGQlVUQnhRaXhGUVVGblFqRnhRaXhQUVVONFFuZHdRaXhQUVVGUmNVSXNTVUZGVUhKNVFpeE5RVUZMTEZOQlFVTXllVUlzUjBGRFNGSXNSVUZCVTNCQ0xGVkJRVmswUWl4RFFVTjZRaXhKUVVOTkxFOUJRVU1zVTBGQlEyaHpRaXhIUVVWS0xFbEJRVWxwYzBJc1JVRkVTbFFzUlVGQlUzQkNMRlZCUVZrc1JVRkhha0kyUWl4RlFVRlJhakJDTEU5QlJGTXNhVUpCUVZablNTeEhRVUZ6UWl4VlFVRlhRU3hGUVVONlFrRXNSVUZCVDJ4Q0xFMUJSVkJyUWl4SFFVVnVRakJ5UWl4RlFVRmhSU3hOUVVGTlN5eEhRVVZ1UW1Jc1JVRkJVWEpDTEZWQlFWa3NSMEZCU3psdlFpeFJRVUZSWjNKQ0xFMUJRVTFCTEVWQlF6TkRMRWxCUTFFc1UwRkJReXhYUVVOTWVrSXNSVUZCYTBJc1QwRkJRMWtzUlVGQlVYWkNMRmxCUXpOQ05rSXNSVUZCWVdwUkxFMUJSV0lyVUN4RlFVRlRiRUlzWTBGQlowSnBRaXhGUVVGblFqRnhRaXhQUVVGUGFFSXNVVUZEYUVReWNrSXNSVUZCVTI1Q0xFOUJRVk5MTEU5QlFVOXNhMElzVDBGQlQybHNRaXhIUVVGamVuQkNMRk5CUVZNc1UwRkZka1FzU1VGQlRXdHhRaXhGUVVGblFsWXNSVUZCVTNKRExGbEJRM3BDWjBRc1JVTnNSR2hDTEZOQlFXZERia0lzUjBGSGJFTXNTVUZHUVN4SlFVRk5PV2RDTEVWQlFWTjNaMElzVDBGQlR6bG1MRTFCUVUwc1NVRkRlRUozYUVJc1JVRkJVU3hGUVVOTWNFSXNSVUZCVHl4TFFVTldPV2RDTEVWQlFVOXJhVUlzUjBGQmFVSXNTVUZCVUhCQ0xFVkJRV1VzU1VGRGFFTkJMRXRCUVdkQ0xFVkJRMmhDYjBJc1NVRkhTaXhQUVVSQmJHbENMRVZCUVU5cmFVSXNSMEZCVTNCQ0xFVkJRMVE1WjBJc1JVRkJUeTlMTEUxQlFVMHNSVUZCUjJsMFFpeEZRVUZSTEVWQlEyNURMRU5FZDBNd1EwTXNRMEZEZEVKSUxFVkJRV001YUVJc1dVRkZiRUpyYVVJc1VVRkJVVU1zVDBGQlQxZ3NUVUZEV0d4Q0xFOUJRVTlzYTBJc1QwRkJUeXhEUVVGRE1teENMRVZCUVcxQ1JDeEpRVVV4UXl4dFFrRTFSVzFDY2tJc1IwRkJRU3hGUVVGQk1rSXNSVUZCUVhaNFFpeEZRVUZCY1hoQ0xGRkJRVkZITEdsWlFUaEZkRU1zTmtKQlJVc3NVMEZCTmtKRExFZEJReTlDTEU5QlFXZEVMRWxCUVhwRFFTeEZRVUZMZW0xQ0xGRkJRVkVzYzBKQlEzaENJbjA9XG4iLCJpbXBvcnQgeyBGaWxlQ2FjaGUgfSBmcm9tICcuL2ZpbGVfY2FjaGUvZmlsZV9jYWNoZS5tanMnO1xuaW1wb3J0IHsgZXhlY3V0ZUJ1aWxkIH0gZnJvbSAnLi9sb29wLm1qcyc7XG5pbXBvcnQgeyBnZXRBcmdzRnJvbVBhcmFtc0ZpbGUgfSBmcm9tICcuL3BhcmFtc19hcmdfZmlsZS5tanMnO1xuaW1wb3J0IHdvcmtlciBmcm9tICcuL3Byb3RvY29sL3dvcmtlci5janMnO1xuaWYgKCF3b3JrZXIuaXNQZXJzaXN0ZW50V29ya2VyKHByb2Nlc3MuYXJndikpIHtcbiAgICBjb25zdCBpc1JlbW90ZUV4ZWN1dGlvbiA9IHByb2Nlc3MuY3dkKCkuc3RhcnRzV2l0aCgnL2IvZi93LycpO1xuICAgIC8vIERldGVjdCBpZiB3ZSBydW4gb3V0c2lkZSBzYW5kYm94IGFuZCB3aXRob3V0IFJCRS5cbiAgICAvLyBUaGlzIGlzIGRpc2FsbG93ZWQgYXMgaXQgY2FuIHJlc3VsdCBpbiBUUyBwaWNraW5nIHVwIHVucmVsYXRlZCBmaWxlcyxcbiAgICAvLyBzcGVjaWZpY2FsbHkgb24gV2luZG93cy5cbiAgICBpZiAoIWlzUmVtb3RlRXhlY3V0aW9uICYmICFwcm9jZXNzLmN3ZCgpLmluY2x1ZGVzKCdzYW5kYm94JykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJdCdzIGRpc2FsbG93ZWQgdG8gY29tcGlsZSBvdXRzaWRlIG9mIHNhbmRib3gvb3Igb3V0c2lkZSBvZiBhIHdvcmtlci5gKTtcbiAgICB9XG4gICAgY29uc3QgZXhpdENvZGUgPSBhd2FpdCBleGVjdXRlQnVpbGQoZ2V0QXJnc0Zyb21QYXJhbXNGaWxlKCksIG51bGwpO1xuICAgIHByb2Nlc3MuZXhpdENvZGUgPSBleGl0Q29kZTtcbn1cbmlmICh3b3JrZXIuaXNQZXJzaXN0ZW50V29ya2VyKHByb2Nlc3MuYXJndikpIHtcbiAgICBjb25zdCBmaWxlQ2FjaGUgPSBuZXcgRmlsZUNhY2hlKCk7XG4gICAgY29uc3QgcHJvZ3JhbUNhY2hlID0gbmV3IE1hcCgpO1xuICAgIHdvcmtlci5lbnRlcldvcmtlckxvb3AoYXN5bmMgKHIpID0+IHtcbiAgICAgICAgaWYgKHIuaW5wdXRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gaW5wdXRzIHNwZWNpZmllZCBpbiBgV29ya1JlcXVlc3RgLicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIE1ha2UgZGVidWdnaW5nIGVhc2llci4gRm9yd2FyZCBjb25zb2xlIGVycm9yIG91dHB1dCB0byB0aGUgd29ya2VyXG4gICAgICAgIC8vIHJlc3BvbnNlLlxuICAgICAgICBjb25zb2xlLmVycm9yID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgIHIub3V0cHV0LndyaXRlKGAke2FyZ3Muam9pbignICcpfVxcbmApO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXdhaXQgZXhlY3V0ZUJ1aWxkKHIuYXJndW1lbnRzLCB7XG4gICAgICAgICAgICBmaWxlQ2FjaGUsXG4gICAgICAgICAgICBwcm9ncmFtQ2FjaGUsXG4gICAgICAgICAgICByZXE6IHIsXG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuIiwiaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHsgZXhlY3Jvb3REaXNrUGF0aCB9IGZyb20gJy4vY29uc3RhbnRzLm1qcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbi8vIE5vdGU6IEZvciBhY3Rpb25zIHN1cHBvcnRpbmcgd29ya2VycywgdGhlIGFyZ3MgYXJlIHB1dCBpbiBhIHBhcmFtcyBmaWxlLFxuLy8gd2hlcmUgdGhlIHBhdGggdG8gdGhpcyBmaWxlIGlzIHBhc3NlZCB3aXRoIGFuIGBAYCBwcmVmaXguXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXJnc0Zyb21QYXJhbXNGaWxlKCkge1xuICAgIGNvbnN0IGFyZ3MgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XG4gICAgY29uc3QgZmxhZ0FyZyA9IGFyZ3MuZmluZChzID0+IHMuc3RhcnRzV2l0aCgnQCcpKTtcbiAgICAvLyBJZiBCYXplbCB1c2VzIGEgcGFyYW1ldGVyIGZpbGUsIHdlIGtub3cgdGhhdCBpdCBwYXNzZXMgdGhlIGZpbGVcXFxuICAgIC8vIGluIHRoZSBmb2xsb3dpbmcgZm9ybWF0OiBcImFyZzAgYXJnMSAtLXBhcmFtLWZpbGU9e3BhdGhfdG9fcGFyYW1fZmlsZX1cIlxuICAgIGlmIChmbGFnQXJnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gUGFyYW1zIGZpbGUgaXMgYWx3YXlzIHNwZWNpZmllZCBhcyBhbiBleGVjLXBhdGgsIGJ1dCB3ZSBhcmUgZXhlY3V0aW5nIGZyb21cbiAgICAgICAgLy8gdGhlIGBiYXplbC1iaW5gIGRpcmVjdG9yeSwgc28gd2UgbmVlZCB0byByZXNvbHZlIGFuIGFic29sdXRlIHBhdGguXG4gICAgICAgIGNvbnN0IHBhcmFtc0ZpbGVFeGVjUGF0aCA9IGZsYWdBcmcuc3BsaXQoJ0AnKVsxXTtcbiAgICAgICAgY29uc3QgcGFyYW1zRmlsZURpc2tQYXRoID0gcGF0aC5qb2luKGV4ZWNyb290RGlza1BhdGgsIHBhcmFtc0ZpbGVFeGVjUGF0aCk7XG4gICAgICAgIHJldHVybiBmcy5yZWFkRmlsZVN5bmMocGFyYW1zRmlsZURpc2tQYXRoLCAndXRmOCcpLnRyaW0oKS5zcGxpdCgnXFxuJyk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgcGFyYW1zIGZsYWcgZmlsZS4nKTtcbn1cbiJdLCJuYW1lcyI6WyJDYWNoZSIsIm5hbWUiLCJtYXAiLCJNYXAiLCJjb25zdHJ1Y3RvciIsInRoaXMiLCJzZXQiLCJrZXkiLCJ2YWx1ZSIsImdldCIsInVwZGF0ZUNhY2hlIiwiZW50cnkiLCJkZWxldGUiLCJldmljdCIsImZyYWN0aW9uIiwib3JpZ2luYWxTaXplIiwic2l6ZSIsIm51bWJlcktleXNUb0Ryb3AiLCJNYXRoIiwiY2VpbCIsImtleXMiLCJGaWxlQ2FjaGUiLCJmaWxlQ2FjaGUiLCJsYXN0RGlnZXN0cyIsImNhbm5vdEV2aWN0IiwibWF4TWVtb3J5VXNhZ2UiLCJpbnB1dHMiLCJwYXRoIiwiZGlnZXN0IiwiZW50cmllcyIsImlzU2FtZURpZ2VzdCIsImNvbnNvbGUiLCJlcnJvciIsImdldExhc3REaWdlc3QiLCJmaWxlUGF0aCIsImdldENhY2hlIiwicHV0Q2FjaGUiLCJtYXliZUZyZWVNZW1vcnkiLCJpbkNhY2hlIiwic2hvdWxkRnJlZU1lbW9yeSIsImhlYXBVc2FnZSIsInByb2Nlc3MiLCJtZW1vcnlVc2FnZSIsImhlYXBVc2VkIiwiZHJvcHBlZCIsImEiLCJiIiwibGVuZ3RoIiwiaSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uc3RhbnRzIiwiT19SRE9OTFkiLCJPX1dST05MWSIsIk9fUkRXUiIsIlNfSUZNVCIsIlNfSUZSRUciLCJTX0lGRElSIiwiU19JRkNIUiIsIlNfSUZCTEsiLCJTX0lGSUZPIiwiU19JRkxOSyIsIlNfSUZTT0NLIiwiT19DUkVBVCIsIk9fRVhDTCIsIk9fTk9DVFRZIiwiT19UUlVOQyIsIk9fQVBQRU5EIiwiT19ESVJFQ1RPUlkiLCJPX05PQVRJTUUiLCJPX05PRk9MTE9XIiwiT19TWU5DIiwiT19TWU1MSU5LIiwiT19ESVJFQ1QiLCJPX05PTkJMT0NLIiwiU19JUldYVSIsIlNfSVJVU1IiLCJTX0lXVVNSIiwiU19JWFVTUiIsIlNfSVJXWEciLCJTX0lSR1JQIiwiU19JV0dSUCIsIlNfSVhHUlAiLCJTX0lSV1hPIiwiU19JUk9USCIsIlNfSVdPVEgiLCJTX0lYT1RIIiwiRl9PSyIsIlJfT0siLCJXX09LIiwiWF9PSyIsIlVWX0ZTX1NZTUxJTktfRElSIiwiVVZfRlNfU1lNTElOS19KVU5DVElPTiIsIlVWX0ZTX0NPUFlGSUxFX0VYQ0wiLCJVVl9GU19DT1BZRklMRV9GSUNMT05FIiwiVVZfRlNfQ09QWUZJTEVfRklDTE9ORV9GT1JDRSIsIkNPUFlGSUxFX0VYQ0wiLCJDT1BZRklMRV9GSUNMT05FIiwiQ09QWUZJTEVfRklDTE9ORV9GT1JDRSIsIlN0YXRzXzEiLCJTdGF0cyIsImNvbnN0YW50c18xIiwicmVxdWlyZSQkMCIsIlN0YXRzJDEiLCJidWlsZCIsIm5vZGUiLCJiaWdpbnQiLCJzdGF0cyIsInVpZCIsImdpZCIsImF0aW1lIiwibXRpbWUiLCJjdGltZSIsImdldFN0YXROdW1iZXIiLCJudW1iZXIiLCJCaWdJbnQiLCJyZGV2IiwiYmxrc2l6ZSIsImlubyIsImdldFNpemUiLCJibG9ja3MiLCJiaXJ0aHRpbWUiLCJhdGltZU1zIiwiZ2V0VGltZSIsIm10aW1lTXMiLCJjdGltZU1zIiwiYmlydGh0aW1lTXMiLCJhdGltZU5zIiwibXRpbWVOcyIsImN0aW1lTnMiLCJiaXJ0aHRpbWVOcyIsImRldiIsIm1vZGUiLCJubGluayIsIl9jaGVja01vZGVQcm9wZXJ0eSIsInByb3BlcnR5IiwiTnVtYmVyIiwiaXNEaXJlY3RvcnkiLCJpc0ZpbGUiLCJpc0Jsb2NrRGV2aWNlIiwiaXNDaGFyYWN0ZXJEZXZpY2UiLCJpc1N5bWJvbGljTGluayIsImlzRklGTyIsImlzU29ja2V0IiwiZGVmYXVsdCIsImV4cG9ydHMiLCJidWZmZXJGcm9tIiwiYnVmZmVyQWxsb2NVbnNhZmUiLCJCdWZmZXIiLCJidWZmZXJfMSIsImJ1ZmZlclYwUDEyUG9ueWZpbGwiLCJhcmcwIiwiYXJncyIsImVudW1lcmFibGUiLCJhbGxvY1Vuc2FmZSIsImZyb20iLCJBc3NlcnRpb25FcnJvciIsIlJhbmdlRXJyb3IiLCJUeXBlRXJyb3IiLCJFcnJvciIsIm1lc3NhZ2UiLCJFIiwiYXNzZXJ0IiwidXRpbCIsInJlcXVpcmUkJDEiLCJrQ29kZSIsIlN5bWJvbCIsIm1lc3NhZ2VzIiwibWFrZU5vZGVFcnJvciIsIkJhc2UiLCJzdXBlciIsImNvZGUiLCJnIiwiZ2xvYmFsVGhpcyIsImdsb2JhbCIsIm9wdGlvbnMiLCJpbnNwZWN0IiwiYWN0dWFsIiwic2xpY2UiLCJvcGVyYXRvciIsImV4cGVjdGVkIiwiZ2VuZXJhdGVkTWVzc2FnZSIsImNhcHR1cmVTdGFja1RyYWNlIiwic3RhY2tTdGFydEZ1bmN0aW9uIiwic3RyaWN0RXF1YWwiLCJtc2ciLCJmbXQiLCJmb3JtYXQiLCJ1bmRlZmluZWQiLCJ1bnNoaWZ0IiwiU3RyaW5nIiwiYXBwbHkiLCJzeW0iLCJ2YWwiLCJvbmVPZiIsInRoaW5nIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuIiwiam9pbiIsImlzV3JpdGluZyIsImVyciIsInNlcnZlcnMiLCJlbmMiLCJkZXRlcm1pbmVyIiwiaW5jbHVkZXMiLCJzcGxpdCIsInR5cGUiLCJhcmd1bWVudHMiLCJFTkNPRElOR19VVEY4IiwiYXNzZXJ0RW5jb2RpbmciLCJlbmNvZGluZyIsImlzRW5jb2RpbmciLCJlcnJvcnMiLCJzdHJUb0VuY29kaW5nIiwic3RyIiwidG9TdHJpbmciLCJEaXJlbnRfMSIsIkRpcmVudCIsImVuY29kaW5nXzEiLCJEaXJlbnQkMSIsInBhcmVudFBhdGgiLCJsaW5rIiwiZGlyZW50IiwiZ2V0Tm9kZSIsImdldE5hbWUiLCJnZXRQYXJlbnRQYXRoIiwicHJvY2Vzc18xIiwiY3JlYXRlUHJvY2VzcyIsIm1heWJlUmV0dXJuUHJvY2VzcyIsInJlcXVpcmUiLCJfYSIsInAiLCJjd2QiLCJlbWl0V2FybmluZyIsIndhcm4iLCJlbnYiLCJxdWV1ZU1pY3JvdGFza18xIiwicXVldWVNaWNyb3Rhc2siLCJjYiIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsImNhdGNoIiwiRkxBR1MiLCJFUlJTVFIiLCJQQVRIX1NUUiIsIkZEIiwiTU9ERV9JTlQiLCJDQiIsIlVJRCIsIkdJRCIsIkxFTiIsIkFUSU1FIiwiTVRJTUUiLCJQUkVGSVgiLCJCVUZGRVIiLCJPRkZTRVQiLCJMRU5HVEgiLCJQT1NJVElPTiIsInJzIiwid3giLCJheCIsInVuaXhpZnkiLCJnZXRXcml0ZVN5bmNBcmdzIiwiZ2V0V3JpdGVBcmdzIiwiYnVmVG9VaW50OCIsImlzV2luIiwicHJvbWlzaWZ5IiwiZnMiLCJmbiIsImdldFJlc3VsdCIsImlucHV0IiwicmVqZWN0IiwiYmluZCIsInJlc3VsdCIsInZhbGlkYXRlQ2FsbGJhY2siLCJtb2RlVG9OdW1iZXIiLCJudWxsQ2hlY2siLCJwYXRoVG9GaWxlbmFtZSIsImlzQnVmZmVyIiwiVVJMIiwidXJsIiwiaG9zdG5hbWUiLCJwbGF0Zm9ybSIsInBhdGhuYW1lIiwibiIsInRoaXJkIiwiY29kZVBvaW50QXQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJnZXRQYXRoRnJvbVVSTFBvc2l4IiwicGF0aFN0cmluZyIsImNyZWF0ZUVycm9yIiwiZXJyb3JDb2RlIiwiZnVuYyIsInBhdGgyIiwiQ29uc3RydWN0b3IiLCJwYXRoRm9ybWF0dGVkIiwiRU5PRU5UIiwiRUJBREYiLCJFSU5WQUwiLCJFUEVSTSIsIkVQUk9UTyIsIkVFWElTVCIsIkVOT1RESVIiLCJFSVNESVIiLCJFQUNDRVMiLCJFTk9URU1QVFkiLCJFTUZJTEUiLCJFTk9TWVMiLCJFUlJfRlNfRUlTRElSIiwiRVJSX09VVF9PRl9SQU5HRSIsImZvcm1hdEVycm9yIiwiZ2VuUm5kU3RyNiIsInJhbmRvbSIsInN1YnN0cmluZyIsImZsYWdzVG9OdW1iZXIiLCJmbGFncyIsImZsYWdzTnVtIiwiaXNGZCIsInZhbGlkYXRlRmQiLCJzdHJlYW1Ub0J1ZmZlciIsInN0cmVhbSIsImNodW5rcyIsIm9uIiwiY2h1bmsiLCJwdXNoIiwiY29uY2F0IiwiZGF0YVRvQnVmZmVyIiwiYnVmZmVyVG9FbmNvZGluZyIsImJ1ZmZlciIsImlzUmVhZGFibGVTdHJlYW0iLCJwaXBlIiwicmVhZGFibGUiLCJyZXF1aXJlJCQyIiwicmVxdWlyZSQkMyIsImJ1ZmZlcl8yIiwicmVxdWlyZSQkNCIsImNhbGxiYWNrIiwiZGVmIiwicGFyc2VJbnQiLCJfbW9kZVRvTnVtYmVyIiwiaXNOYU4iLCJpbmRleE9mIiwiZXIiLCJmZCIsImRhdGEiLCJVaW50OEFycmF5IiwiYnVmIiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJjIiwiZCIsImUiLCJvZmZzZXQiLCJwb3NpdGlvbiIsInRpcGEiLCJ0aXBiIiwidGlwYyIsInRpcGQiLCJpc1NlcGFyYXRvciIsImNoYXIiLCJub3JtYWxpemVQYXRoIiwic3RyaXBUcmFpbGluZyIsInJlcGxhY2UiLCJzdWJzdHIiLCJyZW1vdmVUcmFpbGluZ1NlcGFyYXRvciIsImZpbGVwYXRoIiwiZXh0ZW5kU3RhdGljcyIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiX19leHRlbmRzIiwiX18iLCJjcmVhdGUiLCJfX2Fzc2lnbiIsImFzc2lnbiIsInQiLCJzIiwiX19yZXN0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsInRhcmdldCIsImRlc2MiLCJyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiUmVmbGVjdCIsImRlY29yYXRlIiwiX19wYXJhbSIsInBhcmFtSW5kZXgiLCJkZWNvcmF0b3IiLCJfX2VzRGVjb3JhdGUiLCJjdG9yIiwiZGVzY3JpcHRvckluIiwiY29udGV4dEluIiwiaW5pdGlhbGl6ZXJzIiwiZXh0cmFJbml0aWFsaXplcnMiLCJhY2NlcHQiLCJmIiwiXyIsImtpbmQiLCJkZXNjcmlwdG9yIiwiZG9uZSIsImNvbnRleHQiLCJhY2Nlc3MiLCJhZGRJbml0aWFsaXplciIsImluaXQiLCJfX3J1bkluaXRpYWxpemVycyIsInRoaXNBcmciLCJ1c2VWYWx1ZSIsIl9fcHJvcEtleSIsIngiLCJfX3NldEZ1bmN0aW9uTmFtZSIsInByZWZpeCIsImRlc2NyaXB0aW9uIiwiY29uZmlndXJhYmxlIiwiX19tZXRhZGF0YSIsIm1ldGFkYXRhS2V5IiwibWV0YWRhdGFWYWx1ZSIsIm1ldGFkYXRhIiwiX19hd2FpdGVyIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsInJlamVjdGVkIiwiX19nZW5lcmF0b3IiLCJib2R5IiwieSIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJJdGVyYXRvciIsInZlcmIiLCJpdGVyYXRvciIsInYiLCJvcCIsInBvcCIsIl9fY3JlYXRlQmluZGluZyIsIm8iLCJtIiwiayIsImsyIiwiX19lc01vZHVsZSIsIndyaXRhYmxlIiwiX19leHBvcnRTdGFyIiwiX192YWx1ZXMiLCJfX3JlYWQiLCJhciIsIl9fc3ByZWFkIiwiX19zcHJlYWRBcnJheXMiLCJpbCIsImoiLCJqbCIsIl9fc3ByZWFkQXJyYXkiLCJ0byIsInBhY2siLCJsIiwiX19hd2FpdCIsIl9fYXN5bmNHZW5lcmF0b3IiLCJhc3luY0l0ZXJhdG9yIiwicSIsIkFzeW5jSXRlcmF0b3IiLCJyZXN1bWUiLCJmdWxmaWxsIiwic2V0dGxlIiwic2hpZnQiLCJfX2FzeW5jRGVsZWdhdG9yIiwiX19hc3luY1ZhbHVlcyIsIl9fbWFrZVRlbXBsYXRlT2JqZWN0IiwiY29va2VkIiwicmF3IiwiX19zZXRNb2R1bGVEZWZhdWx0Iiwib3duS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJfX2ltcG9ydFN0YXIiLCJtb2QiLCJfX2ltcG9ydERlZmF1bHQiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0IiwicmVjZWl2ZXIiLCJzdGF0ZSIsImhhcyIsIl9fY2xhc3NQcml2YXRlRmllbGRTZXQiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkSW4iLCJfX2FkZERpc3Bvc2FibGVSZXNvdXJjZSIsImFzeW5jIiwiZGlzcG9zZSIsImlubmVyIiwiYXN5bmNEaXNwb3NlIiwic3RhY2siLCJfU3VwcHJlc3NlZEVycm9yIiwiU3VwcHJlc3NlZEVycm9yIiwic3VwcHJlc3NlZCIsIl9fZGlzcG9zZVJlc291cmNlcyIsImZhaWwiLCJoYXNFcnJvciIsIl9fcmV3cml0ZVJlbGF0aXZlSW1wb3J0RXh0ZW5zaW9uIiwicHJlc2VydmVKc3giLCJ0ZXN0IiwidHN4IiwiZXh0IiwiY20iLCJ0b0xvd2VyQ2FzZSIsInRzbGliX2VzNiIsInRzbGliXzEiLCJwcmludFRyZWVfMSIsInByaW50VHJlZSIsInRhYiIsImNoaWxkcmVuIiwibGFzdCIsImlzTGFzdCIsImNoaWxkIiwicHJpbnRCaW5hcnlfMSIsInByaW50QmluYXJ5IiwibGVmdCIsInJpZ2h0IiwidG9UcmVlU3luYyIsInRyZWVfZHVtcF8xIiwidXRpbF8xIiwibmV3Tm90QWxsb3dlZEVycm9yIiwibmV3VHlwZU1pc21hdGNoRXJyb3IiLCJuZXdOb3RGb3VuZEVycm9yIiwiYXNzZXJ0Q2FuV3JpdGUiLCJhc3NlcnROYW1lIiwiYmFzZW5hbWUiLCJjdHgiLCJwYXJ0aWFsIiwic2VwYXJhdG9yIiwic3luY0hhbmRsZUFsbG93ZWQiLCJsYXN0U2xhc2hJbmRleCIsImxhc3RJbmRleE9mIiwibmFtZVJlZ2V4IiwibWV0aG9kIiwia2xhc3MiLCJET01FeGNlcHRpb24iLCJvcHRzIiwiZGlyIiwiZGVwdGgiLCJzdWJ0cmVlIiwibGlzdCIsInJlYWRkaXJTeW5jIiwid2l0aEZpbGVUeXBlcyIsInJlYWRsaW5rU3luYyIsInZvbHVtZSIsIkZTV2F0Y2hlciIsIlN0YXRXYXRjaGVyIiwiVm9sdW1lIiwiZmlsZW5hbWVUb1N0ZXBzIiwicGF0aFRvU3RlcHMiLCJkYXRhVG9TdHIiLCJ0b1VuaXhUaW1lc3RhbXAiLCJwYXRoTW9kdWxlIiwibm9kZV8xIiwiRmlsZSIsIkxpbmsiLCJOb2RlIiwiU0VQIiwiZXZlbnRzXzEiLCJnZXR1aWQiLCJfYiIsImdldGdpZCIsIkV2ZW50RW1pdHRlciIsInBlcm0iLCJfdWlkIiwiX2dpZCIsIl9hdGltZSIsIkRhdGUiLCJfbXRpbWUiLCJfY3RpbWUiLCJfcGVybSIsIl9ubGluayIsImdldFN0cmluZyIsImdldEJ1ZmZlciIsInNldFN0cmluZyIsInRvdWNoIiwic2V0QnVmZmVyIiwic2V0TW9kZVByb3BlcnR5Iiwic2V0SXNGaWxlIiwic2V0SXNEaXJlY3RvcnkiLCJzZXRJc1N5bWxpbmsiLCJpc1N5bWxpbmsiLCJtYWtlU3ltbGluayIsInN0ZXBzIiwic3ltbGluayIsIndyaXRlIiwib2ZmIiwicG9zIiwibmV3QnVmIiwiY29weSIsInJlYWQiLCJhY3R1YWxMZW4iLCJidWYyIiwidHJ1bmNhdGUiLCJmaWxsIiwiY2htb2QiLCJjaG93biIsImVtaXQiLCJjYW5SZWFkIiwiY2FuV3JpdGUiLCJjYW5FeGVjdXRlIiwiZGVsIiwidG9KU09OIiwiX3N0ZXBzIiwic3luY1N0ZXBzIiwidm9sIiwicGFyZW50Iiwic2V0Tm9kZSIsImNyZWF0ZUNoaWxkIiwiY3JlYXRlTm9kZSIsInNldENoaWxkIiwiZGVsZXRlQ2hpbGQiLCJnZXRDaGlsZCIsImdldFBhdGgiLCJzZWVrVG8iLCJieXRlcyIsInNldEltbWVkaWF0ZV8xIiwiX3NldEltbWVkaWF0ZSIsInNldEltbWVkaWF0ZSIsInNldFRpbWVvdXQiLCJyZXF1aXJlJCQ1IiwicmVxdWlyZSQkNiIsInJlcXVpcmUkJDciLCJzZXRUaW1lb3V0VW5yZWZfMSIsInRpbWUiLCJyZWYiLCJ1bnJlZiIsInN0cmVhbV8xIiwicmVxdWlyZSQkOSIsInJlcXVpcmUkJDEwIiwicmVxdWlyZSQkMTEiLCJyZXF1aXJlJCQxMiIsIkZpbGVIYW5kbGVfMSIsIkZpbGVIYW5kbGUiLCJhcHBlbmRGaWxlIiwiY2xvc2UiLCJkYXRhc3luYyIsInJlYWRhYmxlV2ViU3RyZWFtIiwiUmVhZGFibGVTdHJlYW0iLCJwdWxsIiwiY29udHJvbGxlciIsInJlYWRGaWxlIiwiZW5xdWV1ZSIsImJ5dGVzUmVhZCIsInJlYWR2IiwiYnVmZmVycyIsInN0YXQiLCJzeW5jIiwidXRpbWVzIiwiYnl0ZXNXcml0dGVuIiwid3JpdGV2Iiwid3JpdGVGaWxlIiwicmVxdWlyZSQkMTMiLCJyZXF1aXJlJCQxNCIsIkZzUHJvbWlzZXNfMSIsIkZzUHJvbWlzZXMiLCJjcCIsIm9wZW5kaXIiLCJzdGF0ZnMiLCJsdXRpbWVzIiwiY29weUZpbGUiLCJsY2htb2QiLCJsY2hvd24iLCJsc3RhdCIsIm1rZGlyIiwibWtkdGVtcCIsInJlYWRkaXIiLCJyZWFkbGluayIsInJlYWxwYXRoIiwicmVuYW1lIiwicm1kaXIiLCJybSIsInVubGluayIsImlkIiwib3BlbiIsIndhdGNoIiwicmVxdWlyZSQkMTUiLCJwcmludF8xIiwicmVxdWlyZSQkMTYiLCJjb25zdGFudHNfMiIsInJlcXVpcmUkJDE3Iiwib3B0aW9uc18xIiwiZ2V0V3JpdGVGaWxlT3B0aW9ucyIsImdldFJlYWxwYXRoT3B0c0FuZENiIiwiZ2V0UmVhbHBhdGhPcHRpb25zIiwiZ2V0U3RhdE9wdGlvbnMiLCJnZXRBcHBlbmRGaWxlT3B0c0FuZENiIiwiZ2V0T3BlbmRpck9wdHNBbmRDYiIsImdldE9wZW5kaXJPcHRpb25zIiwiZ2V0UmVhZGRpck9wdGlvbnMiLCJnZXRSZWFkRmlsZU9wdGlvbnMiLCJnZXRSbWRpck9wdGlvbnMiLCJnZXREZWZhdWx0T3B0c0FuZENiIiwib3B0c0RlZmF1bHRzIiwiZ2V0TWtkaXJPcHRpb25zIiwiZ2V0T3B0aW9ucyIsIm9wdHNHZW5lcmF0b3IiLCJvcHRzQW5kQ2JHZW5lcmF0b3IiLCJta2RpckRlZmF1bHRzIiwicmVjdXJzaXZlIiwiRVJSU1RSX09QVFMiLCJ0aXBlb2YiLCJkZWZhdWx0cyIsImdldE9wdHMiLCJnZXREZWZhdWx0T3B0cyIsInJtZGlyRGVmYXVsdHMiLCJnZXRSbU9wdHMiLCJnZXRSbU9wdHNBbmRDYiIsImZsYWciLCJnZXRSZWFkZGlyT3B0c0FuZENiIiwiYnVmZmVyU2l6ZSIsImFwcGVuZEZpbGVEZWZhdWx0cyIsImdldEFwcGVuZEZpbGVPcHRzIiwic3RhdERlZmF1bHRzIiwiZ2V0U3RhdE9wdHNBbmRDYiIsInJlYWxwYXRoRGVmYXVsdHMiLCJ3cml0ZUZpbGVEZWZhdWx0cyIsInciLCJyZXF1aXJlJCQxOSIsIkRpcl8xIiwiRGlyIiwiRGlyJDEiLCJpdGVyYXRvckluZm8iLCJ3cmFwQXN5bmMiLCJpc0Z1bmN0aW9uIiwib2JqIiwiY2xvc2VCYXNlIiwicmVhZEJhc2UiLCJjbG9zZUJhc2VBc3luYyIsImNsb3NlU3luYyIsInJlYWRCYXNlQXN5bmMiLCJyZWFkU3luYyIsIl90aGlzIiwiZGlyRW50IiwicmVxdWlyZSQkMjAiLCJyZXNvbHZlQ3Jvc3NQbGF0Zm9ybSIsInNlcCIsInJlbGF0aXZlIiwiZGlybmFtZSIsInBvc2l4IiwiZmlsZW5hbWUiLCJiYXNlIiwiX3Jlc29sdmUiLCJmdWxsUGF0aFNhbnNTbGFzaCIsImlzRmluaXRlIiwibm93IiwidmFsaWRhdGVVaWQiLCJ2YWxpZGF0ZUdpZCIsIm5vdEltcGxlbWVudGVkIiwiZnJvbUpTT04iLCJqc29uIiwiZnJvbU5lc3RlZEpTT04iLCJwcm9taXNlcyIsInByb21pc2VzQXBpIiwicHJvcHMiLCJpbm9kZXMiLCJyZWxlYXNlZElub3MiLCJmZHMiLCJyZWxlYXNlZEZkcyIsIm1heEZpbGVzIiwib3BlbkZpbGVzIiwic3RhdFdhdGNoZXJzIiwiY3BTeW5jIiwic3RhdGZzU3luYyIsIm9wZW5Bc0Jsb2IiLCJyb290IiwiY3JlYXRlTGluayIsInNlbGYiLCJfUmVhZFN0cmVhbSIsIkZzUmVhZFN0cmVhbSIsIlJlYWRTdHJlYW0iLCJfV3JpdGVTdHJlYW0iLCJGc1dyaXRlU3RyZWFtIiwiV3JpdGVTdHJlYW0iLCJkZWxldGVMaW5rIiwibmV3SW5vTnVtYmVyIiwicmVsZWFzZWRGZCIsIm5ld0ZkTnVtYmVyIiwiZGVsZXRlTm9kZSIsIndhbGsiLCJzdGVwc09yRmlsZW5hbWVPckxpbmsiLCJyZXNvbHZlU3ltbGlua3MiLCJjaGVja0V4aXN0ZW5jZSIsImNoZWNrQWNjZXNzIiwiZnVuY05hbWUiLCJjdXJyIiwiZ2V0TGluayIsImdldExpbmtPclRocm93IiwiZ2V0UmVzb2x2ZWRMaW5rIiwiZmlsZW5hbWVPclN0ZXBzIiwiZ2V0UmVzb2x2ZWRMaW5rT3JUaHJvdyIsImdldExpbmtBc0Rpck9yVGhyb3ciLCJnZXRMaW5rUGFyZW50IiwiZ2V0TGlua1BhcmVudEFzRGlyT3JUaHJvdyIsImdldEZpbGVCeUZkIiwiZ2V0RmlsZUJ5RmRPclRocm93IiwiZmlsZSIsIl90b0pTT04iLCJhc0J1ZmZlciIsImlzRW1wdHkiLCJkaXJQYXRoIiwicGF0aHMiLCJpc1JlbGF0aXZlIiwibGlua3MiLCJta2RpcnBCYXNlIiwid3JpdGVGaWxlU3luYyIsIm5lc3RlZEpTT04iLCJmbGF0SlNPTiIsImZsYXR0ZW4iLCJwYXRoUHJlZml4IiwiY29udGVudE9yTm9kZSIsImpvaW5lZFBhdGgiLCJmbGF0dGVuSlNPTiIsInRvVHJlZSIsInJlc2V0IiwibW91bnRTeW5jIiwibW91bnRwb2ludCIsIm9wZW5MaW5rIiwicmVhbExpbmsiLCJvcGVuRmlsZSIsIm1vZGVOdW0iLCJkaXJMaW5rIiwiZGlyTm9kZSIsIm9wZW5CYXNlIiwib3BlblN5bmMiLCJmaWxlTmFtZSIsImNsb3NlRmlsZSIsIm9wZW5GaWxlT3JHZXRCeUlkIiwicmVhZHZCYXNlIiwicmVhZHZTeW5jIiwicmVhZEZpbGVCYXNlIiwidXNlck93bnNGZCIsInJlYWRGaWxlU3luYyIsIndyaXRlQmFzZSIsIndyaXRlU3luYyIsImFzU3RyIiwid3JpdGV2QmFzZSIsIm5vZGVCdWYiLCJ3cml0ZXZTeW5jIiwid3JpdGVGaWxlQmFzZSIsImlzVXNlckZkIiwid3JpdHRlbiIsImxpbmtCYXNlIiwiZmlsZW5hbWUxIiwiZmlsZW5hbWUyIiwibGluazEiLCJkaXJuYW1lMiIsImRpcjIiLCJjb3B5RmlsZUJhc2UiLCJzcmMiLCJkZXN0IiwiZXhpc3RzU3luYyIsImNvcHlGaWxlU3luYyIsInNyY0ZpbGVuYW1lIiwiZGVzdEZpbGVuYW1lIiwibGlua1N5bmMiLCJleGlzdGluZ1BhdGgiLCJuZXdQYXRoIiwiZXhpc3RpbmdQYXRoRmlsZW5hbWUiLCJuZXdQYXRoRmlsZW5hbWUiLCJ1bmxpbmtCYXNlIiwidW5saW5rU3luYyIsInN5bWxpbmtCYXNlIiwidGFyZ2V0RmlsZW5hbWUiLCJwYXRoRmlsZW5hbWUiLCJwYXRoU3RlcHMiLCJzeW1saW5rU3luYyIsInJlYWxwYXRoQmFzZSIsInJlYWxwYXRoU3luYyIsImxzdGF0QmFzZSIsInRocm93SWZOb0VudHJ5IiwibHN0YXRTeW5jIiwic3RhdEJhc2UiLCJzdGF0U3luYyIsImZzdGF0QmFzZSIsImZzdGF0U3luYyIsImZzdGF0IiwicmVuYW1lQmFzZSIsIm9sZFBhdGhGaWxlbmFtZSIsIm5ld1BhdGhEaXJMaW5rIiwib2xkTGlua1BhcmVudCIsIm9sZFBhcmVudE5vZGUiLCJuZXdQYXRoRGlyTm9kZSIsInJlbmFtZVN5bmMiLCJvbGRQYXRoIiwiZXhpc3RzQmFzZSIsImV4aXN0cyIsImFjY2Vzc0Jhc2UiLCJhY2Nlc3NTeW5jIiwiYXBwZW5kRmlsZVN5bmMiLCJyZWFkZGlyQmFzZSIsInJlY3Vyc2VPcHRpb25zIiwiY2hpbGRMaXN0Iiwic29ydCIsImZ1bGxQYXRoIiwicmVhZGxpbmtCYXNlIiwiZnN5bmNCYXNlIiwiZnN5bmNTeW5jIiwiZnN5bmMiLCJmZGF0YXN5bmNCYXNlIiwiZmRhdGFzeW5jU3luYyIsImZkYXRhc3luYyIsImZ0cnVuY2F0ZUJhc2UiLCJmdHJ1bmNhdGVTeW5jIiwiZnRydW5jYXRlIiwidHJ1bmNhdGVCYXNlIiwidHJ1bmNhdGVTeW5jIiwiZnV0aW1lc0Jhc2UiLCJmdXRpbWVzU3luYyIsImZ1dGltZXMiLCJ1dGltZXNCYXNlIiwiZm9sbG93U3ltbGlua3MiLCJ1dGltZXNTeW5jIiwibHV0aW1lc1N5bmMiLCJta2RpckJhc2UiLCJjcmVhdGVkIiwibWtkaXJTeW5jIiwibWtkdGVtcEJhc2UiLCJyZXRyeSIsIm1rZHRlbXBTeW5jIiwicm1kaXJCYXNlIiwicm1kaXJTeW5jIiwicm1CYXNlIiwiZm9yY2UiLCJybVN5bmMiLCJmY2htb2RCYXNlIiwiZmNobW9kU3luYyIsImZjaG1vZCIsImNobW9kQmFzZSIsImNobW9kU3luYyIsImxjaG1vZEJhc2UiLCJsY2htb2RTeW5jIiwiZmNob3duQmFzZSIsImZjaG93blN5bmMiLCJmY2hvd24iLCJjaG93bkJhc2UiLCJjaG93blN5bmMiLCJsY2hvd25CYXNlIiwibGNob3duU3luYyIsIndhdGNoRmlsZSIsImxpc3RlbmVyIiwiaW50ZXJ2YWwiLCJwZXJzaXN0ZW50Iiwid2F0Y2hlciIsInN0YXJ0IiwiYWRkTGlzdGVuZXIiLCJ1bndhdGNoRmlsZSIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwibGlzdGVuZXJDb3VudCIsInN0b3AiLCJjcmVhdGVSZWFkU3RyZWFtIiwiY3JlYXRlV3JpdGVTdHJlYW0iLCJnaXZlbk9wdGlvbnMiLCJvcGVuZGlyQmFzZSIsIm9wZW5kaXJTeW5jIiwiZW1pdFN0b3AiLCJvbkludGVydmFsIiwiaGFzQ2hhbmdlZCIsInByZXYiLCJsb29wIiwidGltZW91dFJlZiIsImNsZWFyVGltZW91dCIsInBvb2wiLCJfdm9sIiwiaGlnaFdhdGVyTWFyayIsIlJlYWRhYmxlIiwiZW5kIiwiYXV0b0Nsb3NlIiwiSW5maW5pdHkiLCJkZXN0cm95IiwiY2xvc2VPbk9wZW4iLCJXcml0YWJsZSIsInBlbmRpbmciLCJzZXREZWZhdWx0RW5jb2RpbmciLCJvbmNlIiwiaW5oZXJpdHMiLCJfcmVhZCIsImRlc3Ryb3llZCIsInBvb2xTaXplIiwidXNlZCIsIl9yZWFkYWJsZVN0YXRlIiwidGhpc1Bvb2wiLCJ0b1JlYWQiLCJtaW4iLCJfZGVzdHJveSIsImVycjIiLCJjbG9zZWQiLCJfd3JpdGUiLCJfd3JpdGV2IiwiX3dyaXRhYmxlU3RhdGUiLCJkZXN0cm95U29vbiIsIl9maWxlbmFtZSIsIl9maWxlbmFtZUVuY29kZWQiLCJfcmVjdXJzaXZlIiwiX2VuY29kaW5nIiwiX2xpc3RlbmVyUmVtb3ZlcnMiLCJfb25QYXJlbnRDaGlsZCIsIl9nZXROYW1lIiwiX2VtaXQiLCJfcGVyc2lzdCIsIl90aW1lciIsIl9saW5rIiwiZXJybm8iLCJ3YXRjaExpbmtOb2RlQ2hhbmdlZCIsIm9uTm9kZUNoYW5nZSIsInJlbW92ZXJzIiwid2F0Y2hMaW5rQ2hpbGRyZW5DaGFuZ2VkIiwib25MaW5rQ2hpbGRBZGQiLCJvbkxpbmtDaGlsZERlbGV0ZSIsInJlbW92ZUxpbmtOb2RlTGlzdGVuZXJzIiwiY3VyTGluayIsImZvckVhY2giLCJjaGlsZExpbmsiLCJzZXRNYXhMaXN0ZW5lcnMiLCJnZXRNYXhMaXN0ZW5lcnMiLCJjbGVhciIsIm1lbWZzIiwiY3JlYXRlRnNGcm9tVm9sdW1lIiwidm9sdW1lXzEiLCJmc1N5bmNocm9ub3VzQXBpTGlzdF8xIiwiZnNTeW5jaHJvbm91c0FwaUxpc3QiLCJmc0NhbGxiYWNrQXBpTGlzdF8xIiwiZnNDYWxsYmFja0FwaUxpc3QiLCJfdG9Vbml4VGltZXN0YW1wIiwiX192b2wiLCJtb2R1bGUiLCJzZW1hbnRpYyIsIkJhemVsU2FmZUZpbGVzeXN0ZW0iLCJuZ3RzYyIsIk5vZGVKU0ZpbGVTeXN0ZW0iLCJyZW1vdmVGaWxlIiwibW92ZUZpbGUiLCJjaGRpciIsInJlbW92ZURlZXAiLCJleGVjcm9vdERpc2tQYXRoIiwiaXNWYW5pbGxhVHNDb21waWxhdGlvbiIsImFyZ3YiLCJkZWJ1Z01vZGUiLCJmc0lkIiwiV29ya2VyU2FuZGJveEZpbGVTeXN0ZW0iLCJfZGlza0N3ZFN5c1BhdGgiLCJfdmlydHVhbEN3ZCIsIm5vcm1hbGl6ZVBhdGhGcmFnbWVudFRvUG9zaXgiLCJuYXRpdmVTeXNQYXRoIiwiYWRkRmlsZSIsInNlZ21lbnRzIiwicHdkIiwicGFyZW50RGlyIiwiZGlza0xzdGF0IiwiZGlza1JlYWRsaW5rIiwidG9EaXNrUGF0aCIsImV4Y2x1c2l2ZSIsImVuc3VyZURpciIsImZyb21EaXNrUGF0aCIsImRpc2tQYXRoIiwicmVsYXRpdmVTeXNQYXRoIiwicmVsYXRpdmVOb3JtYWxpemVkIiwic3RhcnRzV2l0aCIsInJlc291cmNlRmlsZVJlZ2V4IiwiaXNSZXNvdXJjZUZpbGUiLCJXb3JrZXJQcm9ncmFtQ2FjaGVFbnRyeSIsInByb2dyYW0iLCJsYXN0SW5wdXRzIiwiUHJvZ3JhbURlc2NyaXB0b3IiLCJyb290TmFtZXMiLCJob3N0Iiwib2xkUHJvZ3JhbSIsIkFuZ3VsYXJQcm9ncmFtIiwiX25ndHNjUHJvZ3JhbSIsIk5ndHNjUHJvZ3JhbSIsImxvYWROZ1N0cnVjdHVyZUFzeW5jIiwiZ2V0UHJlRW1pdERpYWdub3N0aWNzIiwiY2FuY2VsbGF0aW9uVG9rZW4iLCJnZXRUc1N5bnRhY3RpY0RpYWdub3N0aWNzIiwiZ2V0VHNTZW1hbnRpY0RpYWdub3N0aWNzIiwiZ2V0VHNQcm9ncmFtIiwiZ2V0R2xvYmFsRGlhZ25vc3RpY3MiLCJnZXROZ1N0cnVjdHVyYWxEaWFnbm9zdGljcyIsImdldE5nU2VtYW50aWNEaWFnbm9zdGljcyIsImZvcmNlRW1pdCIsImlzU3RydWN0dXJlUmV1c2VkIiwiVmFuaWxsYVRzUHJvZ3JhbSIsIl90c1Byb2dyYW0iLCJ0cyIsImNyZWF0ZVByb2dyYW0iLCJnZXRTeW50YWN0aWNEaWFnbm9zdGljcyIsImdldFNlbWFudGljRGlhZ25vc3RpY3MiLCJUc1N0cnVjdHVyZUlzUmV1c2VkIiwiYnVpbGRDb3VudCIsImV4ZWN1dGVCdWlsZCIsIndvcmtlciIsIndvcmtlcktleSIsImV4aXN0aW5nIiwicHJvZ3JhbUNhY2hlIiwicmVxIiwiY29tbWFuZCIsInBhcnNlQ29tbWFuZExpbmUiLCJzZXRGaWxlU3lzdGVtIiwibW9kaWZpZWRSZXNvdXJjZUZpbGVQYXRocyIsIm5ld0lucHV0cyIsIm9sZElucHV0cyIsIlNldCIsImxhc3REaWdlc3QiLCJhZGQiLCJkaWZmV29ya2VySW5wdXRzRm9yTW9kaWZpZWRSZXNvdXJjZXMiLCJwYXJzZWRDb25maWciLCJyZWFkQ29uZmlndXJhdGlvbiIsInByb2plY3QiLCJmb3JtYXRIb3N0IiwiZ2V0Q2Fub25pY2FsRmlsZU5hbWUiLCJnZXRDdXJyZW50RGlyZWN0b3J5IiwiZ2V0TmV3TGluZSIsImZvcm1hdERpYWdub3N0aWNzV2l0aENvbG9yQW5kQ29udGV4dCIsImNhY2hlIiwiTmd0c2NDb21waWxlckhvc3QiLCJvcmlnaW5hbEdldFNvdXJjZUZpbGUiLCJnZXRTb3VyY2VGaWxlIiwiZGVmYXVsdExpYkxvY2F0aW9uIiwiZ2V0RGVmYXVsdExpYkxvY2F0aW9uIiwiZ2V0TW9kaWZpZWRSZXNvdXJjZUZpbGVzIiwicmVhZFJlc291cmNlIiwiY2FjaGVkRmlsZSIsImRpc2tDb250ZW50IiwibGFuZ3VhZ2VWZXJzaW9uT3JPcHRpb25zIiwib25FcnJvciIsInNob3VsZENyZWF0ZU5ld1NvdXJjZUZpbGUiLCJpc0xpYkZpbGUiLCJjcmVhdGVkRmlsZSIsIm5vZGVGcyIsImNyZWF0ZVJlcXVpcmUiLCJjcmVhdGVTb3VyY2VGaWxlIiwiY3JlYXRlQ2FjaGVDb21waWxlckhvc3QiLCJzaWduYWwiLCJpc0NhbmNlbGxhdGlvblJlcXVlc3RlZCIsImFib3J0ZWQiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwicmVhc29uIiwidHNQcmVFbWl0RGlhZ25vc3RpY3MiLCJlbWl0UmVzIiwiZGlhZ25vc3RpY3MiLCJlbWl0U2tpcHBlZCIsIndpbmRvdyIsImdldFByb3RvdHlwZU9mIiwiUmVmZXJlbmNlRXJyb3IiLCJoIiwiY29uc3RydWN0Iiwic2hhbSIsIlByb3h5IiwiQm9vbGVhbiIsInZhbHVlT2YiLCJ1IiwibGlzdGVuZXJzIiwic3BsaWNlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRlZmF1bHRQcmV2ZW50ZWQiLCJvbmFib3J0IiwiRXZlbnQiLCJkb2N1bWVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiY3JlYXRlRXZlbnRPYmplY3QiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImRpc3BhdGNoRXZlbnQiLCJ0b1N0cmluZ1RhZyIsIl9fRk9SQ0VfSU5TVEFMTF9BQk9SVENPTlRST0xMRVJfUE9MWUZJTEwiLCJsb2ciLCJSZXF1ZXN0IiwiQWJvcnRDb250cm9sbGVyIiwiQWJvcnRTaWduYWwiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZXhlY1NjcmlwdCIsIlMiLCJGdW5jdGlvbiIsImRpc3BsYXlOYW1lIiwiYXJyQ2xlYW4iLCJPIiwiRiIsIkEiLCJmcm9tQ2hhckNvZGUiLCJ0b0FycmF5IiwiTWMiLCJ0b09iamVjdCIsImZyb21PYmplY3QiLCJKYiIsImdldExlbmd0aCIsIkNiIiwiRWIiLCJnZXRFbnRyeUxpc3QiLCJ2YWx1ZXMiLCJKYyIsIlZhIiwiWWEiLCJzZXJpYWxpemVCaW5hcnkiLCJkZXNlcmlhbGl6ZUJpbmFyeSIsIm9hIiwiYmIiLCJNIiwiQiIsIkMiLCJJIiwiZmxvb3IiLCJjaGFyQXQiLCJzdWJhcnJheSIsInliIiwiZWUiLCJGTE9BVCIsImtlIiwidGUiLCJqZSIsInhiIiwid2IiLCJCT09MIiwicmUiLCJpZSIsImxlIiwiY2UiLCJzZSIsImdlIiwibWUiLCJuZSIsIm9lIiwicGUiLCJoZSIsInZlIiwidWUiLCJkZSIsInFlIiwiZmUiLCJSIiwiVCIsIlUiLCJ6IiwiYWJzIiwiVyIsIkwiLCJyb3VuZCIsInBvdyIsIkxOMiIsIlYiLCJEIiwiY2hhckNvZGVBdCIsIk4iLCJIIiwiWiIsIkciLCJKIiwiTmFOIiwiJCIsIksiLCJYIiwiWSIsIlEiLCJ0dCIsImV0Iiwib3QiLCJydCIsIm50IiwiQXJyYXlCdWZmZXIiLCJpdCIsInRvVXBwZXJDYXNlIiwicHQiLCJhdCIsInN0IiwiZ2V0SW5zdGFuY2VDYWNoZUxlbmd0aCIsImFsbG9jIiwiQ2EiLCJmcmVlIiwiY2xvbmUiLCJzZXRCbG9jayIsIkRiIiwiZ2V0RW5kIiwic2V0RW5kIiwiZ2V0Q3Vyc29yIiwiTWEiLCJzZXRDdXJzb3IiLCJhZHZhbmNlIiwieWEiLCJhdEVuZCIsIlFiIiwicGFzdEVuZCIsImdldEVycm9yIiwicmVhZFNwbGl0VmFyaW50NjQiLCJlYSIsInJlYWRTcGxpdFppZ3phZ1ZhcmludDY0IiwidGEiLCJyZWFkU3BsaXRGaXhlZDY0Iiwia2IiLCJza2lwVmFyaW50IiwibWIiLCJ1bnNraXBWYXJpbnQiLCJyZWFkVW5zaWduZWRWYXJpbnQzMiIsImRhIiwicmVhZFNpZ25lZFZhcmludDMyIiwiRWEiLCJyZWFkU2lnbmVkVmFyaW50MzJTdHJpbmciLCJJYSIsInJlYWRaaWd6YWdWYXJpbnQzMiIsIkdhIiwicmVhZFVuc2lnbmVkVmFyaW50NjQiLCJIYSIsInJlYWRVbnNpZ25lZFZhcmludDY0U3RyaW5nIiwic2EiLCJyZWFkU2lnbmVkVmFyaW50NjQiLCJGYSIsInJlYWRTaWduZWRWYXJpbnQ2NFN0cmluZyIsIkphIiwicmVhZFppZ3phZ1ZhcmludDY0IiwiZmIiLCJyZWFkWmlnemFnVmFyaW50SGFzaDY0IiwiS2EiLCJyZWFkWmlnemFnVmFyaW50NjRTdHJpbmciLCJHYyIsInJlYWRVaW50OCIsIkVjIiwicmVhZFVpbnQxNiIsInJlYWRVaW50MzIiLCJnYSIsInJlYWRVaW50NjQiLCJoYSIsInJlYWRVaW50NjRTdHJpbmciLCJYYiIsInJlYWRJbnQ4IiwiVmIiLCJyZWFkSW50MTYiLCJyZWFkSW50MzIiLCJiYSIsInJlYWRJbnQ2NCIsImNhIiwicmVhZEludDY0U3RyaW5nIiwiYWEiLCJyZWFkRmxvYXQiLCJyZWFkRG91YmxlIiwicGEiLCJyZWFkQm9vbCIsInJhIiwicmVhZEVudW0iLCJmYSIsInJlYWRTdHJpbmciLCJEYyIsInJlYWRTdHJpbmdXaXRoTGVuZ3RoIiwicWEiLCJyZWFkQnl0ZXMiLCJpYSIsInJlYWRWYXJpbnRIYXNoNjQiLCJyZWFkRml4ZWRIYXNoNjQiLCJ1dCIsImh0IiwibHQiLCJjdCIsIm1hIiwiQmEiLCJsYSIsIk5hIiwibmEiLCJmdCIsIlphIiwiemEiLCJBYSIsIldhIiwiQWIiLCJOYiIsInl0IiwiY2xlYXJJbnN0YW5jZUNhY2hlIiwiemIiLCJGYiIsImdldEZpZWxkQ3Vyc29yIiwiSGIiLCJnZXRGaWVsZE51bWJlciIsIkxiIiwiZ2V0V2lyZVR5cGUiLCJNYiIsImlzRGVsaW1pdGVkIiwiaXNFbmRHcm91cCIsIm5leHRGaWVsZCIsIk9hIiwidW5za2lwSGVhZGVyIiwiTGMiLCJza2lwTWF0Y2hpbmdGaWVsZHMiLCJsYiIsInNraXBWYXJpbnRGaWVsZCIsImdiIiwic2tpcERlbGltaXRlZEZpZWxkIiwiaGIiLCJza2lwRml4ZWQzMkZpZWxkIiwiaWIiLCJza2lwRml4ZWQ2NEZpZWxkIiwiamIiLCJza2lwR3JvdXAiLCJza2lwRmllbGQiLCJIYyIsInJlZ2lzdGVyUmVhZENhbGxiYWNrIiwiSWMiLCJydW5SZWFkQ2FsbGJhY2siLCJZYiIsInJlYWRNZXNzYWdlIiwiVWIiLCJyZWFkR3JvdXAiLCJHYiIsImdldEZpZWxkRGVjb2RlciIsIldiIiwicmVhZEludDMyU3RyaW5nIiwiRmMiLCJyZWFkVWludDMyU3RyaW5nIiwiemMiLCJyZWFkU2ludDMyIiwiQWMiLCJyZWFkU2ludDY0IiwiQmMiLCJyZWFkU2ludDY0U3RyaW5nIiwiUmIiLCJyZWFkRml4ZWQzMiIsIlNiIiwicmVhZEZpeGVkNjQiLCJUYiIsInJlYWRGaXhlZDY0U3RyaW5nIiwidmMiLCJyZWFkU2ZpeGVkMzIiLCJ3YyIsInJlYWRTZml4ZWQzMlN0cmluZyIsInhjIiwicmVhZFNmaXhlZDY0IiwieWMiLCJyZWFkU2ZpeGVkNjRTdHJpbmciLCJDYyIsInJlYWRTaW50SGFzaDY0IiwiZ2MiLCJyZWFkUGFja2VkSW50MzIiLCJoYyIsInJlYWRQYWNrZWRJbnQzMlN0cmluZyIsImljIiwicmVhZFBhY2tlZEludDY0IiwiamMiLCJyZWFkUGFja2VkSW50NjRTdHJpbmciLCJxYyIsInJlYWRQYWNrZWRVaW50MzIiLCJyYyIsInJlYWRQYWNrZWRVaW50MzJTdHJpbmciLCJzYyIsInJlYWRQYWNrZWRVaW50NjQiLCJ0YyIsInJlYWRQYWNrZWRVaW50NjRTdHJpbmciLCJuYyIsInJlYWRQYWNrZWRTaW50MzIiLCJvYyIsInJlYWRQYWNrZWRTaW50NjQiLCJwYyIsInJlYWRQYWNrZWRTaW50NjRTdHJpbmciLCJiYyIsInJlYWRQYWNrZWRGaXhlZDMyIiwiY2MiLCJyZWFkUGFja2VkRml4ZWQ2NCIsImRjIiwicmVhZFBhY2tlZEZpeGVkNjRTdHJpbmciLCJrYyIsInJlYWRQYWNrZWRTZml4ZWQzMiIsImxjIiwicmVhZFBhY2tlZFNmaXhlZDY0IiwibWMiLCJyZWFkUGFja2VkU2ZpeGVkNjRTdHJpbmciLCJmYyIsInJlYWRQYWNrZWRGbG9hdCIsIiRiIiwicmVhZFBhY2tlZERvdWJsZSIsIlpiIiwicmVhZFBhY2tlZEJvb2wiLCJhYyIsInJlYWRQYWNrZWRFbnVtIiwidWMiLCJyZWFkUGFja2VkVmFyaW50SGFzaDY0IiwiZWMiLCJyZWFkUGFja2VkRml4ZWRIYXNoNjQiLCJpc01lc3NhZ2VUeXBlIiwiR0VORVJBVEVfVE9fT0JKRUNUIiwiR0VORVJBVEVfRlJPTV9PQkpFQ1QiLCJkdCIsIkliIiwiZ2V0SnNQYk1lc3NhZ2VJZCIsImluaXRpYWxpemUiLCJtYXgiLCJNQVhfVkFMVUUiLCJidCIsImd0IiwiTXQiLCJmcmVlemUiLCJ2dCIsInd0IiwiU3QiLCJtdCIsImp0IiwieHQiLCJrdCIsIkZ0IiwiT3QiLCJBdCIsIl90IiwiUHQiLCJFdCIsIkJ0IiwiSXQiLCJDdCIsIlJ0IiwidG9PYmplY3RMaXN0IiwidG9PYmplY3RFeHRlbnNpb24iLCJzZXJpYWxpemVCaW5hcnlFeHRlbnNpb25zIiwicmVhZEJpbmFyeUV4dGVuc2lvbiIsImdldEZpZWxkIiwiZ2V0UmVwZWF0ZWRGaWVsZCIsImdldE9wdGlvbmFsRmxvYXRpbmdQb2ludEZpZWxkIiwiZ2V0Qm9vbGVhbkZpZWxkIiwiZ2V0UmVwZWF0ZWRGbG9hdGluZ1BvaW50RmllbGQiLCJnZXRSZXBlYXRlZEJvb2xlYW5GaWVsZCIsImJ5dGVzQXNCNjQiLCJieXRlc0FzVTgiLCJieXRlc0xpc3RBc0I2NCIsImJ5dGVzTGlzdEFzVTgiLCJnZXRGaWVsZFdpdGhEZWZhdWx0IiwiZ2V0Qm9vbGVhbkZpZWxkV2l0aERlZmF1bHQiLCJnZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdCIsImdldEZpZWxkUHJvdG8zIiwiZ2V0TWFwRmllbGQiLCJzZXRGaWVsZCIsInNldFByb3RvM0ludEZpZWxkIiwic2V0UHJvdG8zRmxvYXRGaWVsZCIsInNldFByb3RvM0Jvb2xlYW5GaWVsZCIsInNldFByb3RvM1N0cmluZ0ZpZWxkIiwic2V0UHJvdG8zQnl0ZXNGaWVsZCIsInNldFByb3RvM0VudW1GaWVsZCIsInNldFByb3RvM1N0cmluZ0ludEZpZWxkIiwiYWRkVG9SZXBlYXRlZEZpZWxkIiwic2V0T25lb2ZGaWVsZCIsImNvbXB1dGVPbmVvZkNhc2UiLCJnZXRXcmFwcGVyRmllbGQiLCJnZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCIsInNldFdyYXBwZXJGaWVsZCIsInNldE9uZW9mV3JhcHBlckZpZWxkIiwic2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQiLCJhZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkIiwidG9NYXAiLCJnZXRFeHRlbnNpb24iLCJLYyIsInNldEV4dGVuc2lvbiIsImRpZmZlcmVuY2UiLCJlcXVhbHMiLCJjb21wYXJlRXh0ZW5zaW9ucyIsImNvbXBhcmVGaWVsZHMiLCJCYiIsImNsb25lTWVzc2FnZSIsImNvcHlJbnRvIiwicmVnaXN0ZXJNZXNzYWdlVHlwZSIsIndlIiwiVHQiLCJkdW1wIiwiVXQiLCJ6dCIsImxvIiwiaGkiLCJXdCIsIkx0IiwiZWIiLCJWdCIsIkR0Iiwic3ViIiwiTnQiLCJxdCIsIkh0IiwiR3QiLCJadCIsIkp0IiwiJHQiLCIkbmFtZSIsImV4ZWMiLCIkYSIsImV4dGVuc2lvbk9iamVjdF8iLCIkZXh0ZW5zaW9ucyIsImV4dGVuc2lvbnMiLCJ3cml0ZVNwbGl0VmFyaW50NjQiLCJ3cml0ZVNwbGl0Rml4ZWQ2NCIsIndyaXRlVW5zaWduZWRWYXJpbnQzMiIsIndyaXRlU2lnbmVkVmFyaW50MzIiLCJ2YSIsIndyaXRlVW5zaWduZWRWYXJpbnQ2NCIsInVhIiwid3JpdGVTaWduZWRWYXJpbnQ2NCIsIndhIiwid3JpdGVaaWd6YWdWYXJpbnQzMiIsInhhIiwid3JpdGVaaWd6YWdWYXJpbnQ2NCIsIlRhIiwid3JpdGVaaWd6YWdWYXJpbnQ2NFN0cmluZyIsIndyaXRlWmlnemFnVmFyaW50SGFzaDY0IiwiYmUiLCJ3cml0ZVVpbnQ4IiwiYWUiLCJ3cml0ZVVpbnQxNiIsIndyaXRlVWludDMyIiwid3JpdGVVaW50NjQiLCJRYyIsIndyaXRlSW50OCIsIlBjIiwid3JpdGVJbnQxNiIsIndyaXRlSW50MzIiLCJ3cml0ZUludDY0Iiwia2EiLCJ3cml0ZUludDY0U3RyaW5nIiwid3JpdGVGbG9hdCIsIndyaXRlRG91YmxlIiwid3JpdGVCb29sIiwid3JpdGVFbnVtIiwiamEiLCJ3cml0ZUJ5dGVzIiwid3JpdGVWYXJpbnRIYXNoNjQiLCJ3cml0ZUZpeGVkSGFzaDY0Iiwid3JpdGVTdHJpbmciLCJjbXAiLCJMYSIsInJpZ2h0U2hpZnQiLCJEYSIsImxlZnRTaGlmdCIsIm1zYiIsIk9iIiwibHNiIiwiVWEiLCJ6ZXJvIiwibXVsMzJ4MzIiLCJtdWwiLCJYYSIsImRpdiIsImZyb21TdHJpbmciLCJwYiIsIndyaXRlU2VyaWFsaXplZE1lc3NhZ2UiLCJQYiIsIm1heWJlV3JpdGVTZXJpYWxpemVkTWVzc2FnZSIsImFiIiwiZ2V0UmVzdWx0QnVmZmVyIiwiS2IiLCJnZXRSZXN1bHRCYXNlNjRTdHJpbmciLCJiZWdpblN1Yk1lc3NhZ2UiLCJlbmRTdWJNZXNzYWdlIiwiTmMiLCJRYSIsIlBhIiwiUmEiLCJTYSIsInJiIiwic2IiLCJ3cml0ZUFueSIsIm9iIiwid3JpdGVJbnQzMlN0cmluZyIsInViIiwid3JpdGVVaW50MzJTdHJpbmciLCJ2YiIsIndyaXRlVWludDY0U3RyaW5nIiwid3JpdGVTaW50MzIiLCJ3cml0ZVNpbnQ2NCIsIiRkIiwid3JpdGVTaW50SGFzaDY0IiwiWmQiLCJ3cml0ZVNpbnQ2NFN0cmluZyIsIndyaXRlRml4ZWQzMiIsIndyaXRlRml4ZWQ2NCIsIm5iIiwid3JpdGVGaXhlZDY0U3RyaW5nIiwid3JpdGVTZml4ZWQzMiIsIndyaXRlU2ZpeGVkNjQiLCJxYiIsIndyaXRlU2ZpeGVkNjRTdHJpbmciLCJSYyIsIndyaXRlTWVzc2FnZSIsIlNjIiwid3JpdGVNZXNzYWdlU2V0IiwiT2MiLCJ3cml0ZUdyb3VwIiwidGIiLCJ3cml0ZVNwbGl0WmlnemFnVmFyaW50NjQiLCJFZCIsIndyaXRlUmVwZWF0ZWRJbnQzMiIsIkZkIiwid3JpdGVSZXBlYXRlZEludDMyU3RyaW5nIiwiR2QiLCJ3cml0ZVJlcGVhdGVkSW50NjQiLCJRZCIsIndyaXRlUmVwZWF0ZWRTcGxpdEZpeGVkNjQiLCJSZCIsIndyaXRlUmVwZWF0ZWRTcGxpdFZhcmludDY0IiwiU2QiLCJ3cml0ZVJlcGVhdGVkU3BsaXRaaWd6YWdWYXJpbnQ2NCIsIkhkIiwid3JpdGVSZXBlYXRlZEludDY0U3RyaW5nIiwiVWQiLCJ3cml0ZVJlcGVhdGVkVWludDMyIiwiVmQiLCJ3cml0ZVJlcGVhdGVkVWludDMyU3RyaW5nIiwiV2QiLCJ3cml0ZVJlcGVhdGVkVWludDY0IiwiWGQiLCJ3cml0ZVJlcGVhdGVkVWludDY0U3RyaW5nIiwiTWQiLCJ3cml0ZVJlcGVhdGVkU2ludDMyIiwiTmQiLCJ3cml0ZVJlcGVhdGVkU2ludDY0IiwiT2QiLCJ3cml0ZVJlcGVhdGVkU2ludDY0U3RyaW5nIiwiUGQiLCJ3cml0ZVJlcGVhdGVkU2ludEhhc2g2NCIsInlkIiwid3JpdGVSZXBlYXRlZEZpeGVkMzIiLCJ6ZCIsIndyaXRlUmVwZWF0ZWRGaXhlZDY0IiwiQWQiLCJ3cml0ZVJlcGVhdGVkRml4ZWQ2NFN0cmluZyIsIkpkIiwid3JpdGVSZXBlYXRlZFNmaXhlZDMyIiwiS2QiLCJ3cml0ZVJlcGVhdGVkU2ZpeGVkNjQiLCJMZCIsIndyaXRlUmVwZWF0ZWRTZml4ZWQ2NFN0cmluZyIsIkNkIiwid3JpdGVSZXBlYXRlZEZsb2F0Iiwid2QiLCJ3cml0ZVJlcGVhdGVkRG91YmxlIiwidWQiLCJ3cml0ZVJlcGVhdGVkQm9vbCIsInhkIiwid3JpdGVSZXBlYXRlZEVudW0iLCJUZCIsIndyaXRlUmVwZWF0ZWRTdHJpbmciLCJ2ZCIsIndyaXRlUmVwZWF0ZWRCeXRlcyIsIklkIiwid3JpdGVSZXBlYXRlZE1lc3NhZ2UiLCJEZCIsIndyaXRlUmVwZWF0ZWRHcm91cCIsIkJkIiwid3JpdGVSZXBlYXRlZEZpeGVkSGFzaDY0IiwiWWQiLCJ3cml0ZVJlcGVhdGVkVmFyaW50SGFzaDY0IiwiYWQiLCJ3cml0ZVBhY2tlZEludDMyIiwiYmQiLCJ3cml0ZVBhY2tlZEludDMyU3RyaW5nIiwiY2QiLCJ3cml0ZVBhY2tlZEludDY0IiwibWQiLCJ3cml0ZVBhY2tlZFNwbGl0Rml4ZWQ2NCIsIm5kIiwid3JpdGVQYWNrZWRTcGxpdFZhcmludDY0Iiwib2QiLCJ3cml0ZVBhY2tlZFNwbGl0WmlnemFnVmFyaW50NjQiLCJkZCIsIndyaXRlUGFja2VkSW50NjRTdHJpbmciLCJwZCIsIndyaXRlUGFja2VkVWludDMyIiwicWQiLCJ3cml0ZVBhY2tlZFVpbnQzMlN0cmluZyIsInJkIiwid3JpdGVQYWNrZWRVaW50NjQiLCJzZCIsIndyaXRlUGFja2VkVWludDY0U3RyaW5nIiwiaGQiLCJ3cml0ZVBhY2tlZFNpbnQzMiIsImpkIiwid3JpdGVQYWNrZWRTaW50NjQiLCJrZCIsIndyaXRlUGFja2VkU2ludDY0U3RyaW5nIiwibGQiLCJ3cml0ZVBhY2tlZFNpbnRIYXNoNjQiLCJXYyIsIndyaXRlUGFja2VkRml4ZWQzMiIsIlhjIiwid3JpdGVQYWNrZWRGaXhlZDY0IiwiWWMiLCJ3cml0ZVBhY2tlZEZpeGVkNjRTdHJpbmciLCJlZCIsIndyaXRlUGFja2VkU2ZpeGVkMzIiLCJ3cml0ZVBhY2tlZFNmaXhlZDY0IiwiZ2QiLCJ3cml0ZVBhY2tlZFNmaXhlZDY0U3RyaW5nIiwiJGMiLCJ3cml0ZVBhY2tlZEZsb2F0IiwiVWMiLCJ3cml0ZVBhY2tlZERvdWJsZSIsIlRjIiwid3JpdGVQYWNrZWRCb29sIiwiVmMiLCJ3cml0ZVBhY2tlZEVudW0iLCJaYyIsIndyaXRlUGFja2VkRml4ZWRIYXNoNjQiLCJ0ZCIsIndyaXRlUGFja2VkVmFyaW50SGFzaDY0IiwiZGVidWciLCJNZXNzYWdlIiwiQmluYXJ5UmVhZGVyIiwiQmluYXJ5V3JpdGVyIiwiRXh0ZW5zaW9uRmllbGRJbmZvIiwiRXh0ZW5zaW9uRmllbGRCaW5hcnlJbmZvIiwiZXhwb3J0U3ltYm9sIiwib2JqZWN0IiwiZXh0ZW5kIiwidHlwZU9mIiwic2VyaWFsaXplIiwiZGVzZXJpYWxpemUiLCJXZWFrTWFwIiwiSW5wdXQiLCJyZXF1ZXN0X2lkIiwiY2FuY2VsIiwidmVyYm9zaXR5Iiwic2FuZGJveF9kaXIiLCJXb3JrUmVxdWVzdCIsImV4aXRfY29kZSIsIm91dHB1dCIsIndhc19jYW5jZWxsZWQiLCJXb3JrUmVzcG9uc2UiLCJlbnRlcldvcmtlckxvb3AiLCJ0aHJvdyIsInJldHVybiIsImhlYWRlclNpemUiLCJhYm9ydCIsImRlZmF1bHRFbmNvZGluZyIsImZpbmFsbHkiLCJzdGRvdXQiLCJzdGRpbiIsImlzUGVyc2lzdGVudFdvcmtlciIsImV4aXRDb2RlIiwiZmxhZ0FyZyIsImZpbmQiLCJwYXJhbXNGaWxlRXhlY1BhdGgiLCJwYXJhbXNGaWxlRGlza1BhdGgiLCJ0cmltIiwiZ2V0QXJnc0Zyb21QYXJhbXNGaWxlIl0sIm1hcHBpbmdzIjoiNFVBT08sTUFBTUEsRUFDVEMsS0FDQUMsSUFBTSxJQUFJQyxJQUNWLFdBQUFDLENBQVlILEdBQ1JJLEtBQUtKLEtBQU9BLENBQ3BCLENBQ0ksR0FBQUssQ0FBSUMsRUFBS0MsR0FDTEgsS0FBS0gsSUFBSUksSUFBSUMsRUFBS0MsRUFDMUIsQ0FDSSxHQUFBQyxDQUFJRixFQUFLRyxHQUFjLEdBQ25CLE1BQU1DLEVBQVFOLEtBQUtILElBQUlPLElBQUlGLEdBUzNCLE9BUklHLEdBQ0lDLElBR0FOLEtBQUtILElBQUlVLE9BQU9MLEdBQ2hCRixLQUFLSCxJQUFJSSxJQUFJQyxFQUFLSSxJQUduQkEsQ0FDZixDQUNJLE9BQU9KLEdBQ0hGLEtBQUtILElBQUlVLE9BQU9MLEVBQ3hCLENBQ0ksS0FBQU0sQ0FBTUMsRUFBVyxHQUNiLE1BQU1DLEVBQWVWLEtBQUtILElBQUljLEtBQzlCLElBQUlDLEVBQW1CQyxLQUFLQyxLQUFLSixFQUFlRCxHQUNoRCxHQUF5QixJQUFyQkcsRUFDQSxPQUFPLEVBS1gsSUFBSyxNQUFNVixLQUFPRixLQUFLSCxJQUFJa0IsT0FBUSxDQUMvQixHQUF5QixJQUFyQkgsRUFDQSxNQUNKWixLQUFLSCxJQUFJVSxPQUFPTCxHQUNoQlUsR0FDWixDQUVRLE9BRG9CRixFQUFlVixLQUFLSCxJQUFJYyxJQUVwRCxDQUNJLElBQUFJLEdBQ0ksT0FBT2YsS0FBS0gsSUFBSWtCLE1BQ3hCLEVDM0NPLE1BQU1DLEVBQ1RDLFVBQVksSUFBSXRCLEVBQU0sUUFNdEJ1QixZQUFjLElBQUlwQixJQU1sQnFCLGFBQWMsRUFLZEMsZUF6QjBCLFdBZ0MxQixXQUFBZixDQUFZZ0IsR0FDUnJCLEtBQUtrQixZQUFjLElBQUlwQixJQUN2QixJQUFLLE1BQU93QixFQUFNQyxLQUFXRixFQUFPRyxVQUFXLENBQzNDeEIsS0FBS2tCLFlBQVlqQixJQUFJcUIsRUFBTUMsR0FF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QUFPNWhELEVBQUd5akIsYUFBYW8rQixFQUFvQixRQUFRQyxPQUFPN2xELE1BQU0sS0FDeEUsQ0FDSSxNQUFNLElBQUkvQyxNQUFNLG1DQUNwQixDRE53QzZvRCxHQUF5QixNQUM3RG53RCxRQUFRNnZELFNBQVdBLENBQ3ZCLENBQ0EsR0FBSTd0QixHQUFPNHRCLG1CQUFtQjV2RCxRQUFRMCtCLE1BQU8sQ0FDekMsTUFBTTcvQixFQUFZLElBQUlELEVBQ2hCdWpDLEVBQWUsSUFBSXprQyxJQUN6QnNrQyxHQUFPbXRCLGlCQUFnQmh6QyxNQUFPeEcsSUFDMUIsUUFBaUJ4TSxJQUFid00sRUFBRTFXLE9BQ0YsTUFBTSxJQUFJcUksTUFBTSx5Q0FPcEIsT0FIQWhJLFFBQVFDLE1BQVEsSUFBSXdILEtBQ2hCNE8sRUFBRXE1QyxPQUFPMXNDLE1BQU0sR0FBR3ZiLEVBQUsrQyxLQUFLLFNBQVMsUUFFNUJpNEIsR0FBYXBzQixFQUFFcEwsVUFBVyxDQUNuQzFMLFlBQ0FzakMsZUFDQUMsSUFBS3pzQixHQUNQLEdBRVYiLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMiwzLDQsNSw2LDcsOCw5LDEwLDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDE5LDIwLDIxLDIyLDIzLDI0LDI1LDI2LDI3LDI4XX0=
